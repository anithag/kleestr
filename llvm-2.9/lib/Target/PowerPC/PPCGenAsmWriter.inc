//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void PPCInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    268435467U,	// ADD4
    268435467U,	// ADD8
    268435472U,	// ADDC
    268435472U,	// ADDC8
    268435478U,	// ADDE
    268435478U,	// ADDE8
    268451868U,	// ADDI
    268451868U,	// ADDI8
    268451874U,	// ADDIC
    268451874U,	// ADDIC8
    268451881U,	// ADDICo
    268468273U,	// ADDIS
    268468273U,	// ADDIS8
    268566584U,	// ADDME
    268566584U,	// ADDME8
    268566591U,	// ADDZE
    268566591U,	// ADDZE8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    268435526U,	// AND
    268435526U,	// AND8
    268435531U,	// ANDC
    268435531U,	// ANDC8
    268484689U,	// ANDISo
    268484689U,	// ANDISo8
    268484697U,	// ANDIo
    268484697U,	// ANDIo8
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    536871008U,	// B
    823132259U,	// BCC
    101U,	// BCTR
    106U,	// BCTRL8_Darwin
    106U,	// BCTRL8_ELF
    106U,	// BCTRL_Darwin
    106U,	// BCTRL_SVR4
    301990000U,	// BL8_Darwin
    301990000U,	// BL8_ELF
    1107296372U,	// BLA8_Darwin
    1107296372U,	// BLA8_ELF
    1107296372U,	// BLA_Darwin
    1107296372U,	// BLA_SVR4
    855638115U,	// BLR
    301990000U,	// BL_Darwin
    301990000U,	// BL_SVR4
    268435577U,	// CMPD
    268451967U,	// CMPDI
    268435590U,	// CMPLD
    268484749U,	// CMPLDI
    268435605U,	// CMPLW
    268484764U,	// CMPLWI
    268435620U,	// CMPW
    268452010U,	// CMPWI
    268566705U,	// CNTLZD
    268566713U,	// CNTLZW
    268435649U,	// CREQV
    268435656U,	// CROR
    270532801U,	// CRSET
    1342177486U,	// DCBA
    1342177492U,	// DCBF
    1342177498U,	// DCBI
    1342177504U,	// DCBST
    1342177511U,	// DCBT
    1342177517U,	// DCBTST
    1342177525U,	// DCBZ
    1342177531U,	// DCBZL
    268435714U,	// DIVD
    268435720U,	// DIVDU
    268435727U,	// DIVW
    268435733U,	// DIVWU
    1610613020U,	// DSS
    289U,	// DSSALL
    1879048488U,	// DST
    1879048488U,	// DST64
    1879048493U,	// DSTST
    1879048493U,	// DSTST64
    1879048500U,	// DSTSTT
    1879048500U,	// DSTSTT64
    1879048508U,	// DSTT
    1879048508U,	// DSTT64
    0U,	// DYNALLOC
    0U,	// DYNALLOC8
    268435778U,	// EQV
    268435778U,	// EQV8
    268566855U,	// EXTSB
    268566855U,	// EXTSB8
    268566862U,	// EXTSH
    268566862U,	// EXTSH8
    268566869U,	// EXTSW
    268566869U,	// EXTSW_32
    268566869U,	// EXTSW_32_64
    268566876U,	// FABSD
    268566876U,	// FABSS
    268435810U,	// FADD
    268435816U,	// FADDS
    268435810U,	// FADDrtz
    268566895U,	// FCFID
    268435830U,	// FCMPUD
    268435830U,	// FCMPUS
    268566909U,	// FCTIDZ
    268566917U,	// FCTIWZ
    268435853U,	// FDIV
    268435859U,	// FDIVS
    268444058U,	// FMADD
    268444065U,	// FMADDS
    268566953U,	// FMR
    268444078U,	// FMSUB
    268444085U,	// FMSUBS
    268435901U,	// FMUL
    268435907U,	// FMULS
    268566986U,	// FNABSD
    268566986U,	// FNABSS
    268566993U,	// FNEGD
    268566993U,	// FNEGS
    268444119U,	// FNMADD
    268444127U,	// FNMADDS
    268444136U,	// FNMSUB
    268444144U,	// FNMSUBS
    268567033U,	// FRSP
    268444159U,	// FSELD
    268444159U,	// FSELS
    268567045U,	// FSQRT
    268567052U,	// FSQRTS
    268435988U,	// FSUB
    268435994U,	// FSUBS
    271843873U,	// LA
    272630309U,	// LBZ
    272630309U,	// LBZ8
    273678890U,	// LBZU
    273678890U,	// LBZU8
    274727472U,	// LBZX
    274727472U,	// LBZX8
    275776054U,	// LD
    274727482U,	// LDARX
    276824641U,	// LDU
    274727494U,	// LDX
    335544907U,	// LDinto_toc
    0U,	// LDtoc
    596U,	// LDtoc_restore
    272630368U,	// LFD
    273678944U,	// LFDU
    274727525U,	// LFDX
    272630379U,	// LFS
    273678955U,	// LFSU
    274727536U,	// LFSX
    272630390U,	// LHA
    272630390U,	// LHA8
    273678971U,	// LHAU
    271975035U,	// LHAU8
    274727553U,	// LHAX
    274727553U,	// LHAX8
    274727559U,	// LHBRX
    272630414U,	// LHZ
    272630414U,	// LHZ8
    273678995U,	// LHZU
    273678995U,	// LHZU8
    274727577U,	// LHZX
    274727577U,	// LHZX8
    277873311U,	// LI
    277873311U,	// LI8
    278921891U,	// LIS
    278921891U,	// LIS8
    274727592U,	// LVEBX
    274727599U,	// LVEHX
    274727606U,	// LVEWX
    274727613U,	// LVSL
    274727619U,	// LVSR
    274727625U,	// LVX
    274727630U,	// LVXL
    275776212U,	// LWA
    274727641U,	// LWARX
    274727648U,	// LWAX
    274727654U,	// LWBRX
    272630509U,	// LWZ
    272630509U,	// LWZ8
    273679090U,	// LWZU
    273679090U,	// LWZU8
    274727672U,	// LWZX
    274727672U,	// LWZX8
    268567294U,	// MCRF
    301990660U,	// MFCR
    0U,	// MFCRpseud
    301990666U,	// MFCTR
    301990666U,	// MFCTR8
    301990673U,	// MFFS
    301990679U,	// MFLR
    301990679U,	// MFLR8
    279970564U,	// MFOCRF
    352322333U,	// MFVRSAVE
    301990692U,	// MFVSCR
    2147484460U,	// MTCRF
    301990707U,	// MTCTR
    301990707U,	// MTCTR8
    2415919930U,	// MTFSB0
    2415919938U,	// MTFSB1
    2785018698U,	// MTFSF
    301990737U,	// MTLR
    301990737U,	// MTLR8
    301990743U,	// MTVRSAVE
    301990755U,	// MTVSCR
    268436331U,	// MULHD
    268436338U,	// MULHDU
    268436346U,	// MULHW
    268436353U,	// MULHWU
    268436361U,	// MULLD
    268452752U,	// MULLI
    268436375U,	// MULLW
    0U,	// MovePCtoLR
    0U,	// MovePCtoLR8
    268436382U,	// NAND
    268436382U,	// NAND8
    268567460U,	// NEG
    268567460U,	// NEG8
    937U,	// NOP
    268436397U,	// NOR
    268436397U,	// NOR8
    268436402U,	// OR
    268436402U,	// OR4To8
    268436402U,	// OR8
    268436402U,	// OR8To4
    268436406U,	// ORC
    268436406U,	// ORC8
    268485563U,	// ORI
    268485563U,	// ORI8
    268485568U,	// ORIS
    268485568U,	// ORIS8
    268444614U,	// RLDCL
    268510157U,	// RLDICL
    268510165U,	// RLDICR
    281543645U,	// RLDIMI
    281674725U,	// RLWIMI
    268526573U,	// RLWINM
    268526581U,	// RLWINMo
    268444670U,	// RLWNM
    0U,	// SELECT_CC_F4
    0U,	// SELECT_CC_F8
    0U,	// SELECT_CC_I4
    0U,	// SELECT_CC_I8
    0U,	// SELECT_CC_VRRC
    268436485U,	// SLD
    268436490U,	// SLW
    0U,	// SPILL_CR
    268436495U,	// SRAD
    268502037U,	// SRADI
    268436508U,	// SRAW
    268518434U,	// SRAWI
    268436521U,	// SRD
    268436526U,	// SRW
    272630835U,	// STB
    272630835U,	// STB8
    2801796152U,	// STBU
    2801796152U,	// STBU8
    274727998U,	// STBX
    274727998U,	// STBX8
    275776580U,	// STD
    274728009U,	// STDCX
    2818573393U,	// STDU
    274728023U,	// STDUX
    274728030U,	// STDX
    274728030U,	// STDX_32
    275776580U,	// STD_32
    272630884U,	// STFD
    2801796202U,	// STFDU
    274728049U,	// STFDX
    274728056U,	// STFIWX
    272630912U,	// STFS
    2801796230U,	// STFSU
    274728077U,	// STFSX
    272630932U,	// STH
    272630932U,	// STH8
    274728089U,	// STHBRX
    2801796257U,	// STHU
    2801796257U,	// STHU8
    274728103U,	// STHX
    274728103U,	// STHX8
    274728109U,	// STVEBX
    274728117U,	// STVEHX
    274728125U,	// STVEWX
    274728133U,	// STVX
    274728139U,	// STVXL
    272630994U,	// STW
    272630994U,	// STW8
    274728151U,	// STWBRX
    274728159U,	// STWCX
    2801796327U,	// STWU
    268436717U,	// STWUX
    274728180U,	// STWX
    274728180U,	// STWX8
    268436730U,	// SUBF
    268436730U,	// SUBF8
    268436736U,	// SUBFC
    268436736U,	// SUBFC8
    268436743U,	// SUBFE
    268436743U,	// SUBFE8
    268453134U,	// SUBFIC
    268453134U,	// SUBFIC8
    268567830U,	// SUBFME
    268567830U,	// SUBFME8
    268567838U,	// SUBFZE
    268567838U,	// SUBFZE8
    1318U,	// SYNC
    301989984U,	// TAILB
    301989984U,	// TAILB8
    1107297579U,	// TAILBA
    1107297579U,	// TAILBA8
    101U,	// TAILBCTR
    101U,	// TAILBCTR8
    1090651439U,	// TCRETURNai
    1090651452U,	// TCRETURNai8
    285345098U,	// TCRETURNdi
    285345111U,	// TCRETURNdi8
    285345125U,	// TCRETURNri
    285345138U,	// TCRETURNri8
    1408U,	// TRAP
    268567941U,	// UPDATE_VRSAVE
    268436884U,	// VADDCUW
    268436893U,	// VADDFP
    268436901U,	// VADDSBS
    268436910U,	// VADDSHS
    268436919U,	// VADDSWS
    268436928U,	// VADDUBM
    268436937U,	// VADDUBS
    268436946U,	// VADDUHM
    268436955U,	// VADDUHS
    268436964U,	// VADDUWM
    268436973U,	// VADDUWS
    268436982U,	// VAND
    268436988U,	// VANDC
    268436995U,	// VAVGSB
    268437003U,	// VAVGSH
    268437011U,	// VAVGSW
    268437019U,	// VAVGUB
    268437027U,	// VAVGUH
    268437035U,	// VAVGUW
    281806387U,	// VCFSX
    281806394U,	// VCFUX
    268437057U,	// VCMPBFP
    268437066U,	// VCMPBFPo
    268437076U,	// VCMPEQFP
    268437086U,	// VCMPEQFPo
    268437097U,	// VCMPEQUB
    268437107U,	// VCMPEQUBo
    268437118U,	// VCMPEQUH
    268437128U,	// VCMPEQUHo
    268437139U,	// VCMPEQUW
    268437149U,	// VCMPEQUWo
    268437160U,	// VCMPGEFP
    268437170U,	// VCMPGEFPo
    268437181U,	// VCMPGTFP
    268437191U,	// VCMPGTFPo
    268437202U,	// VCMPGTSB
    268437212U,	// VCMPGTSBo
    268437223U,	// VCMPGTSH
    268437233U,	// VCMPGTSHo
    268437244U,	// VCMPGTSW
    268437254U,	// VCMPGTSWo
    268437265U,	// VCMPGTUB
    268437275U,	// VCMPGTUBo
    268437286U,	// VCMPGTUH
    268437296U,	// VCMPGTUHo
    268437307U,	// VCMPGTUW
    268437317U,	// VCMPGTUWo
    281806672U,	// VCTSXS
    281806680U,	// VCTUXS
    268568416U,	// VEXPTEFP
    268568426U,	// VLOGEFP
    268445555U,	// VMADDFP
    268437372U,	// VMAXFP
    268437380U,	// VMAXSB
    268437388U,	// VMAXSH
    268437396U,	// VMAXSW
    268437404U,	// VMAXUB
    268437412U,	// VMAXUH
    268437420U,	// VMAXUW
    268445620U,	// VMHADDSHS
    268445631U,	// VMHRADDSHS
    268437451U,	// VMINFP
    268437459U,	// VMINSB
    268437467U,	// VMINSH
    268437475U,	// VMINSW
    268437483U,	// VMINUB
    268437491U,	// VMINUH
    268437499U,	// VMINUW
    268445699U,	// VMLADDUHM
    268437518U,	// VMRGHB
    268437526U,	// VMRGHH
    268437534U,	// VMRGHW
    268437542U,	// VMRGLB
    268437550U,	// VMRGLH
    268437558U,	// VMRGLW
    268445758U,	// VMSUMMBM
    268445768U,	// VMSUMSHM
    268445778U,	// VMSUMSHS
    268445788U,	// VMSUMUBM
    268445798U,	// VMSUMUHM
    268445808U,	// VMSUMUHS
    268437626U,	// VMULESB
    268437635U,	// VMULESH
    268437644U,	// VMULEUB
    268437653U,	// VMULEUH
    268437662U,	// VMULOSB
    268437671U,	// VMULOSH
    268437680U,	// VMULOUB
    268437689U,	// VMULOUH
    268445890U,	// VNMSUBFP
    268437708U,	// VNOR
    268437714U,	// VOR
    268445911U,	// VPERM
    268437726U,	// VPKPX
    268437733U,	// VPKSHSS
    268437742U,	// VPKSHUS
    268437751U,	// VPKSWSS
    268437760U,	// VPKSWUS
    268437769U,	// VPKUHUM
    268437778U,	// VPKUHUS
    268437787U,	// VPKUWUM
    268437796U,	// VPKUWUS
    268568877U,	// VREFP
    268568884U,	// VRFIM
    268568891U,	// VRFIN
    268568898U,	// VRFIP
    268568905U,	// VRFIZ
    268437840U,	// VRLB
    268437846U,	// VRLH
    268437852U,	// VRLW
    268568930U,	// VRSQRTEFP
    268446061U,	// VSEL
    268437875U,	// VSL
    268437880U,	// VSLB
    268446078U,	// VSLDOI
    268437894U,	// VSLH
    268437900U,	// VSLO
    268437906U,	// VSLW
    281807256U,	// VSPLTB
    281807264U,	// VSPLTH
    282069416U,	// VSPLTISB
    282069426U,	// VSPLTISH
    282069436U,	// VSPLTISW
    281807302U,	// VSPLTW
    268437966U,	// VSR
    268437971U,	// VSRAB
    268437978U,	// VSRAH
    268437985U,	// VSRAW
    268437992U,	// VSRB
    268437998U,	// VSRH
    268438004U,	// VSRO
    268438010U,	// VSRW
    268438016U,	// VSUBCUW
    268438025U,	// VSUBFP
    268438033U,	// VSUBSBS
    268438042U,	// VSUBSHS
    268438051U,	// VSUBSWS
    268438060U,	// VSUBUBM
    268438069U,	// VSUBUBS
    268438078U,	// VSUBUHM
    268438087U,	// VSUBUHS
    268438096U,	// VSUBUWM
    268438105U,	// VSUBUWS
    268438114U,	// VSUM2SWS
    268438124U,	// VSUM4SBS
    268438134U,	// VSUM4SHS
    268438144U,	// VSUM4UBS
    268438154U,	// VSUMSWS
    268569235U,	// VUPKHPX
    268569244U,	// VUPKHSB
    268569253U,	// VUPKHSH
    268569262U,	// VUPKLPX
    268569271U,	// VUPKLSB
    268569280U,	// VUPKLSH
    268438217U,	// VXOR
    270535369U,	// V_SET0
    268438223U,	// XOR
    268438223U,	// XOR8
    268487380U,	// XORI
    268487380U,	// XORI8
    268487386U,	// XORIS
    268487386U,	// XORIS8
    0U
  };

  const char *AsmStrs = 
    "DBG_VALUE\000add \000addc \000adde \000addi \000addic \000addic. \000ad"
    "dis \000addme \000addze \000and \000andc \000andis. \000andi. \000b \000"
    "b\000bctr\000bctrl\000bl \000bla \000cmpd \000cmpdi \000cmpld \000cmpld"
    "i \000cmplw \000cmplwi \000cmpw \000cmpwi \000cntlzd \000cntlzw \000cre"
    "qv \000cror \000dcba \000dcbf \000dcbi \000dcbst \000dcbt \000dcbtst \000"
    "dcbz \000dcbzl \000divd \000divdu \000divw \000divwu \000dss \000dssall"
    "\000dst \000dstst \000dststt \000dstt \000eqv \000extsb \000extsh \000e"
    "xtsw \000fabs \000fadd \000fadds \000fcfid \000fcmpu \000fctidz \000fct"
    "iwz \000fdiv \000fdivs \000fmadd \000fmadds \000fmr \000fmsub \000fmsub"
    "s \000fmul \000fmuls \000fnabs \000fneg \000fnmadd \000fnmadds \000fnms"
    "ub \000fnmsubs \000frsp \000fsel \000fsqrt \000fsqrts \000fsub \000fsub"
    "s \000la \000lbz \000lbzu \000lbzx \000ld \000ldarx \000ldu \000ldx \000"
    "ld 2, 8(\000ld 2, 40(1)\000lfd \000lfdx \000lfs \000lfsx \000lha \000lh"
    "au \000lhax \000lhbrx \000lhz \000lhzu \000lhzx \000li \000lis \000lveb"
    "x \000lvehx \000lvewx \000lvsl \000lvsr \000lvx \000lvxl \000lwa \000lw"
    "arx \000lwax \000lwbrx \000lwz \000lwzu \000lwzx \000mcrf \000mfcr \000"
    "mfctr \000mffs \000mflr \000mfspr \000mfvscr \000mtcrf \000mtctr \000mt"
    "fsb0 \000mtfsb1 \000mtfsf \000mtlr \000mtspr 256, \000mtvscr \000mulhd "
    "\000mulhdu \000mulhw \000mulhwu \000mulld \000mulli \000mullw \000nand "
    "\000neg \000nop\000nor \000or \000orc \000ori \000oris \000rldcl \000rl"
    "dicl \000rldicr \000rldimi \000rlwimi \000rlwinm \000rlwinm. \000rlwnm "
    "\000sld \000slw \000srad \000sradi \000sraw \000srawi \000srd \000srw \000"
    "stb \000stbu \000stbx \000std \000stdcx. \000stdu \000stdux \000stdx \000"
    "stfd \000stfdu \000stfdx \000stfiwx \000stfs \000stfsu \000stfsx \000st"
    "h \000sthbrx \000sthu \000sthx \000stvebx \000stvehx \000stvewx \000stv"
    "x \000stvxl \000stw \000stwbrx \000stwcx. \000stwu \000stwux \000stwx \000"
    "subf \000subfc \000subfe \000subfic \000subfme \000subfze \000sync\000b"
    "a \000#TC_RETURNa \000#TC_RETURNa8 \000#TC_RETURNd \000#TC_RETURNd8 \000"
    "#TC_RETURNr \000#TC_RETURNr8 \000trap\000UPDATE_VRSAVE \000vaddcuw \000"
    "vaddfp \000vaddsbs \000vaddshs \000vaddsws \000vaddubm \000vaddubs \000"
    "vadduhm \000vadduhs \000vadduwm \000vadduws \000vand \000vandc \000vavg"
    "sb \000vavgsh \000vavgsw \000vavgub \000vavguh \000vavguw \000vcfsx \000"
    "vcfux \000vcmpbfp \000vcmpbfp. \000vcmpeqfp \000vcmpeqfp. \000vcmpequb "
    "\000vcmpequb. \000vcmpequh \000vcmpequh. \000vcmpequw \000vcmpequw. \000"
    "vcmpgefp \000vcmpgefp. \000vcmpgtfp \000vcmpgtfp. \000vcmpgtsb \000vcmp"
    "gtsb. \000vcmpgtsh \000vcmpgtsh. \000vcmpgtsw \000vcmpgtsw. \000vcmpgtu"
    "b \000vcmpgtub. \000vcmpgtuh \000vcmpgtuh. \000vcmpgtuw \000vcmpgtuw. \000"
    "vctsxs \000vctuxs \000vexptefp \000vlogefp \000vmaddfp \000vmaxfp \000v"
    "maxsb \000vmaxsh \000vmaxsw \000vmaxub \000vmaxuh \000vmaxuw \000vmhadd"
    "shs \000vmhraddshs \000vminfp \000vminsb \000vminsh \000vminsw \000vmin"
    "ub \000vminuh \000vminuw \000vmladduhm \000vmrghb \000vmrghh \000vmrghw"
    " \000vmrglb \000vmrglh \000vmrglw \000vmsummbm \000vmsumshm \000vmsumsh"
    "s \000vmsumubm \000vmsumuhm \000vmsumuhs \000vmulesb \000vmulesh \000vm"
    "uleub \000vmuleuh \000vmulosb \000vmulosh \000vmuloub \000vmulouh \000v"
    "nmsubfp \000vnor \000vor \000vperm \000vpkpx \000vpkshss \000vpkshus \000"
    "vpkswss \000vpkswus \000vpkuhum \000vpkuhus \000vpkuwum \000vpkuwus \000"
    "vrefp \000vrfim \000vrfin \000vrfip \000vrfiz \000vrlb \000vrlh \000vrl"
    "w \000vrsqrtefp \000vsel \000vsl \000vslb \000vsldoi \000vslh \000vslo "
    "\000vslw \000vspltb \000vsplth \000vspltisb \000vspltish \000vspltisw \000"
    "vspltw \000vsr \000vsrab \000vsrah \000vsraw \000vsrb \000vsrh \000vsro"
    " \000vsrw \000vsubcuw \000vsubfp \000vsubsbs \000vsubshs \000vsubsws \000"
    "vsububm \000vsububs \000vsubuhm \000vsubuhs \000vsubuwm \000vsubuws \000"
    "vsum2sws \000vsum4sbs \000vsum4shs \000vsum4ubs \000vsumsws \000vupkhpx"
    " \000vupkhsb \000vupkhsh \000vupklpx \000vupklsb \000vupklsh \000vxor \000"
    "xor \000xori \000xoris \000";

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 28) & 15) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BCTR, BCTRL8_Darwin, BCTRL8_ELF, BCTRL_Darwin, BCTRL_SVR4, ...
    return;
    break;
  case 1:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDIC8, ADDI...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // B
    printBranchOperand(MI, 0, O); 
    return;
    break;
  case 3:
    // BCC, BLR
    printPredicateOperand(MI, 0, O, "cc"); 
    break;
  case 4:
    // BLA8_Darwin, BLA8_ELF, BLA_Darwin, BLA_SVR4, TAILBA, TAILBA8, TCRETURN...
    printAbsAddrOperand(MI, 0, O); 
    break;
  case 5:
    // DCBA, DCBF, DCBI, DCBST, DCBT, DCBTST, DCBZ, DCBZL
    printMemRegReg(MI, 0, O); 
    return;
    break;
  case 6:
    // DSS
    printU5ImmOperand(MI, 1, O); 
    return;
    break;
  case 7:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printU5ImmOperand(MI, 1, O); 
    return;
    break;
  case 8:
    // MTCRF
    printcrbitm(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 9:
    // MTFSB0, MTFSB1
    printU5ImmOperand(MI, 0, O); 
    return;
    break;
  case 10:
    // MTFSF, STBU, STBU8, STDU, STFDU, STFSU, STHU, STHU8, STWU
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  }


  // Fragment 1 encoded into 4 bits for 9 unique commands.
  switch ((Bits >> 24) & 15) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDIC8, ADDI...
    O << ", "; 
    break;
  case 1:
    // BCC, TCRETURNai, TCRETURNai8, TCRETURNdi, TCRETURNdi8, TCRETURNri, TCR...
    O << ' '; 
    break;
  case 2:
    // BL8_Darwin, BL8_ELF, BLA8_Darwin, BLA8_ELF, BLA_Darwin, BLA_SVR4, BL_D...
    return;
    break;
  case 3:
    // BLR
    O << "lr "; 
    printPredicateOperand(MI, 0, O, "reg"); 
    return;
    break;
  case 4:
    // LDinto_toc
    O << ')'; 
    return;
    break;
  case 5:
    // MFVRSAVE
    O << ", 256"; 
    return;
    break;
  case 6:
    // MTFSF
    printOperand(MI, 2, O); 
    return;
    break;
  case 7:
    // STBU, STBU8, STFDU, STFSU, STHU, STHU8, STWU
    printSymbolLo(MI, 2, O); 
    O << '('; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 8:
    // STDU
    printS16X4ImmOperand(MI, 2, O); 
    O << '('; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 20) & 15) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDIC8, ADDI...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // BCC
    printPredicateOperand(MI, 0, O, "reg"); 
    O << ", "; 
    printBranchOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // CRSET, V_SET0
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 3:
    // LA, LHAU8
    printSymbolLo(MI, 2, O); 
    O << '('; 
    break;
  case 4:
    // LBZ, LBZ8, LFD, LFS, LHA, LHA8, LHZ, LHZ8, LWZ, LWZ8, STB, STB8, STFD,...
    printMemRegImm(MI, 1, O); 
    return;
    break;
  case 5:
    // LBZU, LBZU8, LFDU, LFSU, LHAU, LHZU, LHZU8, LWZU, LWZU8
    printMemRegImm(MI, 2, O); 
    return;
    break;
  case 6:
    // LBZX, LBZX8, LDARX, LDX, LFDX, LFSX, LHAX, LHAX8, LHBRX, LHZX, LHZX8, ...
    printMemRegReg(MI, 1, O); 
    return;
    break;
  case 7:
    // LD, LWA, STD, STD_32
    printMemRegImmShifted(MI, 1, O); 
    return;
    break;
  case 8:
    // LDU
    printMemRegImmShifted(MI, 2, O); 
    return;
    break;
  case 9:
    // LI, LI8
    printSymbolLo(MI, 1, O); 
    return;
    break;
  case 10:
    // LIS, LIS8
    printSymbolHi(MI, 1, O); 
    return;
    break;
  case 11:
    // MFOCRF
    printcrbitm(MI, 1, O); 
    return;
    break;
  case 12:
    // RLDIMI, RLWIMI, VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTH, VSPLTW
    printOperand(MI, 2, O); 
    O << ", "; 
    break;
  case 13:
    // VSPLTISB, VSPLTISH, VSPLTISW
    printS5ImmOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 17) & 7) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDIC8, ADDI...
    O << ", "; 
    break;
  case 1:
    // ADDME, ADDME8, ADDZE, ADDZE8, CNTLZD, CNTLZW, EXTSB, EXTSB8, EXTSH, EX...
    return;
    break;
  case 2:
    // LA
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 3:
    // LHAU8
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 4:
    // RLDIMI
    printU6ImmOperand(MI, 3, O); 
    O << ", "; 
    printU6ImmOperand(MI, 4, O); 
    return;
    break;
  case 5:
    // RLWIMI
    printU5ImmOperand(MI, 3, O); 
    O << ", "; 
    printU5ImmOperand(MI, 4, O); 
    O << ", "; 
    printU5ImmOperand(MI, 5, O); 
    return;
    break;
  case 6:
    // VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTH, VSPLTW
    printU5ImmOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 14) & 7) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, AND, AND8, ANDC, ANDC8, CMPD, CM...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ADDI, ADDI8, ADDIC, ADDIC8, ADDICo, CMPDI, CMPWI, MULLI, SUBFIC, SUBFI...
    printS16ImmOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // ADDIS, ADDIS8
    printSymbolHi(MI, 2, O); 
    return;
    break;
  case 3:
    // ANDISo, ANDISo8, ANDIo, ANDIo8, CMPLDI, CMPLWI, ORI, ORI8, ORIS, ORIS8...
    printU16ImmOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // RLDICL, RLDICR, SRADI
    printU6ImmOperand(MI, 2, O); 
    break;
  case 5:
    // RLWINM, RLWINMo, SRAWI
    printU5ImmOperand(MI, 2, O); 
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 13) & 1) {
    // FMADD, FMADDS, FMSUB, FMSUBS, FNMADD, FNMADDS, FNMSUB, FNMSUBS, FSELD,...
    O << ", "; 
  } else {
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, AND, AND8, ANDC, ANDC8, CMPD, CM...
    return;
  }

  switch (MI->getOpcode()) {
  case PPC::FMADD:
  case PPC::FMADDS:
  case PPC::FMSUB:
  case PPC::FMSUBS:
  case PPC::FNMADD:
  case PPC::FNMADDS:
  case PPC::FNMSUB:
  case PPC::FNMSUBS:
  case PPC::FSELD:
  case PPC::FSELS:
  case PPC::RLDCL:
  case PPC::RLDICL:
  case PPC::RLDICR:
  case PPC::VMADDFP:
  case PPC::VMHADDSHS:
  case PPC::VMHRADDSHS:
  case PPC::VMLADDUHM:
  case PPC::VMSUMMBM:
  case PPC::VMSUMSHM:
  case PPC::VMSUMSHS:
  case PPC::VMSUMUBM:
  case PPC::VMSUMUHM:
  case PPC::VMSUMUHS:
  case PPC::VNMSUBFP:
  case PPC::VPERM:
  case PPC::VSEL:
  case PPC::VSLDOI:
    switch (MI->getOpcode()) {
    case PPC::FMADD: 
    case PPC::FMADDS: 
    case PPC::FMSUB: 
    case PPC::FMSUBS: 
    case PPC::FNMADD: 
    case PPC::FNMADDS: 
    case PPC::FNMSUB: 
    case PPC::FNMSUBS: 
    case PPC::FSELD: 
    case PPC::FSELS: 
    case PPC::VMADDFP: 
    case PPC::VMHADDSHS: 
    case PPC::VMHRADDSHS: 
    case PPC::VMLADDUHM: 
    case PPC::VMSUMMBM: 
    case PPC::VMSUMSHM: 
    case PPC::VMSUMSHS: 
    case PPC::VMSUMUBM: 
    case PPC::VMSUMUHM: 
    case PPC::VMSUMUHS: 
    case PPC::VNMSUBFP: 
    case PPC::VPERM: 
    case PPC::VSEL: printOperand(MI, 3, O); break;
    case PPC::RLDCL: 
    case PPC::RLDICL: 
    case PPC::RLDICR: printU6ImmOperand(MI, 3, O); break;
    case PPC::VSLDOI: printU5ImmOperand(MI, 3, O); break;
    }
    return;
    break;
  case PPC::RLWINM:
  case PPC::RLWINMo:
  case PPC::RLWNM:
    printU5ImmOperand(MI, 3, O); 
    O << ", "; 
    printU5ImmOperand(MI, 4, O); 
    return;
    break;
  }
  return;
}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *PPCInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 176 && "Invalid register number!");

  static const unsigned RegAsmOffset[] = {
    0, 3, 7, 9, 11, 13, 15, 19, 21, 23, 25, 27, 31, 34, 
    36, 38, 41, 45, 48, 51, 54, 57, 61, 64, 67, 70, 73, 77, 
    80, 83, 86, 89, 93, 96, 99, 102, 105, 109, 112, 115, 118, 121, 
    121, 125, 128, 131, 134, 137, 140, 143, 146, 149, 152, 155, 159, 163, 
    167, 171, 175, 179, 183, 187, 191, 195, 199, 203, 207, 211, 215, 219, 
    223, 227, 231, 235, 239, 243, 243, 246, 249, 252, 255, 258, 261, 264, 
    267, 270, 273, 276, 280, 284, 288, 292, 296, 300, 304, 308, 312, 316, 
    320, 324, 328, 332, 336, 340, 344, 348, 352, 356, 360, 364, 382, 385, 
    388, 391, 394, 397, 400, 403, 406, 409, 412, 416, 420, 424, 428, 432, 
    436, 440, 444, 448, 452, 456, 460, 464, 468, 472, 476, 480, 484, 488, 
    492, 496, 500, 246, 249, 252, 255, 258, 261, 264, 267, 270, 273, 276, 
    280, 284, 288, 292, 296, 300, 304, 308, 312, 316, 320, 324, 328, 332, 
    336, 340, 344, 348, 352, 356, 360, 0
  };

  const char *AsmStrs =
    "ca\000cr0\0002\0001\0000\0003\000cr1\0006\0005\0004\0007\000cr2\00010\000"
    "9\0008\00011\000cr3\00014\00013\00012\00015\000cr4\00018\00017\00016\000"
    "19\000cr5\00022\00021\00020\00023\000cr6\00026\00025\00024\00027\000cr7"
    "\00030\00029\00028\00031\000ctr\000f0\000f1\000f2\000f3\000f4\000f5\000"
    "f6\000f7\000f8\000f9\000f10\000f11\000f12\000f13\000f14\000f15\000f16\000"
    "f17\000f18\000f19\000f20\000f21\000f22\000f23\000f24\000f25\000f26\000f"
    "27\000f28\000f29\000f30\000f31\000lr\000r0\000r1\000r2\000r3\000r4\000r"
    "5\000r6\000r7\000r8\000r9\000r10\000r11\000r12\000r13\000r14\000r15\000"
    "r16\000r17\000r18\000r19\000r20\000r21\000r22\000r23\000r24\000r25\000r"
    "26\000r27\000r28\000r29\000r30\000r31\000**ROUNDING MODE**\000v0\000v1\000"
    "v2\000v3\000v4\000v5\000v6\000v7\000v8\000v9\000v10\000v11\000v12\000v1"
    "3\000v14\000v15\000v16\000v17\000v18\000v19\000v20\000v21\000v22\000v23"
    "\000v24\000v25\000v26\000v27\000v28\000v29\000v30\000v31\000VRsave\000";
  return AsmStrs+RegAsmOffset[RegNo-1];
}


#ifdef GET_INSTRUCTION_NAME
#undef GET_INSTRUCTION_NAME

/// getInstructionName: This method is automatically generated by tblgen
/// from the instruction set description.  This returns the enum name of the
/// specified instruction.
const char *PPCInstPrinter::getInstructionName(unsigned Opcode) {
  assert(Opcode < 521 && "Invalid instruction number!");

  static const unsigned InstAsmOffset[] = {
    0, 4, 14, 27, 36, 45, 50, 65, 79, 92, 106, 123, 133, 146, 
    151, 156, 161, 166, 172, 177, 183, 188, 194, 200, 207, 214, 220, 227, 
    233, 240, 246, 253, 270, 285, 289, 294, 299, 305, 312, 320, 326, 333, 
    353, 373, 393, 412, 432, 452, 472, 491, 511, 531, 551, 570, 591, 612, 
    633, 653, 672, 691, 710, 728, 748, 768, 788, 807, 827, 847, 867, 886, 
    902, 918, 934, 949, 951, 955, 960, 974, 985, 998, 1009, 1020, 1028, 1040, 
    1049, 1060, 1069, 1073, 1083, 1091, 1096, 1102, 1108, 1115, 1121, 1128, 1133, 1139, 
    1146, 1153, 1159, 1164, 1170, 1175, 1180, 1185, 1191, 1196, 1203, 1208, 1214, 1219, 
    1225, 1230, 1236, 1240, 1247, 1251, 1257, 1263, 1271, 1278, 1287, 1292, 1299, 1308, 
    1318, 1322, 1327, 1333, 1340, 1346, 1353, 1359, 1368, 1380, 1386, 1392, 1397, 1403, 
    1411, 1417, 1424, 1431, 1438, 1445, 1450, 1456, 1462, 1469, 1473, 1479, 1486, 1491, 
    1497, 1504, 1511, 1517, 1523, 1530, 1538, 1545, 1553, 1558, 1564, 1570, 1576, 1583, 
    1588, 1594, 1597, 1601, 1606, 1611, 1617, 1622, 1628, 1631, 1637, 1641, 1645, 1656, 
    1662, 1676, 1680, 1685, 1690, 1694, 1699, 1704, 1708, 1713, 1718, 1724, 1729, 1735, 
    1741, 1745, 1750, 1755, 1761, 1766, 1772, 1775, 1779, 1783, 1788, 1794, 1800, 1806, 
    1811, 1816, 1820, 1825, 1829, 1835, 1840, 1846, 1850, 1855, 1860, 1866, 1871, 1877, 
    1882, 1887, 1897, 1903, 1910, 1915, 1920, 1926, 1933, 1942, 1949, 1955, 1961, 1968, 
    1975, 1982, 1988, 1993, 1999, 2008, 2015, 2021, 2028, 2034, 2041, 2047, 2053, 2059, 
    2070, 2082, 2087, 2093, 2097, 2102, 2106, 2110, 2115, 2118, 2125, 2129, 2136, 2140, 
    2145, 2149, 2154, 2159, 2165, 2171, 2178, 2185, 2192, 2199, 2206, 2214, 2220, 2233, 
    2246, 2259, 2272, 2287, 2291, 2295, 2304, 2309, 2315, 2320, 2326, 2330, 2334, 2338, 
    2343, 2348, 2354, 2359, 2365, 2369, 2375, 2380, 2386, 2391, 2399, 2406, 2411, 2417, 
    2423, 2430, 2435, 2441, 2447, 2451, 2456, 2463, 2468, 2474, 2479, 2485, 2492, 2499, 
    2506, 2511, 2517, 2521, 2526, 2533, 2539, 2544, 2550, 2555, 2561, 2566, 2572, 2578, 
    2585, 2591, 2598, 2605, 2613, 2620, 2628, 2635, 2643, 2648, 2654, 2661, 2668, 2676, 
    2685, 2695, 2706, 2718, 2729, 2741, 2752, 2764, 2769, 2783, 2791, 2798, 2806, 2814, 
    2822, 2830, 2838, 2846, 2854, 2862, 2870, 2875, 2881, 2888, 2895, 2902, 2909, 2916, 
    2923, 2929, 2935, 2943, 2952, 2961, 2971, 2980, 2990, 2999, 3009, 3018, 3028, 3037, 
    3047, 3056, 3066, 3075, 3085, 3094, 3104, 3113, 3123, 3132, 3142, 3151, 3161, 3170, 
    3180, 3187, 3194, 3203, 3211, 3219, 3226, 3233, 3240, 3247, 3254, 3261, 3268, 3278, 
    3289, 3296, 3303, 3310, 3317, 3324, 3331, 3338, 3348, 3355, 3362, 3369, 3376, 3383, 
    3390, 3399, 3408, 3417, 3426, 3435, 3444, 3452, 3460, 3468, 3476, 3484, 3492, 3500, 
    3508, 3517, 3522, 3526, 3532, 3538, 3546, 3554, 3562, 3570, 3578, 3586, 3594, 3602, 
    3608, 3614, 3620, 3626, 3632, 3637, 3642, 3647, 3657, 3662, 3666, 3671, 3678, 3683, 
    3688, 3693, 3700, 3707, 3716, 3725, 3734, 3741, 3745, 3751, 3757, 3763, 3768, 3773, 
    3778, 3783, 3791, 3798, 3806, 3814, 3822, 3830, 3838, 3846, 3854, 3862, 3870, 3879, 
    3888, 3897, 3906, 3914, 3922, 3930, 3938, 3946, 3954, 3962, 3967, 3974, 3978, 3983, 
    3988, 3994, 4000, 0
  };

  const char *Strs =
    "PHI\000INLINEASM\000PROLOG_LABEL\000EH_LABEL\000GC_LABEL\000KILL\000EXT"
    "RACT_SUBREG\000INSERT_SUBREG\000IMPLICIT_DEF\000SUBREG_TO_REG\000COPY_T"
    "O_REGCLASS\000DBG_VALUE\000REG_SEQUENCE\000COPY\000ADD4\000ADD8\000ADDC"
    "\000ADDC8\000ADDE\000ADDE8\000ADDI\000ADDI8\000ADDIC\000ADDIC8\000ADDIC"
    "o\000ADDIS\000ADDIS8\000ADDME\000ADDME8\000ADDZE\000ADDZE8\000ADJCALLST"
    "ACKDOWN\000ADJCALLSTACKUP\000AND\000AND8\000ANDC\000ANDC8\000ANDISo\000"
    "ANDISo8\000ANDIo\000ANDIo8\000ATOMIC_CMP_SWAP_I16\000ATOMIC_CMP_SWAP_I3"
    "2\000ATOMIC_CMP_SWAP_I64\000ATOMIC_CMP_SWAP_I8\000ATOMIC_LOAD_ADD_I16\000"
    "ATOMIC_LOAD_ADD_I32\000ATOMIC_LOAD_ADD_I64\000ATOMIC_LOAD_ADD_I8\000ATO"
    "MIC_LOAD_AND_I16\000ATOMIC_LOAD_AND_I32\000ATOMIC_LOAD_AND_I64\000ATOMI"
    "C_LOAD_AND_I8\000ATOMIC_LOAD_NAND_I16\000ATOMIC_LOAD_NAND_I32\000ATOMIC"
    "_LOAD_NAND_I64\000ATOMIC_LOAD_NAND_I8\000ATOMIC_LOAD_OR_I16\000ATOMIC_L"
    "OAD_OR_I32\000ATOMIC_LOAD_OR_I64\000ATOMIC_LOAD_OR_I8\000ATOMIC_LOAD_SU"
    "B_I16\000ATOMIC_LOAD_SUB_I32\000ATOMIC_LOAD_SUB_I64\000ATOMIC_LOAD_SUB_"
    "I8\000ATOMIC_LOAD_XOR_I16\000ATOMIC_LOAD_XOR_I32\000ATOMIC_LOAD_XOR_I64"
    "\000ATOMIC_LOAD_XOR_I8\000ATOMIC_SWAP_I16\000ATOMIC_SWAP_I32\000ATOMIC_"
    "SWAP_I64\000ATOMIC_SWAP_I8\000B\000BCC\000BCTR\000BCTRL8_Darwin\000BCTR"
    "L8_ELF\000BCTRL_Darwin\000BCTRL_SVR4\000BL8_Darwin\000BL8_ELF\000BLA8_D"
    "arwin\000BLA8_ELF\000BLA_Darwin\000BLA_SVR4\000BLR\000BL_Darwin\000BL_S"
    "VR4\000CMPD\000CMPDI\000CMPLD\000CMPLDI\000CMPLW\000CMPLWI\000CMPW\000C"
    "MPWI\000CNTLZD\000CNTLZW\000CREQV\000CROR\000CRSET\000DCBA\000DCBF\000D"
    "CBI\000DCBST\000DCBT\000DCBTST\000DCBZ\000DCBZL\000DIVD\000DIVDU\000DIV"
    "W\000DIVWU\000DSS\000DSSALL\000DST\000DST64\000DSTST\000DSTST64\000DSTS"
    "TT\000DSTSTT64\000DSTT\000DSTT64\000DYNALLOC\000DYNALLOC8\000EQV\000EQV"
    "8\000EXTSB\000EXTSB8\000EXTSH\000EXTSH8\000EXTSW\000EXTSW_32\000EXTSW_3"
    "2_64\000FABSD\000FABSS\000FADD\000FADDS\000FADDrtz\000FCFID\000FCMPUD\000"
    "FCMPUS\000FCTIDZ\000FCTIWZ\000FDIV\000FDIVS\000FMADD\000FMADDS\000FMR\000"
    "FMSUB\000FMSUBS\000FMUL\000FMULS\000FNABSD\000FNABSS\000FNEGD\000FNEGS\000"
    "FNMADD\000FNMADDS\000FNMSUB\000FNMSUBS\000FRSP\000FSELD\000FSELS\000FSQ"
    "RT\000FSQRTS\000FSUB\000FSUBS\000LA\000LBZ\000LBZ8\000LBZU\000LBZU8\000"
    "LBZX\000LBZX8\000LD\000LDARX\000LDU\000LDX\000LDinto_toc\000LDtoc\000LD"
    "toc_restore\000LFD\000LFDU\000LFDX\000LFS\000LFSU\000LFSX\000LHA\000LHA"
    "8\000LHAU\000LHAU8\000LHAX\000LHAX8\000LHBRX\000LHZ\000LHZ8\000LHZU\000"
    "LHZU8\000LHZX\000LHZX8\000LI\000LI8\000LIS\000LIS8\000LVEBX\000LVEHX\000"
    "LVEWX\000LVSL\000LVSR\000LVX\000LVXL\000LWA\000LWARX\000LWAX\000LWBRX\000"
    "LWZ\000LWZ8\000LWZU\000LWZU8\000LWZX\000LWZX8\000MCRF\000MFCR\000MFCRps"
    "eud\000MFCTR\000MFCTR8\000MFFS\000MFLR\000MFLR8\000MFOCRF\000MFVRSAVE\000"
    "MFVSCR\000MTCRF\000MTCTR\000MTCTR8\000MTFSB0\000MTFSB1\000MTFSF\000MTLR"
    "\000MTLR8\000MTVRSAVE\000MTVSCR\000MULHD\000MULHDU\000MULHW\000MULHWU\000"
    "MULLD\000MULLI\000MULLW\000MovePCtoLR\000MovePCtoLR8\000NAND\000NAND8\000"
    "NEG\000NEG8\000NOP\000NOR\000NOR8\000OR\000OR4To8\000OR8\000OR8To4\000O"
    "RC\000ORC8\000ORI\000ORI8\000ORIS\000ORIS8\000RLDCL\000RLDICL\000RLDICR"
    "\000RLDIMI\000RLWIMI\000RLWINM\000RLWINMo\000RLWNM\000SELECT_CC_F4\000S"
    "ELECT_CC_F8\000SELECT_CC_I4\000SELECT_CC_I8\000SELECT_CC_VRRC\000SLD\000"
    "SLW\000SPILL_CR\000SRAD\000SRADI\000SRAW\000SRAWI\000SRD\000SRW\000STB\000"
    "STB8\000STBU\000STBU8\000STBX\000STBX8\000STD\000STDCX\000STDU\000STDUX"
    "\000STDX\000STDX_32\000STD_32\000STFD\000STFDU\000STFDX\000STFIWX\000ST"
    "FS\000STFSU\000STFSX\000STH\000STH8\000STHBRX\000STHU\000STHU8\000STHX\000"
    "STHX8\000STVEBX\000STVEHX\000STVEWX\000STVX\000STVXL\000STW\000STW8\000"
    "STWBRX\000STWCX\000STWU\000STWUX\000STWX\000STWX8\000SUBF\000SUBF8\000S"
    "UBFC\000SUBFC8\000SUBFE\000SUBFE8\000SUBFIC\000SUBFIC8\000SUBFME\000SUB"
    "FME8\000SUBFZE\000SUBFZE8\000SYNC\000TAILB\000TAILB8\000TAILBA\000TAILB"
    "A8\000TAILBCTR\000TAILBCTR8\000TCRETURNai\000TCRETURNai8\000TCRETURNdi\000"
    "TCRETURNdi8\000TCRETURNri\000TCRETURNri8\000TRAP\000UPDATE_VRSAVE\000VA"
    "DDCUW\000VADDFP\000VADDSBS\000VADDSHS\000VADDSWS\000VADDUBM\000VADDUBS\000"
    "VADDUHM\000VADDUHS\000VADDUWM\000VADDUWS\000VAND\000VANDC\000VAVGSB\000"
    "VAVGSH\000VAVGSW\000VAVGUB\000VAVGUH\000VAVGUW\000VCFSX\000VCFUX\000VCM"
    "PBFP\000VCMPBFPo\000VCMPEQFP\000VCMPEQFPo\000VCMPEQUB\000VCMPEQUBo\000V"
    "CMPEQUH\000VCMPEQUHo\000VCMPEQUW\000VCMPEQUWo\000VCMPGEFP\000VCMPGEFPo\000"
    "VCMPGTFP\000VCMPGTFPo\000VCMPGTSB\000VCMPGTSBo\000VCMPGTSH\000VCMPGTSHo"
    "\000VCMPGTSW\000VCMPGTSWo\000VCMPGTUB\000VCMPGTUBo\000VCMPGTUH\000VCMPG"
    "TUHo\000VCMPGTUW\000VCMPGTUWo\000VCTSXS\000VCTUXS\000VEXPTEFP\000VLOGEF"
    "P\000VMADDFP\000VMAXFP\000VMAXSB\000VMAXSH\000VMAXSW\000VMAXUB\000VMAXU"
    "H\000VMAXUW\000VMHADDSHS\000VMHRADDSHS\000VMINFP\000VMINSB\000VMINSH\000"
    "VMINSW\000VMINUB\000VMINUH\000VMINUW\000VMLADDUHM\000VMRGHB\000VMRGHH\000"
    "VMRGHW\000VMRGLB\000VMRGLH\000VMRGLW\000VMSUMMBM\000VMSUMSHM\000VMSUMSH"
    "S\000VMSUMUBM\000VMSUMUHM\000VMSUMUHS\000VMULESB\000VMULESH\000VMULEUB\000"
    "VMULEUH\000VMULOSB\000VMULOSH\000VMULOUB\000VMULOUH\000VNMSUBFP\000VNOR"
    "\000VOR\000VPERM\000VPKPX\000VPKSHSS\000VPKSHUS\000VPKSWSS\000VPKSWUS\000"
    "VPKUHUM\000VPKUHUS\000VPKUWUM\000VPKUWUS\000VREFP\000VRFIM\000VRFIN\000"
    "VRFIP\000VRFIZ\000VRLB\000VRLH\000VRLW\000VRSQRTEFP\000VSEL\000VSL\000V"
    "SLB\000VSLDOI\000VSLH\000VSLO\000VSLW\000VSPLTB\000VSPLTH\000VSPLTISB\000"
    "VSPLTISH\000VSPLTISW\000VSPLTW\000VSR\000VSRAB\000VSRAH\000VSRAW\000VSR"
    "B\000VSRH\000VSRO\000VSRW\000VSUBCUW\000VSUBFP\000VSUBSBS\000VSUBSHS\000"
    "VSUBSWS\000VSUBUBM\000VSUBUBS\000VSUBUHM\000VSUBUHS\000VSUBUWM\000VSUBU"
    "WS\000VSUM2SWS\000VSUM4SBS\000VSUM4SHS\000VSUM4UBS\000VSUMSWS\000VUPKHP"
    "X\000VUPKHSB\000VUPKHSH\000VUPKLPX\000VUPKLSB\000VUPKLSH\000VXOR\000V_S"
    "ET0\000XOR\000XOR8\000XORI\000XORI8\000XORIS\000XORIS8\000";
  return Strs+InstAsmOffset[Opcode];
}

#endif

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

namespace { // Register classes
  enum RegClass {
    RC_CARRYRC,
    RC_CRBITRC,
    RC_CRRC,
    RC_CTRRC,
    RC_CTRRC8,
    RC_F4RC,
    RC_F8RC,
    RC_G8RC,
    RC_GPRC,
    RC_VRRC,
    RC_VRSAVERC
  };
} // end anonymous namespace

static bool regIsInRegisterClass(unsigned RegClass, unsigned Reg) {
  switch (RegClass) {
  default: break;
  case RC_CARRYRC:
    if (Reg == PPC::CARRY)
      return true;
    break;
  case RC_CRBITRC:
    switch (Reg) {
    default: break;
    case PPC::CR0LT:
    case PPC::CR0GT:
    case PPC::CR0EQ:
    case PPC::CR0UN:
    case PPC::CR1LT:
    case PPC::CR1GT:
    case PPC::CR1EQ:
    case PPC::CR1UN:
    case PPC::CR2LT:
    case PPC::CR2GT:
    case PPC::CR2EQ:
    case PPC::CR2UN:
    case PPC::CR3LT:
    case PPC::CR3GT:
    case PPC::CR3EQ:
    case PPC::CR3UN:
    case PPC::CR4LT:
    case PPC::CR4GT:
    case PPC::CR4EQ:
    case PPC::CR4UN:
    case PPC::CR5LT:
    case PPC::CR5GT:
    case PPC::CR5EQ:
    case PPC::CR5UN:
    case PPC::CR6LT:
    case PPC::CR6GT:
    case PPC::CR6EQ:
    case PPC::CR6UN:
    case PPC::CR7LT:
    case PPC::CR7GT:
    case PPC::CR7EQ:
    case PPC::CR7UN:
      return true;
    }
    break;
  case RC_CRRC:
    switch (Reg) {
    default: break;
    case PPC::CR0:
    case PPC::CR1:
    case PPC::CR5:
    case PPC::CR6:
    case PPC::CR7:
    case PPC::CR2:
    case PPC::CR3:
    case PPC::CR4:
      return true;
    }
    break;
  case RC_CTRRC:
    if (Reg == PPC::CTR)
      return true;
    break;
  case RC_CTRRC8:
    if (Reg == PPC::CTR8)
      return true;
    break;
  case RC_F4RC:
    switch (Reg) {
    default: break;
    case PPC::F0:
    case PPC::F1:
    case PPC::F2:
    case PPC::F3:
    case PPC::F4:
    case PPC::F5:
    case PPC::F6:
    case PPC::F7:
    case PPC::F8:
    case PPC::F9:
    case PPC::F10:
    case PPC::F11:
    case PPC::F12:
    case PPC::F13:
    case PPC::F31:
    case PPC::F30:
    case PPC::F29:
    case PPC::F28:
    case PPC::F27:
    case PPC::F26:
    case PPC::F25:
    case PPC::F24:
    case PPC::F23:
    case PPC::F22:
    case PPC::F21:
    case PPC::F20:
    case PPC::F19:
    case PPC::F18:
    case PPC::F17:
    case PPC::F16:
    case PPC::F15:
    case PPC::F14:
      return true;
    }
    break;
  case RC_F8RC:
    switch (Reg) {
    default: break;
    case PPC::F0:
    case PPC::F1:
    case PPC::F2:
    case PPC::F3:
    case PPC::F4:
    case PPC::F5:
    case PPC::F6:
    case PPC::F7:
    case PPC::F8:
    case PPC::F9:
    case PPC::F10:
    case PPC::F11:
    case PPC::F12:
    case PPC::F13:
    case PPC::F31:
    case PPC::F30:
    case PPC::F29:
    case PPC::F28:
    case PPC::F27:
    case PPC::F26:
    case PPC::F25:
    case PPC::F24:
    case PPC::F23:
    case PPC::F22:
    case PPC::F21:
    case PPC::F20:
    case PPC::F19:
    case PPC::F18:
    case PPC::F17:
    case PPC::F16:
    case PPC::F15:
    case PPC::F14:
      return true;
    }
    break;
  case RC_G8RC:
    switch (Reg) {
    default: break;
    case PPC::X2:
    case PPC::X3:
    case PPC::X4:
    case PPC::X5:
    case PPC::X6:
    case PPC::X7:
    case PPC::X8:
    case PPC::X9:
    case PPC::X10:
    case PPC::X11:
    case PPC::X12:
    case PPC::X30:
    case PPC::X29:
    case PPC::X28:
    case PPC::X27:
    case PPC::X26:
    case PPC::X25:
    case PPC::X24:
    case PPC::X23:
    case PPC::X22:
    case PPC::X21:
    case PPC::X20:
    case PPC::X19:
    case PPC::X18:
    case PPC::X17:
    case PPC::X16:
    case PPC::X15:
    case PPC::X14:
    case PPC::X31:
    case PPC::X13:
    case PPC::X0:
    case PPC::X1:
    case PPC::LR8:
      return true;
    }
    break;
  case RC_GPRC:
    switch (Reg) {
    default: break;
    case PPC::R2:
    case PPC::R3:
    case PPC::R4:
    case PPC::R5:
    case PPC::R6:
    case PPC::R7:
    case PPC::R8:
    case PPC::R9:
    case PPC::R10:
    case PPC::R11:
    case PPC::R12:
    case PPC::R30:
    case PPC::R29:
    case PPC::R28:
    case PPC::R27:
    case PPC::R26:
    case PPC::R25:
    case PPC::R24:
    case PPC::R23:
    case PPC::R22:
    case PPC::R21:
    case PPC::R20:
    case PPC::R19:
    case PPC::R18:
    case PPC::R17:
    case PPC::R16:
    case PPC::R15:
    case PPC::R14:
    case PPC::R13:
    case PPC::R31:
    case PPC::R0:
    case PPC::R1:
    case PPC::LR:
      return true;
    }
    break;
  case RC_VRRC:
    switch (Reg) {
    default: break;
    case PPC::V2:
    case PPC::V3:
    case PPC::V4:
    case PPC::V5:
    case PPC::V0:
    case PPC::V1:
    case PPC::V6:
    case PPC::V7:
    case PPC::V8:
    case PPC::V9:
    case PPC::V10:
    case PPC::V11:
    case PPC::V12:
    case PPC::V13:
    case PPC::V14:
    case PPC::V15:
    case PPC::V16:
    case PPC::V17:
    case PPC::V18:
    case PPC::V19:
    case PPC::V31:
    case PPC::V30:
    case PPC::V29:
    case PPC::V28:
    case PPC::V27:
    case PPC::V26:
    case PPC::V25:
    case PPC::V24:
    case PPC::V23:
    case PPC::V22:
    case PPC::V21:
    case PPC::V20:
      return true;
    }
    break;
  case RC_VRSAVERC:
    if (Reg == PPC::VRSAVE)
      return true;
    break;
  }

  return false;
}

bool PPCInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  return true;
}

#endif // PRINT_ALIAS_INSTR
