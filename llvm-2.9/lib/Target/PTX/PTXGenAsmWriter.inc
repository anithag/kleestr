//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void PTXAsmPrinter::printInstruction(const MachineInstr *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    1073741835U,	// ADDri16
    1073741844U,	// ADDri32
    1073741853U,	// ADDri64
    1073741835U,	// ADDrr16
    1073741844U,	// ADDrr32
    1073741853U,	// ADDrr64
    38U,	// EXIT
    1073741867U,	// FADDri32
    1073741876U,	// FADDri64
    1073741867U,	// FADDrr32
    1073741876U,	// FADDrr64
    1073741885U,	// FMULri32
    1073741894U,	// FMULri64
    1073741885U,	// FMULrr32
    1073741894U,	// FMULrr64
    1073741903U,	// FSUBri32
    1073741912U,	// FSUBri64
    1073741903U,	// FSUBrr32
    1073741912U,	// FSUBrr64
    1241514081U,	// LDcf32ii32
    1241514081U,	// LDcf32ii64
    1241514081U,	// LDcf32ri32
    1241514081U,	// LDcf32ri64
    1241514081U,	// LDcf32rr32
    1241514081U,	// LDcf32rr64
    1241514095U,	// LDcf64ii32
    1241514095U,	// LDcf64ii64
    1241514095U,	// LDcf64ri32
    1241514095U,	// LDcf64ri64
    1241514095U,	// LDcf64rr32
    1241514095U,	// LDcf64rr64
    1241514109U,	// LDcu16ii32
    1241514109U,	// LDcu16ii64
    1241514109U,	// LDcu16ri32
    1241514109U,	// LDcu16ri64
    1241514109U,	// LDcu16rr32
    1241514109U,	// LDcu16rr64
    1241514123U,	// LDcu32ii32
    1241514123U,	// LDcu32ii64
    1241514123U,	// LDcu32ri32
    1241514123U,	// LDcu32ri64
    1241514123U,	// LDcu32rr32
    1241514123U,	// LDcu32rr64
    1241514137U,	// LDcu64ii32
    1241514137U,	// LDcu64ii64
    1241514137U,	// LDcu64ri32
    1241514137U,	// LDcu64ri64
    1241514137U,	// LDcu64rr32
    1241514137U,	// LDcu64rr64
    1241514151U,	// LDgf32ii32
    1241514151U,	// LDgf32ii64
    1241514151U,	// LDgf32ri32
    1241514151U,	// LDgf32ri64
    1241514151U,	// LDgf32rr32
    1241514151U,	// LDgf32rr64
    1241514166U,	// LDgf64ii32
    1241514166U,	// LDgf64ii64
    1241514166U,	// LDgf64ri32
    1241514166U,	// LDgf64ri64
    1241514166U,	// LDgf64rr32
    1241514166U,	// LDgf64rr64
    1241514181U,	// LDgu16ii32
    1241514181U,	// LDgu16ii64
    1241514181U,	// LDgu16ri32
    1241514181U,	// LDgu16ri64
    1241514181U,	// LDgu16rr32
    1241514181U,	// LDgu16rr64
    1241514196U,	// LDgu32ii32
    1241514196U,	// LDgu32ii64
    1241514196U,	// LDgu32ri32
    1241514196U,	// LDgu32ri64
    1241514196U,	// LDgu32rr32
    1241514196U,	// LDgu32rr64
    1241514211U,	// LDgu64ii32
    1241514211U,	// LDgu64ii64
    1241514211U,	// LDgu64ri32
    1241514211U,	// LDgu64ri64
    1241514211U,	// LDgu64rr32
    1241514211U,	// LDgu64rr64
    1241514226U,	// LDlf32ii32
    1241514226U,	// LDlf32ii64
    1241514226U,	// LDlf32ri32
    1241514226U,	// LDlf32ri64
    1241514226U,	// LDlf32rr32
    1241514226U,	// LDlf32rr64
    1241514240U,	// LDlf64ii32
    1241514240U,	// LDlf64ii64
    1241514240U,	// LDlf64ri32
    1241514240U,	// LDlf64ri64
    1241514240U,	// LDlf64rr32
    1241514240U,	// LDlf64rr64
    1241514254U,	// LDlu16ii32
    1241514254U,	// LDlu16ii64
    1241514254U,	// LDlu16ri32
    1241514254U,	// LDlu16ri64
    1241514254U,	// LDlu16rr32
    1241514254U,	// LDlu16rr64
    1241514268U,	// LDlu32ii32
    1241514268U,	// LDlu32ii64
    1241514268U,	// LDlu32ri32
    1241514268U,	// LDlu32ri64
    1241514268U,	// LDlu32rr32
    1241514268U,	// LDlu32rr64
    1241514282U,	// LDlu64ii32
    1241514282U,	// LDlu64ii64
    1241514282U,	// LDlu64ri32
    1241514282U,	// LDlu64ri64
    1241514282U,	// LDlu64rr32
    1241514282U,	// LDlu64rr64
    1275068728U,	// LDpiF32
    1275068742U,	// LDpiF64
    1275068756U,	// LDpiU16
    1275068770U,	// LDpiU32
    1275068784U,	// LDpiU64
    1241514366U,	// LDsf32ii32
    1241514366U,	// LDsf32ii64
    1241514366U,	// LDsf32ri32
    1241514366U,	// LDsf32ri64
    1241514366U,	// LDsf32rr32
    1241514366U,	// LDsf32rr64
    1241514381U,	// LDsf64ii32
    1241514381U,	// LDsf64ii64
    1241514381U,	// LDsf64ri32
    1241514381U,	// LDsf64ri64
    1241514381U,	// LDsf64rr32
    1241514381U,	// LDsf64rr64
    1241514396U,	// LDsu16ii32
    1241514396U,	// LDsu16ii64
    1241514396U,	// LDsu16ri32
    1241514396U,	// LDsu16ri64
    1241514396U,	// LDsu16rr32
    1241514396U,	// LDsu16rr64
    1241514411U,	// LDsu32ii32
    1241514411U,	// LDsu32ii64
    1241514411U,	// LDsu32ri32
    1241514411U,	// LDsu32ri64
    1241514411U,	// LDsu32rr32
    1241514411U,	// LDsu32rr64
    1241514426U,	// LDsu64ii32
    1241514426U,	// LDsu64ii64
    1241514426U,	// LDsu64ri32
    1241514426U,	// LDsu64ri64
    1241514426U,	// LDsu64rr32
    1241514426U,	// LDsu64rr64
    1174405577U,	// MOVF32ri
    1174405577U,	// MOVF32rr
    1174405586U,	// MOVF64ri
    1174405586U,	// MOVF64rr
    1174405595U,	// MOVPREDri
    1174405595U,	// MOVPREDrr
    1174405605U,	// MOVU164ri
    1174405614U,	// MOVU16ri
    1174405614U,	// MOVU16rr
    1174405623U,	// MOVU32ri
    1174405623U,	// MOVU32rr
    1174405605U,	// MOVU64rr
    1342177792U,	// PTX_BAR_SYNC
    1476395493U,	// PTX_READ_TID_R64
    1610613230U,	// PTX_READ_TID_W
    1744830958U,	// PTX_READ_TID_X
    1879048686U,	// PTX_READ_TID_Y
    2013266414U,	// PTX_READ_TID_Z
    522U,	// RET
    1073742350U,	// SHLir
    1073742350U,	// SHLri
    1073742350U,	// SHLrr
    1073742359U,	// SRAir
    1073742359U,	// SRAri
    1073742359U,	// SRArr
    1073742368U,	// SRLir
    1073742368U,	// SRLri
    1073742368U,	// SRLrr
    2147484201U,	// STgf32ii32
    2147484201U,	// STgf32ii64
    2147484201U,	// STgf32ri32
    2147484201U,	// STgf32ri64
    2147484201U,	// STgf32rr32
    2147484201U,	// STgf32rr64
    2147484217U,	// STgf64ii32
    2147484217U,	// STgf64ii64
    2147484217U,	// STgf64ri32
    2147484217U,	// STgf64ri64
    2147484217U,	// STgf64rr32
    2147484217U,	// STgf64rr64
    2147484233U,	// STgu16ii32
    2147484233U,	// STgu16ii64
    2147484233U,	// STgu16ri32
    2147484233U,	// STgu16ri64
    2147484233U,	// STgu16rr32
    2147484233U,	// STgu16rr64
    2147484249U,	// STgu32ii32
    2147484249U,	// STgu32ii64
    2147484249U,	// STgu32ri32
    2147484249U,	// STgu32ri64
    2147484249U,	// STgu32rr32
    2147484249U,	// STgu32rr64
    2147484265U,	// STgu64ii32
    2147484265U,	// STgu64ii64
    2147484265U,	// STgu64ri32
    2147484265U,	// STgu64ri64
    2147484265U,	// STgu64rr32
    2147484265U,	// STgu64rr64
    2147484281U,	// STlf32ii32
    2147484281U,	// STlf32ii64
    2147484281U,	// STlf32ri32
    2147484281U,	// STlf32ri64
    2147484281U,	// STlf32rr32
    2147484281U,	// STlf32rr64
    2147484296U,	// STlf64ii32
    2147484296U,	// STlf64ii64
    2147484296U,	// STlf64ri32
    2147484296U,	// STlf64ri64
    2147484296U,	// STlf64rr32
    2147484296U,	// STlf64rr64
    2147484311U,	// STlu16ii32
    2147484311U,	// STlu16ii64
    2147484311U,	// STlu16ri32
    2147484311U,	// STlu16ri64
    2147484311U,	// STlu16rr32
    2147484311U,	// STlu16rr64
    2147484326U,	// STlu32ii32
    2147484326U,	// STlu32ii64
    2147484326U,	// STlu32ri32
    2147484326U,	// STlu32ri64
    2147484326U,	// STlu32rr32
    2147484326U,	// STlu32rr64
    2147484341U,	// STlu64ii32
    2147484341U,	// STlu64ii64
    2147484341U,	// STlu64ri32
    2147484341U,	// STlu64ri64
    2147484341U,	// STlu64rr32
    2147484341U,	// STlu64rr64
    2147484356U,	// STsf32ii32
    2147484356U,	// STsf32ii64
    2147484356U,	// STsf32ri32
    2147484356U,	// STsf32ri64
    2147484356U,	// STsf32rr32
    2147484356U,	// STsf32rr64
    2147484372U,	// STsf64ii32
    2147484372U,	// STsf64ii64
    2147484372U,	// STsf64ri32
    2147484372U,	// STsf64ri64
    2147484372U,	// STsf64rr32
    2147484372U,	// STsf64rr64
    2147484388U,	// STsu16ii32
    2147484388U,	// STsu16ii64
    2147484388U,	// STsu16ri32
    2147484388U,	// STsu16ri64
    2147484388U,	// STsu16rr32
    2147484388U,	// STsu16rr64
    2147484404U,	// STsu32ii32
    2147484404U,	// STsu32ii64
    2147484404U,	// STsu32ri32
    2147484404U,	// STsu32ri64
    2147484404U,	// STsu32rr32
    2147484404U,	// STsu32rr64
    2147484420U,	// STsu64ii32
    2147484420U,	// STsu64ii64
    2147484420U,	// STsu64ri32
    2147484420U,	// STsu64ri64
    2147484420U,	// STsu64rr32
    2147484420U,	// STsu64rr64
    1073742612U,	// SUBri16
    1073742621U,	// SUBri32
    1073742630U,	// SUBri64
    1073742612U,	// SUBrr16
    1073742621U,	// SUBrr32
    1073742630U,	// SUBrr64
    0U
  };

  const char *AsmStrs = 
    "DBG_VALUE\000add.u16\t\000add.u32\t\000add.u64\t\000exit\000add.f32\t\000"
    "add.f64\t\000mul.f32\t\000mul.f64\t\000sub.f32\t\000sub.f64\t\000ld.con"
    "st.f32\t\000ld.const.f64\t\000ld.const.u16\t\000ld.const.u32\t\000ld.co"
    "nst.u64\t\000ld.global.f32\t\000ld.global.f64\t\000ld.global.u16\t\000l"
    "d.global.u32\t\000ld.global.u64\t\000ld.local.f32\t\000ld.local.f64\t\000"
    "ld.local.u16\t\000ld.local.u32\t\000ld.local.u64\t\000ld.param.f32\t\000"
    "ld.param.f64\t\000ld.param.u16\t\000ld.param.u32\t\000ld.param.u64\t\000"
    "ld.shared.f32\t\000ld.shared.f64\t\000ld.shared.u16\t\000ld.shared.u32\t"
    "\000ld.shared.u64\t\000mov.f32\t\000mov.f64\t\000mov.pred\t\000mov.u64\t"
    "\000mov.u16\t\000mov.u32\t\000bar.sync\t\000ret\000shl.b32\t\000shr.s32"
    "\t\000shr.u32\t\000st.global.f32\t[\000st.global.f64\t[\000st.global.u1"
    "6\t[\000st.global.u32\t[\000st.global.u64\t[\000st.local.f32\t[\000st.l"
    "ocal.f64\t[\000st.local.u16\t[\000st.local.u32\t[\000st.local.u64\t[\000"
    "st.shared.f32\t[\000st.shared.f64\t[\000st.shared.u16\t[\000st.shared.u"
    "32\t[\000st.shared.u64\t[\000sub.u16\t\000sub.u32\t\000sub.u64\t\000";

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 1023)-1;


  // Fragment 0 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 30) & 3) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, EXIT, RET
    return;
    break;
  case 1:
    // ADDri16, ADDri32, ADDri64, ADDrr16, ADDrr32, ADDrr64, FADDri32, FADDri...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // STgf32ii32, STgf32ii64, STgf32ri32, STgf32ri64, STgf32rr32, STgf32rr64...
    printMemOperand(MI, 1, O); 
    O << "], "; 
    printOperand(MI, 0, O); 
    return;
    break;
  }


  // Fragment 1 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 27) & 7) {
  default:   // unreachable.
  case 0:
    // ADDri16, ADDri32, ADDri64, ADDrr16, ADDrr32, ADDrr64, FADDri32, FADDri...
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 1:
    // LDcf32ii32, LDcf32ii64, LDcf32ri32, LDcf32ri64, LDcf32rr32, LDcf32rr64...
    O << ", ["; 
    break;
  case 2:
    // PTX_BAR_SYNC
    return;
    break;
  case 3:
    // PTX_READ_TID_R64
    O << ", tid"; 
    return;
    break;
  case 4:
    // PTX_READ_TID_W
    O << ", tid.w"; 
    return;
    break;
  case 5:
    // PTX_READ_TID_X
    O << ", tid.x"; 
    return;
    break;
  case 6:
    // PTX_READ_TID_Y
    O << ", tid.y"; 
    return;
    break;
  case 7:
    // PTX_READ_TID_Z
    O << ", tid.z"; 
    return;
    break;
  }


  // Fragment 2 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 25) & 3) {
  default:   // unreachable.
  case 0:
    // ADDri16, ADDri32, ADDri64, ADDrr16, ADDrr32, ADDrr64, FADDri32, FADDri...
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 1:
    // LDcf32ii32, LDcf32ii64, LDcf32ri32, LDcf32ri64, LDcf32rr32, LDcf32rr64...
    printMemOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case 2:
    // LDpiF32, LDpiF64, LDpiU16, LDpiU32, LDpiU64
    printParamOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case 3:
    // MOVF32ri, MOVF32rr, MOVF64ri, MOVF64rr, MOVPREDri, MOVPREDrr, MOVU164r...
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *PTXAsmPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 193 && "Invalid register number!");

  static const unsigned RegAsmOffset[] = {
    0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 34, 38, 42, 
    46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 94, 98, 
    102, 106, 110, 114, 118, 122, 126, 130, 134, 138, 142, 146, 150, 154, 
    158, 163, 168, 173, 178, 183, 188, 193, 198, 203, 208, 213, 218, 223, 
    228, 233, 238, 243, 248, 253, 258, 263, 268, 271, 274, 277, 280, 283, 
    286, 289, 292, 295, 298, 302, 306, 310, 314, 318, 322, 326, 330, 334, 
    338, 342, 346, 350, 354, 358, 362, 366, 370, 374, 378, 382, 386, 389, 
    392, 395, 398, 401, 404, 407, 410, 413, 416, 420, 424, 428, 432, 436, 
    440, 444, 448, 452, 456, 460, 464, 468, 472, 476, 480, 484, 488, 492, 
    496, 500, 504, 508, 512, 516, 520, 524, 528, 532, 536, 540, 544, 549, 
    554, 559, 564, 569, 574, 579, 584, 589, 594, 599, 604, 609, 614, 619, 
    624, 629, 634, 639, 644, 649, 654, 658, 662, 666, 670, 674, 678, 682, 
    686, 690, 694, 699, 704, 709, 714, 719, 724, 729, 734, 739, 744, 749, 
    754, 759, 764, 769, 774, 779, 784, 789, 794, 799, 0
  };

  const char *AsmStrs =
    "f0\000f1\000f2\000f3\000f4\000f5\000f6\000f7\000f8\000f9\000f10\000f11\000"
    "f12\000f13\000f14\000f15\000f16\000f17\000f18\000f19\000f20\000f21\000f"
    "22\000f23\000f24\000f25\000f26\000f27\000f28\000f29\000f30\000f31\000fd"
    "0\000fd1\000fd2\000fd3\000fd4\000fd5\000fd6\000fd7\000fd8\000fd9\000fd1"
    "0\000fd11\000fd12\000fd13\000fd14\000fd15\000fd16\000fd17\000fd18\000fd"
    "19\000fd20\000fd21\000fd22\000fd23\000fd24\000fd25\000fd26\000fd27\000f"
    "d28\000fd29\000fd30\000fd31\000p0\000p1\000p2\000p3\000p4\000p5\000p6\000"
    "p7\000p8\000p9\000p10\000p11\000p12\000p13\000p14\000p15\000p16\000p17\000"
    "p18\000p19\000p20\000p21\000p22\000p23\000p24\000p25\000p26\000p27\000p"
    "28\000p29\000p30\000p31\000r0\000r1\000r2\000r3\000r4\000r5\000r6\000r7"
    "\000r8\000r9\000r10\000r11\000r12\000r13\000r14\000r15\000r16\000r17\000"
    "r18\000r19\000r20\000r21\000r22\000r23\000r24\000r25\000r26\000r27\000r"
    "28\000r29\000r30\000r31\000rd0\000rd1\000rd2\000rd3\000rd4\000rd5\000rd"
    "6\000rd7\000rd8\000rd9\000rd10\000rd11\000rd12\000rd13\000rd14\000rd15\000"
    "rd16\000rd17\000rd18\000rd19\000rd20\000rd21\000rd22\000rd23\000rd24\000"
    "rd25\000rd26\000rd27\000rd28\000rd29\000rd30\000rd31\000rh0\000rh1\000r"
    "h2\000rh3\000rh4\000rh5\000rh6\000rh7\000rh8\000rh9\000rh10\000rh11\000"
    "rh12\000rh13\000rh14\000rh15\000rh16\000rh17\000rh18\000rh19\000rh20\000"
    "rh21\000rh22\000rh23\000rh24\000rh25\000rh26\000rh27\000rh28\000rh29\000"
    "rh30\000rh31\000";
  return AsmStrs+RegAsmOffset[RegNo-1];
}


#ifdef GET_INSTRUCTION_NAME
#undef GET_INSTRUCTION_NAME

/// getInstructionName: This method is automatically generated by tblgen
/// from the instruction set description.  This returns the enum name of the
/// specified instruction.
const char *PTXAsmPrinter::getInstructionName(unsigned Opcode) {
  assert(Opcode < 282 && "Invalid instruction number!");

  static const unsigned InstAsmOffset[] = {
    0, 4, 14, 27, 36, 45, 50, 65, 79, 92, 106, 123, 133, 146, 
    151, 159, 167, 175, 183, 191, 199, 204, 213, 222, 231, 240, 249, 258, 
    267, 276, 285, 294, 303, 312, 323, 334, 345, 356, 367, 378, 389, 400, 
    411, 422, 433, 444, 455, 466, 477, 488, 499, 510, 521, 532, 543, 554, 
    565, 576, 587, 598, 609, 620, 631, 642, 653, 664, 675, 686, 697, 708, 
    719, 730, 741, 752, 763, 774, 785, 796, 807, 818, 829, 840, 851, 862, 
    873, 884, 895, 906, 917, 928, 939, 950, 961, 972, 983, 994, 1005, 1016, 
    1027, 1038, 1049, 1060, 1071, 1082, 1093, 1104, 1115, 1126, 1137, 1148, 1159, 1170, 
    1181, 1192, 1203, 1214, 1225, 1236, 1247, 1258, 1269, 1280, 1291, 1302, 1310, 1318, 
    1326, 1334, 1342, 1353, 1364, 1375, 1386, 1397, 1408, 1419, 1430, 1441, 1452, 1463, 
    1474, 1485, 1496, 1507, 1518, 1529, 1540, 1551, 1562, 1573, 1584, 1595, 1606, 1617, 
    1628, 1639, 1650, 1661, 1672, 1681, 1690, 1699, 1708, 1718, 1728, 1738, 1747, 1756, 
    1765, 1774, 1783, 1796, 1813, 1828, 1843, 1858, 1873, 1877, 1883, 1889, 1895, 1901, 
    1907, 1913, 1919, 1925, 1931, 1942, 1953, 1964, 1975, 1986, 1997, 2008, 2019, 2030, 
    2041, 2052, 2063, 2074, 2085, 2096, 2107, 2118, 2129, 2140, 2151, 2162, 2173, 2184, 
    2195, 2206, 2217, 2228, 2239, 2250, 2261, 2272, 2283, 2294, 2305, 2316, 2327, 2338, 
    2349, 2360, 2371, 2382, 2393, 2404, 2415, 2426, 2437, 2448, 2459, 2470, 2481, 2492, 
    2503, 2514, 2525, 2536, 2547, 2558, 2569, 2580, 2591, 2602, 2613, 2624, 2635, 2646, 
    2657, 2668, 2679, 2690, 2701, 2712, 2723, 2734, 2745, 2756, 2767, 2778, 2789, 2800, 
    2811, 2822, 2833, 2844, 2855, 2866, 2877, 2888, 2899, 2910, 2921, 2929, 2937, 2945, 
    2953, 2961, 0
  };

  const char *Strs =
    "PHI\000INLINEASM\000PROLOG_LABEL\000EH_LABEL\000GC_LABEL\000KILL\000EXT"
    "RACT_SUBREG\000INSERT_SUBREG\000IMPLICIT_DEF\000SUBREG_TO_REG\000COPY_T"
    "O_REGCLASS\000DBG_VALUE\000REG_SEQUENCE\000COPY\000ADDri16\000ADDri32\000"
    "ADDri64\000ADDrr16\000ADDrr32\000ADDrr64\000EXIT\000FADDri32\000FADDri6"
    "4\000FADDrr32\000FADDrr64\000FMULri32\000FMULri64\000FMULrr32\000FMULrr"
    "64\000FSUBri32\000FSUBri64\000FSUBrr32\000FSUBrr64\000LDcf32ii32\000LDc"
    "f32ii64\000LDcf32ri32\000LDcf32ri64\000LDcf32rr32\000LDcf32rr64\000LDcf"
    "64ii32\000LDcf64ii64\000LDcf64ri32\000LDcf64ri64\000LDcf64rr32\000LDcf6"
    "4rr64\000LDcu16ii32\000LDcu16ii64\000LDcu16ri32\000LDcu16ri64\000LDcu16"
    "rr32\000LDcu16rr64\000LDcu32ii32\000LDcu32ii64\000LDcu32ri32\000LDcu32r"
    "i64\000LDcu32rr32\000LDcu32rr64\000LDcu64ii32\000LDcu64ii64\000LDcu64ri"
    "32\000LDcu64ri64\000LDcu64rr32\000LDcu64rr64\000LDgf32ii32\000LDgf32ii6"
    "4\000LDgf32ri32\000LDgf32ri64\000LDgf32rr32\000LDgf32rr64\000LDgf64ii32"
    "\000LDgf64ii64\000LDgf64ri32\000LDgf64ri64\000LDgf64rr32\000LDgf64rr64\000"
    "LDgu16ii32\000LDgu16ii64\000LDgu16ri32\000LDgu16ri64\000LDgu16rr32\000L"
    "Dgu16rr64\000LDgu32ii32\000LDgu32ii64\000LDgu32ri32\000LDgu32ri64\000LD"
    "gu32rr32\000LDgu32rr64\000LDgu64ii32\000LDgu64ii64\000LDgu64ri32\000LDg"
    "u64ri64\000LDgu64rr32\000LDgu64rr64\000LDlf32ii32\000LDlf32ii64\000LDlf"
    "32ri32\000LDlf32ri64\000LDlf32rr32\000LDlf32rr64\000LDlf64ii32\000LDlf6"
    "4ii64\000LDlf64ri32\000LDlf64ri64\000LDlf64rr32\000LDlf64rr64\000LDlu16"
    "ii32\000LDlu16ii64\000LDlu16ri32\000LDlu16ri64\000LDlu16rr32\000LDlu16r"
    "r64\000LDlu32ii32\000LDlu32ii64\000LDlu32ri32\000LDlu32ri64\000LDlu32rr"
    "32\000LDlu32rr64\000LDlu64ii32\000LDlu64ii64\000LDlu64ri32\000LDlu64ri6"
    "4\000LDlu64rr32\000LDlu64rr64\000LDpiF32\000LDpiF64\000LDpiU16\000LDpiU"
    "32\000LDpiU64\000LDsf32ii32\000LDsf32ii64\000LDsf32ri32\000LDsf32ri64\000"
    "LDsf32rr32\000LDsf32rr64\000LDsf64ii32\000LDsf64ii64\000LDsf64ri32\000L"
    "Dsf64ri64\000LDsf64rr32\000LDsf64rr64\000LDsu16ii32\000LDsu16ii64\000LD"
    "su16ri32\000LDsu16ri64\000LDsu16rr32\000LDsu16rr64\000LDsu32ii32\000LDs"
    "u32ii64\000LDsu32ri32\000LDsu32ri64\000LDsu32rr32\000LDsu32rr64\000LDsu"
    "64ii32\000LDsu64ii64\000LDsu64ri32\000LDsu64ri64\000LDsu64rr32\000LDsu6"
    "4rr64\000MOVF32ri\000MOVF32rr\000MOVF64ri\000MOVF64rr\000MOVPREDri\000M"
    "OVPREDrr\000MOVU164ri\000MOVU16ri\000MOVU16rr\000MOVU32ri\000MOVU32rr\000"
    "MOVU64rr\000PTX_BAR_SYNC\000PTX_READ_TID_R64\000PTX_READ_TID_W\000PTX_R"
    "EAD_TID_X\000PTX_READ_TID_Y\000PTX_READ_TID_Z\000RET\000SHLir\000SHLri\000"
    "SHLrr\000SRAir\000SRAri\000SRArr\000SRLir\000SRLri\000SRLrr\000STgf32ii"
    "32\000STgf32ii64\000STgf32ri32\000STgf32ri64\000STgf32rr32\000STgf32rr6"
    "4\000STgf64ii32\000STgf64ii64\000STgf64ri32\000STgf64ri64\000STgf64rr32"
    "\000STgf64rr64\000STgu16ii32\000STgu16ii64\000STgu16ri32\000STgu16ri64\000"
    "STgu16rr32\000STgu16rr64\000STgu32ii32\000STgu32ii64\000STgu32ri32\000S"
    "Tgu32ri64\000STgu32rr32\000STgu32rr64\000STgu64ii32\000STgu64ii64\000ST"
    "gu64ri32\000STgu64ri64\000STgu64rr32\000STgu64rr64\000STlf32ii32\000STl"
    "f32ii64\000STlf32ri32\000STlf32ri64\000STlf32rr32\000STlf32rr64\000STlf"
    "64ii32\000STlf64ii64\000STlf64ri32\000STlf64ri64\000STlf64rr32\000STlf6"
    "4rr64\000STlu16ii32\000STlu16ii64\000STlu16ri32\000STlu16ri64\000STlu16"
    "rr32\000STlu16rr64\000STlu32ii32\000STlu32ii64\000STlu32ri32\000STlu32r"
    "i64\000STlu32rr32\000STlu32rr64\000STlu64ii32\000STlu64ii64\000STlu64ri"
    "32\000STlu64ri64\000STlu64rr32\000STlu64rr64\000STsf32ii32\000STsf32ii6"
    "4\000STsf32ri32\000STsf32ri64\000STsf32rr32\000STsf32rr64\000STsf64ii32"
    "\000STsf64ii64\000STsf64ri32\000STsf64ri64\000STsf64rr32\000STsf64rr64\000"
    "STsu16ii32\000STsu16ii64\000STsu16ri32\000STsu16ri64\000STsu16rr32\000S"
    "Tsu16rr64\000STsu32ii32\000STsu32ii64\000STsu32ri32\000STsu32ri64\000ST"
    "su32rr32\000STsu32rr64\000STsu64ii32\000STsu64ii64\000STsu64ri32\000STs"
    "u64ri64\000STsu64rr32\000STsu64rr64\000SUBri16\000SUBri32\000SUBri64\000"
    "SUBrr16\000SUBrr32\000SUBrr64\000";
  return Strs+InstAsmOffset[Opcode];
}

#endif

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

namespace { // Register classes
  enum RegClass {
    RC_Preds,
    RC_RRegf32,
    RC_RRegf64,
    RC_RRegu16,
    RC_RRegu32,
    RC_RRegu64
  };
} // end anonymous namespace

static bool regIsInRegisterClass(unsigned RegClass, unsigned Reg) {
  switch (RegClass) {
  default: break;
  case RC_Preds:
    switch (Reg) {
    default: break;
    case PTX::P0:
    case PTX::P1:
    case PTX::P2:
    case PTX::P3:
    case PTX::P4:
    case PTX::P5:
    case PTX::P6:
    case PTX::P7:
    case PTX::P8:
    case PTX::P9:
    case PTX::P10:
    case PTX::P11:
    case PTX::P12:
    case PTX::P13:
    case PTX::P14:
    case PTX::P15:
    case PTX::P16:
    case PTX::P17:
    case PTX::P18:
    case PTX::P19:
    case PTX::P20:
    case PTX::P21:
    case PTX::P22:
    case PTX::P23:
    case PTX::P24:
    case PTX::P25:
    case PTX::P26:
    case PTX::P27:
    case PTX::P28:
    case PTX::P29:
    case PTX::P30:
    case PTX::P31:
      return true;
    }
    break;
  case RC_RRegf32:
    switch (Reg) {
    default: break;
    case PTX::F0:
    case PTX::F1:
    case PTX::F2:
    case PTX::F3:
    case PTX::F4:
    case PTX::F5:
    case PTX::F6:
    case PTX::F7:
    case PTX::F8:
    case PTX::F9:
    case PTX::F10:
    case PTX::F11:
    case PTX::F12:
    case PTX::F13:
    case PTX::F14:
    case PTX::F15:
    case PTX::F16:
    case PTX::F17:
    case PTX::F18:
    case PTX::F19:
    case PTX::F20:
    case PTX::F21:
    case PTX::F22:
    case PTX::F23:
    case PTX::F24:
    case PTX::F25:
    case PTX::F26:
    case PTX::F27:
    case PTX::F28:
    case PTX::F29:
    case PTX::F30:
    case PTX::F31:
      return true;
    }
    break;
  case RC_RRegf64:
    switch (Reg) {
    default: break;
    case PTX::FD0:
    case PTX::FD1:
    case PTX::FD2:
    case PTX::FD3:
    case PTX::FD4:
    case PTX::FD5:
    case PTX::FD6:
    case PTX::FD7:
    case PTX::FD8:
    case PTX::FD9:
    case PTX::FD10:
    case PTX::FD11:
    case PTX::FD12:
    case PTX::FD13:
    case PTX::FD14:
    case PTX::FD15:
    case PTX::FD16:
    case PTX::FD17:
    case PTX::FD18:
    case PTX::FD19:
    case PTX::FD20:
    case PTX::FD21:
    case PTX::FD22:
    case PTX::FD23:
    case PTX::FD24:
    case PTX::FD25:
    case PTX::FD26:
    case PTX::FD27:
    case PTX::FD28:
    case PTX::FD29:
    case PTX::FD30:
    case PTX::FD31:
      return true;
    }
    break;
  case RC_RRegu16:
    switch (Reg) {
    default: break;
    case PTX::RH0:
    case PTX::RH1:
    case PTX::RH2:
    case PTX::RH3:
    case PTX::RH4:
    case PTX::RH5:
    case PTX::RH6:
    case PTX::RH7:
    case PTX::RH8:
    case PTX::RH9:
    case PTX::RH10:
    case PTX::RH11:
    case PTX::RH12:
    case PTX::RH13:
    case PTX::RH14:
    case PTX::RH15:
    case PTX::RH16:
    case PTX::RH17:
    case PTX::RH18:
    case PTX::RH19:
    case PTX::RH20:
    case PTX::RH21:
    case PTX::RH22:
    case PTX::RH23:
    case PTX::RH24:
    case PTX::RH25:
    case PTX::RH26:
    case PTX::RH27:
    case PTX::RH28:
    case PTX::RH29:
    case PTX::RH30:
    case PTX::RH31:
      return true;
    }
    break;
  case RC_RRegu32:
    switch (Reg) {
    default: break;
    case PTX::R0:
    case PTX::R1:
    case PTX::R2:
    case PTX::R3:
    case PTX::R4:
    case PTX::R5:
    case PTX::R6:
    case PTX::R7:
    case PTX::R8:
    case PTX::R9:
    case PTX::R10:
    case PTX::R11:
    case PTX::R12:
    case PTX::R13:
    case PTX::R14:
    case PTX::R15:
    case PTX::R16:
    case PTX::R17:
    case PTX::R18:
    case PTX::R19:
    case PTX::R20:
    case PTX::R21:
    case PTX::R22:
    case PTX::R23:
    case PTX::R24:
    case PTX::R25:
    case PTX::R26:
    case PTX::R27:
    case PTX::R28:
    case PTX::R29:
    case PTX::R30:
    case PTX::R31:
      return true;
    }
    break;
  case RC_RRegu64:
    switch (Reg) {
    default: break;
    case PTX::RD0:
    case PTX::RD1:
    case PTX::RD2:
    case PTX::RD3:
    case PTX::RD4:
    case PTX::RD5:
    case PTX::RD6:
    case PTX::RD7:
    case PTX::RD8:
    case PTX::RD9:
    case PTX::RD10:
    case PTX::RD11:
    case PTX::RD12:
    case PTX::RD13:
    case PTX::RD14:
    case PTX::RD15:
    case PTX::RD16:
    case PTX::RD17:
    case PTX::RD18:
    case PTX::RD19:
    case PTX::RD20:
    case PTX::RD21:
    case PTX::RD22:
    case PTX::RD23:
    case PTX::RD24:
    case PTX::RD25:
    case PTX::RD26:
    case PTX::RD27:
    case PTX::RD28:
    case PTX::RD29:
    case PTX::RD30:
    case PTX::RD31:
      return true;
    }
    break;
  }

  return false;
}

bool PTXAsmPrinter::printAliasInstr(const MachineInstr *MI, raw_ostream &OS) {
  return true;
}

#endif // PRINT_ALIAS_INSTR
