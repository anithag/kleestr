//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void SPUAsmPrinter::printInstruction(const MachineInstr *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    536870923U,	// ABSDB
    536870930U,	// ADDXr32
    536870930U,	// ADDXr64
    536870930U,	// ADDXv2i64
    536870930U,	// ADDXv4i32
    1140850712U,	// ADJCALLSTACKDOWN
    1207959576U,	// ADJCALLSTACKUP
    537002009U,	// AHIr16
    537002009U,	// AHIvec
    536870942U,	// AHr16
    536870942U,	// AHv8i16
    537002018U,	// AIf32
    537002018U,	// AIr32
    537002018U,	// AIv4f32
    537002018U,	// AIv4i32
    537133094U,	// ANDBIr8
    537133094U,	// ANDBIv16i8
    536870957U,	// ANDCr128
    536870957U,	// ANDCr16
    536870957U,	// ANDCr32
    536870957U,	// ANDCr64
    536870957U,	// ANDCr8
    536870957U,	// ANDCv16i8
    536870957U,	// ANDCv16i8_conv
    536870957U,	// ANDCv2i64
    536870957U,	// ANDCv4i32
    536870957U,	// ANDCv8i16
    537133107U,	// ANDHIi8i16
    537133107U,	// ANDHIr16
    537002035U,	// ANDHIv8i16
    537002042U,	// ANDIi16i32
    537002042U,	// ANDIi8i32
    537002042U,	// ANDIr32
    537002042U,	// ANDIv4i32
    536870976U,	// ANDfabs32
    536870976U,	// ANDfabs64
    536870976U,	// ANDfabsvec
    536870976U,	// ANDi16i32
    536870976U,	// ANDr128
    536870976U,	// ANDr16
    536870976U,	// ANDr32
    536870976U,	// ANDr64
    536870976U,	// ANDr8
    536870976U,	// ANDv16i8
    536870976U,	// ANDv2i64
    536870976U,	// ANDv4i32
    536870976U,	// ANDv8i16
    536870981U,	// AVGB
    536870987U,	// Ar32
    536870987U,	// Av16i8
    536870987U,	// Av4i32
    536870990U,	// BGXvec
    536870995U,	// BGr32
    536870995U,	// BGr64
    536870995U,	// BGv2i64
    536870995U,	// BGv4i32
    738197591U,	// BI
    738197595U,	// BISL
    1610612838U,	// BISLED_00
    1610612838U,	// BISLED_0D
    1610612838U,	// BISLED_E0
    1610612838U,	// BISLED_ED
    2147483763U,	// BR
    2147483767U,	// BRA
    1610612860U,	// BRASL
    805306504U,	// BRHNZr16
    805306504U,	// BRHNZv8i16
    805306511U,	// BRHZr16
    805306511U,	// BRHZv8i16
    805306517U,	// BRNZr32
    805306517U,	// BRNZv4i32
    2147483803U,	// BRSL
    805306534U,	// BRZr32
    805306534U,	// BRZv4i32
    541065387U,	// CBD
    545259696U,	// CBX
    541065397U,	// CDD
    541065397U,	// CDDf64
    545259706U,	// CDX
    545259706U,	// CDXf64
    537002175U,	// CEQBIr8
    537002175U,	// CEQBIv16i8
    536871110U,	// CEQBr8
    536871110U,	// CEQBv16i8
    537002188U,	// CEQHIr16
    537002188U,	// CEQHIv8i16
    536871123U,	// CEQHr16
    536871123U,	// CEQHv8i16
    537002201U,	// CEQIr32
    537002201U,	// CEQIv4i32
    536871135U,	// CEQr32
    536871135U,	// CEQv4i32
    537919716U,	// CFSif32
    537919716U,	// CFSiv4f32
    537919723U,	// CFUif32
    537919723U,	// CFUiv4f32
    537002226U,	// CGTBIr8
    537002226U,	// CGTBIv16i8
    536871161U,	// CGTBr8
    536871161U,	// CGTBv16i8
    537002239U,	// CGTHIr16
    537002239U,	// CGTHIv8i16
    536871174U,	// CGTHr16
    536871174U,	// CGTHv8i16
    537002252U,	// CGTIf32
    537002252U,	// CGTIr32
    537002252U,	// CGTIv4f32
    537002252U,	// CGTIv4i32
    536871186U,	// CGTr32
    536871186U,	// CGTv4i32
    536871191U,	// CGr32
    536871191U,	// CGr64
    536871191U,	// CGv2i64
    536871191U,	// CGv4i32
    541065499U,	// CHD
    545259808U,	// CHX
    537002277U,	// CLGTBIr8
    537002277U,	// CLGTBIv16i8
    536871213U,	// CLGTBr8
    536871213U,	// CLGTBv16i8
    537002292U,	// CLGTHIr16
    537002292U,	// CLGTHIv8i16
    536871228U,	// CLGTHr16
    536871228U,	// CLGTHv8i16
    537002307U,	// CLGTIr32
    537002307U,	// CLGTIv4i32
    536871242U,	// CLGTr32
    536871242U,	// CLGTv4i32
    538968400U,	// CLZr32
    538968400U,	// CLZv4i32
    538968405U,	// CNTBv16i8
    538968405U,	// CNTBv4i32
    538968405U,	// CNTBv8i16
    537919835U,	// CSiFf32
    537919835U,	// CSiFv4f32
    537919842U,	// CUiFf32
    537919842U,	// CUiFv4f32
    541065577U,	// CWD
    541065577U,	// CWDf32
    545259886U,	// CWX
    545259886U,	// CWXf32
    536871283U,	// CellSDKa
    536871286U,	// CellSDKaddx
    536871292U,	// CellSDKah
    549847424U,	// CellSDKahi
    549847429U,	// CellSDKai
    536871305U,	// CellSDKand
    537133455U,	// CellSDKandbi
    536871319U,	// CellSDKandc
    537002398U,	// CellSDKandhi
    537002406U,	// CellSDKandi
    536871341U,	// CellSDKbg
    536871345U,	// CellSDKbgx
    536871350U,	// CellSDKceq
    536871356U,	// CellSDKceqb
    537133507U,	// CellSDKceqbi
    536871371U,	// CellSDKceqh
    537002450U,	// CellSDKceqhi
    537002458U,	// CellSDKceqi
    536871393U,	// CellSDKcg
    536871397U,	// CellSDKcgt
    536871403U,	// CellSDKcgtb
    537133554U,	// CellSDKcgtbi
    536871418U,	// CellSDKcgth
    537002497U,	// CellSDKcgthi
    537002505U,	// CellSDKcgti
    536871440U,	// CellSDKcgx
    536871445U,	// CellSDKclgt
    536871452U,	// CellSDKclgtb
    537133604U,	// CellSDKclgtbi
    536871469U,	// CellSDKclgth
    537002549U,	// CellSDKclgthi
    537002558U,	// CellSDKclgti
    536871494U,	// CellSDKdfa
    536871500U,	// CellSDKdfm
    536871506U,	// CellSDKdfma
    536871513U,	// CellSDKdfms
    536871520U,	// CellSDKdfnma
    536871528U,	// CellSDKdfnms
    536871536U,	// CellSDKdfs
    536871542U,	// CellSDKfa
    536871547U,	// CellSDKfceq
    536871554U,	// CellSDKfcgt
    536871561U,	// CellSDKfcmeq
    536871569U,	// CellSDKfcmgt
    536871577U,	// CellSDKfm
    536937118U,	// CellSDKfma
    536937124U,	// CellSDKfms
    536937130U,	// CellSDKfnms
    536871601U,	// CellSDKfs
    536871606U,	// CellSDKmpy
    536937147U,	// CellSDKmpya
    536871617U,	// CellSDKmpyh
    536871623U,	// CellSDKmpyhh
    536871630U,	// CellSDKmpyhha
    536871638U,	// CellSDKmpyhhau
    536871647U,	// CellSDKmpyhhu
    537002727U,	// CellSDKmpyi
    536871661U,	// CellSDKmpys
    536871667U,	// CellSDKmpyu
    537002745U,	// CellSDKmpyui
    536871680U,	// CellSDKnand
    536871687U,	// CellSDKnor
    536871693U,	// CellSDKor
    537133842U,	// CellSDKorbi
    536871705U,	// CellSDKorc
    537002784U,	// CellSDKorhi
    537002791U,	// CellSDKori
    536871725U,	// CellSDKsf
    536871729U,	// CellSDKsfh
    549847862U,	// CellSDKsfhi
    549847868U,	// CellSDKsfi
    536871745U,	// CellSDKsfx
    536871750U,	// CellSDKxor
    537133900U,	// CellSDKxorbi
    537002836U,	// CellSDKxorhi
    537002844U,	// CellSDKxori
    536871779U,	// DFNMSf64
    536871779U,	// DFNMSv2f64
    874U,	// ENOP
    536871790U,	// EQVr128
    536871790U,	// EQVr128_1
    536871790U,	// EQVr128_2
    536871790U,	// EQVr128_3
    536871790U,	// EQVr16
    536871790U,	// EQVr16_1
    536871790U,	// EQVr16_2
    536871790U,	// EQVr16_3
    536871790U,	// EQVr32
    536871790U,	// EQVr32_1
    536871790U,	// EQVr32_2
    536871790U,	// EQVr32_3
    536871790U,	// EQVr64
    536871790U,	// EQVr64_1
    536871790U,	// EQVr64_2
    536871790U,	// EQVr64_3
    536871790U,	// EQVr8
    536871790U,	// EQVr8_1
    536871790U,	// EQVr8_2
    536871790U,	// EQVr8_3
    536871790U,	// EQVv16i8
    536871790U,	// EQVv16i8_1
    536871790U,	// EQVv16i8_2
    536871790U,	// EQVv16i8_3
    536871790U,	// EQVv2i64
    536871790U,	// EQVv2i64_1
    536871790U,	// EQVv2i64_2
    536871790U,	// EQVv2i64_3
    536871790U,	// EQVv4i32
    536871790U,	// EQVv4i32_1
    536871790U,	// EQVv4i32_2
    536871790U,	// EQVv4i32_3
    536871790U,	// EQVv8i16
    536871790U,	// EQVv8i16_1
    536871790U,	// EQVv8i16_2
    536871790U,	// EQVv8i16_3
    536871795U,	// FAf32
    536871799U,	// FAf64
    536871799U,	// FAv2f64
    536871795U,	// FAv4f32
    536871804U,	// FCEQf32
    536871810U,	// FCGTf32
    536871816U,	// FCMEQf32
    536871823U,	// FCMGTf32
    538968982U,	// FESDf32
    538968982U,	// FESDvec
    536871836U,	// FIf32
    536871836U,	// FIv4f32
    536937376U,	// FMAf32
    536871845U,	// FMAf64
    536871845U,	// FMAv2f64
    536937376U,	// FMAv4f32
    536937387U,	// FMSf32
    536871856U,	// FMSf64
    536871856U,	// FMSv2f64
    536937387U,	// FMSv4f32
    536871862U,	// FMf32
    536871866U,	// FMf64
    536871866U,	// FMv2f64
    536871862U,	// FMv4f32
    536871871U,	// FNMAf64
    536871871U,	// FNMAv2f64
    536937414U,	// FNMSf32
    536937414U,	// FNMSv4f32
    538969036U,	// FRDSf64
    538969042U,	// FRESTf32
    538969042U,	// FRESTv4f32
    738198489U,	// FSCRRf32
    2684355553U,	// FSCRWf32
    538969065U,	// FSM64r16
    538969065U,	// FSM64r32
    553649134U,	// FSMBIv16i8
    553649134U,	// FSMBIv2i64
    553649134U,	// FSMBIv4i32
    553649134U,	// FSMBIv8i16
    538969077U,	// FSMBv16i8
    538969077U,	// FSMBv16i8_r16
    538969083U,	// FSMHv8i16
    538969083U,	// FSMHv8i16_r16
    538969065U,	// FSMr16
    538969065U,	// FSMr32
    538969065U,	// FSMv4i32
    536871937U,	// FSf32
    536871941U,	// FSf64
    536871941U,	// FSv2f64
    536871937U,	// FSv4f32
    538969098U,	// GBBv16i8
    538969098U,	// GBBv16i8_r16
    538969098U,	// GBBv16i8_r32
    538969103U,	// GBHv8i16
    538969103U,	// GBHv8i16_r16
    538969103U,	// GBHv8i16_r32
    538969108U,	// GBv4i32
    538969108U,	// GBv4i32_r16
    538969108U,	// GBv4i32_r32
    3242198040U,	// HBRA
    3556769816U,	// HBR_LABEL
    562037790U,	// HEQIr32
    538969124U,	// HEQr32
    562037801U,	// HGTIr32
    538969135U,	// HGTr32
    562037812U,	// HLGTIr32
    538969147U,	// HLGTr32
    566232129U,	// ILAf32
    566232129U,	// ILAf64
    570426433U,	// ILAhi
    574620737U,	// ILAlo
    578815041U,	// ILAlsa
    566232129U,	// ILAr32
    566232129U,	// ILAr64
    566232129U,	// ILAv2i64
    566232129U,	// ILAv4i32
    553649222U,	// ILHUf32
    570426438U,	// ILHUhi
    553649222U,	// ILHUr32
    553649222U,	// ILHUr64
    553649222U,	// ILHUv2i64
    553649222U,	// ILHUv4i32
    583009356U,	// ILHr16
    583009356U,	// ILHr8
    583009356U,	// ILHv8i16
    583009361U,	// ILf32
    583009361U,	// ILf64
    583009361U,	// ILr32
    583009361U,	// ILr64
    583009361U,	// ILv2i64
    583009361U,	// ILv4i32
    551552085U,	// IOHLf32
    587203669U,	// IOHLlo
    551552085U,	// IOHLr32
    591397973U,	// IOHLv2i64
    591397973U,	// IOHLv4i32
    1115U,	// LNOP
    595592288U,	// LQAf32
    595592288U,	// LQAf64
    595592288U,	// LQAr128
    595592288U,	// LQAr16
    595592288U,	// LQAr32
    595592288U,	// LQAr64
    595592288U,	// LQAr8
    595592288U,	// LQAv16i8
    595592288U,	// LQAv2f64
    595592288U,	// LQAv2i64
    595592288U,	// LQAv4f32
    595592288U,	// LQAv4i32
    595592288U,	// LQAv8i16
    599786597U,	// LQDf32
    599786597U,	// LQDf64
    599786597U,	// LQDr128
    599786597U,	// LQDr16
    599786597U,	// LQDr32
    599786597U,	// LQDr64
    599786597U,	// LQDr8
    599786597U,	// LQDv16i8
    599786597U,	// LQDv2f64
    599786597U,	// LQDv2i64
    599786597U,	// LQDv4f32
    599786597U,	// LQDv4i32
    599786597U,	// LQDv8i16
    545260650U,	// LQXf32
    545260650U,	// LQXf64
    545260650U,	// LQXr128
    545260650U,	// LQXr16
    545260650U,	// LQXr32
    545260650U,	// LQXr64
    545260650U,	// LQXr8
    545260650U,	// LQXv16i8
    545260650U,	// LQXv2f64
    545260650U,	// LQXv2i64
    545260650U,	// LQXv4f32
    545260650U,	// LQXv4i32
    545260650U,	// LQXv8i16
    538969199U,	// LRf32
    538969199U,	// LRf64
    538969199U,	// LRr128
    538969199U,	// LRr16
    538969199U,	// LRr32
    538969199U,	// LRr64
    538969199U,	// LRr8
    538969199U,	// LRv16i8
    538969199U,	// LRv2f64
    538969199U,	// LRv2i64
    538969199U,	// LRv4f32
    538969199U,	// LRv4i32
    538969199U,	// LRv8i16
    536937587U,	// MPYAr32
    536937587U,	// MPYAr32_sext
    536937587U,	// MPYAr32_sextinreg
    536937587U,	// MPYAv4i32
    536872057U,	// MPYHHAUr32
    536872057U,	// MPYHHAUvec
    536872066U,	// MPYHHAr32
    536872066U,	// MPYHHAvec
    536872074U,	// MPYHHUr32
    536872074U,	// MPYHHUv4i32
    536872082U,	// MPYHHr32
    536872082U,	// MPYHHv8i16
    536872089U,	// MPYHr32
    536872089U,	// MPYHv4i32
    537003167U,	// MPYIr16
    537003167U,	// MPYIvec
    536872101U,	// MPYSr16
    536872101U,	// MPYSv4i32
    537003179U,	// MPYUIr16
    537003179U,	// MPYUIvec
    536872114U,	// MPYUr16
    536872114U,	// MPYUr32
    536872114U,	// MPYUv4i32
    536872120U,	// MPYr16
    536872120U,	// MPYv8i16
    536872125U,	// NANDr128
    536872125U,	// NANDr16
    536872125U,	// NANDr32
    536872125U,	// NANDr64
    536872125U,	// NANDr8
    536872125U,	// NANDv16i8
    536872125U,	// NANDv2i64
    536872125U,	// NANDv4i32
    536872125U,	// NANDv8i16
    536872131U,	// NORr128
    536872131U,	// NORr16
    536872131U,	// NORr32
    536872131U,	// NORr64
    536872131U,	// NORr8
    536872131U,	// NORv16i8
    536872131U,	// NORv2i64
    536872131U,	// NORv4i32
    536872131U,	// NORv8i16
    537134280U,	// ORBIr8
    537134280U,	// ORBIv16i8
    536872142U,	// ORCr128
    536872142U,	// ORCr16
    536872142U,	// ORCr32
    536872142U,	// ORCr64
    536872142U,	// ORCr8
    536872142U,	// ORCv16i8
    536872142U,	// ORCv2i64
    536872142U,	// ORCv4i32
    536872142U,	// ORCv8i16
    537003219U,	// ORHIi8i16
    537134291U,	// ORHIr16
    537134291U,	// ORHIv8i16
    537003225U,	// ORIi16i32
    537003225U,	// ORIi8i32
    537134297U,	// ORIr32
    537134297U,	// ORIv4i32
    536872158U,	// ORXv4i32
    536872163U,	// ORf32
    536872163U,	// ORf64
    536872163U,	// ORr128
    536872163U,	// ORr16
    536872163U,	// ORr32
    536872163U,	// ORr64
    536872163U,	// ORr8
    536872163U,	// ORv16i8
    536872163U,	// ORv2f64
    536872163U,	// ORv2i64
    536872163U,	// ORv4f32
    536872163U,	// ORv4i32
    536872163U,	// ORv8i16
    1255U,	// RET
    537396462U,	// ROTHIr16
    537396462U,	// ROTHIr16_r32
    537396462U,	// ROTHIv8i16
    537527541U,	// ROTHMIr16
    537527541U,	// ROTHMIv8i16
    536872189U,	// ROTHMr16
    536872189U,	// ROTHMv8i16
    536872196U,	// ROTHr16
    536872196U,	// ROTHr16_r32
    536872196U,	// ROTHv8i16
    537396490U,	// ROTIr32
    537396490U,	// ROTIr32_i16
    537396490U,	// ROTIr32_i8
    537396490U,	// ROTIv4i32
    537396490U,	// ROTIv4i32_i16
    537396490U,	// ROTIv4i32_i8
    537527568U,	// ROTMAHIr16
    537527568U,	// ROTMAHIv8i16
    536872217U,	// ROTMAHr16
    536872217U,	// ROTMAHv8i16
    537658657U,	// ROTMAIr32_i32
    537658657U,	// ROTMAIr64_i32
    537658657U,	// ROTMAIv2i64_i32
    537658657U,	// ROTMAIv4i32_i32
    536872233U,	// ROTMAr32
    536872233U,	// ROTMAv4i32
    537658672U,	// ROTMIr32
    537658672U,	// ROTMIv4i32
    536872247U,	// ROTMr32
    536872247U,	// ROTMv4i32
    537396541U,	// ROTQBIIr128
    537396541U,	// ROTQBIIr64
    537396541U,	// ROTQBIIv16i8
    537396541U,	// ROTQBIIv2i64
    537396541U,	// ROTQBIIv4i32
    537396541U,	// ROTQBIIv8i16
    536872262U,	// ROTQBIr128
    536872262U,	// ROTQBIr64
    536872262U,	// ROTQBIv16i8
    536872262U,	// ROTQBIv2i64
    536872262U,	// ROTQBIv4i32
    536872262U,	// ROTQBIv8i16
    536872270U,	// ROTQBYBIv16i8_r32
    536872270U,	// ROTQBYBIv2i64_r32
    536872270U,	// ROTQBYBIv4i32_r32
    536872270U,	// ROTQBYBIv8i16_r32
    537396568U,	// ROTQBYIi128
    537396568U,	// ROTQBYIv16i8
    537396568U,	// ROTQBYIv2i64
    537396568U,	// ROTQBYIv4f32
    537396568U,	// ROTQBYIv4i32
    537396568U,	// ROTQBYIv8i16
    537396568U,	// ROTQBYIvfi64
    536872289U,	// ROTQBYi128
    536872289U,	// ROTQBYv16i8
    536872289U,	// ROTQBYv2f64
    536872289U,	// ROTQBYv2i64
    536872289U,	// ROTQBYv4f32
    536872289U,	// ROTQBYv4i32
    536872289U,	// ROTQBYv8i16
    537658729U,	// ROTQMBIIr128
    537658729U,	// ROTQMBIIr64
    537658729U,	// ROTQMBIIv16i8
    537658729U,	// ROTQMBIIv2i64
    537658729U,	// ROTQMBIIv4i32
    537658729U,	// ROTQMBIIv8i16
    536872307U,	// ROTQMBIr128
    536872307U,	// ROTQMBIr64
    536872307U,	// ROTQMBIv16i8
    536872307U,	// ROTQMBIv2i64
    536872307U,	// ROTQMBIv4i32
    536872307U,	// ROTQMBIv8i16
    536872316U,	// ROTQMBYBIr128
    536872316U,	// ROTQMBYBIv16i8
    536872316U,	// ROTQMBYBIv2i64
    536872316U,	// ROTQMBYBIv4i32
    536872316U,	// ROTQMBYBIv8i16
    537658759U,	// ROTQMBYIr128
    537658759U,	// ROTQMBYIr128_zext_r16
    537658759U,	// ROTQMBYIr128_zext_r32
    537658759U,	// ROTQMBYIr128_zext_r64
    537658759U,	// ROTQMBYIr128_zext_r8
    537658759U,	// ROTQMBYIr64
    537658759U,	// ROTQMBYIv16i8
    537658759U,	// ROTQMBYIv2i64
    537658759U,	// ROTQMBYIv4i32
    537658759U,	// ROTQMBYIv8i16
    536872337U,	// ROTQMBYr128
    536872337U,	// ROTQMBYr64
    536872337U,	// ROTQMBYv16i8
    536872337U,	// ROTQMBYv2i64
    536872337U,	// ROTQMBYv4i32
    536872337U,	// ROTQMBYv8i16
    536872346U,	// ROTr32
    536872346U,	// ROTr32_r16_anyext
    536872346U,	// ROTr32_r8_anyext
    536872346U,	// ROTv4i32
    536937887U,	// SELBf32_cond
    536937887U,	// SELBf64_cond
    536937887U,	// SELBr128
    536937887U,	// SELBr16
    536937887U,	// SELBr16_cond
    536937887U,	// SELBr32
    536937887U,	// SELBr32_cond
    536937887U,	// SELBr64
    536937887U,	// SELBr64_cond
    536937887U,	// SELBr8
    536937887U,	// SELBr8_cond
    536937887U,	// SELBv16i8
    536937887U,	// SELBv16i8_cond
    536937887U,	// SELBv16i8_vcond
    536937887U,	// SELBv2i64
    536937887U,	// SELBv2i64_cond
    536937887U,	// SELBv2i64_vcond
    536937887U,	// SELBv4f32_cond
    536937887U,	// SELBv4i32
    536937887U,	// SELBv4i32_cond
    536937887U,	// SELBv4i32_vcond
    536937887U,	// SELBv8i16
    536937887U,	// SELBv8i16_cond
    536937887U,	// SELBv8i16_vcond
    537003429U,	// SFHIr16
    537003429U,	// SFHIvec
    536872363U,	// SFHr16
    536872363U,	// SFHvec
    537003440U,	// SFIr32
    537003440U,	// SFIvec
    536872373U,	// SFXr32
    536872373U,	// SFXr64
    536872373U,	// SFXv2i64
    536872373U,	// SFXv4i32
    536872378U,	// SFr32
    536872378U,	// SFvec
    537396670U,	// SHLHIr16
    537396670U,	// SHLHIv8i16
    536872389U,	// SHLHr16
    536872389U,	// SHLHr16_r32
    536872389U,	// SHLHv8i16
    537396683U,	// SHLIr32
    537396683U,	// SHLIv4i32
    537396689U,	// SHLQBIIv16i8
    537396689U,	// SHLQBIIv2f64
    537396689U,	// SHLQBIIv2i64
    537396689U,	// SHLQBIIv4f32
    537396689U,	// SHLQBIIv4i32
    537396689U,	// SHLQBIIv8i16
    536872410U,	// SHLQBIr128
    536872410U,	// SHLQBIv16i8
    536872410U,	// SHLQBIv2f64
    536872410U,	// SHLQBIv2i64
    536872410U,	// SHLQBIv4f32
    536872410U,	// SHLQBIv4i32
    536872410U,	// SHLQBIv8i16
    536872418U,	// SHLQBYBIr128
    536872418U,	// SHLQBYBIv16i8
    536872418U,	// SHLQBYBIv2f64
    536872418U,	// SHLQBYBIv2i64
    536872418U,	// SHLQBYBIv4f32
    536872418U,	// SHLQBYBIv4i32
    536872418U,	// SHLQBYBIv8i16
    537396716U,	// SHLQBYIr128
    537396716U,	// SHLQBYIv16i8
    537396716U,	// SHLQBYIv2f64
    537396716U,	// SHLQBYIv2i64
    537396716U,	// SHLQBYIv4f32
    537396716U,	// SHLQBYIv4i32
    537396716U,	// SHLQBYIv8i16
    536872437U,	// SHLQBYr128
    536872437U,	// SHLQBYv16i8
    536872437U,	// SHLQBYv2f64
    536872437U,	// SHLQBYv2i64
    536872437U,	// SHLQBYv4f32
    536872437U,	// SHLQBYv4i32
    536872437U,	// SHLQBYv8i16
    536872445U,	// SHLr32
    536872445U,	// SHLv4i32
    536937986U,	// SHUFBgprc
    536937986U,	// SHUFBv16i8
    536937986U,	// SHUFBv16i8_m32
    536937986U,	// SHUFBv2f64
    536937986U,	// SHUFBv2f64_m32
    536937986U,	// SHUFBv2i64
    536937986U,	// SHUFBv2i64_m32
    536937986U,	// SHUFBv4f32
    536937986U,	// SHUFBv4f32_m32
    536937986U,	// SHUFBv4i32
    536937986U,	// SHUFBv4i32_m32
    536937986U,	// SHUFBv8i16
    536937986U,	// SHUFBv8i16_m32
    595592713U,	// STQAf32
    595592713U,	// STQAf64
    595592713U,	// STQAr128
    595592713U,	// STQAr16
    595592713U,	// STQAr32
    595592713U,	// STQAr64
    595592713U,	// STQAr8
    595592713U,	// STQAv16i8
    595592713U,	// STQAv2f64
    595592713U,	// STQAv2i64
    595592713U,	// STQAv4f32
    595592713U,	// STQAv4i32
    595592713U,	// STQAv8i16
    599787023U,	// STQDf32
    599787023U,	// STQDf64
    599787023U,	// STQDr128
    599787023U,	// STQDr16
    599787023U,	// STQDr32
    599787023U,	// STQDr64
    599787023U,	// STQDr8
    599787023U,	// STQDv16i8
    599787023U,	// STQDv2f64
    599787023U,	// STQDv2i64
    599787023U,	// STQDv4f32
    599787023U,	// STQDv4i32
    599787023U,	// STQDv8i16
    545261077U,	// STQXf32
    545261077U,	// STQXf64
    545261077U,	// STQXr128
    545261077U,	// STQXr16
    545261077U,	// STQXr32
    545261077U,	// STQXr64
    545261077U,	// STQXr8
    545261077U,	// STQXv16i8
    545261077U,	// STQXv2f64
    545261077U,	// STQXv2i64
    545261077U,	// STQXv4f32
    545261077U,	// STQXv4i32
    545261077U,	// STQXv8i16
    536872475U,	// SUMB
    537134625U,	// XORBIr8
    537134625U,	// XORBIv16i8
    537003560U,	// XORHIr16
    537134632U,	// XORHIv8i16
    537003567U,	// XORIr32
    537003567U,	// XORIv4i32
    536872501U,	// XORfneg32
    536872501U,	// XORfneg64
    536872501U,	// XORfnegvec
    536872501U,	// XORr128
    536872501U,	// XORr16
    536872501U,	// XORr32
    536872501U,	// XORr64
    536872501U,	// XORr8
    536872501U,	// XORv16i8
    536872501U,	// XORv2i64
    536872501U,	// XORv4i32
    536872501U,	// XORv8i16
    538969658U,	// XSBHr16
    538969658U,	// XSBHr32
    538969658U,	// XSBHr64
    538969658U,	// XSBHr8
    538969658U,	// XSBHv16i8
    538969664U,	// XSHWr16
    538969664U,	// XSHWr32
    538969664U,	// XSHWr64
    538969664U,	// XSHWv4i32
    538969670U,	// XSWDr64
    538969670U,	// XSWDr64_inreg
    538969670U,	// XSWDv2i64
    0U
  };

  const char *AsmStrs = 
    "DBG_VALUE\000absdb\t\000addx\t\000\000ahi\t\000ah\t\000ai\t\000andbi\t\000"
    "andc\t\000andhi\t\000andi\t\000and\t\000avgb\t\000a\t\000bgx\t\000bg\t\000"
    "bi\t\000bisl\t$lr, \000bisled\t$lr, \000br\t\000bra\t\000brasl\t$lr, \000"
    "brhnz\t\000brhz\t\000brnz\t\000brsl\t$lr, \000brz\t\000cbd\t\000cbx\t\000"
    "cdd\t\000cdx\t\000ceqbi\t\000ceqb\t\000ceqhi\t\000ceqh\t\000ceqi\t\000c"
    "eq\t\000cflts\t\000cfltu\t\000cgtbi\t\000cgtb\t\000cgthi\t\000cgth\t\000"
    "cgti\t\000cgt\t\000cg\t\000chd\t\000chx\t\000clgtbi\t\000clgtb\t\000clg"
    "thi\t\000clgth\t\000clgti\t\000clgt\t\000clz\t\000cntb\t\000csflt\t\000"
    "cuflt\t\000cwd\t\000cwx\t\000a \000addx \000ah \000ahi \000ai \000and\t"
    " \000andbi\t \000andc\t \000andhi\t \000andi\t \000bg \000bgx \000ceq\t"
    " \000ceqb\t \000ceqbi\t \000ceqh\t \000ceqhi\t \000ceqi\t \000cg \000cg"
    "t\t \000cgtb\t \000cgtbi\t \000cgth\t \000cgthi\t \000cgti\t \000cgx \000"
    "clgt\t \000clgtb\t \000clgtbi\t \000clgth\t \000clgthi\t \000clgti\t \000"
    "dfa\t \000dfm\t \000dfma\t \000dfms\t \000dfnma\t \000dfnms\t \000dfs\t"
    " \000fa\t \000fceq\t \000fcgt\t \000fcmeq\t \000fcmgt\t \000fm\t \000fm"
    "a\t \000fms\t \000fnms\t \000fs\t \000mpy \000mpya \000mpyh \000mpyhh \000"
    "mpyhha \000mpyhhau \000mpyhhu \000mpyi \000mpys \000mpyu \000mpyui \000"
    "nand\t \000nor\t \000or\t \000orbi\t \000addc\t \000orhi\t \000ori\t \000"
    "sf \000sfh \000sfhi \000sfi \000sfx \000xor\t \000xorbi\t \000xorhi\t \000"
    "xori\t \000dfnms\t\000nop\000eqv\t\000fa\t\000dfa\t\000fceq\t\000fcgt\t"
    "\000fcmeq\t\000fcmgt\t\000fesd\t\000fi\t\000fma\t\000dfma\t\000fms\t\000"
    "dfms\t\000fm\t\000dfm\t\000dfnma\t\000fnms\t\000frds\t\000frest\t\000fs"
    "crrd\t\000fscrwr\t\000fsm\t\000fsmbi\t\000fsmb\t\000fsmh\t\000fs\t\000d"
    "fs\t\000gbb\t\000gbh\t\000gb\t\000hbra\t\000heqi\t\000heq\t\000hgti\t\000"
    "hgt\t\000hlgti\t\000hlgt\t\000ila\t\000ilhu\t\000ilh\t\000il\t\000iohl\t"
    "\000lnop\000lqa\t\000lqd\t\000lqx\t\000lr\t\000mpya\t\000mpyhhau\t\000m"
    "pyhha\t\000mpyhhu\t\000mpyhh\t\000mpyh\t\000mpyi\t\000mpys\t\000mpyui\t"
    "\000mpyu\t\000mpy\t\000nand\t\000nor\t\000orbi\t\000orc\t\000orhi\t\000"
    "ori\t\000orx\t\000or\t\000bi\t$lr\000rothi\t\000rothmi\t\000rothm\t\000"
    "roth\t\000roti\t\000rotmahi\t\000rotmah\t\000rotmai\t\000rotma\t\000rot"
    "mi\t\000rotm\t\000rotqbii\t\000rotqbi\t\000rotqbybi\t\000rotqbyi\t\000r"
    "otqby\t\000rotqmbii\t\000rotqmbi\t\000rotqmbybi\t\000rotqmbyi\t\000rotq"
    "mby\t\000rot\t\000selb\t\000sfhi\t\000sfh\t\000sfi\t\000sfx\t\000sf\t\000"
    "shlhi\t\000shlh\t\000shli\t\000shlqbii\t\000shlqbi\t\000shlqbybi\t\000s"
    "hlqbyi\t\000shlqby\t\000shl\t\000shufb\t\000stqa\t\000stqd\t\000stqx\t\000"
    "sumb\t\000xorbi\t\000xorhi\t\000xori\t\000xor\t\000xsbh\t\000xshw\t\000"
    "xswd\t\000";

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 2047)-1;


  // Fragment 0 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 29) & 7) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, ENOP, LNOP, RET
    return;
    break;
  case 1:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP
    PrintSpecial(MI, O, "comment"); 
    break;
  case 3:
    // BISLED_00, BISLED_0D, BISLED_E0, BISLED_ED, BRASL
    printCallOperand(MI, 0, O); 
    return;
    break;
  case 4:
    // BR, BRA, BRSL
    printPCRelativeOperand(MI, 0, O); 
    return;
    break;
  case 5:
    // FSCRWf32
    printOperand(MI, 1, O); 
    return;
    break;
  case 6:
    // HBRA, HBR_LABEL
    printHBROperand(MI, 0, O); 
    break;
  }


  // Fragment 1 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 26) & 7) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    O << ", "; 
    break;
  case 1:
    // ADJCALLSTACKDOWN
    O << " ADJCALLSTACKDOWN"; 
    return;
    break;
  case 2:
    // ADJCALLSTACKUP
    O << " ADJCALLSTACKUP"; 
    return;
    break;
  case 3:
    // BI, BISL, FSCRRf32
    return;
    break;
  case 4:
    // BRHNZr16, BRHNZv8i16, BRHZr16, BRHZv8i16, BRNZr32, BRNZv4i32, BRZr32, ...
    O << ','; 
    printPCRelativeOperand(MI, 1, O); 
    return;
    break;
  case 5:
    // HBR_LABEL
    O << ":\t"; 
    PrintSpecial(MI, O, "comment"); 
    O << "branch hint target"; 
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 16 unique commands.
  switch ((Bits >> 22) & 15) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // CBD, CDD, CDDf64, CHD, CWD, CWDf32
    printShufAddr(MI, 1, O); 
    return;
    break;
  case 2:
    // CBX, CDX, CDXf64, CHX, CWX, CWXf32, LQXf32, LQXf64, LQXr128, LQXr16, L...
    printMemRegReg(MI, 1, O); 
    return;
    break;
  case 3:
    // CellSDKahi, CellSDKai, CellSDKsfhi, CellSDKsfi, IOHLf32, IOHLr32
    printOperand(MI, 2, O); 
    break;
  case 4:
    // FSMBIv16i8, FSMBIv2i64, FSMBIv4i32, FSMBIv8i16, ILHUf32, ILHUr32, ILHU...
    printU16ImmOperand(MI, 1, O); 
    return;
    break;
  case 5:
    // HBRA
    printPCRelativeOperand(MI, 1, O); 
    return;
    break;
  case 6:
    // HEQIr32, HGTIr32, HLGTIr32
    printS10ImmOperand(MI, 1, O); 
    return;
    break;
  case 7:
    // ILAf32, ILAf64, ILAr32, ILAr64, ILAv2i64, ILAv4i32
    printU18ImmOperand(MI, 1, O); 
    return;
    break;
  case 8:
    // ILAhi, ILHUhi
    printSymbolHi(MI, 1, O); 
    return;
    break;
  case 9:
    // ILAlo
    printSymbolLo(MI, 1, O); 
    return;
    break;
  case 10:
    // ILAlsa
    printSymbolLSA(MI, 1, O); 
    return;
    break;
  case 11:
    // ILHr16, ILHr8, ILHv8i16, ILf32, ILf64, ILr32, ILr64, ILv2i64, ILv4i32
    printS16ImmOperand(MI, 1, O); 
    return;
    break;
  case 12:
    // IOHLlo
    printSymbolLo(MI, 2, O); 
    return;
    break;
  case 13:
    // IOHLv2i64, IOHLv4i32
    printU16ImmOperand(MI, 2, O); 
    return;
    break;
  case 14:
    // LQAf32, LQAf64, LQAr128, LQAr16, LQAr32, LQAr64, LQAr8, LQAv16i8, LQAv...
    printAddr256K(MI, 1, O); 
    return;
    break;
  case 15:
    // LQDf32, LQDf64, LQDr128, LQDr16, LQDr32, LQDr64, LQDr8, LQDv16i8, LQDv...
    printDFormAddr(MI, 1, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 20) & 3) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    O << ", "; 
    break;
  case 1:
    // CFSif32, CFSiv4f32, CFUif32, CFUiv4f32, CSiFf32, CSiFv4f32, CUiFf32, C...
    O << ", 0"; 
    return;
    break;
  case 2:
    // CLZr32, CLZv4i32, CNTBv16i8, CNTBv4i32, CNTBv8i16, FESDf32, FESDvec, F...
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 17) & 7) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHr16, AHv8i16, ANDCr12...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // AHIr16, AHIvec, AIf32, AIr32, AIv4f32, AIv4i32, ANDHIv8i16, ANDIi16i32...
    printS10ImmOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // ANDBIr8, ANDBIv16i8, ANDHIi8i16, ANDHIr16, CellSDKandbi, CellSDKceqbi,...
    printU10ImmOperand(MI, 2, O); 
    return;
    break;
  case 3:
    // CellSDKahi, CellSDKai, CellSDKsfhi, CellSDKsfi
    printS10ImmOperand(MI, 1, O); 
    return;
    break;
  case 4:
    // ROTHIr16, ROTHIr16_r32, ROTHIv8i16, ROTIr32, ROTIr32_i16, ROTIr32_i8, ...
    printU7ImmOperand(MI, 2, O); 
    return;
    break;
  case 5:
    // ROTHMIr16, ROTHMIv8i16, ROTMAHIr16, ROTMAHIv8i16
    printROTHNeg7Imm(MI, 2, O); 
    return;
    break;
  case 6:
    // ROTMAIr32_i32, ROTMAIr64_i32, ROTMAIv2i64_i32, ROTMAIv4i32_i32, ROTMIr...
    printROTNeg7Imm(MI, 2, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 16) & 1) {
    // CellSDKfma, CellSDKfms, CellSDKfnms, CellSDKmpya, FMAf32, FMAv4f32, FM...
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
  } else {
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHr16, AHv8i16, ANDCr12...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *SPUAsmPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 129 && "Invalid register number!");

  static const unsigned RegAsmOffset[] = {
    0, 4, 8, 11, 14, 17, 20, 23, 26, 29, 32, 36, 40, 44, 
    48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 
    104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152, 156, 
    160, 164, 168, 172, 176, 180, 184, 188, 192, 196, 200, 204, 208, 212, 
    216, 220, 224, 228, 232, 236, 240, 244, 248, 252, 256, 260, 264, 268, 
    272, 276, 280, 284, 288, 292, 296, 300, 304, 308, 312, 316, 320, 324, 
    328, 332, 336, 340, 344, 348, 352, 356, 360, 364, 368, 372, 376, 380, 
    384, 388, 392, 397, 402, 407, 412, 417, 422, 427, 432, 437, 442, 447, 
    452, 457, 462, 467, 472, 477, 482, 487, 492, 497, 502, 507, 512, 517, 
    522, 527, 0
  };

  const char *AsmStrs =
    "$lr\000$sp\000$2\000$3\000$4\000$5\000$6\000$7\000$8\000$9\000$10\000$1"
    "1\000$12\000$13\000$14\000$15\000$16\000$17\000$18\000$19\000$20\000$21"
    "\000$22\000$23\000$24\000$25\000$26\000$27\000$28\000$29\000$30\000$31\000"
    "$32\000$33\000$34\000$35\000$36\000$37\000$38\000$39\000$40\000$41\000$"
    "42\000$43\000$44\000$45\000$46\000$47\000$48\000$49\000$50\000$51\000$5"
    "2\000$53\000$54\000$55\000$56\000$57\000$58\000$59\000$60\000$61\000$62"
    "\000$63\000$64\000$65\000$66\000$67\000$68\000$69\000$70\000$71\000$72\000"
    "$73\000$74\000$75\000$76\000$77\000$78\000$79\000$80\000$81\000$82\000$"
    "83\000$84\000$85\000$86\000$87\000$88\000$89\000$90\000$91\000$92\000$9"
    "3\000$94\000$95\000$96\000$97\000$98\000$99\000$100\000$101\000$102\000"
    "$103\000$104\000$105\000$106\000$107\000$108\000$109\000$110\000$111\000"
    "$112\000$113\000$114\000$115\000$116\000$117\000$118\000$119\000$120\000"
    "$121\000$122\000$123\000$124\000$125\000$126\000$127\000";
  return AsmStrs+RegAsmOffset[RegNo-1];
}


#ifdef GET_INSTRUCTION_NAME
#undef GET_INSTRUCTION_NAME

/// getInstructionName: This method is automatically generated by tblgen
/// from the instruction set description.  This returns the enum name of the
/// specified instruction.
const char *SPUAsmPrinter::getInstructionName(unsigned Opcode) {
  assert(Opcode < 754 && "Invalid instruction number!");

  static const unsigned InstAsmOffset[] = {
    0, 4, 14, 27, 36, 45, 50, 65, 79, 92, 106, 123, 133, 146, 
    151, 157, 165, 173, 183, 193, 210, 225, 232, 239, 245, 253, 259, 265, 
    273, 281, 289, 300, 309, 317, 325, 333, 340, 350, 365, 375, 385, 395, 
    406, 415, 426, 437, 447, 455, 465, 475, 485, 496, 506, 514, 521, 528, 
    535, 541, 550, 559, 568, 577, 582, 587, 594, 601, 608, 614, 620, 628, 
    636, 639, 644, 654, 664, 674, 684, 687, 691, 697, 706, 717, 725, 735, 
    743, 753, 758, 765, 774, 778, 782, 786, 793, 797, 804, 812, 823, 830, 
    840, 849, 860, 868, 878, 886, 896, 903, 912, 920, 930, 938, 948, 956, 
    967, 974, 984, 993, 1004, 1012, 1022, 1030, 1038, 1048, 1058, 1065, 1074, 1080, 
    1086, 1094, 1102, 1106, 1110, 1119, 1131, 1139, 1150, 1160, 1172, 1181, 1192, 1201, 
    1212, 1220, 1230, 1237, 1246, 1256, 1266, 1276, 1284, 1294, 1302, 1312, 1316, 1323, 
    1327, 1334, 1343, 1355, 1365, 1376, 1386, 1397, 1410, 1422, 1435, 1447, 1457, 1468, 
    1479, 1491, 1504, 1516, 1529, 1541, 1551, 1562, 1574, 1587, 1599, 1612, 1624, 1635, 
    1647, 1660, 1674, 1687, 1701, 1714, 1725, 1736, 1748, 1760, 1773, 1786, 1797, 1807, 
    1819, 1831, 1844, 1857, 1867, 1878, 1889, 1901, 1911, 1922, 1934, 1946, 1959, 1973, 
    1988, 2002, 2014, 2026, 2038, 2051, 2063, 2074, 2084, 2096, 2107, 2119, 2130, 2140, 
    2151, 2163, 2174, 2185, 2196, 2209, 2222, 2234, 2243, 2254, 2259, 2267, 2277, 2287, 
    2297, 2304, 2313, 2322, 2331, 2338, 2347, 2356, 2365, 2372, 2381, 2390, 2399, 2405, 
    2413, 2421, 2429, 2438, 2449, 2460, 2471, 2480, 2491, 2502, 2513, 2522, 2533, 2544, 
    2555, 2564, 2575, 2586, 2597, 2603, 2609, 2617, 2625, 2633, 2641, 2650, 2659, 2667, 
    2675, 2681, 2689, 2696, 2703, 2712, 2721, 2728, 2735, 2744, 2753, 2759, 2765, 2773, 
    2781, 2789, 2799, 2807, 2817, 2825, 2834, 2845, 2854, 2863, 2872, 2881, 2892, 2903, 
    2914, 2925, 2935, 2949, 2959, 2973, 2980, 2987, 2996, 3002, 3008, 3016, 3024, 3033, 
    3046, 3059, 3068, 3081, 3094, 3102, 3114, 3126, 3131, 3141, 3149, 3156, 3164, 3171, 
    3180, 3188, 3195, 3202, 3208, 3214, 3221, 3228, 3235, 3244, 3253, 3261, 3268, 3276, 
    3284, 3294, 3304, 3311, 3317, 3326, 3332, 3338, 3344, 3350, 3358, 3366, 3374, 3381, 
    3389, 3399, 3409, 3414, 3421, 3428, 3436, 3443, 3450, 3457, 3463, 3472, 3481, 3490, 
    3499, 3508, 3517, 3524, 3531, 3539, 3546, 3553, 3560, 3566, 3575, 3584, 3593, 3602, 
    3611, 3620, 3627, 3634, 3642, 3649, 3656, 3663, 3669, 3678, 3687, 3696, 3705, 3714, 
    3723, 3729, 3735, 3742, 3748, 3754, 3760, 3765, 3773, 3781, 3789, 3797, 3805, 3813, 
    3821, 3834, 3852, 3862, 3873, 3884, 3894, 3904, 3914, 3926, 3935, 3946, 3954, 3964, 
    3972, 3980, 3988, 3998, 4007, 4016, 4024, 4032, 4042, 4049, 4058, 4067, 4075, 4083, 
    4091, 4098, 4108, 4118, 4128, 4138, 4146, 4153, 4160, 4167, 4173, 4182, 4191, 4200, 
    4209, 4216, 4226, 4234, 4241, 4248, 4255, 4261, 4270, 4279, 4288, 4297, 4307, 4315, 
    4325, 4335, 4344, 4351, 4360, 4369, 4375, 4381, 4388, 4394, 4400, 4406, 4411, 4419, 
    4427, 4435, 4443, 4451, 4459, 4463, 4472, 4485, 4496, 4506, 4518, 4527, 4538, 4546, 
    4558, 4568, 4576, 4588, 4599, 4609, 4623, 4636, 4647, 4660, 4670, 4682, 4696, 4710, 
    4726, 4742, 4751, 4762, 4771, 4782, 4790, 4800, 4812, 4823, 4836, 4849, 4862, 4875, 
    4886, 4896, 4908, 4920, 4932, 4944, 4962, 4980, 4998, 5016, 5028, 5041, 5054, 5067, 
    5080, 5093, 5106, 5117, 5129, 5141, 5153, 5165, 5177, 5189, 5202, 5214, 5228, 5242, 
    5256, 5270, 5282, 5293, 5306, 5319, 5332, 5345, 5359, 5374, 5389, 5404, 5419, 5432, 
    5454, 5476, 5498, 5519, 5531, 5545, 5559, 5573, 5587, 5599, 5610, 5623, 5636, 5649, 
    5662, 5669, 5687, 5704, 5713, 5726, 5739, 5748, 5756, 5769, 5777, 5790, 5798, 5811, 
    5818, 5830, 5840, 5855, 5871, 5881, 5896, 5912, 5927, 5937, 5952, 5968, 5978, 5993, 
    6009, 6017, 6025, 6032, 6039, 6046, 6053, 6060, 6067, 6076, 6085, 6091, 6097, 6106, 
    6117, 6125, 6137, 6147, 6155, 6165, 6178, 6191, 6204, 6217, 6230, 6243, 6254, 6266, 
    6278, 6290, 6302, 6314, 6326, 6339, 6353, 6367, 6381, 6395, 6409, 6423, 6435, 6448, 
    6461, 6474, 6487, 6500, 6513, 6524, 6536, 6548, 6560, 6572, 6584, 6596, 6603, 6612, 
    6622, 6633, 6648, 6659, 6674, 6685, 6700, 6711, 6726, 6737, 6752, 6763, 6778, 6786, 
    6794, 6803, 6811, 6819, 6827, 6834, 6844, 6854, 6864, 6874, 6884, 6894, 6902, 6910, 
    6919, 6927, 6935, 6943, 6950, 6960, 6970, 6980, 6990, 7000, 7010, 7018, 7026, 7035, 
    7043, 7051, 7059, 7066, 7076, 7086, 7096, 7106, 7116, 7126, 7131, 7139, 7150, 7159, 
    7170, 7178, 7188, 7198, 7208, 7219, 7227, 7234, 7241, 7248, 7254, 7263, 7272, 7281, 
    7290, 7298, 7306, 7314, 7321, 7331, 7339, 7347, 7355, 7365, 7373, 7387, 0
  };

  const char *Strs =
    "PHI\000INLINEASM\000PROLOG_LABEL\000EH_LABEL\000GC_LABEL\000KILL\000EXT"
    "RACT_SUBREG\000INSERT_SUBREG\000IMPLICIT_DEF\000SUBREG_TO_REG\000COPY_T"
    "O_REGCLASS\000DBG_VALUE\000REG_SEQUENCE\000COPY\000ABSDB\000ADDXr32\000"
    "ADDXr64\000ADDXv2i64\000ADDXv4i32\000ADJCALLSTACKDOWN\000ADJCALLSTACKUP"
    "\000AHIr16\000AHIvec\000AHr16\000AHv8i16\000AIf32\000AIr32\000AIv4f32\000"
    "AIv4i32\000ANDBIr8\000ANDBIv16i8\000ANDCr128\000ANDCr16\000ANDCr32\000A"
    "NDCr64\000ANDCr8\000ANDCv16i8\000ANDCv16i8_conv\000ANDCv2i64\000ANDCv4i"
    "32\000ANDCv8i16\000ANDHIi8i16\000ANDHIr16\000ANDHIv8i16\000ANDIi16i32\000"
    "ANDIi8i32\000ANDIr32\000ANDIv4i32\000ANDfabs32\000ANDfabs64\000ANDfabsv"
    "ec\000ANDi16i32\000ANDr128\000ANDr16\000ANDr32\000ANDr64\000ANDr8\000AN"
    "Dv16i8\000ANDv2i64\000ANDv4i32\000ANDv8i16\000AVGB\000Ar32\000Av16i8\000"
    "Av4i32\000BGXvec\000BGr32\000BGr64\000BGv2i64\000BGv4i32\000BI\000BISL\000"
    "BISLED_00\000BISLED_0D\000BISLED_E0\000BISLED_ED\000BR\000BRA\000BRASL\000"
    "BRHNZr16\000BRHNZv8i16\000BRHZr16\000BRHZv8i16\000BRNZr32\000BRNZv4i32\000"
    "BRSL\000BRZr32\000BRZv4i32\000CBD\000CBX\000CDD\000CDDf64\000CDX\000CDX"
    "f64\000CEQBIr8\000CEQBIv16i8\000CEQBr8\000CEQBv16i8\000CEQHIr16\000CEQH"
    "Iv8i16\000CEQHr16\000CEQHv8i16\000CEQIr32\000CEQIv4i32\000CEQr32\000CEQ"
    "v4i32\000CFSif32\000CFSiv4f32\000CFUif32\000CFUiv4f32\000CGTBIr8\000CGT"
    "BIv16i8\000CGTBr8\000CGTBv16i8\000CGTHIr16\000CGTHIv8i16\000CGTHr16\000"
    "CGTHv8i16\000CGTIf32\000CGTIr32\000CGTIv4f32\000CGTIv4i32\000CGTr32\000"
    "CGTv4i32\000CGr32\000CGr64\000CGv2i64\000CGv4i32\000CHD\000CHX\000CLGTB"
    "Ir8\000CLGTBIv16i8\000CLGTBr8\000CLGTBv16i8\000CLGTHIr16\000CLGTHIv8i16"
    "\000CLGTHr16\000CLGTHv8i16\000CLGTIr32\000CLGTIv4i32\000CLGTr32\000CLGT"
    "v4i32\000CLZr32\000CLZv4i32\000CNTBv16i8\000CNTBv4i32\000CNTBv8i16\000C"
    "SiFf32\000CSiFv4f32\000CUiFf32\000CUiFv4f32\000CWD\000CWDf32\000CWX\000"
    "CWXf32\000CellSDKa\000CellSDKaddx\000CellSDKah\000CellSDKahi\000CellSDK"
    "ai\000CellSDKand\000CellSDKandbi\000CellSDKandc\000CellSDKandhi\000Cell"
    "SDKandi\000CellSDKbg\000CellSDKbgx\000CellSDKceq\000CellSDKceqb\000Cell"
    "SDKceqbi\000CellSDKceqh\000CellSDKceqhi\000CellSDKceqi\000CellSDKcg\000"
    "CellSDKcgt\000CellSDKcgtb\000CellSDKcgtbi\000CellSDKcgth\000CellSDKcgth"
    "i\000CellSDKcgti\000CellSDKcgx\000CellSDKclgt\000CellSDKclgtb\000CellSD"
    "Kclgtbi\000CellSDKclgth\000CellSDKclgthi\000CellSDKclgti\000CellSDKdfa\000"
    "CellSDKdfm\000CellSDKdfma\000CellSDKdfms\000CellSDKdfnma\000CellSDKdfnm"
    "s\000CellSDKdfs\000CellSDKfa\000CellSDKfceq\000CellSDKfcgt\000CellSDKfc"
    "meq\000CellSDKfcmgt\000CellSDKfm\000CellSDKfma\000CellSDKfms\000CellSDK"
    "fnms\000CellSDKfs\000CellSDKmpy\000CellSDKmpya\000CellSDKmpyh\000CellSD"
    "Kmpyhh\000CellSDKmpyhha\000CellSDKmpyhhau\000CellSDKmpyhhu\000CellSDKmp"
    "yi\000CellSDKmpys\000CellSDKmpyu\000CellSDKmpyui\000CellSDKnand\000Cell"
    "SDKnor\000CellSDKor\000CellSDKorbi\000CellSDKorc\000CellSDKorhi\000Cell"
    "SDKori\000CellSDKsf\000CellSDKsfh\000CellSDKsfhi\000CellSDKsfi\000CellS"
    "DKsfx\000CellSDKxor\000CellSDKxorbi\000CellSDKxorhi\000CellSDKxori\000D"
    "FNMSf64\000DFNMSv2f64\000ENOP\000EQVr128\000EQVr128_1\000EQVr128_2\000E"
    "QVr128_3\000EQVr16\000EQVr16_1\000EQVr16_2\000EQVr16_3\000EQVr32\000EQV"
    "r32_1\000EQVr32_2\000EQVr32_3\000EQVr64\000EQVr64_1\000EQVr64_2\000EQVr"
    "64_3\000EQVr8\000EQVr8_1\000EQVr8_2\000EQVr8_3\000EQVv16i8\000EQVv16i8_"
    "1\000EQVv16i8_2\000EQVv16i8_3\000EQVv2i64\000EQVv2i64_1\000EQVv2i64_2\000"
    "EQVv2i64_3\000EQVv4i32\000EQVv4i32_1\000EQVv4i32_2\000EQVv4i32_3\000EQV"
    "v8i16\000EQVv8i16_1\000EQVv8i16_2\000EQVv8i16_3\000FAf32\000FAf64\000FA"
    "v2f64\000FAv4f32\000FCEQf32\000FCGTf32\000FCMEQf32\000FCMGTf32\000FESDf"
    "32\000FESDvec\000FIf32\000FIv4f32\000FMAf32\000FMAf64\000FMAv2f64\000FM"
    "Av4f32\000FMSf32\000FMSf64\000FMSv2f64\000FMSv4f32\000FMf32\000FMf64\000"
    "FMv2f64\000FMv4f32\000FNMAf64\000FNMAv2f64\000FNMSf32\000FNMSv4f32\000F"
    "RDSf64\000FRESTf32\000FRESTv4f32\000FSCRRf32\000FSCRWf32\000FSM64r16\000"
    "FSM64r32\000FSMBIv16i8\000FSMBIv2i64\000FSMBIv4i32\000FSMBIv8i16\000FSM"
    "Bv16i8\000FSMBv16i8_r16\000FSMHv8i16\000FSMHv8i16_r16\000FSMr16\000FSMr"
    "32\000FSMv4i32\000FSf32\000FSf64\000FSv2f64\000FSv4f32\000GBBv16i8\000G"
    "BBv16i8_r16\000GBBv16i8_r32\000GBHv8i16\000GBHv8i16_r16\000GBHv8i16_r32"
    "\000GBv4i32\000GBv4i32_r16\000GBv4i32_r32\000HBRA\000HBR_LABEL\000HEQIr"
    "32\000HEQr32\000HGTIr32\000HGTr32\000HLGTIr32\000HLGTr32\000ILAf32\000I"
    "LAf64\000ILAhi\000ILAlo\000ILAlsa\000ILAr32\000ILAr64\000ILAv2i64\000IL"
    "Av4i32\000ILHUf32\000ILHUhi\000ILHUr32\000ILHUr64\000ILHUv2i64\000ILHUv"
    "4i32\000ILHr16\000ILHr8\000ILHv8i16\000ILf32\000ILf64\000ILr32\000ILr64"
    "\000ILv2i64\000ILv4i32\000IOHLf32\000IOHLlo\000IOHLr32\000IOHLv2i64\000"
    "IOHLv4i32\000LNOP\000LQAf32\000LQAf64\000LQAr128\000LQAr16\000LQAr32\000"
    "LQAr64\000LQAr8\000LQAv16i8\000LQAv2f64\000LQAv2i64\000LQAv4f32\000LQAv"
    "4i32\000LQAv8i16\000LQDf32\000LQDf64\000LQDr128\000LQDr16\000LQDr32\000"
    "LQDr64\000LQDr8\000LQDv16i8\000LQDv2f64\000LQDv2i64\000LQDv4f32\000LQDv"
    "4i32\000LQDv8i16\000LQXf32\000LQXf64\000LQXr128\000LQXr16\000LQXr32\000"
    "LQXr64\000LQXr8\000LQXv16i8\000LQXv2f64\000LQXv2i64\000LQXv4f32\000LQXv"
    "4i32\000LQXv8i16\000LRf32\000LRf64\000LRr128\000LRr16\000LRr32\000LRr64"
    "\000LRr8\000LRv16i8\000LRv2f64\000LRv2i64\000LRv4f32\000LRv4i32\000LRv8"
    "i16\000MPYAr32\000MPYAr32_sext\000MPYAr32_sextinreg\000MPYAv4i32\000MPY"
    "HHAUr32\000MPYHHAUvec\000MPYHHAr32\000MPYHHAvec\000MPYHHUr32\000MPYHHUv"
    "4i32\000MPYHHr32\000MPYHHv8i16\000MPYHr32\000MPYHv4i32\000MPYIr16\000MP"
    "YIvec\000MPYSr16\000MPYSv4i32\000MPYUIr16\000MPYUIvec\000MPYUr16\000MPY"
    "Ur32\000MPYUv4i32\000MPYr16\000MPYv8i16\000NANDr128\000NANDr16\000NANDr"
    "32\000NANDr64\000NANDr8\000NANDv16i8\000NANDv2i64\000NANDv4i32\000NANDv"
    "8i16\000NORr128\000NORr16\000NORr32\000NORr64\000NORr8\000NORv16i8\000N"
    "ORv2i64\000NORv4i32\000NORv8i16\000ORBIr8\000ORBIv16i8\000ORCr128\000OR"
    "Cr16\000ORCr32\000ORCr64\000ORCr8\000ORCv16i8\000ORCv2i64\000ORCv4i32\000"
    "ORCv8i16\000ORHIi8i16\000ORHIr16\000ORHIv8i16\000ORIi16i32\000ORIi8i32\000"
    "ORIr32\000ORIv4i32\000ORXv4i32\000ORf32\000ORf64\000ORr128\000ORr16\000"
    "ORr32\000ORr64\000ORr8\000ORv16i8\000ORv2f64\000ORv2i64\000ORv4f32\000O"
    "Rv4i32\000ORv8i16\000RET\000ROTHIr16\000ROTHIr16_r32\000ROTHIv8i16\000R"
    "OTHMIr16\000ROTHMIv8i16\000ROTHMr16\000ROTHMv8i16\000ROTHr16\000ROTHr16"
    "_r32\000ROTHv8i16\000ROTIr32\000ROTIr32_i16\000ROTIr32_i8\000ROTIv4i32\000"
    "ROTIv4i32_i16\000ROTIv4i32_i8\000ROTMAHIr16\000ROTMAHIv8i16\000ROTMAHr1"
    "6\000ROTMAHv8i16\000ROTMAIr32_i32\000ROTMAIr64_i32\000ROTMAIv2i64_i32\000"
    "ROTMAIv4i32_i32\000ROTMAr32\000ROTMAv4i32\000ROTMIr32\000ROTMIv4i32\000"
    "ROTMr32\000ROTMv4i32\000ROTQBIIr128\000ROTQBIIr64\000ROTQBIIv16i8\000RO"
    "TQBIIv2i64\000ROTQBIIv4i32\000ROTQBIIv8i16\000ROTQBIr128\000ROTQBIr64\000"
    "ROTQBIv16i8\000ROTQBIv2i64\000ROTQBIv4i32\000ROTQBIv8i16\000ROTQBYBIv16"
    "i8_r32\000ROTQBYBIv2i64_r32\000ROTQBYBIv4i32_r32\000ROTQBYBIv8i16_r32\000"
    "ROTQBYIi128\000ROTQBYIv16i8\000ROTQBYIv2i64\000ROTQBYIv4f32\000ROTQBYIv"
    "4i32\000ROTQBYIv8i16\000ROTQBYIvfi64\000ROTQBYi128\000ROTQBYv16i8\000RO"
    "TQBYv2f64\000ROTQBYv2i64\000ROTQBYv4f32\000ROTQBYv4i32\000ROTQBYv8i16\000"
    "ROTQMBIIr128\000ROTQMBIIr64\000ROTQMBIIv16i8\000ROTQMBIIv2i64\000ROTQMB"
    "IIv4i32\000ROTQMBIIv8i16\000ROTQMBIr128\000ROTQMBIr64\000ROTQMBIv16i8\000"
    "ROTQMBIv2i64\000ROTQMBIv4i32\000ROTQMBIv8i16\000ROTQMBYBIr128\000ROTQMB"
    "YBIv16i8\000ROTQMBYBIv2i64\000ROTQMBYBIv4i32\000ROTQMBYBIv8i16\000ROTQM"
    "BYIr128\000ROTQMBYIr128_zext_r16\000ROTQMBYIr128_zext_r32\000ROTQMBYIr1"
    "28_zext_r64\000ROTQMBYIr128_zext_r8\000ROTQMBYIr64\000ROTQMBYIv16i8\000"
    "ROTQMBYIv2i64\000ROTQMBYIv4i32\000ROTQMBYIv8i16\000ROTQMBYr128\000ROTQM"
    "BYr64\000ROTQMBYv16i8\000ROTQMBYv2i64\000ROTQMBYv4i32\000ROTQMBYv8i16\000"
    "ROTr32\000ROTr32_r16_anyext\000ROTr32_r8_anyext\000ROTv4i32\000SELBf32_"
    "cond\000SELBf64_cond\000SELBr128\000SELBr16\000SELBr16_cond\000SELBr32\000"
    "SELBr32_cond\000SELBr64\000SELBr64_cond\000SELBr8\000SELBr8_cond\000SEL"
    "Bv16i8\000SELBv16i8_cond\000SELBv16i8_vcond\000SELBv2i64\000SELBv2i64_c"
    "ond\000SELBv2i64_vcond\000SELBv4f32_cond\000SELBv4i32\000SELBv4i32_cond"
    "\000SELBv4i32_vcond\000SELBv8i16\000SELBv8i16_cond\000SELBv8i16_vcond\000"
    "SFHIr16\000SFHIvec\000SFHr16\000SFHvec\000SFIr32\000SFIvec\000SFXr32\000"
    "SFXr64\000SFXv2i64\000SFXv4i32\000SFr32\000SFvec\000SHLHIr16\000SHLHIv8"
    "i16\000SHLHr16\000SHLHr16_r32\000SHLHv8i16\000SHLIr32\000SHLIv4i32\000S"
    "HLQBIIv16i8\000SHLQBIIv2f64\000SHLQBIIv2i64\000SHLQBIIv4f32\000SHLQBIIv"
    "4i32\000SHLQBIIv8i16\000SHLQBIr128\000SHLQBIv16i8\000SHLQBIv2f64\000SHL"
    "QBIv2i64\000SHLQBIv4f32\000SHLQBIv4i32\000SHLQBIv8i16\000SHLQBYBIr128\000"
    "SHLQBYBIv16i8\000SHLQBYBIv2f64\000SHLQBYBIv2i64\000SHLQBYBIv4f32\000SHL"
    "QBYBIv4i32\000SHLQBYBIv8i16\000SHLQBYIr128\000SHLQBYIv16i8\000SHLQBYIv2"
    "f64\000SHLQBYIv2i64\000SHLQBYIv4f32\000SHLQBYIv4i32\000SHLQBYIv8i16\000"
    "SHLQBYr128\000SHLQBYv16i8\000SHLQBYv2f64\000SHLQBYv2i64\000SHLQBYv4f32\000"
    "SHLQBYv4i32\000SHLQBYv8i16\000SHLr32\000SHLv4i32\000SHUFBgprc\000SHUFBv"
    "16i8\000SHUFBv16i8_m32\000SHUFBv2f64\000SHUFBv2f64_m32\000SHUFBv2i64\000"
    "SHUFBv2i64_m32\000SHUFBv4f32\000SHUFBv4f32_m32\000SHUFBv4i32\000SHUFBv4"
    "i32_m32\000SHUFBv8i16\000SHUFBv8i16_m32\000STQAf32\000STQAf64\000STQAr1"
    "28\000STQAr16\000STQAr32\000STQAr64\000STQAr8\000STQAv16i8\000STQAv2f64"
    "\000STQAv2i64\000STQAv4f32\000STQAv4i32\000STQAv8i16\000STQDf32\000STQD"
    "f64\000STQDr128\000STQDr16\000STQDr32\000STQDr64\000STQDr8\000STQDv16i8"
    "\000STQDv2f64\000STQDv2i64\000STQDv4f32\000STQDv4i32\000STQDv8i16\000ST"
    "QXf32\000STQXf64\000STQXr128\000STQXr16\000STQXr32\000STQXr64\000STQXr8"
    "\000STQXv16i8\000STQXv2f64\000STQXv2i64\000STQXv4f32\000STQXv4i32\000ST"
    "QXv8i16\000SUMB\000XORBIr8\000XORBIv16i8\000XORHIr16\000XORHIv8i16\000X"
    "ORIr32\000XORIv4i32\000XORfneg32\000XORfneg64\000XORfnegvec\000XORr128\000"
    "XORr16\000XORr32\000XORr64\000XORr8\000XORv16i8\000XORv2i64\000XORv4i32"
    "\000XORv8i16\000XSBHr16\000XSBHr32\000XSBHr64\000XSBHr8\000XSBHv16i8\000"
    "XSHWr16\000XSHWr32\000XSHWr64\000XSHWv4i32\000XSWDr64\000XSWDr64_inreg\000"
    "XSWDv2i64\000";
  return Strs+InstAsmOffset[Opcode];
}

#endif

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

namespace { // Register classes
  enum RegClass {
    RC_GPRC,
    RC_R16C,
    RC_R32C,
    RC_R32FP,
    RC_R64C,
    RC_R64FP,
    RC_R8C,
    RC_VECREG
  };
} // end anonymous namespace

static bool regIsInRegisterClass(unsigned RegClass, unsigned Reg) {
  switch (RegClass) {
  default: break;
  case RC_GPRC:
    switch (Reg) {
    default: break;
    case SPU::R3:
    case SPU::R4:
    case SPU::R5:
    case SPU::R6:
    case SPU::R7:
    case SPU::R8:
    case SPU::R9:
    case SPU::R10:
    case SPU::R11:
    case SPU::R12:
    case SPU::R13:
    case SPU::R14:
    case SPU::R15:
    case SPU::R16:
    case SPU::R17:
    case SPU::R18:
    case SPU::R19:
    case SPU::R20:
    case SPU::R21:
    case SPU::R22:
    case SPU::R23:
    case SPU::R24:
    case SPU::R25:
    case SPU::R26:
    case SPU::R27:
    case SPU::R28:
    case SPU::R29:
    case SPU::R30:
    case SPU::R31:
    case SPU::R32:
    case SPU::R33:
    case SPU::R34:
    case SPU::R35:
    case SPU::R36:
    case SPU::R37:
    case SPU::R38:
    case SPU::R39:
    case SPU::R40:
    case SPU::R41:
    case SPU::R42:
    case SPU::R43:
    case SPU::R44:
    case SPU::R45:
    case SPU::R46:
    case SPU::R47:
    case SPU::R48:
    case SPU::R49:
    case SPU::R50:
    case SPU::R51:
    case SPU::R52:
    case SPU::R53:
    case SPU::R54:
    case SPU::R55:
    case SPU::R56:
    case SPU::R57:
    case SPU::R58:
    case SPU::R59:
    case SPU::R60:
    case SPU::R61:
    case SPU::R62:
    case SPU::R63:
    case SPU::R64:
    case SPU::R65:
    case SPU::R66:
    case SPU::R67:
    case SPU::R68:
    case SPU::R69:
    case SPU::R70:
    case SPU::R71:
    case SPU::R72:
    case SPU::R73:
    case SPU::R74:
    case SPU::R75:
    case SPU::R76:
    case SPU::R77:
    case SPU::R78:
    case SPU::R79:
    case SPU::R127:
    case SPU::R126:
    case SPU::R125:
    case SPU::R124:
    case SPU::R123:
    case SPU::R122:
    case SPU::R121:
    case SPU::R120:
    case SPU::R119:
    case SPU::R118:
    case SPU::R117:
    case SPU::R116:
    case SPU::R115:
    case SPU::R114:
    case SPU::R113:
    case SPU::R112:
    case SPU::R111:
    case SPU::R110:
    case SPU::R109:
    case SPU::R108:
    case SPU::R107:
    case SPU::R106:
    case SPU::R105:
    case SPU::R104:
    case SPU::R103:
    case SPU::R102:
    case SPU::R101:
    case SPU::R100:
    case SPU::R99:
    case SPU::R98:
    case SPU::R97:
    case SPU::R96:
    case SPU::R95:
    case SPU::R94:
    case SPU::R93:
    case SPU::R92:
    case SPU::R91:
    case SPU::R90:
    case SPU::R89:
    case SPU::R88:
    case SPU::R87:
    case SPU::R86:
    case SPU::R85:
    case SPU::R84:
    case SPU::R83:
    case SPU::R82:
    case SPU::R81:
    case SPU::R80:
    case SPU::R2:
    case SPU::R1:
    case SPU::R0:
      return true;
    }
    break;
  case RC_R16C:
    switch (Reg) {
    default: break;
    case SPU::R3:
    case SPU::R4:
    case SPU::R5:
    case SPU::R6:
    case SPU::R7:
    case SPU::R8:
    case SPU::R9:
    case SPU::R10:
    case SPU::R11:
    case SPU::R12:
    case SPU::R13:
    case SPU::R14:
    case SPU::R15:
    case SPU::R16:
    case SPU::R17:
    case SPU::R18:
    case SPU::R19:
    case SPU::R20:
    case SPU::R21:
    case SPU::R22:
    case SPU::R23:
    case SPU::R24:
    case SPU::R25:
    case SPU::R26:
    case SPU::R27:
    case SPU::R28:
    case SPU::R29:
    case SPU::R30:
    case SPU::R31:
    case SPU::R32:
    case SPU::R33:
    case SPU::R34:
    case SPU::R35:
    case SPU::R36:
    case SPU::R37:
    case SPU::R38:
    case SPU::R39:
    case SPU::R40:
    case SPU::R41:
    case SPU::R42:
    case SPU::R43:
    case SPU::R44:
    case SPU::R45:
    case SPU::R46:
    case SPU::R47:
    case SPU::R48:
    case SPU::R49:
    case SPU::R50:
    case SPU::R51:
    case SPU::R52:
    case SPU::R53:
    case SPU::R54:
    case SPU::R55:
    case SPU::R56:
    case SPU::R57:
    case SPU::R58:
    case SPU::R59:
    case SPU::R60:
    case SPU::R61:
    case SPU::R62:
    case SPU::R63:
    case SPU::R64:
    case SPU::R65:
    case SPU::R66:
    case SPU::R67:
    case SPU::R68:
    case SPU::R69:
    case SPU::R70:
    case SPU::R71:
    case SPU::R72:
    case SPU::R73:
    case SPU::R74:
    case SPU::R75:
    case SPU::R76:
    case SPU::R77:
    case SPU::R78:
    case SPU::R79:
    case SPU::R127:
    case SPU::R126:
    case SPU::R125:
    case SPU::R124:
    case SPU::R123:
    case SPU::R122:
    case SPU::R121:
    case SPU::R120:
    case SPU::R119:
    case SPU::R118:
    case SPU::R117:
    case SPU::R116:
    case SPU::R115:
    case SPU::R114:
    case SPU::R113:
    case SPU::R112:
    case SPU::R111:
    case SPU::R110:
    case SPU::R109:
    case SPU::R108:
    case SPU::R107:
    case SPU::R106:
    case SPU::R105:
    case SPU::R104:
    case SPU::R103:
    case SPU::R102:
    case SPU::R101:
    case SPU::R100:
    case SPU::R99:
    case SPU::R98:
    case SPU::R97:
    case SPU::R96:
    case SPU::R95:
    case SPU::R94:
    case SPU::R93:
    case SPU::R92:
    case SPU::R91:
    case SPU::R90:
    case SPU::R89:
    case SPU::R88:
    case SPU::R87:
    case SPU::R86:
    case SPU::R85:
    case SPU::R84:
    case SPU::R83:
    case SPU::R82:
    case SPU::R81:
    case SPU::R80:
    case SPU::R2:
    case SPU::R1:
    case SPU::R0:
      return true;
    }
    break;
  case RC_R32C:
    switch (Reg) {
    default: break;
    case SPU::R3:
    case SPU::R4:
    case SPU::R5:
    case SPU::R6:
    case SPU::R7:
    case SPU::R8:
    case SPU::R9:
    case SPU::R10:
    case SPU::R11:
    case SPU::R12:
    case SPU::R13:
    case SPU::R14:
    case SPU::R15:
    case SPU::R16:
    case SPU::R17:
    case SPU::R18:
    case SPU::R19:
    case SPU::R20:
    case SPU::R21:
    case SPU::R22:
    case SPU::R23:
    case SPU::R24:
    case SPU::R25:
    case SPU::R26:
    case SPU::R27:
    case SPU::R28:
    case SPU::R29:
    case SPU::R30:
    case SPU::R31:
    case SPU::R32:
    case SPU::R33:
    case SPU::R34:
    case SPU::R35:
    case SPU::R36:
    case SPU::R37:
    case SPU::R38:
    case SPU::R39:
    case SPU::R40:
    case SPU::R41:
    case SPU::R42:
    case SPU::R43:
    case SPU::R44:
    case SPU::R45:
    case SPU::R46:
    case SPU::R47:
    case SPU::R48:
    case SPU::R49:
    case SPU::R50:
    case SPU::R51:
    case SPU::R52:
    case SPU::R53:
    case SPU::R54:
    case SPU::R55:
    case SPU::R56:
    case SPU::R57:
    case SPU::R58:
    case SPU::R59:
    case SPU::R60:
    case SPU::R61:
    case SPU::R62:
    case SPU::R63:
    case SPU::R64:
    case SPU::R65:
    case SPU::R66:
    case SPU::R67:
    case SPU::R68:
    case SPU::R69:
    case SPU::R70:
    case SPU::R71:
    case SPU::R72:
    case SPU::R73:
    case SPU::R74:
    case SPU::R75:
    case SPU::R76:
    case SPU::R77:
    case SPU::R78:
    case SPU::R79:
    case SPU::R127:
    case SPU::R126:
    case SPU::R125:
    case SPU::R124:
    case SPU::R123:
    case SPU::R122:
    case SPU::R121:
    case SPU::R120:
    case SPU::R119:
    case SPU::R118:
    case SPU::R117:
    case SPU::R116:
    case SPU::R115:
    case SPU::R114:
    case SPU::R113:
    case SPU::R112:
    case SPU::R111:
    case SPU::R110:
    case SPU::R109:
    case SPU::R108:
    case SPU::R107:
    case SPU::R106:
    case SPU::R105:
    case SPU::R104:
    case SPU::R103:
    case SPU::R102:
    case SPU::R101:
    case SPU::R100:
    case SPU::R99:
    case SPU::R98:
    case SPU::R97:
    case SPU::R96:
    case SPU::R95:
    case SPU::R94:
    case SPU::R93:
    case SPU::R92:
    case SPU::R91:
    case SPU::R90:
    case SPU::R89:
    case SPU::R88:
    case SPU::R87:
    case SPU::R86:
    case SPU::R85:
    case SPU::R84:
    case SPU::R83:
    case SPU::R82:
    case SPU::R81:
    case SPU::R80:
    case SPU::R2:
    case SPU::R1:
    case SPU::R0:
      return true;
    }
    break;
  case RC_R32FP:
    switch (Reg) {
    default: break;
    case SPU::R3:
    case SPU::R4:
    case SPU::R5:
    case SPU::R6:
    case SPU::R7:
    case SPU::R8:
    case SPU::R9:
    case SPU::R10:
    case SPU::R11:
    case SPU::R12:
    case SPU::R13:
    case SPU::R14:
    case SPU::R15:
    case SPU::R16:
    case SPU::R17:
    case SPU::R18:
    case SPU::R19:
    case SPU::R20:
    case SPU::R21:
    case SPU::R22:
    case SPU::R23:
    case SPU::R24:
    case SPU::R25:
    case SPU::R26:
    case SPU::R27:
    case SPU::R28:
    case SPU::R29:
    case SPU::R30:
    case SPU::R31:
    case SPU::R32:
    case SPU::R33:
    case SPU::R34:
    case SPU::R35:
    case SPU::R36:
    case SPU::R37:
    case SPU::R38:
    case SPU::R39:
    case SPU::R40:
    case SPU::R41:
    case SPU::R42:
    case SPU::R43:
    case SPU::R44:
    case SPU::R45:
    case SPU::R46:
    case SPU::R47:
    case SPU::R48:
    case SPU::R49:
    case SPU::R50:
    case SPU::R51:
    case SPU::R52:
    case SPU::R53:
    case SPU::R54:
    case SPU::R55:
    case SPU::R56:
    case SPU::R57:
    case SPU::R58:
    case SPU::R59:
    case SPU::R60:
    case SPU::R61:
    case SPU::R62:
    case SPU::R63:
    case SPU::R64:
    case SPU::R65:
    case SPU::R66:
    case SPU::R67:
    case SPU::R68:
    case SPU::R69:
    case SPU::R70:
    case SPU::R71:
    case SPU::R72:
    case SPU::R73:
    case SPU::R74:
    case SPU::R75:
    case SPU::R76:
    case SPU::R77:
    case SPU::R78:
    case SPU::R79:
    case SPU::R127:
    case SPU::R126:
    case SPU::R125:
    case SPU::R124:
    case SPU::R123:
    case SPU::R122:
    case SPU::R121:
    case SPU::R120:
    case SPU::R119:
    case SPU::R118:
    case SPU::R117:
    case SPU::R116:
    case SPU::R115:
    case SPU::R114:
    case SPU::R113:
    case SPU::R112:
    case SPU::R111:
    case SPU::R110:
    case SPU::R109:
    case SPU::R108:
    case SPU::R107:
    case SPU::R106:
    case SPU::R105:
    case SPU::R104:
    case SPU::R103:
    case SPU::R102:
    case SPU::R101:
    case SPU::R100:
    case SPU::R99:
    case SPU::R98:
    case SPU::R97:
    case SPU::R96:
    case SPU::R95:
    case SPU::R94:
    case SPU::R93:
    case SPU::R92:
    case SPU::R91:
    case SPU::R90:
    case SPU::R89:
    case SPU::R88:
    case SPU::R87:
    case SPU::R86:
    case SPU::R85:
    case SPU::R84:
    case SPU::R83:
    case SPU::R82:
    case SPU::R81:
    case SPU::R80:
    case SPU::R2:
    case SPU::R1:
    case SPU::R0:
      return true;
    }
    break;
  case RC_R64C:
    switch (Reg) {
    default: break;
    case SPU::R3:
    case SPU::R4:
    case SPU::R5:
    case SPU::R6:
    case SPU::R7:
    case SPU::R8:
    case SPU::R9:
    case SPU::R10:
    case SPU::R11:
    case SPU::R12:
    case SPU::R13:
    case SPU::R14:
    case SPU::R15:
    case SPU::R16:
    case SPU::R17:
    case SPU::R18:
    case SPU::R19:
    case SPU::R20:
    case SPU::R21:
    case SPU::R22:
    case SPU::R23:
    case SPU::R24:
    case SPU::R25:
    case SPU::R26:
    case SPU::R27:
    case SPU::R28:
    case SPU::R29:
    case SPU::R30:
    case SPU::R31:
    case SPU::R32:
    case SPU::R33:
    case SPU::R34:
    case SPU::R35:
    case SPU::R36:
    case SPU::R37:
    case SPU::R38:
    case SPU::R39:
    case SPU::R40:
    case SPU::R41:
    case SPU::R42:
    case SPU::R43:
    case SPU::R44:
    case SPU::R45:
    case SPU::R46:
    case SPU::R47:
    case SPU::R48:
    case SPU::R49:
    case SPU::R50:
    case SPU::R51:
    case SPU::R52:
    case SPU::R53:
    case SPU::R54:
    case SPU::R55:
    case SPU::R56:
    case SPU::R57:
    case SPU::R58:
    case SPU::R59:
    case SPU::R60:
    case SPU::R61:
    case SPU::R62:
    case SPU::R63:
    case SPU::R64:
    case SPU::R65:
    case SPU::R66:
    case SPU::R67:
    case SPU::R68:
    case SPU::R69:
    case SPU::R70:
    case SPU::R71:
    case SPU::R72:
    case SPU::R73:
    case SPU::R74:
    case SPU::R75:
    case SPU::R76:
    case SPU::R77:
    case SPU::R78:
    case SPU::R79:
    case SPU::R127:
    case SPU::R126:
    case SPU::R125:
    case SPU::R124:
    case SPU::R123:
    case SPU::R122:
    case SPU::R121:
    case SPU::R120:
    case SPU::R119:
    case SPU::R118:
    case SPU::R117:
    case SPU::R116:
    case SPU::R115:
    case SPU::R114:
    case SPU::R113:
    case SPU::R112:
    case SPU::R111:
    case SPU::R110:
    case SPU::R109:
    case SPU::R108:
    case SPU::R107:
    case SPU::R106:
    case SPU::R105:
    case SPU::R104:
    case SPU::R103:
    case SPU::R102:
    case SPU::R101:
    case SPU::R100:
    case SPU::R99:
    case SPU::R98:
    case SPU::R97:
    case SPU::R96:
    case SPU::R95:
    case SPU::R94:
    case SPU::R93:
    case SPU::R92:
    case SPU::R91:
    case SPU::R90:
    case SPU::R89:
    case SPU::R88:
    case SPU::R87:
    case SPU::R86:
    case SPU::R85:
    case SPU::R84:
    case SPU::R83:
    case SPU::R82:
    case SPU::R81:
    case SPU::R80:
    case SPU::R2:
    case SPU::R1:
    case SPU::R0:
      return true;
    }
    break;
  case RC_R64FP:
    switch (Reg) {
    default: break;
    case SPU::R3:
    case SPU::R4:
    case SPU::R5:
    case SPU::R6:
    case SPU::R7:
    case SPU::R8:
    case SPU::R9:
    case SPU::R10:
    case SPU::R11:
    case SPU::R12:
    case SPU::R13:
    case SPU::R14:
    case SPU::R15:
    case SPU::R16:
    case SPU::R17:
    case SPU::R18:
    case SPU::R19:
    case SPU::R20:
    case SPU::R21:
    case SPU::R22:
    case SPU::R23:
    case SPU::R24:
    case SPU::R25:
    case SPU::R26:
    case SPU::R27:
    case SPU::R28:
    case SPU::R29:
    case SPU::R30:
    case SPU::R31:
    case SPU::R32:
    case SPU::R33:
    case SPU::R34:
    case SPU::R35:
    case SPU::R36:
    case SPU::R37:
    case SPU::R38:
    case SPU::R39:
    case SPU::R40:
    case SPU::R41:
    case SPU::R42:
    case SPU::R43:
    case SPU::R44:
    case SPU::R45:
    case SPU::R46:
    case SPU::R47:
    case SPU::R48:
    case SPU::R49:
    case SPU::R50:
    case SPU::R51:
    case SPU::R52:
    case SPU::R53:
    case SPU::R54:
    case SPU::R55:
    case SPU::R56:
    case SPU::R57:
    case SPU::R58:
    case SPU::R59:
    case SPU::R60:
    case SPU::R61:
    case SPU::R62:
    case SPU::R63:
    case SPU::R64:
    case SPU::R65:
    case SPU::R66:
    case SPU::R67:
    case SPU::R68:
    case SPU::R69:
    case SPU::R70:
    case SPU::R71:
    case SPU::R72:
    case SPU::R73:
    case SPU::R74:
    case SPU::R75:
    case SPU::R76:
    case SPU::R77:
    case SPU::R78:
    case SPU::R79:
    case SPU::R127:
    case SPU::R126:
    case SPU::R125:
    case SPU::R124:
    case SPU::R123:
    case SPU::R122:
    case SPU::R121:
    case SPU::R120:
    case SPU::R119:
    case SPU::R118:
    case SPU::R117:
    case SPU::R116:
    case SPU::R115:
    case SPU::R114:
    case SPU::R113:
    case SPU::R112:
    case SPU::R111:
    case SPU::R110:
    case SPU::R109:
    case SPU::R108:
    case SPU::R107:
    case SPU::R106:
    case SPU::R105:
    case SPU::R104:
    case SPU::R103:
    case SPU::R102:
    case SPU::R101:
    case SPU::R100:
    case SPU::R99:
    case SPU::R98:
    case SPU::R97:
    case SPU::R96:
    case SPU::R95:
    case SPU::R94:
    case SPU::R93:
    case SPU::R92:
    case SPU::R91:
    case SPU::R90:
    case SPU::R89:
    case SPU::R88:
    case SPU::R87:
    case SPU::R86:
    case SPU::R85:
    case SPU::R84:
    case SPU::R83:
    case SPU::R82:
    case SPU::R81:
    case SPU::R80:
    case SPU::R2:
    case SPU::R1:
    case SPU::R0:
      return true;
    }
    break;
  case RC_R8C:
    switch (Reg) {
    default: break;
    case SPU::R3:
    case SPU::R4:
    case SPU::R5:
    case SPU::R6:
    case SPU::R7:
    case SPU::R8:
    case SPU::R9:
    case SPU::R10:
    case SPU::R11:
    case SPU::R12:
    case SPU::R13:
    case SPU::R14:
    case SPU::R15:
    case SPU::R16:
    case SPU::R17:
    case SPU::R18:
    case SPU::R19:
    case SPU::R20:
    case SPU::R21:
    case SPU::R22:
    case SPU::R23:
    case SPU::R24:
    case SPU::R25:
    case SPU::R26:
    case SPU::R27:
    case SPU::R28:
    case SPU::R29:
    case SPU::R30:
    case SPU::R31:
    case SPU::R32:
    case SPU::R33:
    case SPU::R34:
    case SPU::R35:
    case SPU::R36:
    case SPU::R37:
    case SPU::R38:
    case SPU::R39:
    case SPU::R40:
    case SPU::R41:
    case SPU::R42:
    case SPU::R43:
    case SPU::R44:
    case SPU::R45:
    case SPU::R46:
    case SPU::R47:
    case SPU::R48:
    case SPU::R49:
    case SPU::R50:
    case SPU::R51:
    case SPU::R52:
    case SPU::R53:
    case SPU::R54:
    case SPU::R55:
    case SPU::R56:
    case SPU::R57:
    case SPU::R58:
    case SPU::R59:
    case SPU::R60:
    case SPU::R61:
    case SPU::R62:
    case SPU::R63:
    case SPU::R64:
    case SPU::R65:
    case SPU::R66:
    case SPU::R67:
    case SPU::R68:
    case SPU::R69:
    case SPU::R70:
    case SPU::R71:
    case SPU::R72:
    case SPU::R73:
    case SPU::R74:
    case SPU::R75:
    case SPU::R76:
    case SPU::R77:
    case SPU::R78:
    case SPU::R79:
    case SPU::R127:
    case SPU::R126:
    case SPU::R125:
    case SPU::R124:
    case SPU::R123:
    case SPU::R122:
    case SPU::R121:
    case SPU::R120:
    case SPU::R119:
    case SPU::R118:
    case SPU::R117:
    case SPU::R116:
    case SPU::R115:
    case SPU::R114:
    case SPU::R113:
    case SPU::R112:
    case SPU::R111:
    case SPU::R110:
    case SPU::R109:
    case SPU::R108:
    case SPU::R107:
    case SPU::R106:
    case SPU::R105:
    case SPU::R104:
    case SPU::R103:
    case SPU::R102:
    case SPU::R101:
    case SPU::R100:
    case SPU::R99:
    case SPU::R98:
    case SPU::R97:
    case SPU::R96:
    case SPU::R95:
    case SPU::R94:
    case SPU::R93:
    case SPU::R92:
    case SPU::R91:
    case SPU::R90:
    case SPU::R89:
    case SPU::R88:
    case SPU::R87:
    case SPU::R86:
    case SPU::R85:
    case SPU::R84:
    case SPU::R83:
    case SPU::R82:
    case SPU::R81:
    case SPU::R80:
    case SPU::R2:
    case SPU::R1:
    case SPU::R0:
      return true;
    }
    break;
  case RC_VECREG:
    switch (Reg) {
    default: break;
    case SPU::R3:
    case SPU::R4:
    case SPU::R5:
    case SPU::R6:
    case SPU::R7:
    case SPU::R8:
    case SPU::R9:
    case SPU::R10:
    case SPU::R11:
    case SPU::R12:
    case SPU::R13:
    case SPU::R14:
    case SPU::R15:
    case SPU::R16:
    case SPU::R17:
    case SPU::R18:
    case SPU::R19:
    case SPU::R20:
    case SPU::R21:
    case SPU::R22:
    case SPU::R23:
    case SPU::R24:
    case SPU::R25:
    case SPU::R26:
    case SPU::R27:
    case SPU::R28:
    case SPU::R29:
    case SPU::R30:
    case SPU::R31:
    case SPU::R32:
    case SPU::R33:
    case SPU::R34:
    case SPU::R35:
    case SPU::R36:
    case SPU::R37:
    case SPU::R38:
    case SPU::R39:
    case SPU::R40:
    case SPU::R41:
    case SPU::R42:
    case SPU::R43:
    case SPU::R44:
    case SPU::R45:
    case SPU::R46:
    case SPU::R47:
    case SPU::R48:
    case SPU::R49:
    case SPU::R50:
    case SPU::R51:
    case SPU::R52:
    case SPU::R53:
    case SPU::R54:
    case SPU::R55:
    case SPU::R56:
    case SPU::R57:
    case SPU::R58:
    case SPU::R59:
    case SPU::R60:
    case SPU::R61:
    case SPU::R62:
    case SPU::R63:
    case SPU::R64:
    case SPU::R65:
    case SPU::R66:
    case SPU::R67:
    case SPU::R68:
    case SPU::R69:
    case SPU::R70:
    case SPU::R71:
    case SPU::R72:
    case SPU::R73:
    case SPU::R74:
    case SPU::R75:
    case SPU::R76:
    case SPU::R77:
    case SPU::R78:
    case SPU::R79:
    case SPU::R127:
    case SPU::R126:
    case SPU::R125:
    case SPU::R124:
    case SPU::R123:
    case SPU::R122:
    case SPU::R121:
    case SPU::R120:
    case SPU::R119:
    case SPU::R118:
    case SPU::R117:
    case SPU::R116:
    case SPU::R115:
    case SPU::R114:
    case SPU::R113:
    case SPU::R112:
    case SPU::R111:
    case SPU::R110:
    case SPU::R109:
    case SPU::R108:
    case SPU::R107:
    case SPU::R106:
    case SPU::R105:
    case SPU::R104:
    case SPU::R103:
    case SPU::R102:
    case SPU::R101:
    case SPU::R100:
    case SPU::R99:
    case SPU::R98:
    case SPU::R97:
    case SPU::R96:
    case SPU::R95:
    case SPU::R94:
    case SPU::R93:
    case SPU::R92:
    case SPU::R91:
    case SPU::R90:
    case SPU::R89:
    case SPU::R88:
    case SPU::R87:
    case SPU::R86:
    case SPU::R85:
    case SPU::R84:
    case SPU::R83:
    case SPU::R82:
    case SPU::R81:
    case SPU::R80:
    case SPU::R2:
    case SPU::R1:
    case SPU::R0:
      return true;
    }
    break;
  }

  return false;
}

bool SPUAsmPrinter::printAliasInstr(const MachineInstr *MI, raw_ostream &OS) {
  return true;
}

#endif // PRINT_ALIAS_INSTR
