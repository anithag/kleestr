//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Machine Code Emitter
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

unsigned MBlazeCodeEmitter::getBinaryCodeForInstr(const MachineInstr &MI) const {
  static const unsigned InstBits[] = {
    0U,
    0U,
    0U,
    0U,
    0U,
    0U,
    0U,
    0U,
    0U,
    0U,
    0U,
    0U,
    0U,
    0U,
    0U,	// ADD
    16U,	// ADDC
    4U,	// ADDI
    20U,	// ADDIC
    12U,	// ADDIK
    4U,	// ADDIK32
    28U,	// ADDIKC
    8U,	// ADDK
    24U,	// ADDKC
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    1048630U,	// AGET
    33554482U,	// AGETD
    33U,	// AND
    37U,	// ANDI
    49U,	// ANDN
    53U,	// ANDNI
    1114166U,	// APUT
    35651634U,	// APUTD
    57U,	// BEQ
    121U,	// BEQD
    61U,	// BEQI
    125U,	// BEQID
    1337U,	// BGE
    1401U,	// BGED
    1341U,	// BGEI
    1405U,	// BGEID
    313U,	// BGT
    377U,	// BGTD
    317U,	// BGTI
    381U,	// BGTID
    1593U,	// BLE
    1657U,	// BLED
    1597U,	// BLEI
    1661U,	// BLEID
    569U,	// BLT
    633U,	// BLTD
    573U,	// BLTI
    637U,	// BLTID
    1081U,	// BNE
    1145U,	// BNED
    1085U,	// BNEI
    1149U,	// BNEID
    25U,	// BR
    4121U,	// BRA
    6169U,	// BRAD
    4125U,	// BRAI
    6173U,	// BRAID
    14361U,	// BRALD
    14365U,	// BRALID
    2073U,	// BRD
    29U,	// BRI
    2077U,	// BRID
    12313U,	// BRK
    12317U,	// BRKI
    10265U,	// BRLD
    10269U,	// BRLID
    10269U,	// BRLID32
    2097186U,	// BSLL
    2097190U,	// BSLLI
    4194338U,	// BSRA
    4194342U,	// BSRAI
    34U,	// BSRL
    38U,	// BSRLI
    1310774U,	// CAGET
    41943090U,	// CAGETD
    1376310U,	// CAPUT
    44040242U,	// CAPUTD
    0U,	// CAS32
    262198U,	// CGET
    8388658U,	// CGETD
    2147483688U,	// CMP
    3221225512U,	// CMPU
    327734U,	// CPUT
    10485810U,	// CPUTD
    3145782U,	// EAGET
    100663346U,	// EAGETD
    3407926U,	// ECAGET
    109051954U,	// ECAGETD
    2359350U,	// ECGET
    75497522U,	// ECGETD
    2097206U,	// EGET
    67108914U,	// EGETD
    26U,	// FADD
    71303194U,	// FCMP_EQ
    104857626U,	// FCMP_GE
    37748762U,	// FCMP_GT
    205520922U,	// FCMP_LE
    138412058U,	// FCMP_LT
    171966490U,	// FCMP_NE
    4194330U,	// FCMP_UN
    25165850U,	// FDIV
    12582938U,	// FINT
    20971546U,	// FLT
    8388634U,	// FMUL
    5U,	// FORI
    16777242U,	// FRSUB
    29360154U,	// FSQRT
    54U,	// GET
    50U,	// GETD
    18U,	// IDIV
    1073741842U,	// IDIVU
    13U,	// IMM
    0U,	// LAA32
    0U,	// LAD32
    0U,	// LAN32
    0U,	// LAO32
    0U,	// LAS32
    0U,	// LAX32
    3U,	// LBU
    7U,	// LBUI
    4194307U,	// LBUR
    35U,	// LHU
    39U,	// LHUI
    4194339U,	// LHUR
    19U,	// LW
    19U,	// LWF
    23U,	// LWFI
    23U,	// LWI
    4194323U,	// LWR
    2097171U,	// LWX
    0U,	// MEMBARRIER
    65577U,	// MFS
    34857U,	// MSRCLR
    2089U,	// MSRSET
    196649U,	// MTS
    2U,	// MUL
    2147483650U,	// MULH
    1073741826U,	// MULHSU
    3221225474U,	// MULHU
    6U,	// MULI
    1179702U,	// NAGET
    37748786U,	// NAGETD
    1245238U,	// NAPUT
    39845938U,	// NAPUTD
    1441846U,	// NCAGET
    46137394U,	// NCAGETD
    1507382U,	// NCAPUT
    48234546U,	// NCAPUTD
    393270U,	// NCGET
    12582962U,	// NCGETD
    458806U,	// NCPUT
    14680114U,	// NCPUTD
    3276854U,	// NEAGET
    104857650U,	// NEAGETD
    3538998U,	// NECAGET
    113246258U,	// NECAGETD
    2490422U,	// NECGET
    79691826U,	// NECGETD
    2228278U,	// NEGET
    71303218U,	// NEGETD
    131126U,	// NGET
    4194354U,	// NGETD
    1U,	// NOP
    196662U,	// NPUT
    6291506U,	// NPUTD
    1U,	// OR
    5U,	// ORI
    5U,	// ORI32
    2097153U,	// PCMPBF
    2097169U,	// PCMPEQ
    2097201U,	// PCMPNE
    65590U,	// PUT
    2097202U,	// PUTD
    32U,	// RSUB
    48U,	// RSUBC
    36U,	// RSUBI
    52U,	// RSUBIC
    44U,	// RSUBIK
    60U,	// RSUBIKC
    40U,	// RSUBK
    56U,	// RSUBKC
    621U,	// RTBD
    365U,	// RTED
    1133U,	// RTID
    109U,	// RTSD
    11U,	// SB
    15U,	// SBI
    4194315U,	// SBR
    2248146953U,	// SEXT16
    100663305U,	// SEXT8
    43U,	// SH
    47U,	// SHI
    4194347U,	// SHR
    2147483657U,	// SRA
    2214592521U,	// SRC
    2181038089U,	// SRL
    27U,	// SW
    27U,	// SWF
    31U,	// SWFI
    31U,	// SWI
    0U,	// SWP32
    4194331U,	// SWR
    2097179U,	// SWX
    0U,	// Select_CC
    0U,	// Select_FCC
    0U,	// ShiftL
    0U,	// ShiftRA
    0U,	// ShiftRL
    1572918U,	// TAGET
    50331698U,	// TAGETD
    1638454U,	// TAPUT
    52428850U,	// TAPUTD
    1835062U,	// TCAGET
    58720306U,	// TCAGETD
    1900598U,	// TCAPUT
    60817458U,	// TCAPUTD
    786486U,	// TCGET
    25165874U,	// TCGETD
    852022U,	// TCPUT
    27263026U,	// TCPUTD
    3670070U,	// TEAGET
    117440562U,	// TEAGETD
    3932214U,	// TECAGET
    125829170U,	// TECAGETD
    2883638U,	// TECGET
    92274738U,	// TECGETD
    2621494U,	// TEGET
    83886130U,	// TEGETD
    524342U,	// TGET
    16777266U,	// TGETD
    1703990U,	// TNAGET
    54526002U,	// TNAGETD
    1769526U,	// TNAPUT
    56623154U,	// TNAPUTD
    1966134U,	// TNCAGET
    62914610U,	// TNCAGETD
    2031670U,	// TNCAPUT
    65011762U,	// TNCAPUTD
    917558U,	// TNCGET
    29360178U,	// TNCGETD
    983094U,	// TNCPUT
    31457330U,	// TNCPUTD
    3801142U,	// TNEAGET
    121634866U,	// TNEAGETD
    4063286U,	// TNECAGET
    130023474U,	// TNECAGETD
    3014710U,	// TNECGET
    96469042U,	// TNECGETD
    2752566U,	// TNEGET
    88080434U,	// TNEGETD
    655414U,	// TNGET
    20971570U,	// TNGETD
    720950U,	// TNPUT
    23068722U,	// TNPUTD
    589878U,	// TPUT
    18874418U,	// TPUTD
    637534217U,	// WDC
    1711276041U,	// WDCC
    771751945U,	// WDCF
    369098761U,	// WIC
    17U,	// XOR
    21U,	// XORI
    0U
  };
  const unsigned opcode = MI.getOpcode();
  unsigned Value = InstBits[opcode];
  unsigned op = 0;
  (void)op;  // suppress warning
  switch (opcode) {
    case MBlaze::ADJCALLSTACKDOWN:
    case MBlaze::ADJCALLSTACKUP:
    case MBlaze::CAS32:
    case MBlaze::IMM:
    case MBlaze::LAA32:
    case MBlaze::LAD32:
    case MBlaze::LAN32:
    case MBlaze::LAO32:
    case MBlaze::LAS32:
    case MBlaze::LAX32:
    case MBlaze::MEMBARRIER:
    case MBlaze::NOP:
    case MBlaze::SWP32:
    case MBlaze::Select_CC:
    case MBlaze::Select_FCC:
    case MBlaze::ShiftL:
    case MBlaze::ShiftRA:
    case MBlaze::ShiftRL: {
      break;
    }
    case MBlaze::TAPUT:
    case MBlaze::TCAPUT:
    case MBlaze::TCPUT:
    case MBlaze::TNAPUT:
    case MBlaze::TNCAPUT:
    case MBlaze::TNCPUT:
    case MBlaze::TNPUT:
    case MBlaze::TPUT: {
      // op: fslno
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & 1U) << 31;
      Value |= (op & 2U) << 29;
      Value |= (op & 4U) << 27;
      Value |= (op & 8U) << 25;
      break;
    }
    case MBlaze::BRAI:
    case MBlaze::BRAID:
    case MBlaze::BRI:
    case MBlaze::BRID: {
      // op: imm16
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & 1U) << 31;
      Value |= (op & 2U) << 29;
      Value |= (op & 4U) << 27;
      Value |= (op & 8U) << 25;
      Value |= (op & 16U) << 23;
      Value |= (op & 32U) << 21;
      Value |= (op & 64U) << 19;
      Value |= (op & 128U) << 17;
      Value |= (op & 256U) << 15;
      Value |= (op & 512U) << 13;
      Value |= (op & 1024U) << 11;
      Value |= (op & 2048U) << 9;
      Value |= (op & 4096U) << 7;
      Value |= (op & 8192U) << 5;
      Value |= (op & 16384U) << 3;
      Value |= (op & 32768U) << 1;
      break;
    }
    case MBlaze::APUT:
    case MBlaze::CAPUT:
    case MBlaze::CPUT:
    case MBlaze::NAPUT:
    case MBlaze::NCAPUT:
    case MBlaze::NCPUT:
    case MBlaze::NPUT:
    case MBlaze::PUT: {
      // op: ra
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & 1U) << 15;
      Value |= (op & 2U) << 13;
      Value |= (op & 4U) << 11;
      Value |= (op & 8U) << 9;
      Value |= (op & 16U) << 7;
      // op: fslno
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & 1U) << 31;
      Value |= (op & 2U) << 29;
      Value |= (op & 4U) << 27;
      Value |= (op & 8U) << 25;
      break;
    }
    case MBlaze::BEQI:
    case MBlaze::BEQID:
    case MBlaze::BGEI:
    case MBlaze::BGEID:
    case MBlaze::BGTI:
    case MBlaze::BGTID:
    case MBlaze::BLEI:
    case MBlaze::BLEID:
    case MBlaze::BLTI:
    case MBlaze::BLTID:
    case MBlaze::BNEI:
    case MBlaze::BNEID:
    case MBlaze::RTBD:
    case MBlaze::RTED:
    case MBlaze::RTID:
    case MBlaze::RTSD: {
      // op: ra
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & 1U) << 15;
      Value |= (op & 2U) << 13;
      Value |= (op & 4U) << 11;
      Value |= (op & 8U) << 9;
      Value |= (op & 16U) << 7;
      // op: imm16
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & 1U) << 31;
      Value |= (op & 2U) << 29;
      Value |= (op & 4U) << 27;
      Value |= (op & 8U) << 25;
      Value |= (op & 16U) << 23;
      Value |= (op & 32U) << 21;
      Value |= (op & 64U) << 19;
      Value |= (op & 128U) << 17;
      Value |= (op & 256U) << 15;
      Value |= (op & 512U) << 13;
      Value |= (op & 1024U) << 11;
      Value |= (op & 2048U) << 9;
      Value |= (op & 4096U) << 7;
      Value |= (op & 8192U) << 5;
      Value |= (op & 16384U) << 3;
      Value |= (op & 32768U) << 1;
      break;
    }
    case MBlaze::APUTD:
    case MBlaze::BEQ:
    case MBlaze::BEQD:
    case MBlaze::BGE:
    case MBlaze::BGED:
    case MBlaze::BGT:
    case MBlaze::BGTD:
    case MBlaze::BLE:
    case MBlaze::BLED:
    case MBlaze::BLT:
    case MBlaze::BLTD:
    case MBlaze::BNE:
    case MBlaze::BNED:
    case MBlaze::CAPUTD:
    case MBlaze::CPUTD:
    case MBlaze::NAPUTD:
    case MBlaze::NCAPUTD:
    case MBlaze::NCPUTD:
    case MBlaze::NPUTD:
    case MBlaze::PUTD:
    case MBlaze::WDC:
    case MBlaze::WDCC:
    case MBlaze::WDCF:
    case MBlaze::WIC: {
      // op: ra
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & 1U) << 15;
      Value |= (op & 2U) << 13;
      Value |= (op & 4U) << 11;
      Value |= (op & 8U) << 9;
      Value |= (op & 16U) << 7;
      // op: rb
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & 1U) << 20;
      Value |= (op & 2U) << 18;
      Value |= (op & 4U) << 16;
      Value |= (op & 8U) << 14;
      Value |= (op & 16U) << 12;
      break;
    }
    case MBlaze::BR:
    case MBlaze::BRA:
    case MBlaze::BRAD:
    case MBlaze::BRD:
    case MBlaze::TAPUTD:
    case MBlaze::TCAPUTD:
    case MBlaze::TCPUTD:
    case MBlaze::TNAPUTD:
    case MBlaze::TNCAPUTD:
    case MBlaze::TNCPUTD:
    case MBlaze::TNPUTD:
    case MBlaze::TPUTD: {
      // op: rb
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & 1U) << 20;
      Value |= (op & 2U) << 18;
      Value |= (op & 4U) << 16;
      Value |= (op & 8U) << 14;
      Value |= (op & 16U) << 12;
      break;
    }
    case MBlaze::AGET:
    case MBlaze::CAGET:
    case MBlaze::CGET:
    case MBlaze::EAGET:
    case MBlaze::ECAGET:
    case MBlaze::ECGET:
    case MBlaze::EGET:
    case MBlaze::GET:
    case MBlaze::NAGET:
    case MBlaze::NCAGET:
    case MBlaze::NCGET:
    case MBlaze::NEAGET:
    case MBlaze::NECAGET:
    case MBlaze::NECGET:
    case MBlaze::NEGET:
    case MBlaze::NGET:
    case MBlaze::TAGET:
    case MBlaze::TCAGET:
    case MBlaze::TCGET:
    case MBlaze::TEAGET:
    case MBlaze::TECAGET:
    case MBlaze::TECGET:
    case MBlaze::TEGET:
    case MBlaze::TGET:
    case MBlaze::TNAGET:
    case MBlaze::TNCAGET:
    case MBlaze::TNCGET:
    case MBlaze::TNEAGET:
    case MBlaze::TNECAGET:
    case MBlaze::TNECGET:
    case MBlaze::TNEGET:
    case MBlaze::TNGET: {
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & 1U) << 10;
      Value |= (op & 2U) << 8;
      Value |= (op & 4U) << 6;
      Value |= (op & 8U) << 4;
      Value |= (op & 16U) << 2;
      // op: fslno
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & 1U) << 31;
      Value |= (op & 2U) << 29;
      Value |= (op & 4U) << 27;
      Value |= (op & 8U) << 25;
      break;
    }
    case MBlaze::MFS:
    case MBlaze::MTS: {
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & 1U) << 10;
      Value |= (op & 2U) << 8;
      Value |= (op & 4U) << 6;
      Value |= (op & 8U) << 4;
      Value |= (op & 16U) << 2;
      // op: imm14
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & 1U) << 31;
      Value |= (op & 2U) << 29;
      Value |= (op & 4U) << 27;
      Value |= (op & 8U) << 25;
      Value |= (op & 16U) << 23;
      Value |= (op & 32U) << 21;
      Value |= (op & 64U) << 19;
      Value |= (op & 128U) << 17;
      Value |= (op & 256U) << 15;
      Value |= (op & 512U) << 13;
      Value |= (op & 1024U) << 11;
      Value |= (op & 2048U) << 9;
      Value |= (op & 4096U) << 7;
      Value |= (op & 8192U) << 5;
      break;
    }
    case MBlaze::MSRCLR:
    case MBlaze::MSRSET: {
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & 1U) << 10;
      Value |= (op & 2U) << 8;
      Value |= (op & 4U) << 6;
      Value |= (op & 8U) << 4;
      Value |= (op & 16U) << 2;
      // op: imm15
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & 1U) << 31;
      Value |= (op & 2U) << 29;
      Value |= (op & 4U) << 27;
      Value |= (op & 8U) << 25;
      Value |= (op & 16U) << 23;
      Value |= (op & 32U) << 21;
      Value |= (op & 64U) << 19;
      Value |= (op & 128U) << 17;
      Value |= (op & 256U) << 15;
      Value |= (op & 512U) << 13;
      Value |= (op & 1024U) << 11;
      Value |= (op & 2048U) << 9;
      Value |= (op & 4096U) << 7;
      Value |= (op & 8192U) << 5;
      Value |= (op & 16384U) << 3;
      break;
    }
    case MBlaze::BRALID:
    case MBlaze::BRKI:
    case MBlaze::BRLID:
    case MBlaze::BRLID32: {
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & 1U) << 10;
      Value |= (op & 2U) << 8;
      Value |= (op & 4U) << 6;
      Value |= (op & 8U) << 4;
      Value |= (op & 16U) << 2;
      // op: imm16
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & 1U) << 31;
      Value |= (op & 2U) << 29;
      Value |= (op & 4U) << 27;
      Value |= (op & 8U) << 25;
      Value |= (op & 16U) << 23;
      Value |= (op & 32U) << 21;
      Value |= (op & 64U) << 19;
      Value |= (op & 128U) << 17;
      Value |= (op & 256U) << 15;
      Value |= (op & 512U) << 13;
      Value |= (op & 1024U) << 11;
      Value |= (op & 2048U) << 9;
      Value |= (op & 4096U) << 7;
      Value |= (op & 8192U) << 5;
      Value |= (op & 16384U) << 3;
      Value |= (op & 32768U) << 1;
      break;
    }
    case MBlaze::FINT:
    case MBlaze::FLT:
    case MBlaze::FSQRT:
    case MBlaze::SEXT16:
    case MBlaze::SEXT8:
    case MBlaze::SRA:
    case MBlaze::SRC:
    case MBlaze::SRL: {
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & 1U) << 10;
      Value |= (op & 2U) << 8;
      Value |= (op & 4U) << 6;
      Value |= (op & 8U) << 4;
      Value |= (op & 16U) << 2;
      // op: ra
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & 1U) << 15;
      Value |= (op & 2U) << 13;
      Value |= (op & 4U) << 11;
      Value |= (op & 8U) << 9;
      Value |= (op & 16U) << 7;
      break;
    }
    case MBlaze::ADDI:
    case MBlaze::ADDIC:
    case MBlaze::ADDIK:
    case MBlaze::ADDIK32:
    case MBlaze::ADDIKC:
    case MBlaze::ANDI:
    case MBlaze::ANDNI:
    case MBlaze::FORI:
    case MBlaze::LBUI:
    case MBlaze::LHUI:
    case MBlaze::LWFI:
    case MBlaze::LWI:
    case MBlaze::MULI:
    case MBlaze::ORI:
    case MBlaze::ORI32:
    case MBlaze::SBI:
    case MBlaze::SHI:
    case MBlaze::SWFI:
    case MBlaze::SWI:
    case MBlaze::XORI: {
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & 1U) << 10;
      Value |= (op & 2U) << 8;
      Value |= (op & 4U) << 6;
      Value |= (op & 8U) << 4;
      Value |= (op & 16U) << 2;
      // op: ra
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & 1U) << 15;
      Value |= (op & 2U) << 13;
      Value |= (op & 4U) << 11;
      Value |= (op & 8U) << 9;
      Value |= (op & 16U) << 7;
      // op: imm16
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & 1U) << 31;
      Value |= (op & 2U) << 29;
      Value |= (op & 4U) << 27;
      Value |= (op & 8U) << 25;
      Value |= (op & 16U) << 23;
      Value |= (op & 32U) << 21;
      Value |= (op & 64U) << 19;
      Value |= (op & 128U) << 17;
      Value |= (op & 256U) << 15;
      Value |= (op & 512U) << 13;
      Value |= (op & 1024U) << 11;
      Value |= (op & 2048U) << 9;
      Value |= (op & 4096U) << 7;
      Value |= (op & 8192U) << 5;
      Value |= (op & 16384U) << 3;
      Value |= (op & 32768U) << 1;
      break;
    }
    case MBlaze::BSLLI:
    case MBlaze::BSRAI:
    case MBlaze::BSRLI: {
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & 1U) << 10;
      Value |= (op & 2U) << 8;
      Value |= (op & 4U) << 6;
      Value |= (op & 8U) << 4;
      Value |= (op & 16U) << 2;
      // op: ra
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & 1U) << 15;
      Value |= (op & 2U) << 13;
      Value |= (op & 4U) << 11;
      Value |= (op & 8U) << 9;
      Value |= (op & 16U) << 7;
      // op: imm5
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & 1U) << 31;
      Value |= (op & 2U) << 29;
      Value |= (op & 4U) << 27;
      Value |= (op & 8U) << 25;
      Value |= (op & 16U) << 23;
      break;
    }
    case MBlaze::ADD:
    case MBlaze::ADDC:
    case MBlaze::ADDK:
    case MBlaze::ADDKC:
    case MBlaze::AND:
    case MBlaze::ANDN:
    case MBlaze::BSLL:
    case MBlaze::BSRA:
    case MBlaze::BSRL:
    case MBlaze::CMP:
    case MBlaze::CMPU:
    case MBlaze::FADD:
    case MBlaze::FCMP_EQ:
    case MBlaze::FCMP_GE:
    case MBlaze::FCMP_GT:
    case MBlaze::FCMP_LE:
    case MBlaze::FCMP_LT:
    case MBlaze::FCMP_NE:
    case MBlaze::FCMP_UN:
    case MBlaze::FDIV:
    case MBlaze::FMUL:
    case MBlaze::LBU:
    case MBlaze::LBUR:
    case MBlaze::LHU:
    case MBlaze::LHUR:
    case MBlaze::LW:
    case MBlaze::LWF:
    case MBlaze::LWR:
    case MBlaze::LWX:
    case MBlaze::MUL:
    case MBlaze::MULH:
    case MBlaze::MULHSU:
    case MBlaze::MULHU:
    case MBlaze::OR:
    case MBlaze::PCMPBF:
    case MBlaze::PCMPEQ:
    case MBlaze::PCMPNE:
    case MBlaze::SB:
    case MBlaze::SBR:
    case MBlaze::SH:
    case MBlaze::SHR:
    case MBlaze::SW:
    case MBlaze::SWF:
    case MBlaze::SWR:
    case MBlaze::SWX:
    case MBlaze::XOR: {
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & 1U) << 10;
      Value |= (op & 2U) << 8;
      Value |= (op & 4U) << 6;
      Value |= (op & 8U) << 4;
      Value |= (op & 16U) << 2;
      // op: ra
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & 1U) << 15;
      Value |= (op & 2U) << 13;
      Value |= (op & 4U) << 11;
      Value |= (op & 8U) << 9;
      Value |= (op & 16U) << 7;
      // op: rb
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & 1U) << 20;
      Value |= (op & 2U) << 18;
      Value |= (op & 4U) << 16;
      Value |= (op & 8U) << 14;
      Value |= (op & 16U) << 12;
      break;
    }
    case MBlaze::AGETD:
    case MBlaze::BRALD:
    case MBlaze::BRK:
    case MBlaze::BRLD:
    case MBlaze::CAGETD:
    case MBlaze::CGETD:
    case MBlaze::EAGETD:
    case MBlaze::ECAGETD:
    case MBlaze::ECGETD:
    case MBlaze::EGETD:
    case MBlaze::GETD:
    case MBlaze::NAGETD:
    case MBlaze::NCAGETD:
    case MBlaze::NCGETD:
    case MBlaze::NEAGETD:
    case MBlaze::NECAGETD:
    case MBlaze::NECGETD:
    case MBlaze::NEGETD:
    case MBlaze::NGETD:
    case MBlaze::TAGETD:
    case MBlaze::TCAGETD:
    case MBlaze::TCGETD:
    case MBlaze::TEAGETD:
    case MBlaze::TECAGETD:
    case MBlaze::TECGETD:
    case MBlaze::TEGETD:
    case MBlaze::TGETD:
    case MBlaze::TNAGETD:
    case MBlaze::TNCAGETD:
    case MBlaze::TNCGETD:
    case MBlaze::TNEAGETD:
    case MBlaze::TNECAGETD:
    case MBlaze::TNECGETD:
    case MBlaze::TNEGETD:
    case MBlaze::TNGETD: {
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & 1U) << 10;
      Value |= (op & 2U) << 8;
      Value |= (op & 4U) << 6;
      Value |= (op & 8U) << 4;
      Value |= (op & 16U) << 2;
      // op: rb
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & 1U) << 20;
      Value |= (op & 2U) << 18;
      Value |= (op & 4U) << 16;
      Value |= (op & 8U) << 14;
      Value |= (op & 16U) << 12;
      break;
    }
    case MBlaze::RSUBI:
    case MBlaze::RSUBIC:
    case MBlaze::RSUBIK:
    case MBlaze::RSUBIKC: {
      // op: rrd
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & 1U) << 10;
      Value |= (op & 2U) << 8;
      Value |= (op & 4U) << 6;
      Value |= (op & 8U) << 4;
      Value |= (op & 16U) << 2;
      // op: rimm16
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & 1U) << 31;
      Value |= (op & 2U) << 29;
      Value |= (op & 4U) << 27;
      Value |= (op & 8U) << 25;
      Value |= (op & 16U) << 23;
      Value |= (op & 32U) << 21;
      Value |= (op & 64U) << 19;
      Value |= (op & 128U) << 17;
      Value |= (op & 256U) << 15;
      Value |= (op & 512U) << 13;
      Value |= (op & 1024U) << 11;
      Value |= (op & 2048U) << 9;
      Value |= (op & 4096U) << 7;
      Value |= (op & 8192U) << 5;
      Value |= (op & 16384U) << 3;
      Value |= (op & 32768U) << 1;
      // op: rra
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & 1U) << 15;
      Value |= (op & 2U) << 13;
      Value |= (op & 4U) << 11;
      Value |= (op & 8U) << 9;
      Value |= (op & 16U) << 7;
      break;
    }
    case MBlaze::FRSUB:
    case MBlaze::IDIV:
    case MBlaze::IDIVU:
    case MBlaze::RSUB:
    case MBlaze::RSUBC:
    case MBlaze::RSUBK:
    case MBlaze::RSUBKC: {
      // op: rrd
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & 1U) << 10;
      Value |= (op & 2U) << 8;
      Value |= (op & 4U) << 6;
      Value |= (op & 8U) << 4;
      Value |= (op & 16U) << 2;
      // op: rrb
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & 1U) << 20;
      Value |= (op & 2U) << 18;
      Value |= (op & 4U) << 16;
      Value |= (op & 8U) << 14;
      Value |= (op & 16U) << 12;
      // op: rra
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & 1U) << 15;
      Value |= (op & 2U) << 13;
      Value |= (op & 4U) << 11;
      Value |= (op & 8U) << 9;
      Value |= (op & 16U) << 7;
      break;
    }
  default:
    std::string msg;
    raw_string_ostream Msg(msg);
    Msg << "Not supported instr: " << MI;
    report_fatal_error(Msg.str());
  }
  return Value;
}

