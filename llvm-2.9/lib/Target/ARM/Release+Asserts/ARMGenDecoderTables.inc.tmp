//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// ARM/Thumb Decoders
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

#include "llvm/Support/DataTypes.h"
#include <assert.h>

namespace llvm {

static const ARMFormat ARMFormats[] = {
  ARM_FORMAT_NA,	// Inst #0 = PHI
  ARM_FORMAT_NA,	// Inst #1 = INLINEASM
  ARM_FORMAT_NA,	// Inst #2 = PROLOG_LABEL
  ARM_FORMAT_NA,	// Inst #3 = EH_LABEL
  ARM_FORMAT_NA,	// Inst #4 = GC_LABEL
  ARM_FORMAT_NA,	// Inst #5 = KILL
  ARM_FORMAT_NA,	// Inst #6 = EXTRACT_SUBREG
  ARM_FORMAT_NA,	// Inst #7 = INSERT_SUBREG
  ARM_FORMAT_NA,	// Inst #8 = IMPLICIT_DEF
  ARM_FORMAT_NA,	// Inst #9 = SUBREG_TO_REG
  ARM_FORMAT_NA,	// Inst #10 = COPY_TO_REGCLASS
  ARM_FORMAT_NA,	// Inst #11 = DBG_VALUE
  ARM_FORMAT_NA,	// Inst #12 = REG_SEQUENCE
  ARM_FORMAT_NA,	// Inst #13 = COPY
  ARM_FORMAT_DPFRM,	// Inst #14 = ADCSSri
  ARM_FORMAT_DPFRM,	// Inst #15 = ADCSSrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #16 = ADCSSrs
  ARM_FORMAT_DPFRM,	// Inst #17 = ADCri
  ARM_FORMAT_DPFRM,	// Inst #18 = ADCrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #19 = ADCrs
  ARM_FORMAT_DPFRM,	// Inst #20 = ADDSri
  ARM_FORMAT_DPFRM,	// Inst #21 = ADDSrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #22 = ADDSrs
  ARM_FORMAT_DPFRM,	// Inst #23 = ADDri
  ARM_FORMAT_DPFRM,	// Inst #24 = ADDrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #25 = ADDrs
  ARM_FORMAT_PSEUDO,	// Inst #26 = ADJCALLSTACKDOWN
  ARM_FORMAT_PSEUDO,	// Inst #27 = ADJCALLSTACKUP
  ARM_FORMAT_MISCFRM,	// Inst #28 = ADR
  ARM_FORMAT_DPFRM,	// Inst #29 = ANDri
  ARM_FORMAT_DPFRM,	// Inst #30 = ANDrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #31 = ANDrs
  ARM_FORMAT_PSEUDO,	// Inst #32 = ATOMIC_CMP_SWAP_I16
  ARM_FORMAT_PSEUDO,	// Inst #33 = ATOMIC_CMP_SWAP_I32
  ARM_FORMAT_PSEUDO,	// Inst #34 = ATOMIC_CMP_SWAP_I8
  ARM_FORMAT_PSEUDO,	// Inst #35 = ATOMIC_LOAD_ADD_I16
  ARM_FORMAT_PSEUDO,	// Inst #36 = ATOMIC_LOAD_ADD_I32
  ARM_FORMAT_PSEUDO,	// Inst #37 = ATOMIC_LOAD_ADD_I8
  ARM_FORMAT_PSEUDO,	// Inst #38 = ATOMIC_LOAD_AND_I16
  ARM_FORMAT_PSEUDO,	// Inst #39 = ATOMIC_LOAD_AND_I32
  ARM_FORMAT_PSEUDO,	// Inst #40 = ATOMIC_LOAD_AND_I8
  ARM_FORMAT_PSEUDO,	// Inst #41 = ATOMIC_LOAD_NAND_I16
  ARM_FORMAT_PSEUDO,	// Inst #42 = ATOMIC_LOAD_NAND_I32
  ARM_FORMAT_PSEUDO,	// Inst #43 = ATOMIC_LOAD_NAND_I8
  ARM_FORMAT_PSEUDO,	// Inst #44 = ATOMIC_LOAD_OR_I16
  ARM_FORMAT_PSEUDO,	// Inst #45 = ATOMIC_LOAD_OR_I32
  ARM_FORMAT_PSEUDO,	// Inst #46 = ATOMIC_LOAD_OR_I8
  ARM_FORMAT_PSEUDO,	// Inst #47 = ATOMIC_LOAD_SUB_I16
  ARM_FORMAT_PSEUDO,	// Inst #48 = ATOMIC_LOAD_SUB_I32
  ARM_FORMAT_PSEUDO,	// Inst #49 = ATOMIC_LOAD_SUB_I8
  ARM_FORMAT_PSEUDO,	// Inst #50 = ATOMIC_LOAD_XOR_I16
  ARM_FORMAT_PSEUDO,	// Inst #51 = ATOMIC_LOAD_XOR_I32
  ARM_FORMAT_PSEUDO,	// Inst #52 = ATOMIC_LOAD_XOR_I8
  ARM_FORMAT_PSEUDO,	// Inst #53 = ATOMIC_SWAP_I16
  ARM_FORMAT_PSEUDO,	// Inst #54 = ATOMIC_SWAP_I32
  ARM_FORMAT_PSEUDO,	// Inst #55 = ATOMIC_SWAP_I8
  ARM_FORMAT_BRFRM,	// Inst #56 = B
  ARM_FORMAT_PSEUDO,	// Inst #57 = BCCZi64
  ARM_FORMAT_PSEUDO,	// Inst #58 = BCCi64
  ARM_FORMAT_DPFRM,	// Inst #59 = BFC
  ARM_FORMAT_DPFRM,	// Inst #60 = BFI
  ARM_FORMAT_DPFRM,	// Inst #61 = BFI4p
  ARM_FORMAT_DPFRM,	// Inst #62 = BICri
  ARM_FORMAT_DPFRM,	// Inst #63 = BICrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #64 = BICrs
  ARM_FORMAT_MISCFRM,	// Inst #65 = BKPT
  ARM_FORMAT_BRFRM,	// Inst #66 = BL
  ARM_FORMAT_BRMISCFRM,	// Inst #67 = BLX
  ARM_FORMAT_BRMISCFRM,	// Inst #68 = BLX_pred
  ARM_FORMAT_BRMISCFRM,	// Inst #69 = BLXr9
  ARM_FORMAT_BRMISCFRM,	// Inst #70 = BLXr9_pred
  ARM_FORMAT_BRFRM,	// Inst #71 = BL_pred
  ARM_FORMAT_BRFRM,	// Inst #72 = BLr9
  ARM_FORMAT_BRFRM,	// Inst #73 = BLr9_pred
  ARM_FORMAT_PSEUDO,	// Inst #74 = BMOVPCRX_CALL
  ARM_FORMAT_PSEUDO,	// Inst #75 = BMOVPCRXr9_CALL
  ARM_FORMAT_PSEUDO,	// Inst #76 = BR_JTadd
  ARM_FORMAT_PSEUDO,	// Inst #77 = BR_JTm
  ARM_FORMAT_PSEUDO,	// Inst #78 = BR_JTr
  ARM_FORMAT_BRMISCFRM,	// Inst #79 = BX
  ARM_FORMAT_BRFRM,	// Inst #80 = BXJ
  ARM_FORMAT_PSEUDO,	// Inst #81 = BX_CALL
  ARM_FORMAT_BRMISCFRM,	// Inst #82 = BX_RET
  ARM_FORMAT_PSEUDO,	// Inst #83 = BXr9_CALL
  ARM_FORMAT_BRFRM,	// Inst #84 = Bcc
  ARM_FORMAT_BRFRM,	// Inst #85 = CDP
  ARM_FORMAT_BRFRM,	// Inst #86 = CDP2
  ARM_FORMAT_MISCFRM,	// Inst #87 = CLREX
  ARM_FORMAT_ARITHMISCFRM,	// Inst #88 = CLZ
  ARM_FORMAT_DPFRM,	// Inst #89 = CMNzri
  ARM_FORMAT_DPFRM,	// Inst #90 = CMNzrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #91 = CMNzrs
  ARM_FORMAT_DPFRM,	// Inst #92 = CMPri
  ARM_FORMAT_DPFRM,	// Inst #93 = CMPrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #94 = CMPrs
  ARM_FORMAT_PSEUDO,	// Inst #95 = CONSTPOOL_ENTRY
  ARM_FORMAT_MISCFRM,	// Inst #96 = CPS1p
  ARM_FORMAT_MISCFRM,	// Inst #97 = CPS2p
  ARM_FORMAT_MISCFRM,	// Inst #98 = CPS3p
  ARM_FORMAT_MISCFRM,	// Inst #99 = DBG
  ARM_FORMAT_MISCFRM,	// Inst #100 = DMB
  ARM_FORMAT_MISCFRM,	// Inst #101 = DMB_MCR
  ARM_FORMAT_MISCFRM,	// Inst #102 = DSB
  ARM_FORMAT_DPFRM,	// Inst #103 = EORri
  ARM_FORMAT_DPFRM,	// Inst #104 = EORrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #105 = EORrs
  ARM_FORMAT_VFPMISCFRM,	// Inst #106 = FCONSTD
  ARM_FORMAT_VFPMISCFRM,	// Inst #107 = FCONSTS
  ARM_FORMAT_VFPMISCFRM,	// Inst #108 = FMSTAT
  ARM_FORMAT_MISCFRM,	// Inst #109 = ISB
  ARM_FORMAT_PSEUDO,	// Inst #110 = Int_eh_sjlj_dispatchsetup
  ARM_FORMAT_PSEUDO,	// Inst #111 = Int_eh_sjlj_longjmp
  ARM_FORMAT_PSEUDO,	// Inst #112 = Int_eh_sjlj_setjmp
  ARM_FORMAT_PSEUDO,	// Inst #113 = Int_eh_sjlj_setjmp_nofp
  ARM_FORMAT_BRFRM,	// Inst #114 = LDC2L_OFFSET
  ARM_FORMAT_BRFRM,	// Inst #115 = LDC2L_OPTION
  ARM_FORMAT_BRFRM,	// Inst #116 = LDC2L_POST
  ARM_FORMAT_BRFRM,	// Inst #117 = LDC2L_PRE
  ARM_FORMAT_BRFRM,	// Inst #118 = LDC2_OFFSET
  ARM_FORMAT_BRFRM,	// Inst #119 = LDC2_OPTION
  ARM_FORMAT_BRFRM,	// Inst #120 = LDC2_POST
  ARM_FORMAT_BRFRM,	// Inst #121 = LDC2_PRE
  ARM_FORMAT_BRFRM,	// Inst #122 = LDCL_OFFSET
  ARM_FORMAT_BRFRM,	// Inst #123 = LDCL_OPTION
  ARM_FORMAT_BRFRM,	// Inst #124 = LDCL_POST
  ARM_FORMAT_BRFRM,	// Inst #125 = LDCL_PRE
  ARM_FORMAT_BRFRM,	// Inst #126 = LDC_OFFSET
  ARM_FORMAT_BRFRM,	// Inst #127 = LDC_OPTION
  ARM_FORMAT_BRFRM,	// Inst #128 = LDC_POST
  ARM_FORMAT_BRFRM,	// Inst #129 = LDC_PRE
  ARM_FORMAT_LDSTMULFRM,	// Inst #130 = LDMDA
  ARM_FORMAT_LDSTMULFRM,	// Inst #131 = LDMDA_UPD
  ARM_FORMAT_LDSTMULFRM,	// Inst #132 = LDMDB
  ARM_FORMAT_LDSTMULFRM,	// Inst #133 = LDMDB_UPD
  ARM_FORMAT_LDSTMULFRM,	// Inst #134 = LDMIA
  ARM_FORMAT_LDSTMULFRM,	// Inst #135 = LDMIA_RET
  ARM_FORMAT_LDSTMULFRM,	// Inst #136 = LDMIA_UPD
  ARM_FORMAT_LDSTMULFRM,	// Inst #137 = LDMIB
  ARM_FORMAT_LDSTMULFRM,	// Inst #138 = LDMIB_UPD
  ARM_FORMAT_LDFRM,	// Inst #139 = LDRBT
  ARM_FORMAT_LDFRM,	// Inst #140 = LDRB_POST
  ARM_FORMAT_LDFRM,	// Inst #141 = LDRB_PRE
  ARM_FORMAT_LDFRM,	// Inst #142 = LDRBi12
  ARM_FORMAT_LDFRM,	// Inst #143 = LDRBrs
  ARM_FORMAT_LDMISCFRM,	// Inst #144 = LDRD
  ARM_FORMAT_LDMISCFRM,	// Inst #145 = LDRD_POST
  ARM_FORMAT_LDMISCFRM,	// Inst #146 = LDRD_PRE
  ARM_FORMAT_LDSTEXFRM,	// Inst #147 = LDREX
  ARM_FORMAT_LDSTEXFRM,	// Inst #148 = LDREXB
  ARM_FORMAT_LDSTEXFRM,	// Inst #149 = LDREXD
  ARM_FORMAT_LDSTEXFRM,	// Inst #150 = LDREXH
  ARM_FORMAT_LDMISCFRM,	// Inst #151 = LDRH
  ARM_FORMAT_LDMISCFRM,	// Inst #152 = LDRHT
  ARM_FORMAT_LDMISCFRM,	// Inst #153 = LDRH_POST
  ARM_FORMAT_LDMISCFRM,	// Inst #154 = LDRH_PRE
  ARM_FORMAT_LDMISCFRM,	// Inst #155 = LDRSB
  ARM_FORMAT_LDMISCFRM,	// Inst #156 = LDRSBT
  ARM_FORMAT_LDMISCFRM,	// Inst #157 = LDRSB_POST
  ARM_FORMAT_LDMISCFRM,	// Inst #158 = LDRSB_PRE
  ARM_FORMAT_LDMISCFRM,	// Inst #159 = LDRSH
  ARM_FORMAT_LDMISCFRM,	// Inst #160 = LDRSHT
  ARM_FORMAT_LDMISCFRM,	// Inst #161 = LDRSH_POST
  ARM_FORMAT_LDMISCFRM,	// Inst #162 = LDRSH_PRE
  ARM_FORMAT_LDFRM,	// Inst #163 = LDRT
  ARM_FORMAT_LDFRM,	// Inst #164 = LDR_POST
  ARM_FORMAT_LDFRM,	// Inst #165 = LDR_PRE
  ARM_FORMAT_LDFRM,	// Inst #166 = LDRcp
  ARM_FORMAT_LDFRM,	// Inst #167 = LDRi12
  ARM_FORMAT_LDFRM,	// Inst #168 = LDRrs
  ARM_FORMAT_PSEUDO,	// Inst #169 = LEApcrel
  ARM_FORMAT_PSEUDO,	// Inst #170 = LEApcrelJT
  ARM_FORMAT_BRFRM,	// Inst #171 = MCR
  ARM_FORMAT_BRFRM,	// Inst #172 = MCR2
  ARM_FORMAT_BRFRM,	// Inst #173 = MCRR
  ARM_FORMAT_BRFRM,	// Inst #174 = MCRR2
  ARM_FORMAT_MULFRM,	// Inst #175 = MLA
  ARM_FORMAT_PSEUDO,	// Inst #176 = MLAv5
  ARM_FORMAT_MULFRM,	// Inst #177 = MLS
  ARM_FORMAT_DPFRM,	// Inst #178 = MOVCCi
  ARM_FORMAT_DPFRM,	// Inst #179 = MOVCCi16
  ARM_FORMAT_PSEUDO,	// Inst #180 = MOVCCi32imm
  ARM_FORMAT_DPFRM,	// Inst #181 = MOVCCr
  ARM_FORMAT_DPSOREGFRM,	// Inst #182 = MOVCCs
  ARM_FORMAT_BRMISCFRM,	// Inst #183 = MOVPCLR
  ARM_FORMAT_PSEUDO,	// Inst #184 = MOVPCRX
  ARM_FORMAT_DPFRM,	// Inst #185 = MOVTi16
  ARM_FORMAT_PSEUDO,	// Inst #186 = MOVTi16_ga_pcrel
  ARM_FORMAT_PSEUDO,	// Inst #187 = MOV_ga_dyn
  ARM_FORMAT_PSEUDO,	// Inst #188 = MOV_ga_pcrel
  ARM_FORMAT_PSEUDO,	// Inst #189 = MOV_ga_pcrel_ldr
  ARM_FORMAT_DPFRM,	// Inst #190 = MOVi
  ARM_FORMAT_DPFRM,	// Inst #191 = MOVi16
  ARM_FORMAT_PSEUDO,	// Inst #192 = MOVi16_ga_pcrel
  ARM_FORMAT_PSEUDO,	// Inst #193 = MOVi32imm
  ARM_FORMAT_DPFRM,	// Inst #194 = MOVr
  ARM_FORMAT_DPFRM,	// Inst #195 = MOVr_TC
  ARM_FORMAT_DPSOREGFRM,	// Inst #196 = MOVs
  ARM_FORMAT_PSEUDO,	// Inst #197 = MOVsra_flag
  ARM_FORMAT_PSEUDO,	// Inst #198 = MOVsrl_flag
  ARM_FORMAT_BRFRM,	// Inst #199 = MRC
  ARM_FORMAT_BRFRM,	// Inst #200 = MRC2
  ARM_FORMAT_BRFRM,	// Inst #201 = MRRC
  ARM_FORMAT_BRFRM,	// Inst #202 = MRRC2
  ARM_FORMAT_BRFRM,	// Inst #203 = MRS
  ARM_FORMAT_BRFRM,	// Inst #204 = MRSsys
  ARM_FORMAT_BRFRM,	// Inst #205 = MSR
  ARM_FORMAT_BRFRM,	// Inst #206 = MSRi
  ARM_FORMAT_MULFRM,	// Inst #207 = MUL
  ARM_FORMAT_PSEUDO,	// Inst #208 = MULv5
  ARM_FORMAT_DPFRM,	// Inst #209 = MVNCCi
  ARM_FORMAT_DPFRM,	// Inst #210 = MVNi
  ARM_FORMAT_DPFRM,	// Inst #211 = MVNr
  ARM_FORMAT_DPSOREGFRM,	// Inst #212 = MVNs
  ARM_FORMAT_MISCFRM,	// Inst #213 = NOP
  ARM_FORMAT_DPFRM,	// Inst #214 = ORRri
  ARM_FORMAT_DPFRM,	// Inst #215 = ORRrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #216 = ORRrs
  ARM_FORMAT_PSEUDO,	// Inst #217 = PICADD
  ARM_FORMAT_PSEUDO,	// Inst #218 = PICLDR
  ARM_FORMAT_PSEUDO,	// Inst #219 = PICLDRB
  ARM_FORMAT_PSEUDO,	// Inst #220 = PICLDRH
  ARM_FORMAT_PSEUDO,	// Inst #221 = PICLDRSB
  ARM_FORMAT_PSEUDO,	// Inst #222 = PICLDRSH
  ARM_FORMAT_PSEUDO,	// Inst #223 = PICSTR
  ARM_FORMAT_PSEUDO,	// Inst #224 = PICSTRB
  ARM_FORMAT_PSEUDO,	// Inst #225 = PICSTRH
  ARM_FORMAT_ARITHMISCFRM,	// Inst #226 = PKHBT
  ARM_FORMAT_ARITHMISCFRM,	// Inst #227 = PKHTB
  ARM_FORMAT_MISCFRM,	// Inst #228 = PLDWi12
  ARM_FORMAT_MISCFRM,	// Inst #229 = PLDWrs
  ARM_FORMAT_MISCFRM,	// Inst #230 = PLDi12
  ARM_FORMAT_MISCFRM,	// Inst #231 = PLDrs
  ARM_FORMAT_MISCFRM,	// Inst #232 = PLIi12
  ARM_FORMAT_MISCFRM,	// Inst #233 = PLIrs
  ARM_FORMAT_DPFRM,	// Inst #234 = QADD
  ARM_FORMAT_DPFRM,	// Inst #235 = QADD16
  ARM_FORMAT_DPFRM,	// Inst #236 = QADD8
  ARM_FORMAT_DPFRM,	// Inst #237 = QASX
  ARM_FORMAT_DPFRM,	// Inst #238 = QDADD
  ARM_FORMAT_DPFRM,	// Inst #239 = QDSUB
  ARM_FORMAT_DPFRM,	// Inst #240 = QSAX
  ARM_FORMAT_DPFRM,	// Inst #241 = QSUB
  ARM_FORMAT_DPFRM,	// Inst #242 = QSUB16
  ARM_FORMAT_DPFRM,	// Inst #243 = QSUB8
  ARM_FORMAT_ARITHMISCFRM,	// Inst #244 = RBIT
  ARM_FORMAT_ARITHMISCFRM,	// Inst #245 = REV
  ARM_FORMAT_ARITHMISCFRM,	// Inst #246 = REV16
  ARM_FORMAT_ARITHMISCFRM,	// Inst #247 = REVSH
  ARM_FORMAT_BRFRM,	// Inst #248 = RFE
  ARM_FORMAT_BRFRM,	// Inst #249 = RFEW
  ARM_FORMAT_PSEUDO,	// Inst #250 = RRX
  ARM_FORMAT_DPFRM,	// Inst #251 = RSBSri
  ARM_FORMAT_DPFRM,	// Inst #252 = RSBSrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #253 = RSBSrs
  ARM_FORMAT_DPFRM,	// Inst #254 = RSBri
  ARM_FORMAT_DPFRM,	// Inst #255 = RSBrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #256 = RSBrs
  ARM_FORMAT_DPFRM,	// Inst #257 = RSCSri
  ARM_FORMAT_DPSOREGFRM,	// Inst #258 = RSCSrs
  ARM_FORMAT_DPFRM,	// Inst #259 = RSCri
  ARM_FORMAT_DPFRM,	// Inst #260 = RSCrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #261 = RSCrs
  ARM_FORMAT_DPFRM,	// Inst #262 = SADD16
  ARM_FORMAT_DPFRM,	// Inst #263 = SADD8
  ARM_FORMAT_DPFRM,	// Inst #264 = SASX
  ARM_FORMAT_DPFRM,	// Inst #265 = SBCSSri
  ARM_FORMAT_DPFRM,	// Inst #266 = SBCSSrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #267 = SBCSSrs
  ARM_FORMAT_DPFRM,	// Inst #268 = SBCri
  ARM_FORMAT_DPFRM,	// Inst #269 = SBCrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #270 = SBCrs
  ARM_FORMAT_DPFRM,	// Inst #271 = SBFX
  ARM_FORMAT_DPFRM,	// Inst #272 = SEL
  ARM_FORMAT_MISCFRM,	// Inst #273 = SETEND
  ARM_FORMAT_MISCFRM,	// Inst #274 = SEV
  ARM_FORMAT_DPFRM,	// Inst #275 = SHADD16
  ARM_FORMAT_DPFRM,	// Inst #276 = SHADD8
  ARM_FORMAT_DPFRM,	// Inst #277 = SHASX
  ARM_FORMAT_DPFRM,	// Inst #278 = SHSAX
  ARM_FORMAT_DPFRM,	// Inst #279 = SHSUB16
  ARM_FORMAT_DPFRM,	// Inst #280 = SHSUB8
  ARM_FORMAT_BRFRM,	// Inst #281 = SMC
  ARM_FORMAT_MULFRM,	// Inst #282 = SMLABB
  ARM_FORMAT_MULFRM,	// Inst #283 = SMLABT
  ARM_FORMAT_MULFRM,	// Inst #284 = SMLAD
  ARM_FORMAT_MULFRM,	// Inst #285 = SMLADX
  ARM_FORMAT_MULFRM,	// Inst #286 = SMLAL
  ARM_FORMAT_MULFRM,	// Inst #287 = SMLALBB
  ARM_FORMAT_MULFRM,	// Inst #288 = SMLALBT
  ARM_FORMAT_MULFRM,	// Inst #289 = SMLALD
  ARM_FORMAT_MULFRM,	// Inst #290 = SMLALDX
  ARM_FORMAT_MULFRM,	// Inst #291 = SMLALTB
  ARM_FORMAT_MULFRM,	// Inst #292 = SMLALTT
  ARM_FORMAT_PSEUDO,	// Inst #293 = SMLALv5
  ARM_FORMAT_MULFRM,	// Inst #294 = SMLATB
  ARM_FORMAT_MULFRM,	// Inst #295 = SMLATT
  ARM_FORMAT_MULFRM,	// Inst #296 = SMLAWB
  ARM_FORMAT_MULFRM,	// Inst #297 = SMLAWT
  ARM_FORMAT_MULFRM,	// Inst #298 = SMLSD
  ARM_FORMAT_MULFRM,	// Inst #299 = SMLSDX
  ARM_FORMAT_MULFRM,	// Inst #300 = SMLSLD
  ARM_FORMAT_MULFRM,	// Inst #301 = SMLSLDX
  ARM_FORMAT_MULFRM,	// Inst #302 = SMMLA
  ARM_FORMAT_MULFRM,	// Inst #303 = SMMLAR
  ARM_FORMAT_MULFRM,	// Inst #304 = SMMLS
  ARM_FORMAT_MULFRM,	// Inst #305 = SMMLSR
  ARM_FORMAT_MULFRM,	// Inst #306 = SMMUL
  ARM_FORMAT_MULFRM,	// Inst #307 = SMMULR
  ARM_FORMAT_MULFRM,	// Inst #308 = SMUAD
  ARM_FORMAT_MULFRM,	// Inst #309 = SMUADX
  ARM_FORMAT_MULFRM,	// Inst #310 = SMULBB
  ARM_FORMAT_MULFRM,	// Inst #311 = SMULBT
  ARM_FORMAT_MULFRM,	// Inst #312 = SMULL
  ARM_FORMAT_PSEUDO,	// Inst #313 = SMULLv5
  ARM_FORMAT_MULFRM,	// Inst #314 = SMULTB
  ARM_FORMAT_MULFRM,	// Inst #315 = SMULTT
  ARM_FORMAT_MULFRM,	// Inst #316 = SMULWB
  ARM_FORMAT_MULFRM,	// Inst #317 = SMULWT
  ARM_FORMAT_MULFRM,	// Inst #318 = SMUSD
  ARM_FORMAT_MULFRM,	// Inst #319 = SMUSDX
  ARM_FORMAT_BRFRM,	// Inst #320 = SRS
  ARM_FORMAT_BRFRM,	// Inst #321 = SRSW
  ARM_FORMAT_SATFRM,	// Inst #322 = SSAT
  ARM_FORMAT_SATFRM,	// Inst #323 = SSAT16
  ARM_FORMAT_DPFRM,	// Inst #324 = SSAX
  ARM_FORMAT_DPFRM,	// Inst #325 = SSUB16
  ARM_FORMAT_DPFRM,	// Inst #326 = SSUB8
  ARM_FORMAT_BRFRM,	// Inst #327 = STC2L_OFFSET
  ARM_FORMAT_BRFRM,	// Inst #328 = STC2L_OPTION
  ARM_FORMAT_BRFRM,	// Inst #329 = STC2L_POST
  ARM_FORMAT_BRFRM,	// Inst #330 = STC2L_PRE
  ARM_FORMAT_BRFRM,	// Inst #331 = STC2_OFFSET
  ARM_FORMAT_BRFRM,	// Inst #332 = STC2_OPTION
  ARM_FORMAT_BRFRM,	// Inst #333 = STC2_POST
  ARM_FORMAT_BRFRM,	// Inst #334 = STC2_PRE
  ARM_FORMAT_BRFRM,	// Inst #335 = STCL_OFFSET
  ARM_FORMAT_BRFRM,	// Inst #336 = STCL_OPTION
  ARM_FORMAT_BRFRM,	// Inst #337 = STCL_POST
  ARM_FORMAT_BRFRM,	// Inst #338 = STCL_PRE
  ARM_FORMAT_BRFRM,	// Inst #339 = STC_OFFSET
  ARM_FORMAT_BRFRM,	// Inst #340 = STC_OPTION
  ARM_FORMAT_BRFRM,	// Inst #341 = STC_POST
  ARM_FORMAT_BRFRM,	// Inst #342 = STC_PRE
  ARM_FORMAT_LDSTMULFRM,	// Inst #343 = STMDA
  ARM_FORMAT_LDSTMULFRM,	// Inst #344 = STMDA_UPD
  ARM_FORMAT_LDSTMULFRM,	// Inst #345 = STMDB
  ARM_FORMAT_LDSTMULFRM,	// Inst #346 = STMDB_UPD
  ARM_FORMAT_LDSTMULFRM,	// Inst #347 = STMIA
  ARM_FORMAT_LDSTMULFRM,	// Inst #348 = STMIA_UPD
  ARM_FORMAT_LDSTMULFRM,	// Inst #349 = STMIB
  ARM_FORMAT_LDSTMULFRM,	// Inst #350 = STMIB_UPD
  ARM_FORMAT_STFRM,	// Inst #351 = STRBT
  ARM_FORMAT_STFRM,	// Inst #352 = STRB_POST
  ARM_FORMAT_STFRM,	// Inst #353 = STRB_PRE
  ARM_FORMAT_STFRM,	// Inst #354 = STRBi12
  ARM_FORMAT_STFRM,	// Inst #355 = STRBrs
  ARM_FORMAT_STMISCFRM,	// Inst #356 = STRD
  ARM_FORMAT_STMISCFRM,	// Inst #357 = STRD_POST
  ARM_FORMAT_STMISCFRM,	// Inst #358 = STRD_PRE
  ARM_FORMAT_LDSTEXFRM,	// Inst #359 = STREX
  ARM_FORMAT_LDSTEXFRM,	// Inst #360 = STREXB
  ARM_FORMAT_LDSTEXFRM,	// Inst #361 = STREXD
  ARM_FORMAT_LDSTEXFRM,	// Inst #362 = STREXH
  ARM_FORMAT_STMISCFRM,	// Inst #363 = STRH
  ARM_FORMAT_STMISCFRM,	// Inst #364 = STRHT
  ARM_FORMAT_STMISCFRM,	// Inst #365 = STRH_POST
  ARM_FORMAT_STMISCFRM,	// Inst #366 = STRH_PRE
  ARM_FORMAT_STFRM,	// Inst #367 = STRT
  ARM_FORMAT_STFRM,	// Inst #368 = STR_POST
  ARM_FORMAT_STFRM,	// Inst #369 = STR_PRE
  ARM_FORMAT_STFRM,	// Inst #370 = STRi12
  ARM_FORMAT_STFRM,	// Inst #371 = STRrs
  ARM_FORMAT_DPFRM,	// Inst #372 = SUBSri
  ARM_FORMAT_DPFRM,	// Inst #373 = SUBSrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #374 = SUBSrs
  ARM_FORMAT_DPFRM,	// Inst #375 = SUBri
  ARM_FORMAT_DPFRM,	// Inst #376 = SUBrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #377 = SUBrs
  ARM_FORMAT_BRFRM,	// Inst #378 = SVC
  ARM_FORMAT_MISCFRM,	// Inst #379 = SWP
  ARM_FORMAT_MISCFRM,	// Inst #380 = SWPB
  ARM_FORMAT_EXTFRM,	// Inst #381 = SXTAB16rr
  ARM_FORMAT_EXTFRM,	// Inst #382 = SXTAB16rr_rot
  ARM_FORMAT_EXTFRM,	// Inst #383 = SXTABrr
  ARM_FORMAT_EXTFRM,	// Inst #384 = SXTABrr_rot
  ARM_FORMAT_EXTFRM,	// Inst #385 = SXTAHrr
  ARM_FORMAT_EXTFRM,	// Inst #386 = SXTAHrr_rot
  ARM_FORMAT_EXTFRM,	// Inst #387 = SXTB16r
  ARM_FORMAT_EXTFRM,	// Inst #388 = SXTB16r_rot
  ARM_FORMAT_EXTFRM,	// Inst #389 = SXTBr
  ARM_FORMAT_EXTFRM,	// Inst #390 = SXTBr_rot
  ARM_FORMAT_EXTFRM,	// Inst #391 = SXTHr
  ARM_FORMAT_EXTFRM,	// Inst #392 = SXTHr_rot
  ARM_FORMAT_BRFRM,	// Inst #393 = TAILJMPd
  ARM_FORMAT_BRFRM,	// Inst #394 = TAILJMPdND
  ARM_FORMAT_BRFRM,	// Inst #395 = TAILJMPdNDt
  ARM_FORMAT_BRFRM,	// Inst #396 = TAILJMPdt
  ARM_FORMAT_BRMISCFRM,	// Inst #397 = TAILJMPr
  ARM_FORMAT_BRMISCFRM,	// Inst #398 = TAILJMPrND
  ARM_FORMAT_PSEUDO,	// Inst #399 = TCRETURNdi
  ARM_FORMAT_PSEUDO,	// Inst #400 = TCRETURNdiND
  ARM_FORMAT_PSEUDO,	// Inst #401 = TCRETURNri
  ARM_FORMAT_PSEUDO,	// Inst #402 = TCRETURNriND
  ARM_FORMAT_DPFRM,	// Inst #403 = TEQri
  ARM_FORMAT_DPFRM,	// Inst #404 = TEQrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #405 = TEQrs
  ARM_FORMAT_PSEUDO,	// Inst #406 = TPsoft
  ARM_FORMAT_MISCFRM,	// Inst #407 = TRAP
  ARM_FORMAT_DPFRM,	// Inst #408 = TSTri
  ARM_FORMAT_DPFRM,	// Inst #409 = TSTrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #410 = TSTrs
  ARM_FORMAT_DPFRM,	// Inst #411 = UADD16
  ARM_FORMAT_DPFRM,	// Inst #412 = UADD8
  ARM_FORMAT_DPFRM,	// Inst #413 = UASX
  ARM_FORMAT_DPFRM,	// Inst #414 = UBFX
  ARM_FORMAT_DPFRM,	// Inst #415 = UHADD16
  ARM_FORMAT_DPFRM,	// Inst #416 = UHADD8
  ARM_FORMAT_DPFRM,	// Inst #417 = UHASX
  ARM_FORMAT_DPFRM,	// Inst #418 = UHSAX
  ARM_FORMAT_DPFRM,	// Inst #419 = UHSUB16
  ARM_FORMAT_DPFRM,	// Inst #420 = UHSUB8
  ARM_FORMAT_MULFRM,	// Inst #421 = UMAAL
  ARM_FORMAT_PSEUDO,	// Inst #422 = UMAALv5
  ARM_FORMAT_MULFRM,	// Inst #423 = UMLAL
  ARM_FORMAT_PSEUDO,	// Inst #424 = UMLALv5
  ARM_FORMAT_MULFRM,	// Inst #425 = UMULL
  ARM_FORMAT_PSEUDO,	// Inst #426 = UMULLv5
  ARM_FORMAT_DPFRM,	// Inst #427 = UQADD16
  ARM_FORMAT_DPFRM,	// Inst #428 = UQADD8
  ARM_FORMAT_DPFRM,	// Inst #429 = UQASX
  ARM_FORMAT_DPFRM,	// Inst #430 = UQSAX
  ARM_FORMAT_DPFRM,	// Inst #431 = UQSUB16
  ARM_FORMAT_DPFRM,	// Inst #432 = UQSUB8
  ARM_FORMAT_MULFRM,	// Inst #433 = USAD8
  ARM_FORMAT_MULFRM,	// Inst #434 = USADA8
  ARM_FORMAT_SATFRM,	// Inst #435 = USAT
  ARM_FORMAT_SATFRM,	// Inst #436 = USAT16
  ARM_FORMAT_DPFRM,	// Inst #437 = USAX
  ARM_FORMAT_DPFRM,	// Inst #438 = USUB16
  ARM_FORMAT_DPFRM,	// Inst #439 = USUB8
  ARM_FORMAT_EXTFRM,	// Inst #440 = UXTAB16rr
  ARM_FORMAT_EXTFRM,	// Inst #441 = UXTAB16rr_rot
  ARM_FORMAT_EXTFRM,	// Inst #442 = UXTABrr
  ARM_FORMAT_EXTFRM,	// Inst #443 = UXTABrr_rot
  ARM_FORMAT_EXTFRM,	// Inst #444 = UXTAHrr
  ARM_FORMAT_EXTFRM,	// Inst #445 = UXTAHrr_rot
  ARM_FORMAT_EXTFRM,	// Inst #446 = UXTB16r
  ARM_FORMAT_EXTFRM,	// Inst #447 = UXTB16r_rot
  ARM_FORMAT_EXTFRM,	// Inst #448 = UXTBr
  ARM_FORMAT_EXTFRM,	// Inst #449 = UXTBr_rot
  ARM_FORMAT_EXTFRM,	// Inst #450 = UXTHr
  ARM_FORMAT_EXTFRM,	// Inst #451 = UXTHr_rot
  ARM_FORMAT_N3Reg,	// Inst #452 = VABALsv2i64
  ARM_FORMAT_N3Reg,	// Inst #453 = VABALsv4i32
  ARM_FORMAT_N3Reg,	// Inst #454 = VABALsv8i16
  ARM_FORMAT_N3Reg,	// Inst #455 = VABALuv2i64
  ARM_FORMAT_N3Reg,	// Inst #456 = VABALuv4i32
  ARM_FORMAT_N3Reg,	// Inst #457 = VABALuv8i16
  ARM_FORMAT_N3Reg,	// Inst #458 = VABAsv16i8
  ARM_FORMAT_N3Reg,	// Inst #459 = VABAsv2i32
  ARM_FORMAT_N3Reg,	// Inst #460 = VABAsv4i16
  ARM_FORMAT_N3Reg,	// Inst #461 = VABAsv4i32
  ARM_FORMAT_N3Reg,	// Inst #462 = VABAsv8i16
  ARM_FORMAT_N3Reg,	// Inst #463 = VABAsv8i8
  ARM_FORMAT_N3Reg,	// Inst #464 = VABAuv16i8
  ARM_FORMAT_N3Reg,	// Inst #465 = VABAuv2i32
  ARM_FORMAT_N3Reg,	// Inst #466 = VABAuv4i16
  ARM_FORMAT_N3Reg,	// Inst #467 = VABAuv4i32
  ARM_FORMAT_N3Reg,	// Inst #468 = VABAuv8i16
  ARM_FORMAT_N3Reg,	// Inst #469 = VABAuv8i8
  ARM_FORMAT_N3Reg,	// Inst #470 = VABDLsv2i64
  ARM_FORMAT_N3Reg,	// Inst #471 = VABDLsv4i32
  ARM_FORMAT_N3Reg,	// Inst #472 = VABDLsv8i16
  ARM_FORMAT_N3Reg,	// Inst #473 = VABDLuv2i64
  ARM_FORMAT_N3Reg,	// Inst #474 = VABDLuv4i32
  ARM_FORMAT_N3Reg,	// Inst #475 = VABDLuv8i16
  ARM_FORMAT_N3Reg,	// Inst #476 = VABDfd
  ARM_FORMAT_N3Reg,	// Inst #477 = VABDfq
  ARM_FORMAT_N3Reg,	// Inst #478 = VABDsv16i8
  ARM_FORMAT_N3Reg,	// Inst #479 = VABDsv2i32
  ARM_FORMAT_N3Reg,	// Inst #480 = VABDsv4i16
  ARM_FORMAT_N3Reg,	// Inst #481 = VABDsv4i32
  ARM_FORMAT_N3Reg,	// Inst #482 = VABDsv8i16
  ARM_FORMAT_N3Reg,	// Inst #483 = VABDsv8i8
  ARM_FORMAT_N3Reg,	// Inst #484 = VABDuv16i8
  ARM_FORMAT_N3Reg,	// Inst #485 = VABDuv2i32
  ARM_FORMAT_N3Reg,	// Inst #486 = VABDuv4i16
  ARM_FORMAT_N3Reg,	// Inst #487 = VABDuv4i32
  ARM_FORMAT_N3Reg,	// Inst #488 = VABDuv8i16
  ARM_FORMAT_N3Reg,	// Inst #489 = VABDuv8i8
  ARM_FORMAT_VFPUNARYFRM,	// Inst #490 = VABSD
  ARM_FORMAT_VFPUNARYFRM,	// Inst #491 = VABSS
  ARM_FORMAT_N2Reg,	// Inst #492 = VABSfd
  ARM_FORMAT_N2Reg,	// Inst #493 = VABSfq
  ARM_FORMAT_N2Reg,	// Inst #494 = VABSv16i8
  ARM_FORMAT_N2Reg,	// Inst #495 = VABSv2i32
  ARM_FORMAT_N2Reg,	// Inst #496 = VABSv4i16
  ARM_FORMAT_N2Reg,	// Inst #497 = VABSv4i32
  ARM_FORMAT_N2Reg,	// Inst #498 = VABSv8i16
  ARM_FORMAT_N2Reg,	// Inst #499 = VABSv8i8
  ARM_FORMAT_N3Reg,	// Inst #500 = VACGEd
  ARM_FORMAT_N3Reg,	// Inst #501 = VACGEq
  ARM_FORMAT_N3Reg,	// Inst #502 = VACGTd
  ARM_FORMAT_N3Reg,	// Inst #503 = VACGTq
  ARM_FORMAT_VFPBINARYFRM,	// Inst #504 = VADDD
  ARM_FORMAT_N3Reg,	// Inst #505 = VADDHNv2i32
  ARM_FORMAT_N3Reg,	// Inst #506 = VADDHNv4i16
  ARM_FORMAT_N3Reg,	// Inst #507 = VADDHNv8i8
  ARM_FORMAT_N3Reg,	// Inst #508 = VADDLsv2i64
  ARM_FORMAT_N3Reg,	// Inst #509 = VADDLsv4i32
  ARM_FORMAT_N3Reg,	// Inst #510 = VADDLsv8i16
  ARM_FORMAT_N3Reg,	// Inst #511 = VADDLuv2i64
  ARM_FORMAT_N3Reg,	// Inst #512 = VADDLuv4i32
  ARM_FORMAT_N3Reg,	// Inst #513 = VADDLuv8i16
  ARM_FORMAT_VFPBINARYFRM,	// Inst #514 = VADDS
  ARM_FORMAT_N3Reg,	// Inst #515 = VADDWsv2i64
  ARM_FORMAT_N3Reg,	// Inst #516 = VADDWsv4i32
  ARM_FORMAT_N3Reg,	// Inst #517 = VADDWsv8i16
  ARM_FORMAT_N3Reg,	// Inst #518 = VADDWuv2i64
  ARM_FORMAT_N3Reg,	// Inst #519 = VADDWuv4i32
  ARM_FORMAT_N3Reg,	// Inst #520 = VADDWuv8i16
  ARM_FORMAT_N3Reg,	// Inst #521 = VADDfd
  ARM_FORMAT_N3Reg,	// Inst #522 = VADDfq
  ARM_FORMAT_N3Reg,	// Inst #523 = VADDv16i8
  ARM_FORMAT_N3Reg,	// Inst #524 = VADDv1i64
  ARM_FORMAT_N3Reg,	// Inst #525 = VADDv2i32
  ARM_FORMAT_N3Reg,	// Inst #526 = VADDv2i64
  ARM_FORMAT_N3Reg,	// Inst #527 = VADDv4i16
  ARM_FORMAT_N3Reg,	// Inst #528 = VADDv4i32
  ARM_FORMAT_N3Reg,	// Inst #529 = VADDv8i16
  ARM_FORMAT_N3Reg,	// Inst #530 = VADDv8i8
  ARM_FORMAT_N3Reg,	// Inst #531 = VANDd
  ARM_FORMAT_N3Reg,	// Inst #532 = VANDq
  ARM_FORMAT_N3Reg,	// Inst #533 = VBICd
  ARM_FORMAT_N1RegModImm,	// Inst #534 = VBICiv2i32
  ARM_FORMAT_N1RegModImm,	// Inst #535 = VBICiv4i16
  ARM_FORMAT_N1RegModImm,	// Inst #536 = VBICiv4i32
  ARM_FORMAT_N1RegModImm,	// Inst #537 = VBICiv8i16
  ARM_FORMAT_N3Reg,	// Inst #538 = VBICq
  ARM_FORMAT_N3Reg,	// Inst #539 = VBIFd
  ARM_FORMAT_N3Reg,	// Inst #540 = VBIFq
  ARM_FORMAT_N3Reg,	// Inst #541 = VBITd
  ARM_FORMAT_N3Reg,	// Inst #542 = VBITq
  ARM_FORMAT_N3Reg,	// Inst #543 = VBSLd
  ARM_FORMAT_N3Reg,	// Inst #544 = VBSLq
  ARM_FORMAT_N3Reg,	// Inst #545 = VCEQfd
  ARM_FORMAT_N3Reg,	// Inst #546 = VCEQfq
  ARM_FORMAT_N3Reg,	// Inst #547 = VCEQv16i8
  ARM_FORMAT_N3Reg,	// Inst #548 = VCEQv2i32
  ARM_FORMAT_N3Reg,	// Inst #549 = VCEQv4i16
  ARM_FORMAT_N3Reg,	// Inst #550 = VCEQv4i32
  ARM_FORMAT_N3Reg,	// Inst #551 = VCEQv8i16
  ARM_FORMAT_N3Reg,	// Inst #552 = VCEQv8i8
  ARM_FORMAT_N2Reg,	// Inst #553 = VCEQzv16i8
  ARM_FORMAT_N2Reg,	// Inst #554 = VCEQzv2f32
  ARM_FORMAT_N2Reg,	// Inst #555 = VCEQzv2i32
  ARM_FORMAT_N2Reg,	// Inst #556 = VCEQzv4f32
  ARM_FORMAT_N2Reg,	// Inst #557 = VCEQzv4i16
  ARM_FORMAT_N2Reg,	// Inst #558 = VCEQzv4i32
  ARM_FORMAT_N2Reg,	// Inst #559 = VCEQzv8i16
  ARM_FORMAT_N2Reg,	// Inst #560 = VCEQzv8i8
  ARM_FORMAT_N3Reg,	// Inst #561 = VCGEfd
  ARM_FORMAT_N3Reg,	// Inst #562 = VCGEfq
  ARM_FORMAT_N3Reg,	// Inst #563 = VCGEsv16i8
  ARM_FORMAT_N3Reg,	// Inst #564 = VCGEsv2i32
  ARM_FORMAT_N3Reg,	// Inst #565 = VCGEsv4i16
  ARM_FORMAT_N3Reg,	// Inst #566 = VCGEsv4i32
  ARM_FORMAT_N3Reg,	// Inst #567 = VCGEsv8i16
  ARM_FORMAT_N3Reg,	// Inst #568 = VCGEsv8i8
  ARM_FORMAT_N3Reg,	// Inst #569 = VCGEuv16i8
  ARM_FORMAT_N3Reg,	// Inst #570 = VCGEuv2i32
  ARM_FORMAT_N3Reg,	// Inst #571 = VCGEuv4i16
  ARM_FORMAT_N3Reg,	// Inst #572 = VCGEuv4i32
  ARM_FORMAT_N3Reg,	// Inst #573 = VCGEuv8i16
  ARM_FORMAT_N3Reg,	// Inst #574 = VCGEuv8i8
  ARM_FORMAT_N2Reg,	// Inst #575 = VCGEzv16i8
  ARM_FORMAT_N2Reg,	// Inst #576 = VCGEzv2f32
  ARM_FORMAT_N2Reg,	// Inst #577 = VCGEzv2i32
  ARM_FORMAT_N2Reg,	// Inst #578 = VCGEzv4f32
  ARM_FORMAT_N2Reg,	// Inst #579 = VCGEzv4i16
  ARM_FORMAT_N2Reg,	// Inst #580 = VCGEzv4i32
  ARM_FORMAT_N2Reg,	// Inst #581 = VCGEzv8i16
  ARM_FORMAT_N2Reg,	// Inst #582 = VCGEzv8i8
  ARM_FORMAT_N3Reg,	// Inst #583 = VCGTfd
  ARM_FORMAT_N3Reg,	// Inst #584 = VCGTfq
  ARM_FORMAT_N3Reg,	// Inst #585 = VCGTsv16i8
  ARM_FORMAT_N3Reg,	// Inst #586 = VCGTsv2i32
  ARM_FORMAT_N3Reg,	// Inst #587 = VCGTsv4i16
  ARM_FORMAT_N3Reg,	// Inst #588 = VCGTsv4i32
  ARM_FORMAT_N3Reg,	// Inst #589 = VCGTsv8i16
  ARM_FORMAT_N3Reg,	// Inst #590 = VCGTsv8i8
  ARM_FORMAT_N3Reg,	// Inst #591 = VCGTuv16i8
  ARM_FORMAT_N3Reg,	// Inst #592 = VCGTuv2i32
  ARM_FORMAT_N3Reg,	// Inst #593 = VCGTuv4i16
  ARM_FORMAT_N3Reg,	// Inst #594 = VCGTuv4i32
  ARM_FORMAT_N3Reg,	// Inst #595 = VCGTuv8i16
  ARM_FORMAT_N3Reg,	// Inst #596 = VCGTuv8i8
  ARM_FORMAT_N2Reg,	// Inst #597 = VCGTzv16i8
  ARM_FORMAT_N2Reg,	// Inst #598 = VCGTzv2f32
  ARM_FORMAT_N2Reg,	// Inst #599 = VCGTzv2i32
  ARM_FORMAT_N2Reg,	// Inst #600 = VCGTzv4f32
  ARM_FORMAT_N2Reg,	// Inst #601 = VCGTzv4i16
  ARM_FORMAT_N2Reg,	// Inst #602 = VCGTzv4i32
  ARM_FORMAT_N2Reg,	// Inst #603 = VCGTzv8i16
  ARM_FORMAT_N2Reg,	// Inst #604 = VCGTzv8i8
  ARM_FORMAT_N2Reg,	// Inst #605 = VCLEzv16i8
  ARM_FORMAT_N2Reg,	// Inst #606 = VCLEzv2f32
  ARM_FORMAT_N2Reg,	// Inst #607 = VCLEzv2i32
  ARM_FORMAT_N2Reg,	// Inst #608 = VCLEzv4f32
  ARM_FORMAT_N2Reg,	// Inst #609 = VCLEzv4i16
  ARM_FORMAT_N2Reg,	// Inst #610 = VCLEzv4i32
  ARM_FORMAT_N2Reg,	// Inst #611 = VCLEzv8i16
  ARM_FORMAT_N2Reg,	// Inst #612 = VCLEzv8i8
  ARM_FORMAT_N2Reg,	// Inst #613 = VCLSv16i8
  ARM_FORMAT_N2Reg,	// Inst #614 = VCLSv2i32
  ARM_FORMAT_N2Reg,	// Inst #615 = VCLSv4i16
  ARM_FORMAT_N2Reg,	// Inst #616 = VCLSv4i32
  ARM_FORMAT_N2Reg,	// Inst #617 = VCLSv8i16
  ARM_FORMAT_N2Reg,	// Inst #618 = VCLSv8i8
  ARM_FORMAT_N2Reg,	// Inst #619 = VCLTzv16i8
  ARM_FORMAT_N2Reg,	// Inst #620 = VCLTzv2f32
  ARM_FORMAT_N2Reg,	// Inst #621 = VCLTzv2i32
  ARM_FORMAT_N2Reg,	// Inst #622 = VCLTzv4f32
  ARM_FORMAT_N2Reg,	// Inst #623 = VCLTzv4i16
  ARM_FORMAT_N2Reg,	// Inst #624 = VCLTzv4i32
  ARM_FORMAT_N2Reg,	// Inst #625 = VCLTzv8i16
  ARM_FORMAT_N2Reg,	// Inst #626 = VCLTzv8i8
  ARM_FORMAT_N2Reg,	// Inst #627 = VCLZv16i8
  ARM_FORMAT_N2Reg,	// Inst #628 = VCLZv2i32
  ARM_FORMAT_N2Reg,	// Inst #629 = VCLZv4i16
  ARM_FORMAT_N2Reg,	// Inst #630 = VCLZv4i32
  ARM_FORMAT_N2Reg,	// Inst #631 = VCLZv8i16
  ARM_FORMAT_N2Reg,	// Inst #632 = VCLZv8i8
  ARM_FORMAT_VFPUNARYFRM,	// Inst #633 = VCMPD
  ARM_FORMAT_VFPUNARYFRM,	// Inst #634 = VCMPED
  ARM_FORMAT_VFPUNARYFRM,	// Inst #635 = VCMPES
  ARM_FORMAT_VFPUNARYFRM,	// Inst #636 = VCMPEZD
  ARM_FORMAT_VFPUNARYFRM,	// Inst #637 = VCMPEZS
  ARM_FORMAT_VFPUNARYFRM,	// Inst #638 = VCMPS
  ARM_FORMAT_VFPUNARYFRM,	// Inst #639 = VCMPZD
  ARM_FORMAT_VFPUNARYFRM,	// Inst #640 = VCMPZS
  ARM_FORMAT_N2Reg,	// Inst #641 = VCNTd
  ARM_FORMAT_N2Reg,	// Inst #642 = VCNTq
  ARM_FORMAT_VFPUNARYFRM,	// Inst #643 = VCVTBHS
  ARM_FORMAT_VFPUNARYFRM,	// Inst #644 = VCVTBSH
  ARM_FORMAT_VFPUNARYFRM,	// Inst #645 = VCVTDS
  ARM_FORMAT_VFPUNARYFRM,	// Inst #646 = VCVTSD
  ARM_FORMAT_VFPUNARYFRM,	// Inst #647 = VCVTTHS
  ARM_FORMAT_VFPUNARYFRM,	// Inst #648 = VCVTTSH
  ARM_FORMAT_N2Reg,	// Inst #649 = VCVTf2h
  ARM_FORMAT_N2Reg,	// Inst #650 = VCVTf2sd
  ARM_FORMAT_N2Reg,	// Inst #651 = VCVTf2sq
  ARM_FORMAT_N2Reg,	// Inst #652 = VCVTf2ud
  ARM_FORMAT_N2Reg,	// Inst #653 = VCVTf2uq
  ARM_FORMAT_NVCVT,	// Inst #654 = VCVTf2xsd
  ARM_FORMAT_NVCVT,	// Inst #655 = VCVTf2xsq
  ARM_FORMAT_NVCVT,	// Inst #656 = VCVTf2xud
  ARM_FORMAT_NVCVT,	// Inst #657 = VCVTf2xuq
  ARM_FORMAT_N2Reg,	// Inst #658 = VCVTh2f
  ARM_FORMAT_N2Reg,	// Inst #659 = VCVTs2fd
  ARM_FORMAT_N2Reg,	// Inst #660 = VCVTs2fq
  ARM_FORMAT_N2Reg,	// Inst #661 = VCVTu2fd
  ARM_FORMAT_N2Reg,	// Inst #662 = VCVTu2fq
  ARM_FORMAT_NVCVT,	// Inst #663 = VCVTxs2fd
  ARM_FORMAT_NVCVT,	// Inst #664 = VCVTxs2fq
  ARM_FORMAT_NVCVT,	// Inst #665 = VCVTxu2fd
  ARM_FORMAT_NVCVT,	// Inst #666 = VCVTxu2fq
  ARM_FORMAT_VFPBINARYFRM,	// Inst #667 = VDIVD
  ARM_FORMAT_VFPBINARYFRM,	// Inst #668 = VDIVS
  ARM_FORMAT_NEONDUPFRM,	// Inst #669 = VDUP16d
  ARM_FORMAT_NEONDUPFRM,	// Inst #670 = VDUP16q
  ARM_FORMAT_NEONDUPFRM,	// Inst #671 = VDUP32d
  ARM_FORMAT_NEONDUPFRM,	// Inst #672 = VDUP32q
  ARM_FORMAT_NEONDUPFRM,	// Inst #673 = VDUP8d
  ARM_FORMAT_NEONDUPFRM,	// Inst #674 = VDUP8q
  ARM_FORMAT_NVecDupLn,	// Inst #675 = VDUPLN16d
  ARM_FORMAT_NVecDupLn,	// Inst #676 = VDUPLN16q
  ARM_FORMAT_NVecDupLn,	// Inst #677 = VDUPLN32d
  ARM_FORMAT_NVecDupLn,	// Inst #678 = VDUPLN32q
  ARM_FORMAT_NVecDupLn,	// Inst #679 = VDUPLN8d
  ARM_FORMAT_NVecDupLn,	// Inst #680 = VDUPLN8q
  ARM_FORMAT_NVecDupLn,	// Inst #681 = VDUPLNfd
  ARM_FORMAT_NVecDupLn,	// Inst #682 = VDUPLNfq
  ARM_FORMAT_NEONDUPFRM,	// Inst #683 = VDUPfd
  ARM_FORMAT_PSEUDO,	// Inst #684 = VDUPfdf
  ARM_FORMAT_NEONDUPFRM,	// Inst #685 = VDUPfq
  ARM_FORMAT_PSEUDO,	// Inst #686 = VDUPfqf
  ARM_FORMAT_N3Reg,	// Inst #687 = VEORd
  ARM_FORMAT_N3Reg,	// Inst #688 = VEORq
  ARM_FORMAT_NVecExtract,	// Inst #689 = VEXTd16
  ARM_FORMAT_NVecExtract,	// Inst #690 = VEXTd32
  ARM_FORMAT_NVecExtract,	// Inst #691 = VEXTd8
  ARM_FORMAT_NVecExtract,	// Inst #692 = VEXTdf
  ARM_FORMAT_NVecExtract,	// Inst #693 = VEXTq16
  ARM_FORMAT_NVecExtract,	// Inst #694 = VEXTq32
  ARM_FORMAT_NVecExtract,	// Inst #695 = VEXTq8
  ARM_FORMAT_NVecExtract,	// Inst #696 = VEXTqf
  ARM_FORMAT_NEONGETLNFRM,	// Inst #697 = VGETLNi32
  ARM_FORMAT_NEONGETLNFRM,	// Inst #698 = VGETLNs16
  ARM_FORMAT_NEONGETLNFRM,	// Inst #699 = VGETLNs8
  ARM_FORMAT_NEONGETLNFRM,	// Inst #700 = VGETLNu16
  ARM_FORMAT_NEONGETLNFRM,	// Inst #701 = VGETLNu8
  ARM_FORMAT_N3Reg,	// Inst #702 = VHADDsv16i8
  ARM_FORMAT_N3Reg,	// Inst #703 = VHADDsv2i32
  ARM_FORMAT_N3Reg,	// Inst #704 = VHADDsv4i16
  ARM_FORMAT_N3Reg,	// Inst #705 = VHADDsv4i32
  ARM_FORMAT_N3Reg,	// Inst #706 = VHADDsv8i16
  ARM_FORMAT_N3Reg,	// Inst #707 = VHADDsv8i8
  ARM_FORMAT_N3Reg,	// Inst #708 = VHADDuv16i8
  ARM_FORMAT_N3Reg,	// Inst #709 = VHADDuv2i32
  ARM_FORMAT_N3Reg,	// Inst #710 = VHADDuv4i16
  ARM_FORMAT_N3Reg,	// Inst #711 = VHADDuv4i32
  ARM_FORMAT_N3Reg,	// Inst #712 = VHADDuv8i16
  ARM_FORMAT_N3Reg,	// Inst #713 = VHADDuv8i8
  ARM_FORMAT_N3Reg,	// Inst #714 = VHSUBsv16i8
  ARM_FORMAT_N3Reg,	// Inst #715 = VHSUBsv2i32
  ARM_FORMAT_N3Reg,	// Inst #716 = VHSUBsv4i16
  ARM_FORMAT_N3Reg,	// Inst #717 = VHSUBsv4i32
  ARM_FORMAT_N3Reg,	// Inst #718 = VHSUBsv8i16
  ARM_FORMAT_N3Reg,	// Inst #719 = VHSUBsv8i8
  ARM_FORMAT_N3Reg,	// Inst #720 = VHSUBuv16i8
  ARM_FORMAT_N3Reg,	// Inst #721 = VHSUBuv2i32
  ARM_FORMAT_N3Reg,	// Inst #722 = VHSUBuv4i16
  ARM_FORMAT_N3Reg,	// Inst #723 = VHSUBuv4i32
  ARM_FORMAT_N3Reg,	// Inst #724 = VHSUBuv8i16
  ARM_FORMAT_N3Reg,	// Inst #725 = VHSUBuv8i8
  ARM_FORMAT_NLdSt,	// Inst #726 = VLD1DUPd16
  ARM_FORMAT_NLdSt,	// Inst #727 = VLD1DUPd16_UPD
  ARM_FORMAT_NLdSt,	// Inst #728 = VLD1DUPd32
  ARM_FORMAT_NLdSt,	// Inst #729 = VLD1DUPd32_UPD
  ARM_FORMAT_NLdSt,	// Inst #730 = VLD1DUPd8
  ARM_FORMAT_NLdSt,	// Inst #731 = VLD1DUPd8_UPD
  ARM_FORMAT_NLdSt,	// Inst #732 = VLD1DUPq16
  ARM_FORMAT_PSEUDO,	// Inst #733 = VLD1DUPq16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #734 = VLD1DUPq16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #735 = VLD1DUPq16_UPD
  ARM_FORMAT_NLdSt,	// Inst #736 = VLD1DUPq32
  ARM_FORMAT_PSEUDO,	// Inst #737 = VLD1DUPq32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #738 = VLD1DUPq32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #739 = VLD1DUPq32_UPD
  ARM_FORMAT_NLdSt,	// Inst #740 = VLD1DUPq8
  ARM_FORMAT_PSEUDO,	// Inst #741 = VLD1DUPq8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #742 = VLD1DUPq8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #743 = VLD1DUPq8_UPD
  ARM_FORMAT_NLdSt,	// Inst #744 = VLD1LNd16
  ARM_FORMAT_NLdSt,	// Inst #745 = VLD1LNd16_UPD
  ARM_FORMAT_NLdSt,	// Inst #746 = VLD1LNd32
  ARM_FORMAT_NLdSt,	// Inst #747 = VLD1LNd32_UPD
  ARM_FORMAT_NLdSt,	// Inst #748 = VLD1LNd8
  ARM_FORMAT_NLdSt,	// Inst #749 = VLD1LNd8_UPD
  ARM_FORMAT_PSEUDO,	// Inst #750 = VLD1LNq16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #751 = VLD1LNq16Pseudo_UPD
  ARM_FORMAT_PSEUDO,	// Inst #752 = VLD1LNq32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #753 = VLD1LNq32Pseudo_UPD
  ARM_FORMAT_PSEUDO,	// Inst #754 = VLD1LNq8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #755 = VLD1LNq8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #756 = VLD1d16
  ARM_FORMAT_NLdSt,	// Inst #757 = VLD1d16Q
  ARM_FORMAT_NLdSt,	// Inst #758 = VLD1d16Q_UPD
  ARM_FORMAT_NLdSt,	// Inst #759 = VLD1d16T
  ARM_FORMAT_NLdSt,	// Inst #760 = VLD1d16T_UPD
  ARM_FORMAT_NLdSt,	// Inst #761 = VLD1d16_UPD
  ARM_FORMAT_NLdSt,	// Inst #762 = VLD1d32
  ARM_FORMAT_NLdSt,	// Inst #763 = VLD1d32Q
  ARM_FORMAT_NLdSt,	// Inst #764 = VLD1d32Q_UPD
  ARM_FORMAT_NLdSt,	// Inst #765 = VLD1d32T
  ARM_FORMAT_NLdSt,	// Inst #766 = VLD1d32T_UPD
  ARM_FORMAT_NLdSt,	// Inst #767 = VLD1d32_UPD
  ARM_FORMAT_NLdSt,	// Inst #768 = VLD1d64
  ARM_FORMAT_NLdSt,	// Inst #769 = VLD1d64Q
  ARM_FORMAT_PSEUDO,	// Inst #770 = VLD1d64QPseudo
  ARM_FORMAT_PSEUDO,	// Inst #771 = VLD1d64QPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #772 = VLD1d64Q_UPD
  ARM_FORMAT_NLdSt,	// Inst #773 = VLD1d64T
  ARM_FORMAT_PSEUDO,	// Inst #774 = VLD1d64TPseudo
  ARM_FORMAT_PSEUDO,	// Inst #775 = VLD1d64TPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #776 = VLD1d64T_UPD
  ARM_FORMAT_NLdSt,	// Inst #777 = VLD1d64_UPD
  ARM_FORMAT_NLdSt,	// Inst #778 = VLD1d8
  ARM_FORMAT_NLdSt,	// Inst #779 = VLD1d8Q
  ARM_FORMAT_NLdSt,	// Inst #780 = VLD1d8Q_UPD
  ARM_FORMAT_NLdSt,	// Inst #781 = VLD1d8T
  ARM_FORMAT_NLdSt,	// Inst #782 = VLD1d8T_UPD
  ARM_FORMAT_NLdSt,	// Inst #783 = VLD1d8_UPD
  ARM_FORMAT_NLdSt,	// Inst #784 = VLD1q16
  ARM_FORMAT_PSEUDO,	// Inst #785 = VLD1q16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #786 = VLD1q16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #787 = VLD1q16_UPD
  ARM_FORMAT_NLdSt,	// Inst #788 = VLD1q32
  ARM_FORMAT_PSEUDO,	// Inst #789 = VLD1q32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #790 = VLD1q32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #791 = VLD1q32_UPD
  ARM_FORMAT_NLdSt,	// Inst #792 = VLD1q64
  ARM_FORMAT_PSEUDO,	// Inst #793 = VLD1q64Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #794 = VLD1q64Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #795 = VLD1q64_UPD
  ARM_FORMAT_NLdSt,	// Inst #796 = VLD1q8
  ARM_FORMAT_PSEUDO,	// Inst #797 = VLD1q8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #798 = VLD1q8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #799 = VLD1q8_UPD
  ARM_FORMAT_NLdSt,	// Inst #800 = VLD2DUPd16
  ARM_FORMAT_PSEUDO,	// Inst #801 = VLD2DUPd16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #802 = VLD2DUPd16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #803 = VLD2DUPd16_UPD
  ARM_FORMAT_NLdSt,	// Inst #804 = VLD2DUPd16x2
  ARM_FORMAT_NLdSt,	// Inst #805 = VLD2DUPd16x2_UPD
  ARM_FORMAT_NLdSt,	// Inst #806 = VLD2DUPd32
  ARM_FORMAT_PSEUDO,	// Inst #807 = VLD2DUPd32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #808 = VLD2DUPd32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #809 = VLD2DUPd32_UPD
  ARM_FORMAT_NLdSt,	// Inst #810 = VLD2DUPd32x2
  ARM_FORMAT_NLdSt,	// Inst #811 = VLD2DUPd32x2_UPD
  ARM_FORMAT_NLdSt,	// Inst #812 = VLD2DUPd8
  ARM_FORMAT_PSEUDO,	// Inst #813 = VLD2DUPd8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #814 = VLD2DUPd8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #815 = VLD2DUPd8_UPD
  ARM_FORMAT_NLdSt,	// Inst #816 = VLD2DUPd8x2
  ARM_FORMAT_NLdSt,	// Inst #817 = VLD2DUPd8x2_UPD
  ARM_FORMAT_NLdSt,	// Inst #818 = VLD2LNd16
  ARM_FORMAT_PSEUDO,	// Inst #819 = VLD2LNd16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #820 = VLD2LNd16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #821 = VLD2LNd16_UPD
  ARM_FORMAT_NLdSt,	// Inst #822 = VLD2LNd32
  ARM_FORMAT_PSEUDO,	// Inst #823 = VLD2LNd32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #824 = VLD2LNd32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #825 = VLD2LNd32_UPD
  ARM_FORMAT_NLdSt,	// Inst #826 = VLD2LNd8
  ARM_FORMAT_PSEUDO,	// Inst #827 = VLD2LNd8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #828 = VLD2LNd8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #829 = VLD2LNd8_UPD
  ARM_FORMAT_NLdSt,	// Inst #830 = VLD2LNq16
  ARM_FORMAT_PSEUDO,	// Inst #831 = VLD2LNq16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #832 = VLD2LNq16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #833 = VLD2LNq16_UPD
  ARM_FORMAT_NLdSt,	// Inst #834 = VLD2LNq32
  ARM_FORMAT_PSEUDO,	// Inst #835 = VLD2LNq32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #836 = VLD2LNq32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #837 = VLD2LNq32_UPD
  ARM_FORMAT_NLdSt,	// Inst #838 = VLD2b16
  ARM_FORMAT_NLdSt,	// Inst #839 = VLD2b16_UPD
  ARM_FORMAT_NLdSt,	// Inst #840 = VLD2b32
  ARM_FORMAT_NLdSt,	// Inst #841 = VLD2b32_UPD
  ARM_FORMAT_NLdSt,	// Inst #842 = VLD2b8
  ARM_FORMAT_NLdSt,	// Inst #843 = VLD2b8_UPD
  ARM_FORMAT_NLdSt,	// Inst #844 = VLD2d16
  ARM_FORMAT_PSEUDO,	// Inst #845 = VLD2d16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #846 = VLD2d16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #847 = VLD2d16_UPD
  ARM_FORMAT_NLdSt,	// Inst #848 = VLD2d32
  ARM_FORMAT_PSEUDO,	// Inst #849 = VLD2d32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #850 = VLD2d32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #851 = VLD2d32_UPD
  ARM_FORMAT_NLdSt,	// Inst #852 = VLD2d8
  ARM_FORMAT_PSEUDO,	// Inst #853 = VLD2d8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #854 = VLD2d8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #855 = VLD2d8_UPD
  ARM_FORMAT_NLdSt,	// Inst #856 = VLD2q16
  ARM_FORMAT_PSEUDO,	// Inst #857 = VLD2q16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #858 = VLD2q16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #859 = VLD2q16_UPD
  ARM_FORMAT_NLdSt,	// Inst #860 = VLD2q32
  ARM_FORMAT_PSEUDO,	// Inst #861 = VLD2q32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #862 = VLD2q32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #863 = VLD2q32_UPD
  ARM_FORMAT_NLdSt,	// Inst #864 = VLD2q8
  ARM_FORMAT_PSEUDO,	// Inst #865 = VLD2q8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #866 = VLD2q8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #867 = VLD2q8_UPD
  ARM_FORMAT_NLdSt,	// Inst #868 = VLD3DUPd16
  ARM_FORMAT_PSEUDO,	// Inst #869 = VLD3DUPd16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #870 = VLD3DUPd16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #871 = VLD3DUPd16_UPD
  ARM_FORMAT_NLdSt,	// Inst #872 = VLD3DUPd16x2
  ARM_FORMAT_NLdSt,	// Inst #873 = VLD3DUPd16x2_UPD
  ARM_FORMAT_NLdSt,	// Inst #874 = VLD3DUPd32
  ARM_FORMAT_PSEUDO,	// Inst #875 = VLD3DUPd32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #876 = VLD3DUPd32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #877 = VLD3DUPd32_UPD
  ARM_FORMAT_NLdSt,	// Inst #878 = VLD3DUPd32x2
  ARM_FORMAT_NLdSt,	// Inst #879 = VLD3DUPd32x2_UPD
  ARM_FORMAT_NLdSt,	// Inst #880 = VLD3DUPd8
  ARM_FORMAT_PSEUDO,	// Inst #881 = VLD3DUPd8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #882 = VLD3DUPd8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #883 = VLD3DUPd8_UPD
  ARM_FORMAT_NLdSt,	// Inst #884 = VLD3DUPd8x2
  ARM_FORMAT_NLdSt,	// Inst #885 = VLD3DUPd8x2_UPD
  ARM_FORMAT_NLdSt,	// Inst #886 = VLD3LNd16
  ARM_FORMAT_PSEUDO,	// Inst #887 = VLD3LNd16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #888 = VLD3LNd16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #889 = VLD3LNd16_UPD
  ARM_FORMAT_NLdSt,	// Inst #890 = VLD3LNd32
  ARM_FORMAT_PSEUDO,	// Inst #891 = VLD3LNd32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #892 = VLD3LNd32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #893 = VLD3LNd32_UPD
  ARM_FORMAT_NLdSt,	// Inst #894 = VLD3LNd8
  ARM_FORMAT_PSEUDO,	// Inst #895 = VLD3LNd8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #896 = VLD3LNd8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #897 = VLD3LNd8_UPD
  ARM_FORMAT_NLdSt,	// Inst #898 = VLD3LNq16
  ARM_FORMAT_PSEUDO,	// Inst #899 = VLD3LNq16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #900 = VLD3LNq16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #901 = VLD3LNq16_UPD
  ARM_FORMAT_NLdSt,	// Inst #902 = VLD3LNq32
  ARM_FORMAT_PSEUDO,	// Inst #903 = VLD3LNq32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #904 = VLD3LNq32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #905 = VLD3LNq32_UPD
  ARM_FORMAT_NLdSt,	// Inst #906 = VLD3d16
  ARM_FORMAT_PSEUDO,	// Inst #907 = VLD3d16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #908 = VLD3d16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #909 = VLD3d16_UPD
  ARM_FORMAT_NLdSt,	// Inst #910 = VLD3d32
  ARM_FORMAT_PSEUDO,	// Inst #911 = VLD3d32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #912 = VLD3d32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #913 = VLD3d32_UPD
  ARM_FORMAT_NLdSt,	// Inst #914 = VLD3d8
  ARM_FORMAT_PSEUDO,	// Inst #915 = VLD3d8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #916 = VLD3d8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #917 = VLD3d8_UPD
  ARM_FORMAT_NLdSt,	// Inst #918 = VLD3q16
  ARM_FORMAT_PSEUDO,	// Inst #919 = VLD3q16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #920 = VLD3q16_UPD
  ARM_FORMAT_PSEUDO,	// Inst #921 = VLD3q16oddPseudo
  ARM_FORMAT_PSEUDO,	// Inst #922 = VLD3q16oddPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #923 = VLD3q32
  ARM_FORMAT_PSEUDO,	// Inst #924 = VLD3q32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #925 = VLD3q32_UPD
  ARM_FORMAT_PSEUDO,	// Inst #926 = VLD3q32oddPseudo
  ARM_FORMAT_PSEUDO,	// Inst #927 = VLD3q32oddPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #928 = VLD3q8
  ARM_FORMAT_PSEUDO,	// Inst #929 = VLD3q8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #930 = VLD3q8_UPD
  ARM_FORMAT_PSEUDO,	// Inst #931 = VLD3q8oddPseudo
  ARM_FORMAT_PSEUDO,	// Inst #932 = VLD3q8oddPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #933 = VLD4DUPd16
  ARM_FORMAT_PSEUDO,	// Inst #934 = VLD4DUPd16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #935 = VLD4DUPd16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #936 = VLD4DUPd16_UPD
  ARM_FORMAT_NLdSt,	// Inst #937 = VLD4DUPd16x2
  ARM_FORMAT_NLdSt,	// Inst #938 = VLD4DUPd16x2_UPD
  ARM_FORMAT_NLdSt,	// Inst #939 = VLD4DUPd32
  ARM_FORMAT_PSEUDO,	// Inst #940 = VLD4DUPd32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #941 = VLD4DUPd32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #942 = VLD4DUPd32_UPD
  ARM_FORMAT_NLdSt,	// Inst #943 = VLD4DUPd32x2
  ARM_FORMAT_NLdSt,	// Inst #944 = VLD4DUPd32x2_UPD
  ARM_FORMAT_NLdSt,	// Inst #945 = VLD4DUPd8
  ARM_FORMAT_PSEUDO,	// Inst #946 = VLD4DUPd8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #947 = VLD4DUPd8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #948 = VLD4DUPd8_UPD
  ARM_FORMAT_NLdSt,	// Inst #949 = VLD4DUPd8x2
  ARM_FORMAT_NLdSt,	// Inst #950 = VLD4DUPd8x2_UPD
  ARM_FORMAT_NLdSt,	// Inst #951 = VLD4LNd16
  ARM_FORMAT_PSEUDO,	// Inst #952 = VLD4LNd16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #953 = VLD4LNd16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #954 = VLD4LNd16_UPD
  ARM_FORMAT_NLdSt,	// Inst #955 = VLD4LNd32
  ARM_FORMAT_PSEUDO,	// Inst #956 = VLD4LNd32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #957 = VLD4LNd32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #958 = VLD4LNd32_UPD
  ARM_FORMAT_NLdSt,	// Inst #959 = VLD4LNd8
  ARM_FORMAT_PSEUDO,	// Inst #960 = VLD4LNd8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #961 = VLD4LNd8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #962 = VLD4LNd8_UPD
  ARM_FORMAT_NLdSt,	// Inst #963 = VLD4LNq16
  ARM_FORMAT_PSEUDO,	// Inst #964 = VLD4LNq16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #965 = VLD4LNq16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #966 = VLD4LNq16_UPD
  ARM_FORMAT_NLdSt,	// Inst #967 = VLD4LNq32
  ARM_FORMAT_PSEUDO,	// Inst #968 = VLD4LNq32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #969 = VLD4LNq32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #970 = VLD4LNq32_UPD
  ARM_FORMAT_NLdSt,	// Inst #971 = VLD4d16
  ARM_FORMAT_PSEUDO,	// Inst #972 = VLD4d16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #973 = VLD4d16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #974 = VLD4d16_UPD
  ARM_FORMAT_NLdSt,	// Inst #975 = VLD4d32
  ARM_FORMAT_PSEUDO,	// Inst #976 = VLD4d32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #977 = VLD4d32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #978 = VLD4d32_UPD
  ARM_FORMAT_NLdSt,	// Inst #979 = VLD4d8
  ARM_FORMAT_PSEUDO,	// Inst #980 = VLD4d8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #981 = VLD4d8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #982 = VLD4d8_UPD
  ARM_FORMAT_NLdSt,	// Inst #983 = VLD4q16
  ARM_FORMAT_PSEUDO,	// Inst #984 = VLD4q16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #985 = VLD4q16_UPD
  ARM_FORMAT_PSEUDO,	// Inst #986 = VLD4q16oddPseudo
  ARM_FORMAT_PSEUDO,	// Inst #987 = VLD4q16oddPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #988 = VLD4q32
  ARM_FORMAT_PSEUDO,	// Inst #989 = VLD4q32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #990 = VLD4q32_UPD
  ARM_FORMAT_PSEUDO,	// Inst #991 = VLD4q32oddPseudo
  ARM_FORMAT_PSEUDO,	// Inst #992 = VLD4q32oddPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #993 = VLD4q8
  ARM_FORMAT_PSEUDO,	// Inst #994 = VLD4q8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #995 = VLD4q8_UPD
  ARM_FORMAT_PSEUDO,	// Inst #996 = VLD4q8oddPseudo
  ARM_FORMAT_PSEUDO,	// Inst #997 = VLD4q8oddPseudo_UPD
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #998 = VLDMDDB
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #999 = VLDMDDB_UPD
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #1000 = VLDMDIA
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #1001 = VLDMDIA_UPD
  ARM_FORMAT_PSEUDO,	// Inst #1002 = VLDMQDB
  ARM_FORMAT_PSEUDO,	// Inst #1003 = VLDMQIA
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #1004 = VLDMSDB
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #1005 = VLDMSDB_UPD
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #1006 = VLDMSIA
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #1007 = VLDMSIA_UPD
  ARM_FORMAT_VFPLDSTFRM,	// Inst #1008 = VLDRD
  ARM_FORMAT_VFPLDSTFRM,	// Inst #1009 = VLDRS
  ARM_FORMAT_N3Reg,	// Inst #1010 = VMAXfd
  ARM_FORMAT_N3Reg,	// Inst #1011 = VMAXfq
  ARM_FORMAT_N3Reg,	// Inst #1012 = VMAXsv16i8
  ARM_FORMAT_N3Reg,	// Inst #1013 = VMAXsv2i32
  ARM_FORMAT_N3Reg,	// Inst #1014 = VMAXsv4i16
  ARM_FORMAT_N3Reg,	// Inst #1015 = VMAXsv4i32
  ARM_FORMAT_N3Reg,	// Inst #1016 = VMAXsv8i16
  ARM_FORMAT_N3Reg,	// Inst #1017 = VMAXsv8i8
  ARM_FORMAT_N3Reg,	// Inst #1018 = VMAXuv16i8
  ARM_FORMAT_N3Reg,	// Inst #1019 = VMAXuv2i32
  ARM_FORMAT_N3Reg,	// Inst #1020 = VMAXuv4i16
  ARM_FORMAT_N3Reg,	// Inst #1021 = VMAXuv4i32
  ARM_FORMAT_N3Reg,	// Inst #1022 = VMAXuv8i16
  ARM_FORMAT_N3Reg,	// Inst #1023 = VMAXuv8i8
  ARM_FORMAT_N3Reg,	// Inst #1024 = VMINfd
  ARM_FORMAT_N3Reg,	// Inst #1025 = VMINfq
  ARM_FORMAT_N3Reg,	// Inst #1026 = VMINsv16i8
  ARM_FORMAT_N3Reg,	// Inst #1027 = VMINsv2i32
  ARM_FORMAT_N3Reg,	// Inst #1028 = VMINsv4i16
  ARM_FORMAT_N3Reg,	// Inst #1029 = VMINsv4i32
  ARM_FORMAT_N3Reg,	// Inst #1030 = VMINsv8i16
  ARM_FORMAT_N3Reg,	// Inst #1031 = VMINsv8i8
  ARM_FORMAT_N3Reg,	// Inst #1032 = VMINuv16i8
  ARM_FORMAT_N3Reg,	// Inst #1033 = VMINuv2i32
  ARM_FORMAT_N3Reg,	// Inst #1034 = VMINuv4i16
  ARM_FORMAT_N3Reg,	// Inst #1035 = VMINuv4i32
  ARM_FORMAT_N3Reg,	// Inst #1036 = VMINuv8i16
  ARM_FORMAT_N3Reg,	// Inst #1037 = VMINuv8i8
  ARM_FORMAT_VFPBINARYFRM,	// Inst #1038 = VMLAD
  ARM_FORMAT_NVecMulScalar,	// Inst #1039 = VMLALslsv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1040 = VMLALslsv4i16
  ARM_FORMAT_NVecMulScalar,	// Inst #1041 = VMLALsluv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1042 = VMLALsluv4i16
  ARM_FORMAT_N3Reg,	// Inst #1043 = VMLALsv2i64
  ARM_FORMAT_N3Reg,	// Inst #1044 = VMLALsv4i32
  ARM_FORMAT_N3Reg,	// Inst #1045 = VMLALsv8i16
  ARM_FORMAT_N3Reg,	// Inst #1046 = VMLALuv2i64
  ARM_FORMAT_N3Reg,	// Inst #1047 = VMLALuv4i32
  ARM_FORMAT_N3Reg,	// Inst #1048 = VMLALuv8i16
  ARM_FORMAT_VFPBINARYFRM,	// Inst #1049 = VMLAS
  ARM_FORMAT_N3Reg,	// Inst #1050 = VMLAfd
  ARM_FORMAT_N3Reg,	// Inst #1051 = VMLAfq
  ARM_FORMAT_NVecMulScalar,	// Inst #1052 = VMLAslfd
  ARM_FORMAT_NVecMulScalar,	// Inst #1053 = VMLAslfq
  ARM_FORMAT_NVecMulScalar,	// Inst #1054 = VMLAslv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1055 = VMLAslv4i16
  ARM_FORMAT_NVecMulScalar,	// Inst #1056 = VMLAslv4i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1057 = VMLAslv8i16
  ARM_FORMAT_N3Reg,	// Inst #1058 = VMLAv16i8
  ARM_FORMAT_N3Reg,	// Inst #1059 = VMLAv2i32
  ARM_FORMAT_N3Reg,	// Inst #1060 = VMLAv4i16
  ARM_FORMAT_N3Reg,	// Inst #1061 = VMLAv4i32
  ARM_FORMAT_N3Reg,	// Inst #1062 = VMLAv8i16
  ARM_FORMAT_N3Reg,	// Inst #1063 = VMLAv8i8
  ARM_FORMAT_VFPBINARYFRM,	// Inst #1064 = VMLSD
  ARM_FORMAT_NVecMulScalar,	// Inst #1065 = VMLSLslsv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1066 = VMLSLslsv4i16
  ARM_FORMAT_NVecMulScalar,	// Inst #1067 = VMLSLsluv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1068 = VMLSLsluv4i16
  ARM_FORMAT_N3Reg,	// Inst #1069 = VMLSLsv2i64
  ARM_FORMAT_N3Reg,	// Inst #1070 = VMLSLsv4i32
  ARM_FORMAT_N3Reg,	// Inst #1071 = VMLSLsv8i16
  ARM_FORMAT_N3Reg,	// Inst #1072 = VMLSLuv2i64
  ARM_FORMAT_N3Reg,	// Inst #1073 = VMLSLuv4i32
  ARM_FORMAT_N3Reg,	// Inst #1074 = VMLSLuv8i16
  ARM_FORMAT_VFPBINARYFRM,	// Inst #1075 = VMLSS
  ARM_FORMAT_N3Reg,	// Inst #1076 = VMLSfd
  ARM_FORMAT_N3Reg,	// Inst #1077 = VMLSfq
  ARM_FORMAT_NVecMulScalar,	// Inst #1078 = VMLSslfd
  ARM_FORMAT_NVecMulScalar,	// Inst #1079 = VMLSslfq
  ARM_FORMAT_NVecMulScalar,	// Inst #1080 = VMLSslv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1081 = VMLSslv4i16
  ARM_FORMAT_NVecMulScalar,	// Inst #1082 = VMLSslv4i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1083 = VMLSslv8i16
  ARM_FORMAT_N3Reg,	// Inst #1084 = VMLSv16i8
  ARM_FORMAT_N3Reg,	// Inst #1085 = VMLSv2i32
  ARM_FORMAT_N3Reg,	// Inst #1086 = VMLSv4i16
  ARM_FORMAT_N3Reg,	// Inst #1087 = VMLSv4i32
  ARM_FORMAT_N3Reg,	// Inst #1088 = VMLSv8i16
  ARM_FORMAT_N3Reg,	// Inst #1089 = VMLSv8i8
  ARM_FORMAT_VFPUNARYFRM,	// Inst #1090 = VMOVD
  ARM_FORMAT_VFPCONV5FRM,	// Inst #1091 = VMOVDRR
  ARM_FORMAT_VFPUNARYFRM,	// Inst #1092 = VMOVDcc
  ARM_FORMAT_N3Reg,	// Inst #1093 = VMOVDneon
  ARM_FORMAT_N2Reg,	// Inst #1094 = VMOVLsv2i64
  ARM_FORMAT_N2Reg,	// Inst #1095 = VMOVLsv4i32
  ARM_FORMAT_N2Reg,	// Inst #1096 = VMOVLsv8i16
  ARM_FORMAT_N2Reg,	// Inst #1097 = VMOVLuv2i64
  ARM_FORMAT_N2Reg,	// Inst #1098 = VMOVLuv4i32
  ARM_FORMAT_N2Reg,	// Inst #1099 = VMOVLuv8i16
  ARM_FORMAT_N2Reg,	// Inst #1100 = VMOVNv2i32
  ARM_FORMAT_N2Reg,	// Inst #1101 = VMOVNv4i16
  ARM_FORMAT_N2Reg,	// Inst #1102 = VMOVNv8i8
  ARM_FORMAT_N3Reg,	// Inst #1103 = VMOVQ
  ARM_FORMAT_PSEUDO,	// Inst #1104 = VMOVQQ
  ARM_FORMAT_PSEUDO,	// Inst #1105 = VMOVQQQQ
  ARM_FORMAT_VFPCONV3FRM,	// Inst #1106 = VMOVRRD
  ARM_FORMAT_VFPCONV3FRM,	// Inst #1107 = VMOVRRS
  ARM_FORMAT_VFPCONV2FRM,	// Inst #1108 = VMOVRS
  ARM_FORMAT_VFPUNARYFRM,	// Inst #1109 = VMOVS
  ARM_FORMAT_VFPCONV4FRM,	// Inst #1110 = VMOVSR
  ARM_FORMAT_VFPCONV5FRM,	// Inst #1111 = VMOVSRR
  ARM_FORMAT_VFPUNARYFRM,	// Inst #1112 = VMOVScc
  ARM_FORMAT_N1RegModImm,	// Inst #1113 = VMOVv16i8
  ARM_FORMAT_N1RegModImm,	// Inst #1114 = VMOVv1i64
  ARM_FORMAT_N1RegModImm,	// Inst #1115 = VMOVv2i32
  ARM_FORMAT_N1RegModImm,	// Inst #1116 = VMOVv2i64
  ARM_FORMAT_N1RegModImm,	// Inst #1117 = VMOVv4i16
  ARM_FORMAT_N1RegModImm,	// Inst #1118 = VMOVv4i32
  ARM_FORMAT_N1RegModImm,	// Inst #1119 = VMOVv8i16
  ARM_FORMAT_N1RegModImm,	// Inst #1120 = VMOVv8i8
  ARM_FORMAT_VFPMISCFRM,	// Inst #1121 = VMRS
  ARM_FORMAT_VFPMISCFRM,	// Inst #1122 = VMRS_FPEXC
  ARM_FORMAT_VFPMISCFRM,	// Inst #1123 = VMRS_FPSID
  ARM_FORMAT_VFPMISCFRM,	// Inst #1124 = VMSR
  ARM_FORMAT_VFPMISCFRM,	// Inst #1125 = VMSR_FPEXC
  ARM_FORMAT_VFPMISCFRM,	// Inst #1126 = VMSR_FPSID
  ARM_FORMAT_VFPBINARYFRM,	// Inst #1127 = VMULD
  ARM_FORMAT_N3Reg,	// Inst #1128 = VMULLp
  ARM_FORMAT_NVecMulScalar,	// Inst #1129 = VMULLslsv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1130 = VMULLslsv4i16
  ARM_FORMAT_NVecMulScalar,	// Inst #1131 = VMULLsluv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1132 = VMULLsluv4i16
  ARM_FORMAT_N3Reg,	// Inst #1133 = VMULLsv2i64
  ARM_FORMAT_N3Reg,	// Inst #1134 = VMULLsv4i32
  ARM_FORMAT_N3Reg,	// Inst #1135 = VMULLsv8i16
  ARM_FORMAT_N3Reg,	// Inst #1136 = VMULLuv2i64
  ARM_FORMAT_N3Reg,	// Inst #1137 = VMULLuv4i32
  ARM_FORMAT_N3Reg,	// Inst #1138 = VMULLuv8i16
  ARM_FORMAT_VFPBINARYFRM,	// Inst #1139 = VMULS
  ARM_FORMAT_N3Reg,	// Inst #1140 = VMULfd
  ARM_FORMAT_N3Reg,	// Inst #1141 = VMULfq
  ARM_FORMAT_N3Reg,	// Inst #1142 = VMULpd
  ARM_FORMAT_N3Reg,	// Inst #1143 = VMULpq
  ARM_FORMAT_NVecMulScalar,	// Inst #1144 = VMULslfd
  ARM_FORMAT_NVecMulScalar,	// Inst #1145 = VMULslfq
  ARM_FORMAT_NVecMulScalar,	// Inst #1146 = VMULslv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1147 = VMULslv4i16
  ARM_FORMAT_NVecMulScalar,	// Inst #1148 = VMULslv4i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1149 = VMULslv8i16
  ARM_FORMAT_N3Reg,	// Inst #1150 = VMULv16i8
  ARM_FORMAT_N3Reg,	// Inst #1151 = VMULv2i32
  ARM_FORMAT_N3Reg,	// Inst #1152 = VMULv4i16
  ARM_FORMAT_N3Reg,	// Inst #1153 = VMULv4i32
  ARM_FORMAT_N3Reg,	// Inst #1154 = VMULv8i16
  ARM_FORMAT_N3Reg,	// Inst #1155 = VMULv8i8
  ARM_FORMAT_N2Reg,	// Inst #1156 = VMVNd
  ARM_FORMAT_N2Reg,	// Inst #1157 = VMVNq
  ARM_FORMAT_N1RegModImm,	// Inst #1158 = VMVNv2i32
  ARM_FORMAT_N1RegModImm,	// Inst #1159 = VMVNv4i16
  ARM_FORMAT_N1RegModImm,	// Inst #1160 = VMVNv4i32
  ARM_FORMAT_N1RegModImm,	// Inst #1161 = VMVNv8i16
  ARM_FORMAT_VFPUNARYFRM,	// Inst #1162 = VNEGD
  ARM_FORMAT_VFPUNARYFRM,	// Inst #1163 = VNEGS
  ARM_FORMAT_N2Reg,	// Inst #1164 = VNEGf32q
  ARM_FORMAT_N2Reg,	// Inst #1165 = VNEGfd
  ARM_FORMAT_N2Reg,	// Inst #1166 = VNEGs16d
  ARM_FORMAT_N2Reg,	// Inst #1167 = VNEGs16q
  ARM_FORMAT_N2Reg,	// Inst #1168 = VNEGs32d
  ARM_FORMAT_N2Reg,	// Inst #1169 = VNEGs32q
  ARM_FORMAT_N2Reg,	// Inst #1170 = VNEGs8d
  ARM_FORMAT_N2Reg,	// Inst #1171 = VNEGs8q
  ARM_FORMAT_VFPBINARYFRM,	// Inst #1172 = VNMLAD
  ARM_FORMAT_VFPBINARYFRM,	// Inst #1173 = VNMLAS
  ARM_FORMAT_VFPBINARYFRM,	// Inst #1174 = VNMLSD
  ARM_FORMAT_VFPBINARYFRM,	// Inst #1175 = VNMLSS
  ARM_FORMAT_VFPBINARYFRM,	// Inst #1176 = VNMULD
  ARM_FORMAT_VFPBINARYFRM,	// Inst #1177 = VNMULS
  ARM_FORMAT_N3Reg,	// Inst #1178 = VORNd
  ARM_FORMAT_N3Reg,	// Inst #1179 = VORNq
  ARM_FORMAT_N3Reg,	// Inst #1180 = VORRd
  ARM_FORMAT_N1RegModImm,	// Inst #1181 = VORRiv2i32
  ARM_FORMAT_N1RegModImm,	// Inst #1182 = VORRiv4i16
  ARM_FORMAT_N1RegModImm,	// Inst #1183 = VORRiv4i32
  ARM_FORMAT_N1RegModImm,	// Inst #1184 = VORRiv8i16
  ARM_FORMAT_N3Reg,	// Inst #1185 = VORRq
  ARM_FORMAT_N2Reg,	// Inst #1186 = VPADALsv16i8
  ARM_FORMAT_N2Reg,	// Inst #1187 = VPADALsv2i32
  ARM_FORMAT_N2Reg,	// Inst #1188 = VPADALsv4i16
  ARM_FORMAT_N2Reg,	// Inst #1189 = VPADALsv4i32
  ARM_FORMAT_N2Reg,	// Inst #1190 = VPADALsv8i16
  ARM_FORMAT_N2Reg,	// Inst #1191 = VPADALsv8i8
  ARM_FORMAT_N2Reg,	// Inst #1192 = VPADALuv16i8
  ARM_FORMAT_N2Reg,	// Inst #1193 = VPADALuv2i32
  ARM_FORMAT_N2Reg,	// Inst #1194 = VPADALuv4i16
  ARM_FORMAT_N2Reg,	// Inst #1195 = VPADALuv4i32
  ARM_FORMAT_N2Reg,	// Inst #1196 = VPADALuv8i16
  ARM_FORMAT_N2Reg,	// Inst #1197 = VPADALuv8i8
  ARM_FORMAT_N2Reg,	// Inst #1198 = VPADDLsv16i8
  ARM_FORMAT_N2Reg,	// Inst #1199 = VPADDLsv2i32
  ARM_FORMAT_N2Reg,	// Inst #1200 = VPADDLsv4i16
  ARM_FORMAT_N2Reg,	// Inst #1201 = VPADDLsv4i32
  ARM_FORMAT_N2Reg,	// Inst #1202 = VPADDLsv8i16
  ARM_FORMAT_N2Reg,	// Inst #1203 = VPADDLsv8i8
  ARM_FORMAT_N2Reg,	// Inst #1204 = VPADDLuv16i8
  ARM_FORMAT_N2Reg,	// Inst #1205 = VPADDLuv2i32
  ARM_FORMAT_N2Reg,	// Inst #1206 = VPADDLuv4i16
  ARM_FORMAT_N2Reg,	// Inst #1207 = VPADDLuv4i32
  ARM_FORMAT_N2Reg,	// Inst #1208 = VPADDLuv8i16
  ARM_FORMAT_N2Reg,	// Inst #1209 = VPADDLuv8i8
  ARM_FORMAT_N3Reg,	// Inst #1210 = VPADDf
  ARM_FORMAT_N3Reg,	// Inst #1211 = VPADDi16
  ARM_FORMAT_N3Reg,	// Inst #1212 = VPADDi32
  ARM_FORMAT_N3Reg,	// Inst #1213 = VPADDi8
  ARM_FORMAT_N3Reg,	// Inst #1214 = VPMAXf
  ARM_FORMAT_N3Reg,	// Inst #1215 = VPMAXs16
  ARM_FORMAT_N3Reg,	// Inst #1216 = VPMAXs32
  ARM_FORMAT_N3Reg,	// Inst #1217 = VPMAXs8
  ARM_FORMAT_N3Reg,	// Inst #1218 = VPMAXu16
  ARM_FORMAT_N3Reg,	// Inst #1219 = VPMAXu32
  ARM_FORMAT_N3Reg,	// Inst #1220 = VPMAXu8
  ARM_FORMAT_N3Reg,	// Inst #1221 = VPMINf
  ARM_FORMAT_N3Reg,	// Inst #1222 = VPMINs16
  ARM_FORMAT_N3Reg,	// Inst #1223 = VPMINs32
  ARM_FORMAT_N3Reg,	// Inst #1224 = VPMINs8
  ARM_FORMAT_N3Reg,	// Inst #1225 = VPMINu16
  ARM_FORMAT_N3Reg,	// Inst #1226 = VPMINu32
  ARM_FORMAT_N3Reg,	// Inst #1227 = VPMINu8
  ARM_FORMAT_N2Reg,	// Inst #1228 = VQABSv16i8
  ARM_FORMAT_N2Reg,	// Inst #1229 = VQABSv2i32
  ARM_FORMAT_N2Reg,	// Inst #1230 = VQABSv4i16
  ARM_FORMAT_N2Reg,	// Inst #1231 = VQABSv4i32
  ARM_FORMAT_N2Reg,	// Inst #1232 = VQABSv8i16
  ARM_FORMAT_N2Reg,	// Inst #1233 = VQABSv8i8
  ARM_FORMAT_N3Reg,	// Inst #1234 = VQADDsv16i8
  ARM_FORMAT_N3Reg,	// Inst #1235 = VQADDsv1i64
  ARM_FORMAT_N3Reg,	// Inst #1236 = VQADDsv2i32
  ARM_FORMAT_N3Reg,	// Inst #1237 = VQADDsv2i64
  ARM_FORMAT_N3Reg,	// Inst #1238 = VQADDsv4i16
  ARM_FORMAT_N3Reg,	// Inst #1239 = VQADDsv4i32
  ARM_FORMAT_N3Reg,	// Inst #1240 = VQADDsv8i16
  ARM_FORMAT_N3Reg,	// Inst #1241 = VQADDsv8i8
  ARM_FORMAT_N3Reg,	// Inst #1242 = VQADDuv16i8
  ARM_FORMAT_N3Reg,	// Inst #1243 = VQADDuv1i64
  ARM_FORMAT_N3Reg,	// Inst #1244 = VQADDuv2i32
  ARM_FORMAT_N3Reg,	// Inst #1245 = VQADDuv2i64
  ARM_FORMAT_N3Reg,	// Inst #1246 = VQADDuv4i16
  ARM_FORMAT_N3Reg,	// Inst #1247 = VQADDuv4i32
  ARM_FORMAT_N3Reg,	// Inst #1248 = VQADDuv8i16
  ARM_FORMAT_N3Reg,	// Inst #1249 = VQADDuv8i8
  ARM_FORMAT_NVecMulScalar,	// Inst #1250 = VQDMLALslv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1251 = VQDMLALslv4i16
  ARM_FORMAT_N3Reg,	// Inst #1252 = VQDMLALv2i64
  ARM_FORMAT_N3Reg,	// Inst #1253 = VQDMLALv4i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1254 = VQDMLSLslv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1255 = VQDMLSLslv4i16
  ARM_FORMAT_N3Reg,	// Inst #1256 = VQDMLSLv2i64
  ARM_FORMAT_N3Reg,	// Inst #1257 = VQDMLSLv4i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1258 = VQDMULHslv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1259 = VQDMULHslv4i16
  ARM_FORMAT_NVecMulScalar,	// Inst #1260 = VQDMULHslv4i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1261 = VQDMULHslv8i16
  ARM_FORMAT_N3Reg,	// Inst #1262 = VQDMULHv2i32
  ARM_FORMAT_N3Reg,	// Inst #1263 = VQDMULHv4i16
  ARM_FORMAT_N3Reg,	// Inst #1264 = VQDMULHv4i32
  ARM_FORMAT_N3Reg,	// Inst #1265 = VQDMULHv8i16
  ARM_FORMAT_NVecMulScalar,	// Inst #1266 = VQDMULLslv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1267 = VQDMULLslv4i16
  ARM_FORMAT_N3Reg,	// Inst #1268 = VQDMULLv2i64
  ARM_FORMAT_N3Reg,	// Inst #1269 = VQDMULLv4i32
  ARM_FORMAT_N2Reg,	// Inst #1270 = VQMOVNsuv2i32
  ARM_FORMAT_N2Reg,	// Inst #1271 = VQMOVNsuv4i16
  ARM_FORMAT_N2Reg,	// Inst #1272 = VQMOVNsuv8i8
  ARM_FORMAT_N2Reg,	// Inst #1273 = VQMOVNsv2i32
  ARM_FORMAT_N2Reg,	// Inst #1274 = VQMOVNsv4i16
  ARM_FORMAT_N2Reg,	// Inst #1275 = VQMOVNsv8i8
  ARM_FORMAT_N2Reg,	// Inst #1276 = VQMOVNuv2i32
  ARM_FORMAT_N2Reg,	// Inst #1277 = VQMOVNuv4i16
  ARM_FORMAT_N2Reg,	// Inst #1278 = VQMOVNuv8i8
  ARM_FORMAT_N2Reg,	// Inst #1279 = VQNEGv16i8
  ARM_FORMAT_N2Reg,	// Inst #1280 = VQNEGv2i32
  ARM_FORMAT_N2Reg,	// Inst #1281 = VQNEGv4i16
  ARM_FORMAT_N2Reg,	// Inst #1282 = VQNEGv4i32
  ARM_FORMAT_N2Reg,	// Inst #1283 = VQNEGv8i16
  ARM_FORMAT_N2Reg,	// Inst #1284 = VQNEGv8i8
  ARM_FORMAT_NVecMulScalar,	// Inst #1285 = VQRDMULHslv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1286 = VQRDMULHslv4i16
  ARM_FORMAT_NVecMulScalar,	// Inst #1287 = VQRDMULHslv4i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1288 = VQRDMULHslv8i16
  ARM_FORMAT_N3Reg,	// Inst #1289 = VQRDMULHv2i32
  ARM_FORMAT_N3Reg,	// Inst #1290 = VQRDMULHv4i16
  ARM_FORMAT_N3Reg,	// Inst #1291 = VQRDMULHv4i32
  ARM_FORMAT_N3Reg,	// Inst #1292 = VQRDMULHv8i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1293 = VQRSHLsv16i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1294 = VQRSHLsv1i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1295 = VQRSHLsv2i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1296 = VQRSHLsv2i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1297 = VQRSHLsv4i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1298 = VQRSHLsv4i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1299 = VQRSHLsv8i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1300 = VQRSHLsv8i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1301 = VQRSHLuv16i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1302 = VQRSHLuv1i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1303 = VQRSHLuv2i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1304 = VQRSHLuv2i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1305 = VQRSHLuv4i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1306 = VQRSHLuv4i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1307 = VQRSHLuv8i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1308 = VQRSHLuv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1309 = VQRSHRNsv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1310 = VQRSHRNsv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1311 = VQRSHRNsv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1312 = VQRSHRNuv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1313 = VQRSHRNuv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1314 = VQRSHRNuv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1315 = VQRSHRUNv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1316 = VQRSHRUNv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1317 = VQRSHRUNv8i8
  ARM_FORMAT_N2RegVecShL,	// Inst #1318 = VQSHLsiv16i8
  ARM_FORMAT_N2RegVecShL,	// Inst #1319 = VQSHLsiv1i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1320 = VQSHLsiv2i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1321 = VQSHLsiv2i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1322 = VQSHLsiv4i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1323 = VQSHLsiv4i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1324 = VQSHLsiv8i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1325 = VQSHLsiv8i8
  ARM_FORMAT_N2RegVecShL,	// Inst #1326 = VQSHLsuv16i8
  ARM_FORMAT_N2RegVecShL,	// Inst #1327 = VQSHLsuv1i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1328 = VQSHLsuv2i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1329 = VQSHLsuv2i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1330 = VQSHLsuv4i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1331 = VQSHLsuv4i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1332 = VQSHLsuv8i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1333 = VQSHLsuv8i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1334 = VQSHLsv16i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1335 = VQSHLsv1i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1336 = VQSHLsv2i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1337 = VQSHLsv2i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1338 = VQSHLsv4i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1339 = VQSHLsv4i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1340 = VQSHLsv8i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1341 = VQSHLsv8i8
  ARM_FORMAT_N2RegVecShL,	// Inst #1342 = VQSHLuiv16i8
  ARM_FORMAT_N2RegVecShL,	// Inst #1343 = VQSHLuiv1i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1344 = VQSHLuiv2i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1345 = VQSHLuiv2i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1346 = VQSHLuiv4i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1347 = VQSHLuiv4i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1348 = VQSHLuiv8i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1349 = VQSHLuiv8i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1350 = VQSHLuv16i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1351 = VQSHLuv1i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1352 = VQSHLuv2i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1353 = VQSHLuv2i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1354 = VQSHLuv4i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1355 = VQSHLuv4i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1356 = VQSHLuv8i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1357 = VQSHLuv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1358 = VQSHRNsv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1359 = VQSHRNsv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1360 = VQSHRNsv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1361 = VQSHRNuv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1362 = VQSHRNuv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1363 = VQSHRNuv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1364 = VQSHRUNv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1365 = VQSHRUNv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1366 = VQSHRUNv8i8
  ARM_FORMAT_N3Reg,	// Inst #1367 = VQSUBsv16i8
  ARM_FORMAT_N3Reg,	// Inst #1368 = VQSUBsv1i64
  ARM_FORMAT_N3Reg,	// Inst #1369 = VQSUBsv2i32
  ARM_FORMAT_N3Reg,	// Inst #1370 = VQSUBsv2i64
  ARM_FORMAT_N3Reg,	// Inst #1371 = VQSUBsv4i16
  ARM_FORMAT_N3Reg,	// Inst #1372 = VQSUBsv4i32
  ARM_FORMAT_N3Reg,	// Inst #1373 = VQSUBsv8i16
  ARM_FORMAT_N3Reg,	// Inst #1374 = VQSUBsv8i8
  ARM_FORMAT_N3Reg,	// Inst #1375 = VQSUBuv16i8
  ARM_FORMAT_N3Reg,	// Inst #1376 = VQSUBuv1i64
  ARM_FORMAT_N3Reg,	// Inst #1377 = VQSUBuv2i32
  ARM_FORMAT_N3Reg,	// Inst #1378 = VQSUBuv2i64
  ARM_FORMAT_N3Reg,	// Inst #1379 = VQSUBuv4i16
  ARM_FORMAT_N3Reg,	// Inst #1380 = VQSUBuv4i32
  ARM_FORMAT_N3Reg,	// Inst #1381 = VQSUBuv8i16
  ARM_FORMAT_N3Reg,	// Inst #1382 = VQSUBuv8i8
  ARM_FORMAT_N3Reg,	// Inst #1383 = VRADDHNv2i32
  ARM_FORMAT_N3Reg,	// Inst #1384 = VRADDHNv4i16
  ARM_FORMAT_N3Reg,	// Inst #1385 = VRADDHNv8i8
  ARM_FORMAT_N2Reg,	// Inst #1386 = VRECPEd
  ARM_FORMAT_N2Reg,	// Inst #1387 = VRECPEfd
  ARM_FORMAT_N2Reg,	// Inst #1388 = VRECPEfq
  ARM_FORMAT_N2Reg,	// Inst #1389 = VRECPEq
  ARM_FORMAT_N3Reg,	// Inst #1390 = VRECPSfd
  ARM_FORMAT_N3Reg,	// Inst #1391 = VRECPSfq
  ARM_FORMAT_N2Reg,	// Inst #1392 = VREV16d8
  ARM_FORMAT_N2Reg,	// Inst #1393 = VREV16q8
  ARM_FORMAT_N2Reg,	// Inst #1394 = VREV32d16
  ARM_FORMAT_N2Reg,	// Inst #1395 = VREV32d8
  ARM_FORMAT_N2Reg,	// Inst #1396 = VREV32q16
  ARM_FORMAT_N2Reg,	// Inst #1397 = VREV32q8
  ARM_FORMAT_N2Reg,	// Inst #1398 = VREV64d16
  ARM_FORMAT_N2Reg,	// Inst #1399 = VREV64d32
  ARM_FORMAT_N2Reg,	// Inst #1400 = VREV64d8
  ARM_FORMAT_N2Reg,	// Inst #1401 = VREV64df
  ARM_FORMAT_N2Reg,	// Inst #1402 = VREV64q16
  ARM_FORMAT_N2Reg,	// Inst #1403 = VREV64q32
  ARM_FORMAT_N2Reg,	// Inst #1404 = VREV64q8
  ARM_FORMAT_N2Reg,	// Inst #1405 = VREV64qf
  ARM_FORMAT_N3Reg,	// Inst #1406 = VRHADDsv16i8
  ARM_FORMAT_N3Reg,	// Inst #1407 = VRHADDsv2i32
  ARM_FORMAT_N3Reg,	// Inst #1408 = VRHADDsv4i16
  ARM_FORMAT_N3Reg,	// Inst #1409 = VRHADDsv4i32
  ARM_FORMAT_N3Reg,	// Inst #1410 = VRHADDsv8i16
  ARM_FORMAT_N3Reg,	// Inst #1411 = VRHADDsv8i8
  ARM_FORMAT_N3Reg,	// Inst #1412 = VRHADDuv16i8
  ARM_FORMAT_N3Reg,	// Inst #1413 = VRHADDuv2i32
  ARM_FORMAT_N3Reg,	// Inst #1414 = VRHADDuv4i16
  ARM_FORMAT_N3Reg,	// Inst #1415 = VRHADDuv4i32
  ARM_FORMAT_N3Reg,	// Inst #1416 = VRHADDuv8i16
  ARM_FORMAT_N3Reg,	// Inst #1417 = VRHADDuv8i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1418 = VRSHLsv16i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1419 = VRSHLsv1i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1420 = VRSHLsv2i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1421 = VRSHLsv2i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1422 = VRSHLsv4i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1423 = VRSHLsv4i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1424 = VRSHLsv8i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1425 = VRSHLsv8i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1426 = VRSHLuv16i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1427 = VRSHLuv1i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1428 = VRSHLuv2i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1429 = VRSHLuv2i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1430 = VRSHLuv4i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1431 = VRSHLuv4i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1432 = VRSHLuv8i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1433 = VRSHLuv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1434 = VRSHRNv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1435 = VRSHRNv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1436 = VRSHRNv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1437 = VRSHRsv16i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1438 = VRSHRsv1i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1439 = VRSHRsv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1440 = VRSHRsv2i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1441 = VRSHRsv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1442 = VRSHRsv4i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1443 = VRSHRsv8i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1444 = VRSHRsv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1445 = VRSHRuv16i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1446 = VRSHRuv1i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1447 = VRSHRuv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1448 = VRSHRuv2i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1449 = VRSHRuv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1450 = VRSHRuv4i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1451 = VRSHRuv8i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1452 = VRSHRuv8i8
  ARM_FORMAT_N2Reg,	// Inst #1453 = VRSQRTEd
  ARM_FORMAT_N2Reg,	// Inst #1454 = VRSQRTEfd
  ARM_FORMAT_N2Reg,	// Inst #1455 = VRSQRTEfq
  ARM_FORMAT_N2Reg,	// Inst #1456 = VRSQRTEq
  ARM_FORMAT_N3Reg,	// Inst #1457 = VRSQRTSfd
  ARM_FORMAT_N3Reg,	// Inst #1458 = VRSQRTSfq
  ARM_FORMAT_N2RegVecShR,	// Inst #1459 = VRSRAsv16i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1460 = VRSRAsv1i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1461 = VRSRAsv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1462 = VRSRAsv2i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1463 = VRSRAsv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1464 = VRSRAsv4i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1465 = VRSRAsv8i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1466 = VRSRAsv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1467 = VRSRAuv16i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1468 = VRSRAuv1i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1469 = VRSRAuv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1470 = VRSRAuv2i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1471 = VRSRAuv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1472 = VRSRAuv4i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1473 = VRSRAuv8i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1474 = VRSRAuv8i8
  ARM_FORMAT_N3Reg,	// Inst #1475 = VRSUBHNv2i32
  ARM_FORMAT_N3Reg,	// Inst #1476 = VRSUBHNv4i16
  ARM_FORMAT_N3Reg,	// Inst #1477 = VRSUBHNv8i8
  ARM_FORMAT_NEONSETLNFRM,	// Inst #1478 = VSETLNi16
  ARM_FORMAT_NEONSETLNFRM,	// Inst #1479 = VSETLNi32
  ARM_FORMAT_NEONSETLNFRM,	// Inst #1480 = VSETLNi8
  ARM_FORMAT_N2RegVecShL,	// Inst #1481 = VSHLLi16
  ARM_FORMAT_N2RegVecShL,	// Inst #1482 = VSHLLi32
  ARM_FORMAT_N2RegVecShL,	// Inst #1483 = VSHLLi8
  ARM_FORMAT_N2RegVecShL,	// Inst #1484 = VSHLLsv2i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1485 = VSHLLsv4i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1486 = VSHLLsv8i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1487 = VSHLLuv2i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1488 = VSHLLuv4i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1489 = VSHLLuv8i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1490 = VSHLiv16i8
  ARM_FORMAT_N2RegVecShL,	// Inst #1491 = VSHLiv1i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1492 = VSHLiv2i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1493 = VSHLiv2i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1494 = VSHLiv4i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1495 = VSHLiv4i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1496 = VSHLiv8i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1497 = VSHLiv8i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1498 = VSHLsv16i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1499 = VSHLsv1i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1500 = VSHLsv2i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1501 = VSHLsv2i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1502 = VSHLsv4i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1503 = VSHLsv4i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1504 = VSHLsv8i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1505 = VSHLsv8i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1506 = VSHLuv16i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1507 = VSHLuv1i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1508 = VSHLuv2i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1509 = VSHLuv2i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1510 = VSHLuv4i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1511 = VSHLuv4i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1512 = VSHLuv8i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1513 = VSHLuv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1514 = VSHRNv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1515 = VSHRNv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1516 = VSHRNv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1517 = VSHRsv16i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1518 = VSHRsv1i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1519 = VSHRsv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1520 = VSHRsv2i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1521 = VSHRsv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1522 = VSHRsv4i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1523 = VSHRsv8i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1524 = VSHRsv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1525 = VSHRuv16i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1526 = VSHRuv1i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1527 = VSHRuv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1528 = VSHRuv2i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1529 = VSHRuv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1530 = VSHRuv4i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1531 = VSHRuv8i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1532 = VSHRuv8i8
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1533 = VSHTOD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1534 = VSHTOS
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1535 = VSITOD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1536 = VSITOS
  ARM_FORMAT_N2RegVecShL,	// Inst #1537 = VSLIv16i8
  ARM_FORMAT_N2RegVecShL,	// Inst #1538 = VSLIv1i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1539 = VSLIv2i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1540 = VSLIv2i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1541 = VSLIv4i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1542 = VSLIv4i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1543 = VSLIv8i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1544 = VSLIv8i8
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1545 = VSLTOD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1546 = VSLTOS
  ARM_FORMAT_VFPUNARYFRM,	// Inst #1547 = VSQRTD
  ARM_FORMAT_VFPUNARYFRM,	// Inst #1548 = VSQRTS
  ARM_FORMAT_N2RegVecShR,	// Inst #1549 = VSRAsv16i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1550 = VSRAsv1i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1551 = VSRAsv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1552 = VSRAsv2i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1553 = VSRAsv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1554 = VSRAsv4i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1555 = VSRAsv8i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1556 = VSRAsv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1557 = VSRAuv16i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1558 = VSRAuv1i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1559 = VSRAuv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1560 = VSRAuv2i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1561 = VSRAuv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1562 = VSRAuv4i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1563 = VSRAuv8i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1564 = VSRAuv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1565 = VSRIv16i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1566 = VSRIv1i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1567 = VSRIv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1568 = VSRIv2i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1569 = VSRIv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1570 = VSRIv4i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1571 = VSRIv8i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1572 = VSRIv8i8
  ARM_FORMAT_NLdSt,	// Inst #1573 = VST1LNd16
  ARM_FORMAT_NLdSt,	// Inst #1574 = VST1LNd16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1575 = VST1LNd32
  ARM_FORMAT_NLdSt,	// Inst #1576 = VST1LNd32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1577 = VST1LNd8
  ARM_FORMAT_NLdSt,	// Inst #1578 = VST1LNd8_UPD
  ARM_FORMAT_PSEUDO,	// Inst #1579 = VST1LNq16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1580 = VST1LNq16Pseudo_UPD
  ARM_FORMAT_PSEUDO,	// Inst #1581 = VST1LNq32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1582 = VST1LNq32Pseudo_UPD
  ARM_FORMAT_PSEUDO,	// Inst #1583 = VST1LNq8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1584 = VST1LNq8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1585 = VST1d16
  ARM_FORMAT_NLdSt,	// Inst #1586 = VST1d16Q
  ARM_FORMAT_NLdSt,	// Inst #1587 = VST1d16Q_UPD
  ARM_FORMAT_NLdSt,	// Inst #1588 = VST1d16T
  ARM_FORMAT_NLdSt,	// Inst #1589 = VST1d16T_UPD
  ARM_FORMAT_NLdSt,	// Inst #1590 = VST1d16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1591 = VST1d32
  ARM_FORMAT_NLdSt,	// Inst #1592 = VST1d32Q
  ARM_FORMAT_NLdSt,	// Inst #1593 = VST1d32Q_UPD
  ARM_FORMAT_NLdSt,	// Inst #1594 = VST1d32T
  ARM_FORMAT_NLdSt,	// Inst #1595 = VST1d32T_UPD
  ARM_FORMAT_NLdSt,	// Inst #1596 = VST1d32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1597 = VST1d64
  ARM_FORMAT_NLdSt,	// Inst #1598 = VST1d64Q
  ARM_FORMAT_PSEUDO,	// Inst #1599 = VST1d64QPseudo
  ARM_FORMAT_PSEUDO,	// Inst #1600 = VST1d64QPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1601 = VST1d64Q_UPD
  ARM_FORMAT_NLdSt,	// Inst #1602 = VST1d64T
  ARM_FORMAT_PSEUDO,	// Inst #1603 = VST1d64TPseudo
  ARM_FORMAT_PSEUDO,	// Inst #1604 = VST1d64TPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1605 = VST1d64T_UPD
  ARM_FORMAT_NLdSt,	// Inst #1606 = VST1d64_UPD
  ARM_FORMAT_NLdSt,	// Inst #1607 = VST1d8
  ARM_FORMAT_NLdSt,	// Inst #1608 = VST1d8Q
  ARM_FORMAT_NLdSt,	// Inst #1609 = VST1d8Q_UPD
  ARM_FORMAT_NLdSt,	// Inst #1610 = VST1d8T
  ARM_FORMAT_NLdSt,	// Inst #1611 = VST1d8T_UPD
  ARM_FORMAT_NLdSt,	// Inst #1612 = VST1d8_UPD
  ARM_FORMAT_NLdSt,	// Inst #1613 = VST1q16
  ARM_FORMAT_PSEUDO,	// Inst #1614 = VST1q16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1615 = VST1q16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1616 = VST1q16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1617 = VST1q32
  ARM_FORMAT_PSEUDO,	// Inst #1618 = VST1q32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1619 = VST1q32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1620 = VST1q32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1621 = VST1q64
  ARM_FORMAT_PSEUDO,	// Inst #1622 = VST1q64Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1623 = VST1q64Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1624 = VST1q64_UPD
  ARM_FORMAT_NLdSt,	// Inst #1625 = VST1q8
  ARM_FORMAT_PSEUDO,	// Inst #1626 = VST1q8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1627 = VST1q8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1628 = VST1q8_UPD
  ARM_FORMAT_NLdSt,	// Inst #1629 = VST2LNd16
  ARM_FORMAT_PSEUDO,	// Inst #1630 = VST2LNd16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1631 = VST2LNd16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1632 = VST2LNd16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1633 = VST2LNd32
  ARM_FORMAT_PSEUDO,	// Inst #1634 = VST2LNd32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1635 = VST2LNd32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1636 = VST2LNd32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1637 = VST2LNd8
  ARM_FORMAT_PSEUDO,	// Inst #1638 = VST2LNd8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1639 = VST2LNd8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1640 = VST2LNd8_UPD
  ARM_FORMAT_NLdSt,	// Inst #1641 = VST2LNq16
  ARM_FORMAT_PSEUDO,	// Inst #1642 = VST2LNq16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1643 = VST2LNq16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1644 = VST2LNq16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1645 = VST2LNq32
  ARM_FORMAT_PSEUDO,	// Inst #1646 = VST2LNq32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1647 = VST2LNq32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1648 = VST2LNq32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1649 = VST2b16
  ARM_FORMAT_NLdSt,	// Inst #1650 = VST2b16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1651 = VST2b32
  ARM_FORMAT_NLdSt,	// Inst #1652 = VST2b32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1653 = VST2b8
  ARM_FORMAT_NLdSt,	// Inst #1654 = VST2b8_UPD
  ARM_FORMAT_NLdSt,	// Inst #1655 = VST2d16
  ARM_FORMAT_PSEUDO,	// Inst #1656 = VST2d16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1657 = VST2d16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1658 = VST2d16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1659 = VST2d32
  ARM_FORMAT_PSEUDO,	// Inst #1660 = VST2d32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1661 = VST2d32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1662 = VST2d32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1663 = VST2d8
  ARM_FORMAT_PSEUDO,	// Inst #1664 = VST2d8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1665 = VST2d8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1666 = VST2d8_UPD
  ARM_FORMAT_NLdSt,	// Inst #1667 = VST2q16
  ARM_FORMAT_PSEUDO,	// Inst #1668 = VST2q16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1669 = VST2q16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1670 = VST2q16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1671 = VST2q32
  ARM_FORMAT_PSEUDO,	// Inst #1672 = VST2q32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1673 = VST2q32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1674 = VST2q32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1675 = VST2q8
  ARM_FORMAT_PSEUDO,	// Inst #1676 = VST2q8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1677 = VST2q8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1678 = VST2q8_UPD
  ARM_FORMAT_NLdSt,	// Inst #1679 = VST3LNd16
  ARM_FORMAT_PSEUDO,	// Inst #1680 = VST3LNd16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1681 = VST3LNd16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1682 = VST3LNd16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1683 = VST3LNd32
  ARM_FORMAT_PSEUDO,	// Inst #1684 = VST3LNd32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1685 = VST3LNd32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1686 = VST3LNd32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1687 = VST3LNd8
  ARM_FORMAT_PSEUDO,	// Inst #1688 = VST3LNd8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1689 = VST3LNd8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1690 = VST3LNd8_UPD
  ARM_FORMAT_NLdSt,	// Inst #1691 = VST3LNq16
  ARM_FORMAT_PSEUDO,	// Inst #1692 = VST3LNq16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1693 = VST3LNq16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1694 = VST3LNq16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1695 = VST3LNq32
  ARM_FORMAT_PSEUDO,	// Inst #1696 = VST3LNq32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1697 = VST3LNq32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1698 = VST3LNq32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1699 = VST3d16
  ARM_FORMAT_PSEUDO,	// Inst #1700 = VST3d16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1701 = VST3d16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1702 = VST3d16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1703 = VST3d32
  ARM_FORMAT_PSEUDO,	// Inst #1704 = VST3d32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1705 = VST3d32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1706 = VST3d32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1707 = VST3d8
  ARM_FORMAT_PSEUDO,	// Inst #1708 = VST3d8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1709 = VST3d8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1710 = VST3d8_UPD
  ARM_FORMAT_NLdSt,	// Inst #1711 = VST3q16
  ARM_FORMAT_PSEUDO,	// Inst #1712 = VST3q16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1713 = VST3q16_UPD
  ARM_FORMAT_PSEUDO,	// Inst #1714 = VST3q16oddPseudo
  ARM_FORMAT_PSEUDO,	// Inst #1715 = VST3q16oddPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1716 = VST3q32
  ARM_FORMAT_PSEUDO,	// Inst #1717 = VST3q32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1718 = VST3q32_UPD
  ARM_FORMAT_PSEUDO,	// Inst #1719 = VST3q32oddPseudo
  ARM_FORMAT_PSEUDO,	// Inst #1720 = VST3q32oddPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1721 = VST3q8
  ARM_FORMAT_PSEUDO,	// Inst #1722 = VST3q8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1723 = VST3q8_UPD
  ARM_FORMAT_PSEUDO,	// Inst #1724 = VST3q8oddPseudo
  ARM_FORMAT_PSEUDO,	// Inst #1725 = VST3q8oddPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1726 = VST4LNd16
  ARM_FORMAT_PSEUDO,	// Inst #1727 = VST4LNd16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1728 = VST4LNd16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1729 = VST4LNd16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1730 = VST4LNd32
  ARM_FORMAT_PSEUDO,	// Inst #1731 = VST4LNd32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1732 = VST4LNd32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1733 = VST4LNd32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1734 = VST4LNd8
  ARM_FORMAT_PSEUDO,	// Inst #1735 = VST4LNd8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1736 = VST4LNd8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1737 = VST4LNd8_UPD
  ARM_FORMAT_NLdSt,	// Inst #1738 = VST4LNq16
  ARM_FORMAT_PSEUDO,	// Inst #1739 = VST4LNq16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1740 = VST4LNq16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1741 = VST4LNq16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1742 = VST4LNq32
  ARM_FORMAT_PSEUDO,	// Inst #1743 = VST4LNq32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1744 = VST4LNq32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1745 = VST4LNq32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1746 = VST4d16
  ARM_FORMAT_PSEUDO,	// Inst #1747 = VST4d16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1748 = VST4d16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1749 = VST4d16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1750 = VST4d32
  ARM_FORMAT_PSEUDO,	// Inst #1751 = VST4d32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1752 = VST4d32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1753 = VST4d32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1754 = VST4d8
  ARM_FORMAT_PSEUDO,	// Inst #1755 = VST4d8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1756 = VST4d8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1757 = VST4d8_UPD
  ARM_FORMAT_NLdSt,	// Inst #1758 = VST4q16
  ARM_FORMAT_PSEUDO,	// Inst #1759 = VST4q16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1760 = VST4q16_UPD
  ARM_FORMAT_PSEUDO,	// Inst #1761 = VST4q16oddPseudo
  ARM_FORMAT_PSEUDO,	// Inst #1762 = VST4q16oddPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1763 = VST4q32
  ARM_FORMAT_PSEUDO,	// Inst #1764 = VST4q32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1765 = VST4q32_UPD
  ARM_FORMAT_PSEUDO,	// Inst #1766 = VST4q32oddPseudo
  ARM_FORMAT_PSEUDO,	// Inst #1767 = VST4q32oddPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1768 = VST4q8
  ARM_FORMAT_PSEUDO,	// Inst #1769 = VST4q8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1770 = VST4q8_UPD
  ARM_FORMAT_PSEUDO,	// Inst #1771 = VST4q8oddPseudo
  ARM_FORMAT_PSEUDO,	// Inst #1772 = VST4q8oddPseudo_UPD
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #1773 = VSTMDDB
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #1774 = VSTMDDB_UPD
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #1775 = VSTMDIA
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #1776 = VSTMDIA_UPD
  ARM_FORMAT_PSEUDO,	// Inst #1777 = VSTMQDB
  ARM_FORMAT_PSEUDO,	// Inst #1778 = VSTMQIA
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #1779 = VSTMSDB
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #1780 = VSTMSDB_UPD
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #1781 = VSTMSIA
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #1782 = VSTMSIA_UPD
  ARM_FORMAT_VFPLDSTFRM,	// Inst #1783 = VSTRD
  ARM_FORMAT_VFPLDSTFRM,	// Inst #1784 = VSTRS
  ARM_FORMAT_VFPBINARYFRM,	// Inst #1785 = VSUBD
  ARM_FORMAT_N3Reg,	// Inst #1786 = VSUBHNv2i32
  ARM_FORMAT_N3Reg,	// Inst #1787 = VSUBHNv4i16
  ARM_FORMAT_N3Reg,	// Inst #1788 = VSUBHNv8i8
  ARM_FORMAT_N3Reg,	// Inst #1789 = VSUBLsv2i64
  ARM_FORMAT_N3Reg,	// Inst #1790 = VSUBLsv4i32
  ARM_FORMAT_N3Reg,	// Inst #1791 = VSUBLsv8i16
  ARM_FORMAT_N3Reg,	// Inst #1792 = VSUBLuv2i64
  ARM_FORMAT_N3Reg,	// Inst #1793 = VSUBLuv4i32
  ARM_FORMAT_N3Reg,	// Inst #1794 = VSUBLuv8i16
  ARM_FORMAT_VFPBINARYFRM,	// Inst #1795 = VSUBS
  ARM_FORMAT_N3Reg,	// Inst #1796 = VSUBWsv2i64
  ARM_FORMAT_N3Reg,	// Inst #1797 = VSUBWsv4i32
  ARM_FORMAT_N3Reg,	// Inst #1798 = VSUBWsv8i16
  ARM_FORMAT_N3Reg,	// Inst #1799 = VSUBWuv2i64
  ARM_FORMAT_N3Reg,	// Inst #1800 = VSUBWuv4i32
  ARM_FORMAT_N3Reg,	// Inst #1801 = VSUBWuv8i16
  ARM_FORMAT_N3Reg,	// Inst #1802 = VSUBfd
  ARM_FORMAT_N3Reg,	// Inst #1803 = VSUBfq
  ARM_FORMAT_N3Reg,	// Inst #1804 = VSUBv16i8
  ARM_FORMAT_N3Reg,	// Inst #1805 = VSUBv1i64
  ARM_FORMAT_N3Reg,	// Inst #1806 = VSUBv2i32
  ARM_FORMAT_N3Reg,	// Inst #1807 = VSUBv2i64
  ARM_FORMAT_N3Reg,	// Inst #1808 = VSUBv4i16
  ARM_FORMAT_N3Reg,	// Inst #1809 = VSUBv4i32
  ARM_FORMAT_N3Reg,	// Inst #1810 = VSUBv8i16
  ARM_FORMAT_N3Reg,	// Inst #1811 = VSUBv8i8
  ARM_FORMAT_N2Reg,	// Inst #1812 = VSWPd
  ARM_FORMAT_N2Reg,	// Inst #1813 = VSWPq
  ARM_FORMAT_NVTBL,	// Inst #1814 = VTBL1
  ARM_FORMAT_NVTBL,	// Inst #1815 = VTBL2
  ARM_FORMAT_PSEUDO,	// Inst #1816 = VTBL2Pseudo
  ARM_FORMAT_NVTBL,	// Inst #1817 = VTBL3
  ARM_FORMAT_PSEUDO,	// Inst #1818 = VTBL3Pseudo
  ARM_FORMAT_NVTBL,	// Inst #1819 = VTBL4
  ARM_FORMAT_PSEUDO,	// Inst #1820 = VTBL4Pseudo
  ARM_FORMAT_NVTBL,	// Inst #1821 = VTBX1
  ARM_FORMAT_NVTBL,	// Inst #1822 = VTBX2
  ARM_FORMAT_PSEUDO,	// Inst #1823 = VTBX2Pseudo
  ARM_FORMAT_NVTBL,	// Inst #1824 = VTBX3
  ARM_FORMAT_PSEUDO,	// Inst #1825 = VTBX3Pseudo
  ARM_FORMAT_NVTBL,	// Inst #1826 = VTBX4
  ARM_FORMAT_PSEUDO,	// Inst #1827 = VTBX4Pseudo
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1828 = VTOSHD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1829 = VTOSHS
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1830 = VTOSIRD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1831 = VTOSIRS
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1832 = VTOSIZD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1833 = VTOSIZS
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1834 = VTOSLD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1835 = VTOSLS
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1836 = VTOUHD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1837 = VTOUHS
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1838 = VTOUIRD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1839 = VTOUIRS
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1840 = VTOUIZD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1841 = VTOUIZS
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1842 = VTOULD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1843 = VTOULS
  ARM_FORMAT_N2Reg,	// Inst #1844 = VTRNd16
  ARM_FORMAT_N2Reg,	// Inst #1845 = VTRNd32
  ARM_FORMAT_N2Reg,	// Inst #1846 = VTRNd8
  ARM_FORMAT_N2Reg,	// Inst #1847 = VTRNq16
  ARM_FORMAT_N2Reg,	// Inst #1848 = VTRNq32
  ARM_FORMAT_N2Reg,	// Inst #1849 = VTRNq8
  ARM_FORMAT_N3Reg,	// Inst #1850 = VTSTv16i8
  ARM_FORMAT_N3Reg,	// Inst #1851 = VTSTv2i32
  ARM_FORMAT_N3Reg,	// Inst #1852 = VTSTv4i16
  ARM_FORMAT_N3Reg,	// Inst #1853 = VTSTv4i32
  ARM_FORMAT_N3Reg,	// Inst #1854 = VTSTv8i16
  ARM_FORMAT_N3Reg,	// Inst #1855 = VTSTv8i8
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1856 = VUHTOD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1857 = VUHTOS
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1858 = VUITOD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1859 = VUITOS
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1860 = VULTOD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1861 = VULTOS
  ARM_FORMAT_N2Reg,	// Inst #1862 = VUZPd16
  ARM_FORMAT_N2Reg,	// Inst #1863 = VUZPd32
  ARM_FORMAT_N2Reg,	// Inst #1864 = VUZPd8
  ARM_FORMAT_N2Reg,	// Inst #1865 = VUZPq16
  ARM_FORMAT_N2Reg,	// Inst #1866 = VUZPq32
  ARM_FORMAT_N2Reg,	// Inst #1867 = VUZPq8
  ARM_FORMAT_N2Reg,	// Inst #1868 = VZIPd16
  ARM_FORMAT_N2Reg,	// Inst #1869 = VZIPd32
  ARM_FORMAT_N2Reg,	// Inst #1870 = VZIPd8
  ARM_FORMAT_N2Reg,	// Inst #1871 = VZIPq16
  ARM_FORMAT_N2Reg,	// Inst #1872 = VZIPq32
  ARM_FORMAT_N2Reg,	// Inst #1873 = VZIPq8
  ARM_FORMAT_MISCFRM,	// Inst #1874 = WFE
  ARM_FORMAT_MISCFRM,	// Inst #1875 = WFI
  ARM_FORMAT_MISCFRM,	// Inst #1876 = YIELD
  ARM_FORMAT_THUMBFRM,	// Inst #1877 = t2ADCSri
  ARM_FORMAT_THUMBFRM,	// Inst #1878 = t2ADCSrr
  ARM_FORMAT_THUMBFRM,	// Inst #1879 = t2ADCSrs
  ARM_FORMAT_THUMBFRM,	// Inst #1880 = t2ADCri
  ARM_FORMAT_THUMBFRM,	// Inst #1881 = t2ADCrr
  ARM_FORMAT_THUMBFRM,	// Inst #1882 = t2ADCrs
  ARM_FORMAT_THUMBFRM,	// Inst #1883 = t2ADDSri
  ARM_FORMAT_THUMBFRM,	// Inst #1884 = t2ADDSrr
  ARM_FORMAT_THUMBFRM,	// Inst #1885 = t2ADDSrs
  ARM_FORMAT_THUMBFRM,	// Inst #1886 = t2ADDrSPi
  ARM_FORMAT_THUMBFRM,	// Inst #1887 = t2ADDrSPi12
  ARM_FORMAT_THUMBFRM,	// Inst #1888 = t2ADDrSPs
  ARM_FORMAT_THUMBFRM,	// Inst #1889 = t2ADDri
  ARM_FORMAT_THUMBFRM,	// Inst #1890 = t2ADDri12
  ARM_FORMAT_THUMBFRM,	// Inst #1891 = t2ADDrr
  ARM_FORMAT_THUMBFRM,	// Inst #1892 = t2ADDrs
  ARM_FORMAT_THUMBFRM,	// Inst #1893 = t2ADR
  ARM_FORMAT_THUMBFRM,	// Inst #1894 = t2ANDri
  ARM_FORMAT_THUMBFRM,	// Inst #1895 = t2ANDrr
  ARM_FORMAT_THUMBFRM,	// Inst #1896 = t2ANDrs
  ARM_FORMAT_THUMBFRM,	// Inst #1897 = t2ASRri
  ARM_FORMAT_THUMBFRM,	// Inst #1898 = t2ASRrr
  ARM_FORMAT_THUMBFRM,	// Inst #1899 = t2B
  ARM_FORMAT_THUMBFRM,	// Inst #1900 = t2BFC
  ARM_FORMAT_THUMBFRM,	// Inst #1901 = t2BFI
  ARM_FORMAT_THUMBFRM,	// Inst #1902 = t2BFI4p
  ARM_FORMAT_THUMBFRM,	// Inst #1903 = t2BICri
  ARM_FORMAT_THUMBFRM,	// Inst #1904 = t2BICrr
  ARM_FORMAT_THUMBFRM,	// Inst #1905 = t2BICrs
  ARM_FORMAT_PSEUDO,	// Inst #1906 = t2BR_JT
  ARM_FORMAT_THUMBFRM,	// Inst #1907 = t2BXJ
  ARM_FORMAT_THUMBFRM,	// Inst #1908 = t2Bcc
  ARM_FORMAT_THUMBFRM,	// Inst #1909 = t2CDP2
  ARM_FORMAT_THUMBFRM,	// Inst #1910 = t2CLREX
  ARM_FORMAT_THUMBFRM,	// Inst #1911 = t2CLZ
  ARM_FORMAT_THUMBFRM,	// Inst #1912 = t2CMNzri
  ARM_FORMAT_THUMBFRM,	// Inst #1913 = t2CMNzrr
  ARM_FORMAT_THUMBFRM,	// Inst #1914 = t2CMNzrs
  ARM_FORMAT_THUMBFRM,	// Inst #1915 = t2CMPri
  ARM_FORMAT_THUMBFRM,	// Inst #1916 = t2CMPrr
  ARM_FORMAT_THUMBFRM,	// Inst #1917 = t2CMPrs
  ARM_FORMAT_THUMBFRM,	// Inst #1918 = t2CPS1p
  ARM_FORMAT_THUMBFRM,	// Inst #1919 = t2CPS2p
  ARM_FORMAT_THUMBFRM,	// Inst #1920 = t2CPS3p
  ARM_FORMAT_THUMBFRM,	// Inst #1921 = t2DBG
  ARM_FORMAT_THUMBFRM,	// Inst #1922 = t2DMB
  ARM_FORMAT_THUMBFRM,	// Inst #1923 = t2DSB
  ARM_FORMAT_THUMBFRM,	// Inst #1924 = t2EORri
  ARM_FORMAT_THUMBFRM,	// Inst #1925 = t2EORrr
  ARM_FORMAT_THUMBFRM,	// Inst #1926 = t2EORrs
  ARM_FORMAT_THUMBFRM,	// Inst #1927 = t2ISB
  ARM_FORMAT_THUMBFRM,	// Inst #1928 = t2IT
  ARM_FORMAT_THUMBFRM,	// Inst #1929 = t2Int_eh_sjlj_setjmp
  ARM_FORMAT_THUMBFRM,	// Inst #1930 = t2Int_eh_sjlj_setjmp_nofp
  ARM_FORMAT_THUMBFRM,	// Inst #1931 = t2LDMDB
  ARM_FORMAT_THUMBFRM,	// Inst #1932 = t2LDMDB_UPD
  ARM_FORMAT_THUMBFRM,	// Inst #1933 = t2LDMIA
  ARM_FORMAT_THUMBFRM,	// Inst #1934 = t2LDMIA_RET
  ARM_FORMAT_THUMBFRM,	// Inst #1935 = t2LDMIA_UPD
  ARM_FORMAT_THUMBFRM,	// Inst #1936 = t2LDRBT
  ARM_FORMAT_THUMBFRM,	// Inst #1937 = t2LDRB_POST
  ARM_FORMAT_THUMBFRM,	// Inst #1938 = t2LDRB_PRE
  ARM_FORMAT_THUMBFRM,	// Inst #1939 = t2LDRBi12
  ARM_FORMAT_THUMBFRM,	// Inst #1940 = t2LDRBi8
  ARM_FORMAT_THUMBFRM,	// Inst #1941 = t2LDRBpci
  ARM_FORMAT_THUMBFRM,	// Inst #1942 = t2LDRBs
  ARM_FORMAT_THUMBFRM,	// Inst #1943 = t2LDRD_POST
  ARM_FORMAT_THUMBFRM,	// Inst #1944 = t2LDRD_PRE
  ARM_FORMAT_THUMBFRM,	// Inst #1945 = t2LDRDi8
  ARM_FORMAT_THUMBFRM,	// Inst #1946 = t2LDREX
  ARM_FORMAT_THUMBFRM,	// Inst #1947 = t2LDREXB
  ARM_FORMAT_THUMBFRM,	// Inst #1948 = t2LDREXD
  ARM_FORMAT_THUMBFRM,	// Inst #1949 = t2LDREXH
  ARM_FORMAT_THUMBFRM,	// Inst #1950 = t2LDRHT
  ARM_FORMAT_THUMBFRM,	// Inst #1951 = t2LDRH_POST
  ARM_FORMAT_THUMBFRM,	// Inst #1952 = t2LDRH_PRE
  ARM_FORMAT_THUMBFRM,	// Inst #1953 = t2LDRHi12
  ARM_FORMAT_THUMBFRM,	// Inst #1954 = t2LDRHi8
  ARM_FORMAT_THUMBFRM,	// Inst #1955 = t2LDRHpci
  ARM_FORMAT_THUMBFRM,	// Inst #1956 = t2LDRHs
  ARM_FORMAT_THUMBFRM,	// Inst #1957 = t2LDRSBT
  ARM_FORMAT_THUMBFRM,	// Inst #1958 = t2LDRSB_POST
  ARM_FORMAT_THUMBFRM,	// Inst #1959 = t2LDRSB_PRE
  ARM_FORMAT_THUMBFRM,	// Inst #1960 = t2LDRSBi12
  ARM_FORMAT_THUMBFRM,	// Inst #1961 = t2LDRSBi8
  ARM_FORMAT_THUMBFRM,	// Inst #1962 = t2LDRSBpci
  ARM_FORMAT_THUMBFRM,	// Inst #1963 = t2LDRSBs
  ARM_FORMAT_THUMBFRM,	// Inst #1964 = t2LDRSHT
  ARM_FORMAT_THUMBFRM,	// Inst #1965 = t2LDRSH_POST
  ARM_FORMAT_THUMBFRM,	// Inst #1966 = t2LDRSH_PRE
  ARM_FORMAT_THUMBFRM,	// Inst #1967 = t2LDRSHi12
  ARM_FORMAT_THUMBFRM,	// Inst #1968 = t2LDRSHi8
  ARM_FORMAT_THUMBFRM,	// Inst #1969 = t2LDRSHpci
  ARM_FORMAT_THUMBFRM,	// Inst #1970 = t2LDRSHs
  ARM_FORMAT_THUMBFRM,	// Inst #1971 = t2LDRT
  ARM_FORMAT_THUMBFRM,	// Inst #1972 = t2LDR_POST
  ARM_FORMAT_THUMBFRM,	// Inst #1973 = t2LDR_PRE
  ARM_FORMAT_THUMBFRM,	// Inst #1974 = t2LDRi12
  ARM_FORMAT_THUMBFRM,	// Inst #1975 = t2LDRi8
  ARM_FORMAT_THUMBFRM,	// Inst #1976 = t2LDRpci
  ARM_FORMAT_PSEUDO,	// Inst #1977 = t2LDRpci_pic
  ARM_FORMAT_THUMBFRM,	// Inst #1978 = t2LDRs
  ARM_FORMAT_PSEUDO,	// Inst #1979 = t2LEApcrel
  ARM_FORMAT_PSEUDO,	// Inst #1980 = t2LEApcrelJT
  ARM_FORMAT_THUMBFRM,	// Inst #1981 = t2LSLri
  ARM_FORMAT_THUMBFRM,	// Inst #1982 = t2LSLrr
  ARM_FORMAT_THUMBFRM,	// Inst #1983 = t2LSRri
  ARM_FORMAT_THUMBFRM,	// Inst #1984 = t2LSRrr
  ARM_FORMAT_THUMBFRM,	// Inst #1985 = t2MCR2
  ARM_FORMAT_THUMBFRM,	// Inst #1986 = t2MCRR2
  ARM_FORMAT_THUMBFRM,	// Inst #1987 = t2MLA
  ARM_FORMAT_THUMBFRM,	// Inst #1988 = t2MLS
  ARM_FORMAT_THUMBFRM,	// Inst #1989 = t2MOVCCasr
  ARM_FORMAT_THUMBFRM,	// Inst #1990 = t2MOVCCi
  ARM_FORMAT_THUMBFRM,	// Inst #1991 = t2MOVCCi16
  ARM_FORMAT_PSEUDO,	// Inst #1992 = t2MOVCCi32imm
  ARM_FORMAT_THUMBFRM,	// Inst #1993 = t2MOVCClsl
  ARM_FORMAT_THUMBFRM,	// Inst #1994 = t2MOVCClsr
  ARM_FORMAT_THUMBFRM,	// Inst #1995 = t2MOVCCr
  ARM_FORMAT_THUMBFRM,	// Inst #1996 = t2MOVCCror
  ARM_FORMAT_THUMBFRM,	// Inst #1997 = t2MOVTi16
  ARM_FORMAT_PSEUDO,	// Inst #1998 = t2MOVTi16_ga_pcrel
  ARM_FORMAT_PSEUDO,	// Inst #1999 = t2MOV_ga_dyn
  ARM_FORMAT_PSEUDO,	// Inst #2000 = t2MOV_ga_pcrel
  ARM_FORMAT_THUMBFRM,	// Inst #2001 = t2MOVi
  ARM_FORMAT_THUMBFRM,	// Inst #2002 = t2MOVi16
  ARM_FORMAT_PSEUDO,	// Inst #2003 = t2MOVi16_ga_pcrel
  ARM_FORMAT_PSEUDO,	// Inst #2004 = t2MOVi32imm
  ARM_FORMAT_THUMBFRM,	// Inst #2005 = t2MOVr
  ARM_FORMAT_THUMBFRM,	// Inst #2006 = t2MOVsra_flag
  ARM_FORMAT_THUMBFRM,	// Inst #2007 = t2MOVsrl_flag
  ARM_FORMAT_THUMBFRM,	// Inst #2008 = t2MRC2
  ARM_FORMAT_THUMBFRM,	// Inst #2009 = t2MRRC2
  ARM_FORMAT_THUMBFRM,	// Inst #2010 = t2MRS
  ARM_FORMAT_THUMBFRM,	// Inst #2011 = t2MRSsys
  ARM_FORMAT_THUMBFRM,	// Inst #2012 = t2MSR
  ARM_FORMAT_THUMBFRM,	// Inst #2013 = t2MUL
  ARM_FORMAT_THUMBFRM,	// Inst #2014 = t2MVNCCi
  ARM_FORMAT_THUMBFRM,	// Inst #2015 = t2MVNi
  ARM_FORMAT_THUMBFRM,	// Inst #2016 = t2MVNr
  ARM_FORMAT_THUMBFRM,	// Inst #2017 = t2MVNs
  ARM_FORMAT_THUMBFRM,	// Inst #2018 = t2NOP
  ARM_FORMAT_THUMBFRM,	// Inst #2019 = t2ORNri
  ARM_FORMAT_THUMBFRM,	// Inst #2020 = t2ORNrr
  ARM_FORMAT_THUMBFRM,	// Inst #2021 = t2ORNrs
  ARM_FORMAT_THUMBFRM,	// Inst #2022 = t2ORRri
  ARM_FORMAT_THUMBFRM,	// Inst #2023 = t2ORRrr
  ARM_FORMAT_THUMBFRM,	// Inst #2024 = t2ORRrs
  ARM_FORMAT_THUMBFRM,	// Inst #2025 = t2PKHBT
  ARM_FORMAT_THUMBFRM,	// Inst #2026 = t2PKHTB
  ARM_FORMAT_THUMBFRM,	// Inst #2027 = t2PLDWi12
  ARM_FORMAT_THUMBFRM,	// Inst #2028 = t2PLDWi8
  ARM_FORMAT_THUMBFRM,	// Inst #2029 = t2PLDWs
  ARM_FORMAT_THUMBFRM,	// Inst #2030 = t2PLDi12
  ARM_FORMAT_THUMBFRM,	// Inst #2031 = t2PLDi8
  ARM_FORMAT_THUMBFRM,	// Inst #2032 = t2PLDs
  ARM_FORMAT_THUMBFRM,	// Inst #2033 = t2PLIi12
  ARM_FORMAT_THUMBFRM,	// Inst #2034 = t2PLIi8
  ARM_FORMAT_THUMBFRM,	// Inst #2035 = t2PLIs
  ARM_FORMAT_THUMBFRM,	// Inst #2036 = t2QADD
  ARM_FORMAT_THUMBFRM,	// Inst #2037 = t2QADD16
  ARM_FORMAT_THUMBFRM,	// Inst #2038 = t2QADD8
  ARM_FORMAT_THUMBFRM,	// Inst #2039 = t2QASX
  ARM_FORMAT_THUMBFRM,	// Inst #2040 = t2QDADD
  ARM_FORMAT_THUMBFRM,	// Inst #2041 = t2QDSUB
  ARM_FORMAT_THUMBFRM,	// Inst #2042 = t2QSAX
  ARM_FORMAT_THUMBFRM,	// Inst #2043 = t2QSUB
  ARM_FORMAT_THUMBFRM,	// Inst #2044 = t2QSUB16
  ARM_FORMAT_THUMBFRM,	// Inst #2045 = t2QSUB8
  ARM_FORMAT_THUMBFRM,	// Inst #2046 = t2RBIT
  ARM_FORMAT_THUMBFRM,	// Inst #2047 = t2REV
  ARM_FORMAT_THUMBFRM,	// Inst #2048 = t2REV16
  ARM_FORMAT_THUMBFRM,	// Inst #2049 = t2REVSH
  ARM_FORMAT_THUMBFRM,	// Inst #2050 = t2RFEDB
  ARM_FORMAT_THUMBFRM,	// Inst #2051 = t2RFEDBW
  ARM_FORMAT_THUMBFRM,	// Inst #2052 = t2RFEIA
  ARM_FORMAT_THUMBFRM,	// Inst #2053 = t2RFEIAW
  ARM_FORMAT_THUMBFRM,	// Inst #2054 = t2RORri
  ARM_FORMAT_THUMBFRM,	// Inst #2055 = t2RORrr
  ARM_FORMAT_THUMBFRM,	// Inst #2056 = t2RRX
  ARM_FORMAT_THUMBFRM,	// Inst #2057 = t2RSBSri
  ARM_FORMAT_THUMBFRM,	// Inst #2058 = t2RSBSrs
  ARM_FORMAT_THUMBFRM,	// Inst #2059 = t2RSBri
  ARM_FORMAT_THUMBFRM,	// Inst #2060 = t2RSBrr
  ARM_FORMAT_THUMBFRM,	// Inst #2061 = t2RSBrs
  ARM_FORMAT_THUMBFRM,	// Inst #2062 = t2SADD16
  ARM_FORMAT_THUMBFRM,	// Inst #2063 = t2SADD8
  ARM_FORMAT_THUMBFRM,	// Inst #2064 = t2SASX
  ARM_FORMAT_THUMBFRM,	// Inst #2065 = t2SBCSri
  ARM_FORMAT_THUMBFRM,	// Inst #2066 = t2SBCSrr
  ARM_FORMAT_THUMBFRM,	// Inst #2067 = t2SBCSrs
  ARM_FORMAT_THUMBFRM,	// Inst #2068 = t2SBCri
  ARM_FORMAT_THUMBFRM,	// Inst #2069 = t2SBCrr
  ARM_FORMAT_THUMBFRM,	// Inst #2070 = t2SBCrs
  ARM_FORMAT_THUMBFRM,	// Inst #2071 = t2SBFX
  ARM_FORMAT_THUMBFRM,	// Inst #2072 = t2SDIV
  ARM_FORMAT_THUMBFRM,	// Inst #2073 = t2SEL
  ARM_FORMAT_THUMBFRM,	// Inst #2074 = t2SEV
  ARM_FORMAT_THUMBFRM,	// Inst #2075 = t2SHADD16
  ARM_FORMAT_THUMBFRM,	// Inst #2076 = t2SHADD8
  ARM_FORMAT_THUMBFRM,	// Inst #2077 = t2SHASX
  ARM_FORMAT_THUMBFRM,	// Inst #2078 = t2SHSAX
  ARM_FORMAT_THUMBFRM,	// Inst #2079 = t2SHSUB16
  ARM_FORMAT_THUMBFRM,	// Inst #2080 = t2SHSUB8
  ARM_FORMAT_THUMBFRM,	// Inst #2081 = t2SMC
  ARM_FORMAT_THUMBFRM,	// Inst #2082 = t2SMLABB
  ARM_FORMAT_THUMBFRM,	// Inst #2083 = t2SMLABT
  ARM_FORMAT_THUMBFRM,	// Inst #2084 = t2SMLAD
  ARM_FORMAT_THUMBFRM,	// Inst #2085 = t2SMLADX
  ARM_FORMAT_THUMBFRM,	// Inst #2086 = t2SMLAL
  ARM_FORMAT_THUMBFRM,	// Inst #2087 = t2SMLALBB
  ARM_FORMAT_THUMBFRM,	// Inst #2088 = t2SMLALBT
  ARM_FORMAT_THUMBFRM,	// Inst #2089 = t2SMLALD
  ARM_FORMAT_THUMBFRM,	// Inst #2090 = t2SMLALDX
  ARM_FORMAT_THUMBFRM,	// Inst #2091 = t2SMLALTB
  ARM_FORMAT_THUMBFRM,	// Inst #2092 = t2SMLALTT
  ARM_FORMAT_THUMBFRM,	// Inst #2093 = t2SMLATB
  ARM_FORMAT_THUMBFRM,	// Inst #2094 = t2SMLATT
  ARM_FORMAT_THUMBFRM,	// Inst #2095 = t2SMLAWB
  ARM_FORMAT_THUMBFRM,	// Inst #2096 = t2SMLAWT
  ARM_FORMAT_THUMBFRM,	// Inst #2097 = t2SMLSD
  ARM_FORMAT_THUMBFRM,	// Inst #2098 = t2SMLSDX
  ARM_FORMAT_THUMBFRM,	// Inst #2099 = t2SMLSLD
  ARM_FORMAT_THUMBFRM,	// Inst #2100 = t2SMLSLDX
  ARM_FORMAT_THUMBFRM,	// Inst #2101 = t2SMMLA
  ARM_FORMAT_THUMBFRM,	// Inst #2102 = t2SMMLAR
  ARM_FORMAT_THUMBFRM,	// Inst #2103 = t2SMMLS
  ARM_FORMAT_THUMBFRM,	// Inst #2104 = t2SMMLSR
  ARM_FORMAT_THUMBFRM,	// Inst #2105 = t2SMMUL
  ARM_FORMAT_THUMBFRM,	// Inst #2106 = t2SMMULR
  ARM_FORMAT_THUMBFRM,	// Inst #2107 = t2SMUAD
  ARM_FORMAT_THUMBFRM,	// Inst #2108 = t2SMUADX
  ARM_FORMAT_THUMBFRM,	// Inst #2109 = t2SMULBB
  ARM_FORMAT_THUMBFRM,	// Inst #2110 = t2SMULBT
  ARM_FORMAT_THUMBFRM,	// Inst #2111 = t2SMULL
  ARM_FORMAT_THUMBFRM,	// Inst #2112 = t2SMULTB
  ARM_FORMAT_THUMBFRM,	// Inst #2113 = t2SMULTT
  ARM_FORMAT_THUMBFRM,	// Inst #2114 = t2SMULWB
  ARM_FORMAT_THUMBFRM,	// Inst #2115 = t2SMULWT
  ARM_FORMAT_THUMBFRM,	// Inst #2116 = t2SMUSD
  ARM_FORMAT_THUMBFRM,	// Inst #2117 = t2SMUSDX
  ARM_FORMAT_THUMBFRM,	// Inst #2118 = t2SRSDB
  ARM_FORMAT_THUMBFRM,	// Inst #2119 = t2SRSDBW
  ARM_FORMAT_THUMBFRM,	// Inst #2120 = t2SRSIA
  ARM_FORMAT_THUMBFRM,	// Inst #2121 = t2SRSIAW
  ARM_FORMAT_THUMBFRM,	// Inst #2122 = t2SSAT
  ARM_FORMAT_THUMBFRM,	// Inst #2123 = t2SSAT16
  ARM_FORMAT_THUMBFRM,	// Inst #2124 = t2SSAX
  ARM_FORMAT_THUMBFRM,	// Inst #2125 = t2SSUB16
  ARM_FORMAT_THUMBFRM,	// Inst #2126 = t2SSUB8
  ARM_FORMAT_THUMBFRM,	// Inst #2127 = t2STMDB
  ARM_FORMAT_THUMBFRM,	// Inst #2128 = t2STMDB_UPD
  ARM_FORMAT_THUMBFRM,	// Inst #2129 = t2STMIA
  ARM_FORMAT_THUMBFRM,	// Inst #2130 = t2STMIA_UPD
  ARM_FORMAT_THUMBFRM,	// Inst #2131 = t2STRBT
  ARM_FORMAT_THUMBFRM,	// Inst #2132 = t2STRB_POST
  ARM_FORMAT_THUMBFRM,	// Inst #2133 = t2STRB_PRE
  ARM_FORMAT_THUMBFRM,	// Inst #2134 = t2STRBi12
  ARM_FORMAT_THUMBFRM,	// Inst #2135 = t2STRBi8
  ARM_FORMAT_THUMBFRM,	// Inst #2136 = t2STRBs
  ARM_FORMAT_THUMBFRM,	// Inst #2137 = t2STRD_POST
  ARM_FORMAT_THUMBFRM,	// Inst #2138 = t2STRD_PRE
  ARM_FORMAT_THUMBFRM,	// Inst #2139 = t2STRDi8
  ARM_FORMAT_THUMBFRM,	// Inst #2140 = t2STREX
  ARM_FORMAT_THUMBFRM,	// Inst #2141 = t2STREXB
  ARM_FORMAT_THUMBFRM,	// Inst #2142 = t2STREXD
  ARM_FORMAT_THUMBFRM,	// Inst #2143 = t2STREXH
  ARM_FORMAT_THUMBFRM,	// Inst #2144 = t2STRHT
  ARM_FORMAT_THUMBFRM,	// Inst #2145 = t2STRH_POST
  ARM_FORMAT_THUMBFRM,	// Inst #2146 = t2STRH_PRE
  ARM_FORMAT_THUMBFRM,	// Inst #2147 = t2STRHi12
  ARM_FORMAT_THUMBFRM,	// Inst #2148 = t2STRHi8
  ARM_FORMAT_THUMBFRM,	// Inst #2149 = t2STRHs
  ARM_FORMAT_THUMBFRM,	// Inst #2150 = t2STRT
  ARM_FORMAT_THUMBFRM,	// Inst #2151 = t2STR_POST
  ARM_FORMAT_THUMBFRM,	// Inst #2152 = t2STR_PRE
  ARM_FORMAT_THUMBFRM,	// Inst #2153 = t2STRi12
  ARM_FORMAT_THUMBFRM,	// Inst #2154 = t2STRi8
  ARM_FORMAT_THUMBFRM,	// Inst #2155 = t2STRs
  ARM_FORMAT_THUMBFRM,	// Inst #2156 = t2SUBSri
  ARM_FORMAT_THUMBFRM,	// Inst #2157 = t2SUBSrr
  ARM_FORMAT_THUMBFRM,	// Inst #2158 = t2SUBSrs
  ARM_FORMAT_THUMBFRM,	// Inst #2159 = t2SUBrSPi
  ARM_FORMAT_THUMBFRM,	// Inst #2160 = t2SUBrSPi12
  ARM_FORMAT_THUMBFRM,	// Inst #2161 = t2SUBrSPs
  ARM_FORMAT_THUMBFRM,	// Inst #2162 = t2SUBri
  ARM_FORMAT_THUMBFRM,	// Inst #2163 = t2SUBri12
  ARM_FORMAT_THUMBFRM,	// Inst #2164 = t2SUBrr
  ARM_FORMAT_THUMBFRM,	// Inst #2165 = t2SUBrs
  ARM_FORMAT_THUMBFRM,	// Inst #2166 = t2SXTAB16rr
  ARM_FORMAT_THUMBFRM,	// Inst #2167 = t2SXTAB16rr_rot
  ARM_FORMAT_THUMBFRM,	// Inst #2168 = t2SXTABrr
  ARM_FORMAT_THUMBFRM,	// Inst #2169 = t2SXTABrr_rot
  ARM_FORMAT_THUMBFRM,	// Inst #2170 = t2SXTAHrr
  ARM_FORMAT_THUMBFRM,	// Inst #2171 = t2SXTAHrr_rot
  ARM_FORMAT_THUMBFRM,	// Inst #2172 = t2SXTB16r
  ARM_FORMAT_THUMBFRM,	// Inst #2173 = t2SXTB16r_rot
  ARM_FORMAT_THUMBFRM,	// Inst #2174 = t2SXTBr
  ARM_FORMAT_THUMBFRM,	// Inst #2175 = t2SXTBr_rot
  ARM_FORMAT_THUMBFRM,	// Inst #2176 = t2SXTHr
  ARM_FORMAT_THUMBFRM,	// Inst #2177 = t2SXTHr_rot
  ARM_FORMAT_THUMBFRM,	// Inst #2178 = t2TBB
  ARM_FORMAT_PSEUDO,	// Inst #2179 = t2TBB_JT
  ARM_FORMAT_THUMBFRM,	// Inst #2180 = t2TBH
  ARM_FORMAT_PSEUDO,	// Inst #2181 = t2TBH_JT
  ARM_FORMAT_THUMBFRM,	// Inst #2182 = t2TEQri
  ARM_FORMAT_THUMBFRM,	// Inst #2183 = t2TEQrr
  ARM_FORMAT_THUMBFRM,	// Inst #2184 = t2TEQrs
  ARM_FORMAT_THUMBFRM,	// Inst #2185 = t2TPsoft
  ARM_FORMAT_THUMBFRM,	// Inst #2186 = t2TSTri
  ARM_FORMAT_THUMBFRM,	// Inst #2187 = t2TSTrr
  ARM_FORMAT_THUMBFRM,	// Inst #2188 = t2TSTrs
  ARM_FORMAT_THUMBFRM,	// Inst #2189 = t2UADD16
  ARM_FORMAT_THUMBFRM,	// Inst #2190 = t2UADD8
  ARM_FORMAT_THUMBFRM,	// Inst #2191 = t2UASX
  ARM_FORMAT_THUMBFRM,	// Inst #2192 = t2UBFX
  ARM_FORMAT_THUMBFRM,	// Inst #2193 = t2UDIV
  ARM_FORMAT_THUMBFRM,	// Inst #2194 = t2UHADD16
  ARM_FORMAT_THUMBFRM,	// Inst #2195 = t2UHADD8
  ARM_FORMAT_THUMBFRM,	// Inst #2196 = t2UHASX
  ARM_FORMAT_THUMBFRM,	// Inst #2197 = t2UHSAX
  ARM_FORMAT_THUMBFRM,	// Inst #2198 = t2UHSUB16
  ARM_FORMAT_THUMBFRM,	// Inst #2199 = t2UHSUB8
  ARM_FORMAT_THUMBFRM,	// Inst #2200 = t2UMAAL
  ARM_FORMAT_THUMBFRM,	// Inst #2201 = t2UMLAL
  ARM_FORMAT_THUMBFRM,	// Inst #2202 = t2UMULL
  ARM_FORMAT_THUMBFRM,	// Inst #2203 = t2UQADD16
  ARM_FORMAT_THUMBFRM,	// Inst #2204 = t2UQADD8
  ARM_FORMAT_THUMBFRM,	// Inst #2205 = t2UQASX
  ARM_FORMAT_THUMBFRM,	// Inst #2206 = t2UQSAX
  ARM_FORMAT_THUMBFRM,	// Inst #2207 = t2UQSUB16
  ARM_FORMAT_THUMBFRM,	// Inst #2208 = t2UQSUB8
  ARM_FORMAT_THUMBFRM,	// Inst #2209 = t2USAD8
  ARM_FORMAT_THUMBFRM,	// Inst #2210 = t2USADA8
  ARM_FORMAT_THUMBFRM,	// Inst #2211 = t2USAT
  ARM_FORMAT_THUMBFRM,	// Inst #2212 = t2USAT16
  ARM_FORMAT_THUMBFRM,	// Inst #2213 = t2USAX
  ARM_FORMAT_THUMBFRM,	// Inst #2214 = t2USUB16
  ARM_FORMAT_THUMBFRM,	// Inst #2215 = t2USUB8
  ARM_FORMAT_THUMBFRM,	// Inst #2216 = t2UXTAB16rr
  ARM_FORMAT_THUMBFRM,	// Inst #2217 = t2UXTAB16rr_rot
  ARM_FORMAT_THUMBFRM,	// Inst #2218 = t2UXTABrr
  ARM_FORMAT_THUMBFRM,	// Inst #2219 = t2UXTABrr_rot
  ARM_FORMAT_THUMBFRM,	// Inst #2220 = t2UXTAHrr
  ARM_FORMAT_THUMBFRM,	// Inst #2221 = t2UXTAHrr_rot
  ARM_FORMAT_THUMBFRM,	// Inst #2222 = t2UXTB16r
  ARM_FORMAT_THUMBFRM,	// Inst #2223 = t2UXTB16r_rot
  ARM_FORMAT_THUMBFRM,	// Inst #2224 = t2UXTBr
  ARM_FORMAT_THUMBFRM,	// Inst #2225 = t2UXTBr_rot
  ARM_FORMAT_THUMBFRM,	// Inst #2226 = t2UXTHr
  ARM_FORMAT_THUMBFRM,	// Inst #2227 = t2UXTHr_rot
  ARM_FORMAT_THUMBFRM,	// Inst #2228 = t2WFE
  ARM_FORMAT_THUMBFRM,	// Inst #2229 = t2WFI
  ARM_FORMAT_THUMBFRM,	// Inst #2230 = t2YIELD
  ARM_FORMAT_THUMBFRM,	// Inst #2231 = tADC
  ARM_FORMAT_THUMBFRM,	// Inst #2232 = tADDhirr
  ARM_FORMAT_THUMBFRM,	// Inst #2233 = tADDi3
  ARM_FORMAT_THUMBFRM,	// Inst #2234 = tADDi8
  ARM_FORMAT_THUMBFRM,	// Inst #2235 = tADDrPCi
  ARM_FORMAT_THUMBFRM,	// Inst #2236 = tADDrSP
  ARM_FORMAT_THUMBFRM,	// Inst #2237 = tADDrSPi
  ARM_FORMAT_THUMBFRM,	// Inst #2238 = tADDrr
  ARM_FORMAT_THUMBFRM,	// Inst #2239 = tADDspi
  ARM_FORMAT_THUMBFRM,	// Inst #2240 = tADDspr
  ARM_FORMAT_PSEUDO,	// Inst #2241 = tADJCALLSTACKDOWN
  ARM_FORMAT_PSEUDO,	// Inst #2242 = tADJCALLSTACKUP
  ARM_FORMAT_THUMBFRM,	// Inst #2243 = tADR
  ARM_FORMAT_THUMBFRM,	// Inst #2244 = tAND
  ARM_FORMAT_THUMBFRM,	// Inst #2245 = tASRri
  ARM_FORMAT_THUMBFRM,	// Inst #2246 = tASRrr
  ARM_FORMAT_THUMBFRM,	// Inst #2247 = tB
  ARM_FORMAT_THUMBFRM,	// Inst #2248 = tBIC
  ARM_FORMAT_THUMBFRM,	// Inst #2249 = tBKPT
  ARM_FORMAT_THUMBFRM,	// Inst #2250 = tBL
  ARM_FORMAT_THUMBFRM,	// Inst #2251 = tBLXi
  ARM_FORMAT_THUMBFRM,	// Inst #2252 = tBLXi_r9
  ARM_FORMAT_THUMBFRM,	// Inst #2253 = tBLXr
  ARM_FORMAT_THUMBFRM,	// Inst #2254 = tBLXr_r9
  ARM_FORMAT_THUMBFRM,	// Inst #2255 = tBLr9
  ARM_FORMAT_THUMBFRM,	// Inst #2256 = tBRIND
  ARM_FORMAT_PSEUDO,	// Inst #2257 = tBR_JTr
  ARM_FORMAT_THUMBFRM,	// Inst #2258 = tBX
  ARM_FORMAT_THUMBFRM,	// Inst #2259 = tBX_RET
  ARM_FORMAT_THUMBFRM,	// Inst #2260 = tBX_RET_vararg
  ARM_FORMAT_THUMBFRM,	// Inst #2261 = tBXr9
  ARM_FORMAT_THUMBFRM,	// Inst #2262 = tBcc
  ARM_FORMAT_PSEUDO,	// Inst #2263 = tBfar
  ARM_FORMAT_THUMBFRM,	// Inst #2264 = tCBNZ
  ARM_FORMAT_THUMBFRM,	// Inst #2265 = tCBZ
  ARM_FORMAT_THUMBFRM,	// Inst #2266 = tCDP
  ARM_FORMAT_THUMBFRM,	// Inst #2267 = tCMNz
  ARM_FORMAT_THUMBFRM,	// Inst #2268 = tCMPhir
  ARM_FORMAT_THUMBFRM,	// Inst #2269 = tCMPi8
  ARM_FORMAT_THUMBFRM,	// Inst #2270 = tCMPr
  ARM_FORMAT_THUMBFRM,	// Inst #2271 = tCPS
  ARM_FORMAT_THUMBFRM,	// Inst #2272 = tEOR
  ARM_FORMAT_PSEUDO,	// Inst #2273 = tInt_eh_sjlj_longjmp
  ARM_FORMAT_THUMBFRM,	// Inst #2274 = tInt_eh_sjlj_setjmp
  ARM_FORMAT_THUMBFRM,	// Inst #2275 = tLDMIA
  ARM_FORMAT_THUMBFRM,	// Inst #2276 = tLDMIA_UPD
  ARM_FORMAT_THUMBFRM,	// Inst #2277 = tLDRBi
  ARM_FORMAT_THUMBFRM,	// Inst #2278 = tLDRBr
  ARM_FORMAT_THUMBFRM,	// Inst #2279 = tLDRHi
  ARM_FORMAT_THUMBFRM,	// Inst #2280 = tLDRHr
  ARM_FORMAT_THUMBFRM,	// Inst #2281 = tLDRSB
  ARM_FORMAT_THUMBFRM,	// Inst #2282 = tLDRSH
  ARM_FORMAT_THUMBFRM,	// Inst #2283 = tLDRi
  ARM_FORMAT_THUMBFRM,	// Inst #2284 = tLDRpci
  ARM_FORMAT_PSEUDO,	// Inst #2285 = tLDRpci_pic
  ARM_FORMAT_THUMBFRM,	// Inst #2286 = tLDRr
  ARM_FORMAT_THUMBFRM,	// Inst #2287 = tLDRspi
  ARM_FORMAT_PSEUDO,	// Inst #2288 = tLEApcrel
  ARM_FORMAT_PSEUDO,	// Inst #2289 = tLEApcrelJT
  ARM_FORMAT_THUMBFRM,	// Inst #2290 = tLSLri
  ARM_FORMAT_THUMBFRM,	// Inst #2291 = tLSLrr
  ARM_FORMAT_THUMBFRM,	// Inst #2292 = tLSRri
  ARM_FORMAT_THUMBFRM,	// Inst #2293 = tLSRrr
  ARM_FORMAT_THUMBFRM,	// Inst #2294 = tMCR
  ARM_FORMAT_THUMBFRM,	// Inst #2295 = tMCRR
  ARM_FORMAT_THUMBFRM,	// Inst #2296 = tMOVCCi
  ARM_FORMAT_THUMBFRM,	// Inst #2297 = tMOVCCr
  ARM_FORMAT_PSEUDO,	// Inst #2298 = tMOVCCr_pseudo
  ARM_FORMAT_THUMBFRM,	// Inst #2299 = tMOVSr
  ARM_FORMAT_THUMBFRM,	// Inst #2300 = tMOVgpr2gpr
  ARM_FORMAT_THUMBFRM,	// Inst #2301 = tMOVgpr2tgpr
  ARM_FORMAT_THUMBFRM,	// Inst #2302 = tMOVi8
  ARM_FORMAT_THUMBFRM,	// Inst #2303 = tMOVr
  ARM_FORMAT_THUMBFRM,	// Inst #2304 = tMOVtgpr2gpr
  ARM_FORMAT_THUMBFRM,	// Inst #2305 = tMRC
  ARM_FORMAT_THUMBFRM,	// Inst #2306 = tMRRC
  ARM_FORMAT_THUMBFRM,	// Inst #2307 = tMUL
  ARM_FORMAT_THUMBFRM,	// Inst #2308 = tMVN
  ARM_FORMAT_THUMBFRM,	// Inst #2309 = tNOP
  ARM_FORMAT_THUMBFRM,	// Inst #2310 = tORR
  ARM_FORMAT_THUMBFRM,	// Inst #2311 = tPICADD
  ARM_FORMAT_THUMBFRM,	// Inst #2312 = tPOP
  ARM_FORMAT_THUMBFRM,	// Inst #2313 = tPOP_RET
  ARM_FORMAT_THUMBFRM,	// Inst #2314 = tPUSH
  ARM_FORMAT_THUMBFRM,	// Inst #2315 = tREV
  ARM_FORMAT_THUMBFRM,	// Inst #2316 = tREV16
  ARM_FORMAT_THUMBFRM,	// Inst #2317 = tREVSH
  ARM_FORMAT_THUMBFRM,	// Inst #2318 = tROR
  ARM_FORMAT_THUMBFRM,	// Inst #2319 = tRSB
  ARM_FORMAT_THUMBFRM,	// Inst #2320 = tRestore
  ARM_FORMAT_THUMBFRM,	// Inst #2321 = tSBC
  ARM_FORMAT_THUMBFRM,	// Inst #2322 = tSETENDBE
  ARM_FORMAT_THUMBFRM,	// Inst #2323 = tSETENDLE
  ARM_FORMAT_THUMBFRM,	// Inst #2324 = tSEV
  ARM_FORMAT_THUMBFRM,	// Inst #2325 = tSTMIA
  ARM_FORMAT_THUMBFRM,	// Inst #2326 = tSTMIA_UPD
  ARM_FORMAT_THUMBFRM,	// Inst #2327 = tSTRBi
  ARM_FORMAT_THUMBFRM,	// Inst #2328 = tSTRBr
  ARM_FORMAT_THUMBFRM,	// Inst #2329 = tSTRHi
  ARM_FORMAT_THUMBFRM,	// Inst #2330 = tSTRHr
  ARM_FORMAT_THUMBFRM,	// Inst #2331 = tSTRi
  ARM_FORMAT_THUMBFRM,	// Inst #2332 = tSTRr
  ARM_FORMAT_THUMBFRM,	// Inst #2333 = tSTRspi
  ARM_FORMAT_THUMBFRM,	// Inst #2334 = tSUBi3
  ARM_FORMAT_THUMBFRM,	// Inst #2335 = tSUBi8
  ARM_FORMAT_THUMBFRM,	// Inst #2336 = tSUBrr
  ARM_FORMAT_THUMBFRM,	// Inst #2337 = tSUBspi
  ARM_FORMAT_THUMBFRM,	// Inst #2338 = tSVC
  ARM_FORMAT_THUMBFRM,	// Inst #2339 = tSXTB
  ARM_FORMAT_THUMBFRM,	// Inst #2340 = tSXTH
  ARM_FORMAT_THUMBFRM,	// Inst #2341 = tSpill
  ARM_FORMAT_THUMBFRM,	// Inst #2342 = tTPsoft
  ARM_FORMAT_THUMBFRM,	// Inst #2343 = tTRAP
  ARM_FORMAT_THUMBFRM,	// Inst #2344 = tTST
  ARM_FORMAT_THUMBFRM,	// Inst #2345 = tUXTB
  ARM_FORMAT_THUMBFRM,	// Inst #2346 = tUXTH
  ARM_FORMAT_THUMBFRM,	// Inst #2347 = tWFE
  ARM_FORMAT_THUMBFRM,	// Inst #2348 = tWFI
  ARM_FORMAT_THUMBFRM,	// Inst #2349 = tYIELD
  ARM_FORMAT_NA	// Unreachable.
};

typedef uint32_t field_t;

static field_t fieldFromInstruction(field_t insn, unsigned startBit, unsigned numBits)
{
  assert(startBit + numBits <= 32 && "Instruction field out of bounds!");

  field_t fieldMask;

  if (numBits == 32)
    fieldMask = (field_t)-1;
  else
    fieldMask = ((1 << numBits) - 1) << startBit;

  return (insn & fieldMask) >> startBit;
}

static uint16_t decodeInstruction(field_t insn) {
  // Check Inst{31-28} ...
  switch (fieldFromInstruction(insn, 28, 4)) {
  case 14:
    // Check Inst{27-24} ...
    switch (fieldFromInstruction(insn, 24, 4)) {
    case 1:
      // Check Inst{23-4} ...
      switch (fieldFromInstruction(insn, 4, 20)) {
      case 196593:
        return 79; // BX
      case 196595:
        return 69; // BLXr9
      }
      break;
    case 7:
      // Check Inst{23-0} for singleton decoding...
      if (fieldFromInstruction(insn, 0, 24) == 16768766)
        return 407; // TRAP
      break;
    case 11:
      return 72; // BLr9
    }
    break;
  case 15:
    // Check Inst{27-25} ...
    switch (fieldFromInstruction(insn, 25, 3)) {
    case 0:
      // Check Inst{17-16} ...
      switch (fieldFromInstruction(insn, 16, 2)) {
      case 0:
        // Check Inst{24-20} && Inst{5-0} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 5) == 16 && fieldFromInstruction(insn, 0, 6) == 0)
          return 97; // CPS2p
        break;
      case 1:
        // Check Inst{24-18} && Inst{15-10} && Inst{8-0} for singleton decoding...
        if (fieldFromInstruction(insn, 18, 7) == 64 && fieldFromInstruction(insn, 10, 6) == 0 && fieldFromInstruction(insn, 0, 9) == 0)
          return 273; // SETEND
        break;
      case 2:
        // Check Inst{5} ...
        switch (fieldFromInstruction(insn, 5, 1)) {
        case 0:
          // Check Inst{24-20} ...
          switch (fieldFromInstruction(insn, 20, 5)) {
          case 16:
            // Check Inst{19-18} && Inst{8-6} for singleton decoding...
            if (fieldFromInstruction(insn, 18, 2) == 0 && fieldFromInstruction(insn, 6, 3) == 0)
              return 96; // CPS1p
            else
              return 98; // CPS3p
            break;
          }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{4} ...
      switch (fieldFromInstruction(insn, 4, 1)) {
      case 0:
        // Check Inst{21-20} ...
        switch (fieldFromInstruction(insn, 20, 2)) {
        case 0:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction(insn, 8, 4)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 707; // VHADDsv8i8
              case 1:
                return 702; // VHADDsv16i8
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 510; // VADDLsv8i16
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 713; // VHADDuv8i8
              case 1:
                return 708; // VHADDuv16i8
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 513; // VADDLuv8i16
              break;
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1411; // VRHADDsv8i8
              case 1:
                return 1406; // VRHADDsv16i8
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 517; // VADDWsv8i16
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1417; // VRHADDuv8i8
              case 1:
                return 1412; // VRHADDuv16i8
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 520; // VADDWuv8i16
              break;
            }
            break;
          case 2:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 719; // VHSUBsv8i8
              case 1:
                return 714; // VHSUBsv16i8
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1791; // VSUBLsv8i16
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 725; // VHSUBuv8i8
              case 1:
                return 720; // VHSUBuv16i8
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1794; // VSUBLuv8i16
              break;
            }
            break;
          case 3:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 590; // VCGTsv8i8
              case 1:
                return 585; // VCGTsv16i8
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1798; // VSUBWsv8i16
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 596; // VCGTuv8i8
              case 1:
                return 591; // VCGTuv16i8
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1801; // VSUBWuv8i16
              break;
            }
            break;
          case 4:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1505; // VSHLsv8i8
              case 1:
                return 1498; // VSHLsv16i8
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 507; // VADDHNv8i8
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1513; // VSHLuv8i8
              case 1:
                return 1506; // VSHLuv16i8
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1385; // VRADDHNv8i8
              break;
            }
            break;
          case 5:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1425; // VRSHLsv8i8
              case 1:
                return 1418; // VRSHLsv16i8
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 454; // VABALsv8i16
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1433; // VRSHLuv8i8
              case 1:
                return 1426; // VRSHLuv16i8
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 457; // VABALuv8i16
              break;
            }
            break;
          case 6:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1017; // VMAXsv8i8
              case 1:
                return 1012; // VMAXsv16i8
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1788; // VSUBHNv8i8
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1023; // VMAXuv8i8
              case 1:
                return 1018; // VMAXuv16i8
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1477; // VRSUBHNv8i8
              break;
            }
            break;
          case 7:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 483; // VABDsv8i8
              case 1:
                return 478; // VABDsv16i8
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 472; // VABDLsv8i16
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 489; // VABDuv8i8
              case 1:
                return 484; // VABDuv16i8
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 475; // VABDLuv8i16
              break;
            }
            break;
          case 8:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 530; // VADDv8i8
              case 1:
                return 523; // VADDv16i8
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1045; // VMLALsv8i16
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1811; // VSUBv8i8
              case 1:
                return 1804; // VSUBv16i8
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1048; // VMLALuv8i16
              break;
            }
            break;
          case 9:
            // Check Inst{6} ...
            switch (fieldFromInstruction(insn, 6, 1)) {
            case 0:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 0:
                return 1063; // VMLAv8i8
              case 2:
                return 1089; // VMLSv8i8
              }
              break;
            case 1:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 0:
                return 1058; // VMLAv16i8
              case 2:
                return 1084; // VMLSv16i8
              }
              break;
            }
            break;
          case 10:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1217; // VPMAXs8
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1071; // VMLSLsv8i16
              break;
            case 2:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1220; // VPMAXu8
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1074; // VMLSLuv8i16
              break;
            }
            break;
          case 12:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1135; // VMULLsv8i16
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1138; // VMULLuv8i16
              break;
            }
            break;
          case 13:
            // Check Inst{6} ...
            switch (fieldFromInstruction(insn, 6, 1)) {
            case 0:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 0:
                return 521; // VADDfd
              case 2:
                return 1210; // VPADDf
              }
              break;
            case 1:
              // Check Inst{24-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 2) == 0)
                return 522; // VADDfq
              break;
            }
            break;
          case 14:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 545; // VCEQfd
              case 1:
                return 546; // VCEQfq
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1128; // VMULLp
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 561; // VCGEfd
              case 1:
                return 562; // VCGEfq
              }
              break;
            }
            break;
          case 15:
            // Check Inst{6} ...
            switch (fieldFromInstruction(insn, 6, 1)) {
            case 0:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 0:
                return 1010; // VMAXfd
              case 2:
                return 1214; // VPMAXf
              }
              break;
            case 1:
              // Check Inst{24-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 2) == 0)
                return 1011; // VMAXfq
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction(insn, 8, 4)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 704; // VHADDsv4i16
              case 1:
                return 706; // VHADDsv8i16
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 509; // VADDLsv4i32
              case 1:
                return 1055; // VMLAslv4i16
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 710; // VHADDuv4i16
              case 1:
                return 712; // VHADDuv8i16
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 512; // VADDLuv4i32
              case 1:
                return 1057; // VMLAslv8i16
              }
              break;
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1408; // VRHADDsv4i16
              case 1:
                return 1410; // VRHADDsv8i16
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 516; // VADDWsv4i32
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1414; // VRHADDuv4i16
              case 1:
                return 1416; // VRHADDuv8i16
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 519; // VADDWuv4i32
              break;
            }
            break;
          case 2:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 716; // VHSUBsv4i16
              case 1:
                return 718; // VHSUBsv8i16
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1790; // VSUBLsv4i32
              case 1:
                return 1040; // VMLALslsv4i16
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 722; // VHSUBuv4i16
              case 1:
                return 724; // VHSUBuv8i16
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1793; // VSUBLuv4i32
              case 1:
                return 1042; // VMLALsluv4i16
              }
              break;
            }
            break;
          case 3:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 587; // VCGTsv4i16
              case 1:
                return 589; // VCGTsv8i16
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1797; // VSUBWsv4i32
              case 1:
                return 1251; // VQDMLALslv4i16
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 593; // VCGTuv4i16
              case 1:
                return 595; // VCGTuv8i16
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1800; // VSUBWuv4i32
              break;
            }
            break;
          case 4:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1502; // VSHLsv4i16
              case 1:
                return 1504; // VSHLsv8i16
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 506; // VADDHNv4i16
              case 1:
                return 1081; // VMLSslv4i16
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1510; // VSHLuv4i16
              case 1:
                return 1512; // VSHLuv8i16
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1384; // VRADDHNv4i16
              case 1:
                return 1083; // VMLSslv8i16
              }
              break;
            }
            break;
          case 5:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1422; // VRSHLsv4i16
              case 1:
                return 1424; // VRSHLsv8i16
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 453; // VABALsv4i32
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1430; // VRSHLuv4i16
              case 1:
                return 1432; // VRSHLuv8i16
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 456; // VABALuv4i32
              break;
            }
            break;
          case 6:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1014; // VMAXsv4i16
              case 1:
                return 1016; // VMAXsv8i16
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1787; // VSUBHNv4i16
              case 1:
                return 1066; // VMLSLslsv4i16
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1020; // VMAXuv4i16
              case 1:
                return 1022; // VMAXuv8i16
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1476; // VRSUBHNv4i16
              case 1:
                return 1068; // VMLSLsluv4i16
              }
              break;
            }
            break;
          case 7:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 480; // VABDsv4i16
              case 1:
                return 482; // VABDsv8i16
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 471; // VABDLsv4i32
              case 1:
                return 1255; // VQDMLSLslv4i16
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 486; // VABDuv4i16
              case 1:
                return 488; // VABDuv8i16
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 474; // VABDLuv4i32
              break;
            }
            break;
          case 8:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 527; // VADDv4i16
              case 1:
                return 529; // VADDv8i16
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1044; // VMLALsv4i32
              case 1:
                return 1147; // VMULslv4i16
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1808; // VSUBv4i16
              case 1:
                return 1810; // VSUBv8i16
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1047; // VMLALuv4i32
              case 1:
                return 1149; // VMULslv8i16
              }
              break;
            }
            break;
          case 9:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1060; // VMLAv4i16
              case 1:
                return 1062; // VMLAv8i16
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1253; // VQDMLALv4i32
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1086; // VMLSv4i16
              case 1:
                return 1088; // VMLSv8i16
              }
              break;
            }
            break;
          case 10:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1215; // VPMAXs16
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1070; // VMLSLsv4i32
              case 1:
                return 1130; // VMULLslsv4i16
              }
              break;
            case 2:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1218; // VPMAXu16
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1073; // VMLSLuv4i32
              case 1:
                return 1132; // VMULLsluv4i16
              }
              break;
            }
            break;
          case 11:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1263; // VQDMULHv4i16
              case 1:
                return 1265; // VQDMULHv8i16
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1257; // VQDMLSLv4i32
              case 1:
                return 1267; // VQDMULLslv4i16
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1290; // VQRDMULHv4i16
              case 1:
                return 1292; // VQRDMULHv8i16
              }
              break;
            }
            break;
          case 12:
            // Check Inst{6} ...
            switch (fieldFromInstruction(insn, 6, 1)) {
            case 0:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 1:
                return 1134; // VMULLsv4i32
              case 3:
                return 1137; // VMULLuv4i32
              }
              break;
            case 1:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 1:
                return 1259; // VQDMULHslv4i16
              case 3:
                return 1261; // VQDMULHslv8i16
              }
              break;
            }
            break;
          case 13:
            // Check Inst{6} ...
            switch (fieldFromInstruction(insn, 6, 1)) {
            case 0:
              // Check Inst{24-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 2) == 1)
                return 1269; // VQDMULLv4i32
              break;
            case 1:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 1:
                return 1286; // VQRDMULHslv4i16
              case 3:
                return 1288; // VQRDMULHslv8i16
              }
              break;
            }
            break;
          }
          break;
        case 2:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction(insn, 8, 4)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 703; // VHADDsv2i32
              case 1:
                return 705; // VHADDsv4i32
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 508; // VADDLsv2i64
              case 1:
                return 1054; // VMLAslv2i32
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 709; // VHADDuv2i32
              case 1:
                return 711; // VHADDuv4i32
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 511; // VADDLuv2i64
              case 1:
                return 1056; // VMLAslv4i32
              }
              break;
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1407; // VRHADDsv2i32
              case 1:
                return 1409; // VRHADDsv4i32
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 515; // VADDWsv2i64
              case 1:
                return 1052; // VMLAslfd
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1413; // VRHADDuv2i32
              case 1:
                return 1415; // VRHADDuv4i32
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 518; // VADDWuv2i64
              case 1:
                return 1053; // VMLAslfq
              }
              break;
            }
            break;
          case 2:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 715; // VHSUBsv2i32
              case 1:
                return 717; // VHSUBsv4i32
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1789; // VSUBLsv2i64
              case 1:
                return 1039; // VMLALslsv2i32
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 721; // VHSUBuv2i32
              case 1:
                return 723; // VHSUBuv4i32
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1792; // VSUBLuv2i64
              case 1:
                return 1041; // VMLALsluv2i32
              }
              break;
            }
            break;
          case 3:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 586; // VCGTsv2i32
              case 1:
                return 588; // VCGTsv4i32
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1796; // VSUBWsv2i64
              case 1:
                return 1250; // VQDMLALslv2i32
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 592; // VCGTuv2i32
              case 1:
                return 594; // VCGTuv4i32
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1799; // VSUBWuv2i64
              break;
            }
            break;
          case 4:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1500; // VSHLsv2i32
              case 1:
                return 1503; // VSHLsv4i32
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 505; // VADDHNv2i32
              case 1:
                return 1080; // VMLSslv2i32
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1508; // VSHLuv2i32
              case 1:
                return 1511; // VSHLuv4i32
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1383; // VRADDHNv2i32
              case 1:
                return 1082; // VMLSslv4i32
              }
              break;
            }
            break;
          case 5:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1420; // VRSHLsv2i32
              case 1:
                return 1423; // VRSHLsv4i32
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 452; // VABALsv2i64
              case 1:
                return 1078; // VMLSslfd
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1428; // VRSHLuv2i32
              case 1:
                return 1431; // VRSHLuv4i32
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 455; // VABALuv2i64
              case 1:
                return 1079; // VMLSslfq
              }
              break;
            }
            break;
          case 6:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1013; // VMAXsv2i32
              case 1:
                return 1015; // VMAXsv4i32
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1786; // VSUBHNv2i32
              case 1:
                return 1065; // VMLSLslsv2i32
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1019; // VMAXuv2i32
              case 1:
                return 1021; // VMAXuv4i32
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1475; // VRSUBHNv2i32
              case 1:
                return 1067; // VMLSLsluv2i32
              }
              break;
            }
            break;
          case 7:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 479; // VABDsv2i32
              case 1:
                return 481; // VABDsv4i32
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 470; // VABDLsv2i64
              case 1:
                return 1254; // VQDMLSLslv2i32
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 485; // VABDuv2i32
              case 1:
                return 487; // VABDuv4i32
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 473; // VABDLuv2i64
              break;
            }
            break;
          case 8:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 525; // VADDv2i32
              case 1:
                return 528; // VADDv4i32
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1043; // VMLALsv2i64
              case 1:
                return 1146; // VMULslv2i32
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1806; // VSUBv2i32
              case 1:
                return 1809; // VSUBv4i32
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1046; // VMLALuv2i64
              case 1:
                return 1148; // VMULslv4i32
              }
              break;
            }
            break;
          case 9:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1059; // VMLAv2i32
              case 1:
                return 1061; // VMLAv4i32
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1252; // VQDMLALv2i64
              case 1:
                return 1144; // VMULslfd
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1085; // VMLSv2i32
              case 1:
                return 1087; // VMLSv4i32
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 1)
                return 1145; // VMULslfq
              break;
            }
            break;
          case 10:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1216; // VPMAXs32
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1069; // VMLSLsv2i64
              case 1:
                return 1129; // VMULLslsv2i32
              }
              break;
            case 2:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1219; // VPMAXu32
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1072; // VMLSLuv2i64
              case 1:
                return 1131; // VMULLsluv2i32
              }
              break;
            }
            break;
          case 11:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1262; // VQDMULHv2i32
              case 1:
                return 1264; // VQDMULHv4i32
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1256; // VQDMLSLv2i64
              case 1:
                return 1266; // VQDMULLslv2i32
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1289; // VQRDMULHv2i32
              case 1:
                return 1291; // VQRDMULHv4i32
              }
              break;
            }
            break;
          case 12:
            // Check Inst{6} ...
            switch (fieldFromInstruction(insn, 6, 1)) {
            case 0:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 1:
                return 1133; // VMULLsv2i64
              case 3:
                return 1136; // VMULLuv2i64
              }
              break;
            case 1:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 1:
                return 1258; // VQDMULHslv2i32
              case 3:
                return 1260; // VQDMULHslv4i32
              }
              break;
            }
            break;
          case 13:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1802; // VSUBfd
              case 1:
                return 1803; // VSUBfq
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1268; // VQDMULLv2i64
              case 1:
                return 1285; // VQRDMULHslv2i32
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 476; // VABDfd
              case 1:
                return 477; // VABDfq
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 1)
                return 1287; // VQRDMULHslv4i32
              break;
            }
            break;
          case 14:
            // Check Inst{6} ...
            switch (fieldFromInstruction(insn, 6, 1)) {
            case 0:
              // Check Inst{24-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 2) == 2)
                return 583; // VCGTfd
              break;
            case 1:
              // Check Inst{24-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 2) == 2)
                return 584; // VCGTfq
              break;
            }
            break;
          case 15:
            // Check Inst{6} ...
            switch (fieldFromInstruction(insn, 6, 1)) {
            case 0:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 0:
                return 1024; // VMINfd
              case 2:
                return 1221; // VPMINf
              }
              break;
            case 1:
              // Check Inst{24-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 2) == 0)
                return 1025; // VMINfq
              break;
            }
            break;
          }
          break;
        case 3:
          // Check Inst{24-23} ...
          switch (fieldFromInstruction(insn, 23, 2)) {
          case 0:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction(insn, 8, 4)) {
            case 4:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1499; // VSHLsv1i64
              case 1:
                return 1501; // VSHLsv2i64
              }
              break;
            case 5:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1419; // VRSHLsv1i64
              case 1:
                return 1421; // VRSHLsv2i64
              }
              break;
            case 8:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 524; // VADDv1i64
              case 1:
                return 526; // VADDv2i64
              }
              break;
            }
            break;
          case 1:
            // Check Inst{6} ...
            switch (fieldFromInstruction(insn, 6, 1)) {
            case 0:
              return 691; // VEXTd8
            case 1:
              return 695; // VEXTq8
            }
            break;
          case 2:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction(insn, 8, 4)) {
            case 4:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1507; // VSHLuv1i64
              case 1:
                return 1509; // VSHLuv2i64
              }
              break;
            case 5:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1427; // VRSHLuv1i64
              case 1:
                return 1429; // VRSHLuv2i64
              }
              break;
            case 8:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1805; // VSUBv1i64
              case 1:
                return 1807; // VSUBv2i64
              }
              break;
            }
            break;
          case 3:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction(insn, 8, 4)) {
            case 0:
              // Check Inst{19-16} ...
              switch (fieldFromInstruction(insn, 16, 4)) {
              case 0:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1400; // VREV64d8
                case 1:
                  return 1404; // VREV64q8
                case 2:
                  return 1395; // VREV32d8
                case 3:
                  return 1397; // VREV32q8
                }
                break;
              case 1:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 604; // VCGTzv8i8
                case 1:
                  return 597; // VCGTzv16i8
                case 2:
                  return 582; // VCGEzv8i8
                case 3:
                  return 575; // VCGEzv16i8
                }
                break;
              case 2:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1812; // VSWPd
                case 1:
                  return 1813; // VSWPq
                case 2:
                  return 1846; // VTRNd8
                case 3:
                  return 1849; // VTRNq8
                }
                break;
              case 4:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1398; // VREV64d16
                case 1:
                  return 1402; // VREV64q16
                case 2:
                  return 1394; // VREV32d16
                case 3:
                  return 1396; // VREV32q16
                }
                break;
              case 5:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 601; // VCGTzv4i16
                case 1:
                  return 603; // VCGTzv8i16
                case 2:
                  return 579; // VCGEzv4i16
                case 3:
                  return 581; // VCGEzv8i16
                }
                break;
              case 6:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 2:
                  return 1844; // VTRNd16
                case 3:
                  return 1847; // VTRNq16
                }
                break;
              case 8:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1399; // VREV64d32
                case 1:
                  return 1403; // VREV64q32
                }
                break;
              case 9:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 599; // VCGTzv2i32
                case 1:
                  return 602; // VCGTzv4i32
                case 2:
                  return 577; // VCGEzv2i32
                case 3:
                  return 580; // VCGEzv4i32
                }
                break;
              case 10:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 2:
                  return 1845; // VTRNd32
                case 3:
                  return 1848; // VTRNq32
                }
                break;
              }
              break;
            case 1:
              // Check Inst{19-16} ...
              switch (fieldFromInstruction(insn, 16, 4)) {
              case 0:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1392; // VREV16d8
                case 1:
                  return 1393; // VREV16q8
                }
                break;
              case 1:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 560; // VCEQzv8i8
                case 1:
                  return 553; // VCEQzv16i8
                case 2:
                  return 612; // VCLEzv8i8
                case 3:
                  return 605; // VCLEzv16i8
                }
                break;
              case 2:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1864; // VUZPd8
                case 1:
                  return 1867; // VUZPq8
                case 2:
                  return 1870; // VZIPd8
                case 3:
                  return 1873; // VZIPq8
                }
                break;
              case 5:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 557; // VCEQzv4i16
                case 1:
                  return 559; // VCEQzv8i16
                case 2:
                  return 609; // VCLEzv4i16
                case 3:
                  return 611; // VCLEzv8i16
                }
                break;
              case 6:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1862; // VUZPd16
                case 1:
                  return 1865; // VUZPq16
                case 2:
                  return 1868; // VZIPd16
                case 3:
                  return 1871; // VZIPq16
                }
                break;
              case 9:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 555; // VCEQzv2i32
                case 1:
                  return 558; // VCEQzv4i32
                case 2:
                  return 607; // VCLEzv2i32
                case 3:
                  return 610; // VCLEzv4i32
                }
                break;
              case 10:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1863; // VUZPd32
                case 1:
                  return 1866; // VUZPq32
                case 2:
                  return 1869; // VZIPd32
                case 3:
                  return 1872; // VZIPq32
                }
                break;
              }
              break;
            case 2:
              // Check Inst{19-16} ...
              switch (fieldFromInstruction(insn, 16, 4)) {
              case 0:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1203; // VPADDLsv8i8
                case 1:
                  return 1198; // VPADDLsv16i8
                case 2:
                  return 1209; // VPADDLuv8i8
                case 3:
                  return 1204; // VPADDLuv16i8
                }
                break;
              case 1:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 626; // VCLTzv8i8
                case 1:
                  return 619; // VCLTzv16i8
                }
                break;
              case 2:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1102; // VMOVNv8i8
                case 1:
                  return 1272; // VQMOVNsuv8i8
                case 2:
                  return 1275; // VQMOVNsv8i8
                case 3:
                  return 1278; // VQMOVNuv8i8
                }
                break;
              case 4:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1200; // VPADDLsv4i16
                case 1:
                  return 1202; // VPADDLsv8i16
                case 2:
                  return 1206; // VPADDLuv4i16
                case 3:
                  return 1208; // VPADDLuv8i16
                }
                break;
              case 5:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 623; // VCLTzv4i16
                case 1:
                  return 625; // VCLTzv8i16
                }
                break;
              case 6:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1101; // VMOVNv4i16
                case 1:
                  return 1271; // VQMOVNsuv4i16
                case 2:
                  return 1274; // VQMOVNsv4i16
                case 3:
                  return 1277; // VQMOVNuv4i16
                }
                break;
              case 8:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1199; // VPADDLsv2i32
                case 1:
                  return 1201; // VPADDLsv4i32
                case 2:
                  return 1205; // VPADDLuv2i32
                case 3:
                  return 1207; // VPADDLuv4i32
                }
                break;
              case 9:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 621; // VCLTzv2i32
                case 1:
                  return 624; // VCLTzv4i32
                }
                break;
              case 10:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1100; // VMOVNv2i32
                case 1:
                  return 1270; // VQMOVNsuv2i32
                case 2:
                  return 1273; // VQMOVNsv2i32
                case 3:
                  return 1276; // VQMOVNuv2i32
                }
                break;
              }
              break;
            case 3:
              // Check Inst{19-16} ...
              switch (fieldFromInstruction(insn, 16, 4)) {
              case 1:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 499; // VABSv8i8
                case 1:
                  return 494; // VABSv16i8
                case 2:
                  return 1170; // VNEGs8d
                case 3:
                  return 1171; // VNEGs8q
                }
                break;
              case 2:
                // Check Inst{7-6} for singleton decoding...
                if (fieldFromInstruction(insn, 6, 2) == 0)
                  return 1483; // VSHLLi8
                break;
              case 5:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 496; // VABSv4i16
                case 1:
                  return 498; // VABSv8i16
                case 2:
                  return 1166; // VNEGs16d
                case 3:
                  return 1167; // VNEGs16q
                }
                break;
              case 6:
                // Check Inst{7-6} for singleton decoding...
                if (fieldFromInstruction(insn, 6, 2) == 0)
                  return 1481; // VSHLLi16
                break;
              case 9:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 495; // VABSv2i32
                case 1:
                  return 497; // VABSv4i32
                case 2:
                  return 1168; // VNEGs32d
                case 3:
                  return 1169; // VNEGs32q
                }
                break;
              case 10:
                // Check Inst{7-6} for singleton decoding...
                if (fieldFromInstruction(insn, 6, 2) == 0)
                  return 1482; // VSHLLi32
                break;
              }
              break;
            case 4:
              // Check Inst{19-16} ...
              switch (fieldFromInstruction(insn, 16, 4)) {
              case 0:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 618; // VCLSv8i8
                case 1:
                  return 613; // VCLSv16i8
                case 2:
                  return 632; // VCLZv8i8
                case 3:
                  return 627; // VCLZv16i8
                }
                break;
              case 4:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 615; // VCLSv4i16
                case 1:
                  return 617; // VCLSv8i16
                case 2:
                  return 629; // VCLZv4i16
                case 3:
                  return 631; // VCLZv8i16
                }
                break;
              case 8:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 614; // VCLSv2i32
                case 1:
                  return 616; // VCLSv4i32
                case 2:
                  return 628; // VCLZv2i32
                case 3:
                  return 630; // VCLZv4i32
                }
                break;
              case 9:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 598; // VCGTzv2f32
                case 1:
                  return 600; // VCGTzv4f32
                case 2:
                  return 576; // VCGEzv2f32
                case 3:
                  return 578; // VCGEzv4f32
                }
                break;
              case 11:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1386; // VRECPEd
                case 1:
                  return 1389; // VRECPEq
                case 2:
                  return 1453; // VRSQRTEd
                case 3:
                  return 1456; // VRSQRTEq
                }
                break;
              }
              break;
            case 5:
              // Check Inst{7-6} ...
              switch (fieldFromInstruction(insn, 6, 2)) {
              case 0:
                // Check Inst{19-16} ...
                switch (fieldFromInstruction(insn, 16, 4)) {
                case 0:
                  return 641; // VCNTd
                case 9:
                  return 554; // VCEQzv2f32
                case 11:
                  return 1387; // VRECPEfd
                }
                break;
              case 1:
                // Check Inst{19-16} ...
                switch (fieldFromInstruction(insn, 16, 4)) {
                case 0:
                  return 642; // VCNTq
                case 9:
                  return 556; // VCEQzv4f32
                case 11:
                  return 1388; // VRECPEfq
                }
                break;
              case 2:
                // Check Inst{19-16} ...
                switch (fieldFromInstruction(insn, 16, 4)) {
                case 0:
                  return 1156; // VMVNd
                case 9:
                  return 606; // VCLEzv2f32
                case 11:
                  return 1454; // VRSQRTEfd
                }
                break;
              case 3:
                // Check Inst{19-16} ...
                switch (fieldFromInstruction(insn, 16, 4)) {
                case 0:
                  return 1157; // VMVNq
                case 9:
                  return 608; // VCLEzv4f32
                case 11:
                  return 1455; // VRSQRTEfq
                }
                break;
              }
              break;
            case 6:
              // Check Inst{19-16} ...
              switch (fieldFromInstruction(insn, 16, 4)) {
              case 0:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1191; // VPADALsv8i8
                case 1:
                  return 1186; // VPADALsv16i8
                case 2:
                  return 1197; // VPADALuv8i8
                case 3:
                  return 1192; // VPADALuv16i8
                }
                break;
              case 4:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1188; // VPADALsv4i16
                case 1:
                  return 1190; // VPADALsv8i16
                case 2:
                  return 1194; // VPADALuv4i16
                case 3:
                  return 1196; // VPADALuv8i16
                }
                break;
              case 6:
                // Check Inst{7-6} for singleton decoding...
                if (fieldFromInstruction(insn, 6, 2) == 0)
                  return 649; // VCVTf2h
                break;
              case 8:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1187; // VPADALsv2i32
                case 1:
                  return 1189; // VPADALsv4i32
                case 2:
                  return 1193; // VPADALuv2i32
                case 3:
                  return 1195; // VPADALuv4i32
                }
                break;
              case 9:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 620; // VCLTzv2f32
                case 1:
                  return 622; // VCLTzv4f32
                }
                break;
              case 11:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 659; // VCVTs2fd
                case 1:
                  return 660; // VCVTs2fq
                case 2:
                  return 661; // VCVTu2fd
                case 3:
                  return 662; // VCVTu2fq
                }
                break;
              }
              break;
            case 7:
              // Check Inst{19-16} ...
              switch (fieldFromInstruction(insn, 16, 4)) {
              case 0:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1233; // VQABSv8i8
                case 1:
                  return 1228; // VQABSv16i8
                case 2:
                  return 1284; // VQNEGv8i8
                case 3:
                  return 1279; // VQNEGv16i8
                }
                break;
              case 4:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1230; // VQABSv4i16
                case 1:
                  return 1232; // VQABSv8i16
                case 2:
                  return 1281; // VQNEGv4i16
                case 3:
                  return 1283; // VQNEGv8i16
                }
                break;
              case 6:
                // Check Inst{7-6} for singleton decoding...
                if (fieldFromInstruction(insn, 6, 2) == 0)
                  return 658; // VCVTh2f
                break;
              case 8:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1229; // VQABSv2i32
                case 1:
                  return 1231; // VQABSv4i32
                case 2:
                  return 1280; // VQNEGv2i32
                case 3:
                  return 1282; // VQNEGv4i32
                }
                break;
              case 9:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 492; // VABSfd
                case 1:
                  return 493; // VABSfq
                case 2:
                  return 1165; // VNEGfd
                case 3:
                  return 1164; // VNEGf32q
                }
                break;
              case 11:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 650; // VCVTf2sd
                case 1:
                  return 651; // VCVTf2sq
                case 2:
                  return 652; // VCVTf2ud
                case 3:
                  return 653; // VCVTf2uq
                }
                break;
              }
              break;
            case 8:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1814; // VTBL1
              case 1:
                return 1821; // VTBX1
              }
              break;
            case 9:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1815; // VTBL2
              case 1:
                return 1822; // VTBX2
              }
              break;
            case 10:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1817; // VTBL3
              case 1:
                return 1824; // VTBX3
              }
              break;
            case 11:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1819; // VTBL4
              case 1:
                return 1826; // VTBX4
              }
              break;
            case 12:
              // Check Inst{7-6} ...
              switch (fieldFromInstruction(insn, 6, 2)) {
              case 0:
                // Check Inst{16} ...
                switch (fieldFromInstruction(insn, 16, 1)) {
                case 0:
                  // Check Inst{17} ...
                  switch (fieldFromInstruction(insn, 17, 1)) {
                  case 0:
                    // Check Inst{18-18} for singleton decoding...
                    if (fieldFromInstruction(insn, 18, 1) == 1)
                      return 677; // VDUPLN32d
                    break;
                  case 1:
                    return 675; // VDUPLN16d
                  }
                  break;
                case 1:
                  return 679; // VDUPLN8d
                }
                break;
              case 1:
                // Check Inst{16} ...
                switch (fieldFromInstruction(insn, 16, 1)) {
                case 0:
                  // Check Inst{17} ...
                  switch (fieldFromInstruction(insn, 17, 1)) {
                  case 0:
                    // Check Inst{18-18} for singleton decoding...
                    if (fieldFromInstruction(insn, 18, 1) == 1)
                      return 678; // VDUPLN32q
                    break;
                  case 1:
                    return 676; // VDUPLN16q
                  }
                  break;
                case 1:
                  return 680; // VDUPLN8q
                }
                break;
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{6} ...
        switch (fieldFromInstruction(insn, 6, 1)) {
        case 0:
          // Check Inst{23} ...
          switch (fieldFromInstruction(insn, 23, 1)) {
          case 0:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction(insn, 8, 4)) {
            case 0:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1241; // VQADDsv8i8
                case 1:
                  return 1249; // VQADDuv8i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1238; // VQADDsv4i16
                case 1:
                  return 1246; // VQADDuv4i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1236; // VQADDsv2i32
                case 1:
                  return 1244; // VQADDuv2i32
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1235; // VQADDsv1i64
                case 1:
                  return 1243; // VQADDuv1i64
                }
                break;
              }
              break;
            case 1:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 531; // VANDd
                case 1:
                  return 687; // VEORd
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 533; // VBICd
                case 1:
                  return 543; // VBSLd
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                {
                  field_t N = fieldFromInstruction(insn, 7, 1), M = fieldFromInstruction(insn, 5, 1);
                  field_t Vn = fieldFromInstruction(insn, 16, 4), Vm = fieldFromInstruction(insn, 0, 4);
                  return (N == M && Vn == Vm) ? 1093 /* VMOVDneon */ : 1180 /* VORRd */ ;
                }
                case 1:
                  return 541; // VBITd
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1178; // VORNd
                case 1:
                  return 539; // VBIFd
                }
                break;
              }
              break;
            case 2:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1374; // VQSUBsv8i8
                case 1:
                  return 1382; // VQSUBuv8i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1371; // VQSUBsv4i16
                case 1:
                  return 1379; // VQSUBuv4i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1369; // VQSUBsv2i32
                case 1:
                  return 1377; // VQSUBuv2i32
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1368; // VQSUBsv1i64
                case 1:
                  return 1376; // VQSUBuv1i64
                }
                break;
              }
              break;
            case 3:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 568; // VCGEsv8i8
                case 1:
                  return 574; // VCGEuv8i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 565; // VCGEsv4i16
                case 1:
                  return 571; // VCGEuv4i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 564; // VCGEsv2i32
                case 1:
                  return 570; // VCGEuv2i32
                }
                break;
              }
              break;
            case 4:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1341; // VQSHLsv8i8
                case 1:
                  return 1357; // VQSHLuv8i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1338; // VQSHLsv4i16
                case 1:
                  return 1354; // VQSHLuv4i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1336; // VQSHLsv2i32
                case 1:
                  return 1352; // VQSHLuv2i32
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1335; // VQSHLsv1i64
                case 1:
                  return 1351; // VQSHLuv1i64
                }
                break;
              }
              break;
            case 5:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1300; // VQRSHLsv8i8
                case 1:
                  return 1308; // VQRSHLuv8i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1297; // VQRSHLsv4i16
                case 1:
                  return 1305; // VQRSHLuv4i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1295; // VQRSHLsv2i32
                case 1:
                  return 1303; // VQRSHLuv2i32
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1294; // VQRSHLsv1i64
                case 1:
                  return 1302; // VQRSHLuv1i64
                }
                break;
              }
              break;
            case 6:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1031; // VMINsv8i8
                case 1:
                  return 1037; // VMINuv8i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1028; // VMINsv4i16
                case 1:
                  return 1034; // VMINuv4i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1027; // VMINsv2i32
                case 1:
                  return 1033; // VMINuv2i32
                }
                break;
              }
              break;
            case 7:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 463; // VABAsv8i8
                case 1:
                  return 469; // VABAuv8i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 460; // VABAsv4i16
                case 1:
                  return 466; // VABAuv4i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 459; // VABAsv2i32
                case 1:
                  return 465; // VABAuv2i32
                }
                break;
              }
              break;
            case 8:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1855; // VTSTv8i8
                case 1:
                  return 552; // VCEQv8i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1852; // VTSTv4i16
                case 1:
                  return 549; // VCEQv4i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1851; // VTSTv2i32
                case 1:
                  return 548; // VCEQv2i32
                }
                break;
              }
              break;
            case 9:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1155; // VMULv8i8
                case 1:
                  return 1142; // VMULpd
                }
                break;
              case 1:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1152; // VMULv4i16
                break;
              case 2:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1151; // VMULv2i32
                break;
              }
              break;
            case 10:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1224; // VPMINs8
                case 1:
                  return 1227; // VPMINu8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1222; // VPMINs16
                case 1:
                  return 1225; // VPMINu16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1223; // VPMINs32
                case 1:
                  return 1226; // VPMINu32
                }
                break;
              }
              break;
            case 11:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1213; // VPADDi8
                break;
              case 1:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1211; // VPADDi16
                break;
              case 2:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1212; // VPADDi32
                break;
              }
              break;
            case 13:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1050; // VMLAfd
                case 1:
                  return 1140; // VMULfd
                }
                break;
              case 2:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1076; // VMLSfd
                break;
              }
              break;
            case 14:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 1)
                  return 500; // VACGEd
                break;
              case 2:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 1)
                  return 502; // VACGTd
                break;
              }
              break;
            case 15:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1390; // VRECPSfd
                break;
              case 2:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1457; // VRSQRTSfd
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{7} ...
            switch (fieldFromInstruction(insn, 7, 1)) {
            case 0:
              // Check Inst{11-8} ...
              switch (fieldFromInstruction(insn, 8, 4)) {
              case 0:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1524; // VSHRsv8i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1532; // VSHRuv8i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1521; // VSHRsv4i16
                    case 1:
                      return 1529; // VSHRuv4i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1519; // VSHRsv2i32
                  case 1:
                    return 1527; // VSHRuv2i32
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1556; // VSRAsv8i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1564; // VSRAuv8i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1553; // VSRAsv4i16
                    case 1:
                      return 1561; // VSRAuv4i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1551; // VSRAsv2i32
                  case 1:
                    return 1559; // VSRAuv2i32
                  }
                  break;
                }
                break;
              case 2:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1444; // VRSHRsv8i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1452; // VRSHRuv8i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1441; // VRSHRsv4i16
                    case 1:
                      return 1449; // VRSHRuv4i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1439; // VRSHRsv2i32
                  case 1:
                    return 1447; // VRSHRuv2i32
                  }
                  break;
                }
                break;
              case 3:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1466; // VRSRAsv8i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1474; // VRSRAuv8i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1463; // VRSRAsv4i16
                    case 1:
                      return 1471; // VRSRAuv4i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1461; // VRSRAsv2i32
                  case 1:
                    return 1469; // VRSRAuv2i32
                  }
                  break;
                }
                break;
              case 4:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24-24} && Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction(insn, 24, 1) == 1 && fieldFromInstruction(insn, 19, 1) == 1)
                      return 1572; // VSRIv8i8
                    break;
                  case 1:
                    // Check Inst{24-24} for singleton decoding...
                    if (fieldFromInstruction(insn, 24, 1) == 1)
                      return 1569; // VSRIv4i16
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24-24} for singleton decoding...
                  if (fieldFromInstruction(insn, 24, 1) == 1)
                    return 1567; // VSRIv2i32
                  break;
                }
                break;
              case 5:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1497; // VSHLiv8i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1544; // VSLIv8i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1494; // VSHLiv4i16
                    case 1:
                      return 1541; // VSLIv4i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1492; // VSHLiv2i32
                  case 1:
                    return 1539; // VSLIv2i32
                  }
                  break;
                }
                break;
              case 6:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24-24} && Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction(insn, 24, 1) == 1 && fieldFromInstruction(insn, 19, 1) == 1)
                      return 1333; // VQSHLsuv8i8
                    break;
                  case 1:
                    // Check Inst{24-24} for singleton decoding...
                    if (fieldFromInstruction(insn, 24, 1) == 1)
                      return 1330; // VQSHLsuv4i16
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24-24} for singleton decoding...
                  if (fieldFromInstruction(insn, 24, 1) == 1)
                    return 1328; // VQSHLsuv2i32
                  break;
                }
                break;
              case 7:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1325; // VQSHLsiv8i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1349; // VQSHLuiv8i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1322; // VQSHLsiv4i16
                    case 1:
                      return 1346; // VQSHLuiv4i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1320; // VQSHLsiv2i32
                  case 1:
                    return 1344; // VQSHLuiv2i32
                  }
                  break;
                }
                break;
              case 8:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1516; // VSHRNv8i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1366; // VQSHRUNv8i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1515; // VSHRNv4i16
                    case 1:
                      return 1365; // VQSHRUNv4i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1514; // VSHRNv2i32
                  case 1:
                    return 1364; // VQSHRUNv2i32
                  }
                  break;
                }
                break;
              case 9:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1360; // VQSHRNsv8i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1363; // VQSHRNuv8i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1359; // VQSHRNsv4i16
                    case 1:
                      return 1362; // VQSHRNuv4i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1358; // VQSHRNsv2i32
                  case 1:
                    return 1361; // VQSHRNuv2i32
                  }
                  break;
                }
                break;
              case 10:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19} ...
                      switch (fieldFromInstruction(insn, 19, 1)) {
                      case 1:
                        // Check Inst{18-16} for singleton decoding...
                        if (fieldFromInstruction(insn, 16, 3) == 0)
                          return 1096; // VMOVLsv8i16
                        else
                          return 1486; // VSHLLsv8i16
                        break;
                      }
                      break;
                    case 1:
                      // Check Inst{19} ...
                      switch (fieldFromInstruction(insn, 19, 1)) {
                      case 1:
                        // Check Inst{18-16} for singleton decoding...
                        if (fieldFromInstruction(insn, 16, 3) == 0)
                          return 1099; // VMOVLuv8i16
                        else
                          return 1489; // VSHLLuv8i16
                        break;
                      }
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-16} for singleton decoding...
                      if (fieldFromInstruction(insn, 16, 4) == 0)
                        return 1095; // VMOVLsv4i32
                      else
                        return 1485; // VSHLLsv4i32
                      break;
                    case 1:
                      // Check Inst{19-16} for singleton decoding...
                      if (fieldFromInstruction(insn, 16, 4) == 0)
                        return 1098; // VMOVLuv4i32
                      else
                        return 1488; // VSHLLuv4i32
                      break;
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    // Check Inst{20-16} for singleton decoding...
                    if (fieldFromInstruction(insn, 16, 5) == 0)
                      return 1094; // VMOVLsv2i64
                    else
                      return 1484; // VSHLLsv2i64
                    break;
                  case 1:
                    // Check Inst{20-16} for singleton decoding...
                    if (fieldFromInstruction(insn, 16, 5) == 0)
                      return 1097; // VMOVLuv2i64
                    else
                      return 1487; // VSHLLuv2i64
                    break;
                  }
                  break;
                }
                break;
              case 14:
                // Check Inst{5} ...
                switch (fieldFromInstruction(insn, 5, 1)) {
                case 0:
                  // Check Inst{21-19} for singleton decoding...
                  if (fieldFromInstruction(insn, 19, 3) == 0)
                    return 1120; // VMOVv8i8
                  break;
                case 1:
                  // Check Inst{21-19} for singleton decoding...
                  if (fieldFromInstruction(insn, 19, 3) == 0)
                    return 1114; // VMOVv1i64
                  break;
                default:
                  break; // fallthrough
                }
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 663; // VCVTxs2fd
                case 1:
                  return 665; // VCVTxu2fd
                }
                break;
                break;
              case 15:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 654; // VCVTf2xsd
                case 1:
                  return 656; // VCVTf2xud
                }
                break;
              default:
                break; // fallthrough
              }
              // Check Inst{5} ...
              switch (fieldFromInstruction(insn, 5, 1)) {
              case 0:
                // Check Inst{21-19} ...
                switch (fieldFromInstruction(insn, 19, 3)) {
                case 0:
                  // Check Inst{8} ...
                  switch (fieldFromInstruction(insn, 8, 1)) {
                  case 0:
                    // Check Inst{11-10} for singleton decoding...
                    if (fieldFromInstruction(insn, 10, 2) == 2)
                      return 1117; // VMOVv4i16
                    break;
                  case 1:
                    // Check Inst{11} ...
                    switch (fieldFromInstruction(insn, 11, 1)) {
                    case 0:
                      return 1181; // VORRiv2i32
                    case 1:
                      // Check Inst{10-10} for singleton decoding...
                      if (fieldFromInstruction(insn, 10, 1) == 0)
                        return 1182; // VORRiv4i16
                      break;
                    }
                    break;
                  default:
                    break; // fallthrough
                  }
                  return 1115; // VMOVv2i32
                  break;
                }
                break;
              case 1:
                // Check Inst{21-19} ...
                switch (fieldFromInstruction(insn, 19, 3)) {
                case 0:
                  // Check Inst{8} ...
                  switch (fieldFromInstruction(insn, 8, 1)) {
                  case 0:
                    // Check Inst{11-10} for singleton decoding...
                    if (fieldFromInstruction(insn, 10, 2) == 2)
                      return 1159; // VMVNv4i16
                    break;
                  case 1:
                    // Check Inst{11} ...
                    switch (fieldFromInstruction(insn, 11, 1)) {
                    case 0:
                      return 534; // VBICiv2i32
                    case 1:
                      // Check Inst{10-10} for singleton decoding...
                      if (fieldFromInstruction(insn, 10, 1) == 0)
                        return 535; // VBICiv4i16
                      break;
                    }
                    break;
                  default:
                    break; // fallthrough
                  }
                  return 1158; // VMVNv2i32
                  break;
                }
                break;
              }
              break;
              break;
            case 1:
              // Check Inst{11-8} ...
              switch (fieldFromInstruction(insn, 8, 4)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1518; // VSHRsv1i64
                case 1:
                  return 1526; // VSHRuv1i64
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1550; // VSRAsv1i64
                case 1:
                  return 1558; // VSRAuv1i64
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1438; // VRSHRsv1i64
                case 1:
                  return 1446; // VRSHRuv1i64
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1460; // VRSRAsv1i64
                case 1:
                  return 1468; // VRSRAuv1i64
                }
                break;
              case 4:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 1)
                  return 1566; // VSRIv1i64
                break;
              case 5:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1491; // VSHLiv1i64
                case 1:
                  return 1538; // VSLIv1i64
                }
                break;
              case 6:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 1)
                  return 1327; // VQSHLsuv1i64
                break;
              case 7:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1319; // VQSHLsiv1i64
                case 1:
                  return 1343; // VQSHLuiv1i64
                }
                break;
              }
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{23} ...
          switch (fieldFromInstruction(insn, 23, 1)) {
          case 0:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction(insn, 8, 4)) {
            case 0:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1234; // VQADDsv16i8
                case 1:
                  return 1242; // VQADDuv16i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1240; // VQADDsv8i16
                case 1:
                  return 1248; // VQADDuv8i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1239; // VQADDsv4i32
                case 1:
                  return 1247; // VQADDuv4i32
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1237; // VQADDsv2i64
                case 1:
                  return 1245; // VQADDuv2i64
                }
                break;
              }
              break;
            case 1:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 532; // VANDq
                case 1:
                  return 688; // VEORq
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 538; // VBICq
                case 1:
                  return 544; // VBSLq
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                {
                  field_t N = fieldFromInstruction(insn, 7, 1), M = fieldFromInstruction(insn, 5, 1);
                  field_t Vn = fieldFromInstruction(insn, 16, 4), Vm = fieldFromInstruction(insn, 0, 4);
                  return (N == M && Vn == Vm) ? 1103 /* VMOVQ */ : 1185 /* VORRq */ ;
                }
                case 1:
                  return 542; // VBITq
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1179; // VORNq
                case 1:
                  return 540; // VBIFq
                }
                break;
              }
              break;
            case 2:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1367; // VQSUBsv16i8
                case 1:
                  return 1375; // VQSUBuv16i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1373; // VQSUBsv8i16
                case 1:
                  return 1381; // VQSUBuv8i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1372; // VQSUBsv4i32
                case 1:
                  return 1380; // VQSUBuv4i32
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1370; // VQSUBsv2i64
                case 1:
                  return 1378; // VQSUBuv2i64
                }
                break;
              }
              break;
            case 3:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 563; // VCGEsv16i8
                case 1:
                  return 569; // VCGEuv16i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 567; // VCGEsv8i16
                case 1:
                  return 573; // VCGEuv8i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 566; // VCGEsv4i32
                case 1:
                  return 572; // VCGEuv4i32
                }
                break;
              }
              break;
            case 4:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1334; // VQSHLsv16i8
                case 1:
                  return 1350; // VQSHLuv16i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1340; // VQSHLsv8i16
                case 1:
                  return 1356; // VQSHLuv8i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1339; // VQSHLsv4i32
                case 1:
                  return 1355; // VQSHLuv4i32
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1337; // VQSHLsv2i64
                case 1:
                  return 1353; // VQSHLuv2i64
                }
                break;
              }
              break;
            case 5:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1293; // VQRSHLsv16i8
                case 1:
                  return 1301; // VQRSHLuv16i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1299; // VQRSHLsv8i16
                case 1:
                  return 1307; // VQRSHLuv8i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1298; // VQRSHLsv4i32
                case 1:
                  return 1306; // VQRSHLuv4i32
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1296; // VQRSHLsv2i64
                case 1:
                  return 1304; // VQRSHLuv2i64
                }
                break;
              }
              break;
            case 6:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1026; // VMINsv16i8
                case 1:
                  return 1032; // VMINuv16i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1030; // VMINsv8i16
                case 1:
                  return 1036; // VMINuv8i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1029; // VMINsv4i32
                case 1:
                  return 1035; // VMINuv4i32
                }
                break;
              }
              break;
            case 7:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 458; // VABAsv16i8
                case 1:
                  return 464; // VABAuv16i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 462; // VABAsv8i16
                case 1:
                  return 468; // VABAuv8i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 461; // VABAsv4i32
                case 1:
                  return 467; // VABAuv4i32
                }
                break;
              }
              break;
            case 8:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1850; // VTSTv16i8
                case 1:
                  return 547; // VCEQv16i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1854; // VTSTv8i16
                case 1:
                  return 551; // VCEQv8i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1853; // VTSTv4i32
                case 1:
                  return 550; // VCEQv4i32
                }
                break;
              }
              break;
            case 9:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1150; // VMULv16i8
                case 1:
                  return 1143; // VMULpq
                }
                break;
              case 1:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1154; // VMULv8i16
                break;
              case 2:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1153; // VMULv4i32
                break;
              }
              break;
            case 13:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1051; // VMLAfq
                case 1:
                  return 1141; // VMULfq
                }
                break;
              case 2:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1077; // VMLSfq
                break;
              }
              break;
            case 14:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 1)
                  return 501; // VACGEq
                break;
              case 2:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 1)
                  return 503; // VACGTq
                break;
              }
              break;
            case 15:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1391; // VRECPSfq
                break;
              case 2:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1458; // VRSQRTSfq
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{7} ...
            switch (fieldFromInstruction(insn, 7, 1)) {
            case 0:
              // Check Inst{11-8} ...
              switch (fieldFromInstruction(insn, 8, 4)) {
              case 0:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1517; // VSHRsv16i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1525; // VSHRuv16i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1523; // VSHRsv8i16
                    case 1:
                      return 1531; // VSHRuv8i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1522; // VSHRsv4i32
                  case 1:
                    return 1530; // VSHRuv4i32
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1549; // VSRAsv16i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1557; // VSRAuv16i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1555; // VSRAsv8i16
                    case 1:
                      return 1563; // VSRAuv8i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1554; // VSRAsv4i32
                  case 1:
                    return 1562; // VSRAuv4i32
                  }
                  break;
                }
                break;
              case 2:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1437; // VRSHRsv16i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1445; // VRSHRuv16i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1443; // VRSHRsv8i16
                    case 1:
                      return 1451; // VRSHRuv8i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1442; // VRSHRsv4i32
                  case 1:
                    return 1450; // VRSHRuv4i32
                  }
                  break;
                }
                break;
              case 3:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1459; // VRSRAsv16i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1467; // VRSRAuv16i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1465; // VRSRAsv8i16
                    case 1:
                      return 1473; // VRSRAuv8i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1464; // VRSRAsv4i32
                  case 1:
                    return 1472; // VRSRAuv4i32
                  }
                  break;
                }
                break;
              case 4:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24-24} && Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction(insn, 24, 1) == 1 && fieldFromInstruction(insn, 19, 1) == 1)
                      return 1565; // VSRIv16i8
                    break;
                  case 1:
                    // Check Inst{24-24} for singleton decoding...
                    if (fieldFromInstruction(insn, 24, 1) == 1)
                      return 1571; // VSRIv8i16
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24-24} for singleton decoding...
                  if (fieldFromInstruction(insn, 24, 1) == 1)
                    return 1570; // VSRIv4i32
                  break;
                }
                break;
              case 5:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1490; // VSHLiv16i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1537; // VSLIv16i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1496; // VSHLiv8i16
                    case 1:
                      return 1543; // VSLIv8i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1495; // VSHLiv4i32
                  case 1:
                    return 1542; // VSLIv4i32
                  }
                  break;
                }
                break;
              case 6:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24-24} && Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction(insn, 24, 1) == 1 && fieldFromInstruction(insn, 19, 1) == 1)
                      return 1326; // VQSHLsuv16i8
                    break;
                  case 1:
                    // Check Inst{24-24} for singleton decoding...
                    if (fieldFromInstruction(insn, 24, 1) == 1)
                      return 1332; // VQSHLsuv8i16
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24-24} for singleton decoding...
                  if (fieldFromInstruction(insn, 24, 1) == 1)
                    return 1331; // VQSHLsuv4i32
                  break;
                }
                break;
              case 7:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1318; // VQSHLsiv16i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1342; // VQSHLuiv16i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1324; // VQSHLsiv8i16
                    case 1:
                      return 1348; // VQSHLuiv8i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1323; // VQSHLsiv4i32
                  case 1:
                    return 1347; // VQSHLuiv4i32
                  }
                  break;
                }
                break;
              case 8:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1436; // VRSHRNv8i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1317; // VQRSHRUNv8i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1435; // VRSHRNv4i16
                    case 1:
                      return 1316; // VQRSHRUNv4i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1434; // VRSHRNv2i32
                  case 1:
                    return 1315; // VQRSHRUNv2i32
                  }
                  break;
                }
                break;
              case 9:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1311; // VQRSHRNsv8i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1314; // VQRSHRNuv8i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1310; // VQRSHRNsv4i16
                    case 1:
                      return 1313; // VQRSHRNuv4i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1309; // VQRSHRNsv2i32
                  case 1:
                    return 1312; // VQRSHRNuv2i32
                  }
                  break;
                }
                break;
              case 14:
                // Check Inst{5} ...
                switch (fieldFromInstruction(insn, 5, 1)) {
                case 0:
                  // Check Inst{21-19} for singleton decoding...
                  if (fieldFromInstruction(insn, 19, 3) == 0)
                    return 1113; // VMOVv16i8
                  break;
                case 1:
                  // Check Inst{21-19} for singleton decoding...
                  if (fieldFromInstruction(insn, 19, 3) == 0)
                    return 1116; // VMOVv2i64
                  break;
                default:
                  break; // fallthrough
                }
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 664; // VCVTxs2fq
                case 1:
                  return 666; // VCVTxu2fq
                }
                break;
                break;
              case 15:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 655; // VCVTf2xsq
                case 1:
                  return 657; // VCVTf2xuq
                }
                break;
              default:
                break; // fallthrough
              }
              // Check Inst{5} ...
              switch (fieldFromInstruction(insn, 5, 1)) {
              case 0:
                // Check Inst{21-19} ...
                switch (fieldFromInstruction(insn, 19, 3)) {
                case 0:
                  // Check Inst{8} ...
                  switch (fieldFromInstruction(insn, 8, 1)) {
                  case 0:
                    // Check Inst{11-10} for singleton decoding...
                    if (fieldFromInstruction(insn, 10, 2) == 2)
                      return 1119; // VMOVv8i16
                    break;
                  case 1:
                    // Check Inst{11} ...
                    switch (fieldFromInstruction(insn, 11, 1)) {
                    case 0:
                      return 1183; // VORRiv4i32
                    case 1:
                      // Check Inst{10-10} for singleton decoding...
                      if (fieldFromInstruction(insn, 10, 1) == 0)
                        return 1184; // VORRiv8i16
                      break;
                    }
                    break;
                  default:
                    break; // fallthrough
                  }
                  return 1118; // VMOVv4i32
                  break;
                }
                break;
              case 1:
                // Check Inst{21-19} ...
                switch (fieldFromInstruction(insn, 19, 3)) {
                case 0:
                  // Check Inst{8} ...
                  switch (fieldFromInstruction(insn, 8, 1)) {
                  case 0:
                    // Check Inst{11-10} for singleton decoding...
                    if (fieldFromInstruction(insn, 10, 2) == 2)
                      return 1161; // VMVNv8i16
                    break;
                  case 1:
                    // Check Inst{11} ...
                    switch (fieldFromInstruction(insn, 11, 1)) {
                    case 0:
                      return 536; // VBICiv4i32
                    case 1:
                      // Check Inst{10-10} for singleton decoding...
                      if (fieldFromInstruction(insn, 10, 1) == 0)
                        return 537; // VBICiv8i16
                      break;
                    }
                    break;
                  default:
                    break; // fallthrough
                  }
                  return 1160; // VMVNv4i32
                  break;
                }
                break;
              }
              break;
              break;
            case 1:
              // Check Inst{11-8} ...
              switch (fieldFromInstruction(insn, 8, 4)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1520; // VSHRsv2i64
                case 1:
                  return 1528; // VSHRuv2i64
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1552; // VSRAsv2i64
                case 1:
                  return 1560; // VSRAuv2i64
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1440; // VRSHRsv2i64
                case 1:
                  return 1448; // VRSHRuv2i64
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1462; // VRSRAsv2i64
                case 1:
                  return 1470; // VRSRAuv2i64
                }
                break;
              case 4:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 1)
                  return 1568; // VSRIv2i64
                break;
              case 5:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1493; // VSHLiv2i64
                case 1:
                  return 1540; // VSLIv2i64
                }
                break;
              case 6:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 1)
                  return 1329; // VQSHLsuv2i64
                break;
              case 7:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1321; // VQSHLsiv2i64
                case 1:
                  return 1345; // VQSHLuiv2i64
                }
                break;
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      break;
    case 2:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction(insn, 20, 2)) {
      case 0:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction(insn, 8, 4)) {
        case 0:
          // Check Inst{24-23} ...
          switch (fieldFromInstruction(insn, 23, 2)) {
          case 0:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction(insn, 6, 2)) {
            case 0:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1754; // VST4d8
              else
                return 1757; // VST4d8_UPD
              break;
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1746; // VST4d16
              else
                return 1749; // VST4d16_UPD
              break;
            case 2:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1750; // VST4d32
              else
                return 1753; // VST4d32_UPD
              break;
            }
            break;
          case 1:
            // Check Inst{4} ...
            switch (fieldFromInstruction(insn, 4, 1)) {
            case 0:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1577; // VST1LNd8
              else
                return 1578; // VST1LNd8_UPD
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{24-23} ...
          switch (fieldFromInstruction(insn, 23, 2)) {
          case 0:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction(insn, 6, 2)) {
            case 0:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1768; // VST4q8
              else
                return 1770; // VST4q8_UPD
              break;
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1758; // VST4q16
              else
                return 1760; // VST4q16_UPD
              break;
            case 2:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1763; // VST4q32
              else
                return 1765; // VST4q32_UPD
              break;
            }
            break;
          case 1:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction(insn, 0, 4) == 15)
              return 1637; // VST2LNd8
            else
              return 1640; // VST2LNd8_UPD
            break;
          }
          break;
        case 2:
          // Check Inst{24-23} ...
          switch (fieldFromInstruction(insn, 23, 2)) {
          case 0:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction(insn, 6, 2)) {
            case 0:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1608; // VST1d8Q
              else
                return 1609; // VST1d8Q_UPD
              break;
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1586; // VST1d16Q
              else
                return 1587; // VST1d16Q_UPD
              break;
            case 2:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1592; // VST1d32Q
              else
                return 1593; // VST1d32Q_UPD
              break;
            case 3:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1598; // VST1d64Q
              else
                return 1601; // VST1d64Q_UPD
              break;
            }
            break;
          case 1:
            // Check Inst{4} ...
            switch (fieldFromInstruction(insn, 4, 1)) {
            case 0:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1687; // VST3LNd8
              else
                return 1690; // VST3LNd8_UPD
              break;
            }
            break;
          }
          break;
        case 3:
          // Check Inst{24-23} ...
          switch (fieldFromInstruction(insn, 23, 2)) {
          case 0:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction(insn, 6, 2)) {
            case 0:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1675; // VST2q8
              else
                return 1678; // VST2q8_UPD
              break;
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1667; // VST2q16
              else
                return 1670; // VST2q16_UPD
              break;
            case 2:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1671; // VST2q32
              else
                return 1674; // VST2q32_UPD
              break;
            }
            break;
          case 1:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction(insn, 0, 4) == 15)
              return 1734; // VST4LNd8
            else
              return 1737; // VST4LNd8_UPD
            break;
          }
          break;
        case 4:
          // Check Inst{24-23} ...
          switch (fieldFromInstruction(insn, 23, 2)) {
          case 0:
            // Check Inst{7-5} ...
            switch (fieldFromInstruction(insn, 5, 3)) {
            case 0:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1707; // VST3d8
              else
                return 1710; // VST3d8_UPD
              break;
            case 2:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1699; // VST3d16
              else
                return 1702; // VST3d16_UPD
              break;
            case 4:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1703; // VST3d32
              else
                return 1706; // VST3d32_UPD
              break;
            }
            break;
          case 1:
            // Check Inst{5} ...
            switch (fieldFromInstruction(insn, 5, 1)) {
            case 0:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1573; // VST1LNd16
              else
                return 1574; // VST1LNd16_UPD
              break;
            }
            break;
          }
          break;
        case 5:
          // Check Inst{5} ...
          switch (fieldFromInstruction(insn, 5, 1)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7-6} ...
              switch (fieldFromInstruction(insn, 6, 2)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1721; // VST3q8
                else
                  return 1723; // VST3q8_UPD
                break;
              case 1:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1711; // VST3q16
                else
                  return 1713; // VST3q16_UPD
                break;
              case 2:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1716; // VST3q32
                else
                  return 1718; // VST3q32_UPD
                break;
              }
              break;
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1629; // VST2LNd16
              else
                return 1632; // VST2LNd16_UPD
              break;
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1641; // VST2LNq16
              else
                return 1644; // VST2LNq16_UPD
              break;
            }
            break;
          }
          break;
        case 6:
          // Check Inst{5} ...
          switch (fieldFromInstruction(insn, 5, 1)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7-6} ...
              switch (fieldFromInstruction(insn, 6, 2)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1610; // VST1d8T
                else
                  return 1611; // VST1d8T_UPD
                break;
              case 1:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1588; // VST1d16T
                else
                  return 1589; // VST1d16T_UPD
                break;
              case 2:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1594; // VST1d32T
                else
                  return 1595; // VST1d32T_UPD
                break;
              case 3:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1602; // VST1d64T
                else
                  return 1605; // VST1d64T_UPD
                break;
              }
              break;
            case 1:
              // Check Inst{4} ...
              switch (fieldFromInstruction(insn, 4, 1)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1679; // VST3LNd16
                else
                  return 1682; // VST3LNd16_UPD
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{4} ...
            switch (fieldFromInstruction(insn, 4, 1)) {
            case 0:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 1:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1691; // VST3LNq16
                else
                  return 1694; // VST3LNq16_UPD
                break;
              }
              break;
            }
            break;
          }
          break;
        case 7:
          // Check Inst{5} ...
          switch (fieldFromInstruction(insn, 5, 1)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7-6} ...
              switch (fieldFromInstruction(insn, 6, 2)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1607; // VST1d8
                else
                  return 1612; // VST1d8_UPD
                break;
              case 1:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1585; // VST1d16
                else
                  return 1590; // VST1d16_UPD
                break;
              case 2:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1591; // VST1d32
                else
                  return 1596; // VST1d32_UPD
                break;
              case 3:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1597; // VST1d64
                else
                  return 1606; // VST1d64_UPD
                break;
              }
              break;
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1726; // VST4LNd16
              else
                return 1729; // VST4LNd16_UPD
              break;
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1738; // VST4LNq16
              else
                return 1741; // VST4LNq16_UPD
              break;
            }
            break;
          }
          break;
        case 8:
          // Check Inst{6} ...
          switch (fieldFromInstruction(insn, 6, 1)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7} ...
              switch (fieldFromInstruction(insn, 7, 1)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1663; // VST2d8
                else
                  return 1666; // VST2d8_UPD
                break;
              case 1:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1659; // VST2d32
                else
                  return 1662; // VST2d32_UPD
                break;
              }
              break;
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1575; // VST1LNd32
              else
                return 1576; // VST1LNd32_UPD
              break;
            }
            break;
          case 1:
            // Check Inst{7} ...
            switch (fieldFromInstruction(insn, 7, 1)) {
            case 0:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1655; // VST2d16
                else
                  return 1658; // VST2d16_UPD
                break;
              }
              break;
            }
            break;
          }
          break;
        case 9:
          // Check Inst{6} ...
          switch (fieldFromInstruction(insn, 6, 1)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7} ...
              switch (fieldFromInstruction(insn, 7, 1)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1653; // VST2b8
                else
                  return 1654; // VST2b8_UPD
                break;
              case 1:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1651; // VST2b32
                else
                  return 1652; // VST2b32_UPD
                break;
              }
              break;
            case 1:
              // Check Inst{5} ...
              switch (fieldFromInstruction(insn, 5, 1)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1633; // VST2LNd32
                else
                  return 1636; // VST2LNd32_UPD
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7} ...
              switch (fieldFromInstruction(insn, 7, 1)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1649; // VST2b16
                else
                  return 1650; // VST2b16_UPD
                break;
              }
              break;
            case 1:
              // Check Inst{5} ...
              switch (fieldFromInstruction(insn, 5, 1)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1645; // VST2LNq32
                else
                  return 1648; // VST2LNq32_UPD
                break;
              }
              break;
            }
            break;
          }
          break;
        case 10:
          // Check Inst{6} ...
          switch (fieldFromInstruction(insn, 6, 1)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7} ...
              switch (fieldFromInstruction(insn, 7, 1)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1625; // VST1q8
                else
                  return 1628; // VST1q8_UPD
                break;
              case 1:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1617; // VST1q32
                else
                  return 1620; // VST1q32_UPD
                break;
              }
              break;
            case 1:
              // Check Inst{5-4} ...
              switch (fieldFromInstruction(insn, 4, 2)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1683; // VST3LNd32
                else
                  return 1686; // VST3LNd32_UPD
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7} ...
              switch (fieldFromInstruction(insn, 7, 1)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1613; // VST1q16
                else
                  return 1616; // VST1q16_UPD
                break;
              case 1:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1621; // VST1q64
                else
                  return 1624; // VST1q64_UPD
                break;
              }
              break;
            case 1:
              // Check Inst{5-4} ...
              switch (fieldFromInstruction(insn, 4, 2)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 1695; // VST3LNq32
                else
                  return 1698; // VST3LNq32_UPD
                break;
              }
              break;
            }
            break;
          }
          break;
        case 11:
          // Check Inst{6} ...
          switch (fieldFromInstruction(insn, 6, 1)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1730; // VST4LNd32
              else
                return 1733; // VST4LNd32_UPD
              break;
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1742; // VST4LNq32
              else
                return 1745; // VST4LNq32_UPD
              break;
            }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{22} ...
        switch (fieldFromInstruction(insn, 22, 1)) {
        case 0:
          // Check Inst{24-24} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 24, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
            return 228; // PLDWi12
          break;
        case 1:
          // Check Inst{24} ...
          switch (fieldFromInstruction(insn, 24, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 232; // PLIi12
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 230; // PLDi12
            break;
          }
          break;
        }
        break;
      case 2:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction(insn, 8, 4)) {
        case 0:
          // Check Inst{24-23} ...
          switch (fieldFromInstruction(insn, 23, 2)) {
          case 0:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction(insn, 6, 2)) {
            case 0:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 979; // VLD4d8
              else
                return 982; // VLD4d8_UPD
              break;
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 971; // VLD4d16
              else
                return 974; // VLD4d16_UPD
              break;
            case 2:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 975; // VLD4d32
              else
                return 978; // VLD4d32_UPD
              break;
            }
            break;
          case 1:
            // Check Inst{4} ...
            switch (fieldFromInstruction(insn, 4, 1)) {
            case 0:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 748; // VLD1LNd8
              else
                return 749; // VLD1LNd8_UPD
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{24-23} ...
          switch (fieldFromInstruction(insn, 23, 2)) {
          case 0:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction(insn, 6, 2)) {
            case 0:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 993; // VLD4q8
              else
                return 995; // VLD4q8_UPD
              break;
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 983; // VLD4q16
              else
                return 985; // VLD4q16_UPD
              break;
            case 2:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 988; // VLD4q32
              else
                return 990; // VLD4q32_UPD
              break;
            }
            break;
          case 1:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction(insn, 0, 4) == 15)
              return 826; // VLD2LNd8
            else
              return 829; // VLD2LNd8_UPD
            break;
          }
          break;
        case 2:
          // Check Inst{24-23} ...
          switch (fieldFromInstruction(insn, 23, 2)) {
          case 0:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction(insn, 6, 2)) {
            case 0:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 779; // VLD1d8Q
              else
                return 780; // VLD1d8Q_UPD
              break;
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 757; // VLD1d16Q
              else
                return 758; // VLD1d16Q_UPD
              break;
            case 2:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 763; // VLD1d32Q
              else
                return 764; // VLD1d32Q_UPD
              break;
            case 3:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 769; // VLD1d64Q
              else
                return 772; // VLD1d64Q_UPD
              break;
            }
            break;
          case 1:
            // Check Inst{4} ...
            switch (fieldFromInstruction(insn, 4, 1)) {
            case 0:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 894; // VLD3LNd8
              else
                return 897; // VLD3LNd8_UPD
              break;
            }
            break;
          }
          break;
        case 3:
          // Check Inst{24-23} ...
          switch (fieldFromInstruction(insn, 23, 2)) {
          case 0:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction(insn, 6, 2)) {
            case 0:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 864; // VLD2q8
              else
                return 867; // VLD2q8_UPD
              break;
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 856; // VLD2q16
              else
                return 859; // VLD2q16_UPD
              break;
            case 2:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 860; // VLD2q32
              else
                return 863; // VLD2q32_UPD
              break;
            }
            break;
          case 1:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction(insn, 0, 4) == 15)
              return 959; // VLD4LNd8
            else
              return 962; // VLD4LNd8_UPD
            break;
          }
          break;
        case 4:
          // Check Inst{24-23} ...
          switch (fieldFromInstruction(insn, 23, 2)) {
          case 0:
            // Check Inst{7-5} ...
            switch (fieldFromInstruction(insn, 5, 3)) {
            case 0:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 914; // VLD3d8
              else
                return 917; // VLD3d8_UPD
              break;
            case 2:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 906; // VLD3d16
              else
                return 909; // VLD3d16_UPD
              break;
            case 4:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 910; // VLD3d32
              else
                return 913; // VLD3d32_UPD
              break;
            }
            break;
          case 1:
            // Check Inst{5} ...
            switch (fieldFromInstruction(insn, 5, 1)) {
            case 0:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 744; // VLD1LNd16
              else
                return 745; // VLD1LNd16_UPD
              break;
            }
            break;
          }
          break;
        case 5:
          // Check Inst{5} ...
          switch (fieldFromInstruction(insn, 5, 1)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7-6} ...
              switch (fieldFromInstruction(insn, 6, 2)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 928; // VLD3q8
                else
                  return 930; // VLD3q8_UPD
                break;
              case 1:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 918; // VLD3q16
                else
                  return 920; // VLD3q16_UPD
                break;
              case 2:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 923; // VLD3q32
                else
                  return 925; // VLD3q32_UPD
                break;
              }
              break;
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 818; // VLD2LNd16
              else
                return 821; // VLD2LNd16_UPD
              break;
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 830; // VLD2LNq16
              else
                return 833; // VLD2LNq16_UPD
              break;
            }
            break;
          }
          break;
        case 6:
          // Check Inst{5} ...
          switch (fieldFromInstruction(insn, 5, 1)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7-6} ...
              switch (fieldFromInstruction(insn, 6, 2)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 781; // VLD1d8T
                else
                  return 782; // VLD1d8T_UPD
                break;
              case 1:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 759; // VLD1d16T
                else
                  return 760; // VLD1d16T_UPD
                break;
              case 2:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 765; // VLD1d32T
                else
                  return 766; // VLD1d32T_UPD
                break;
              case 3:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 773; // VLD1d64T
                else
                  return 776; // VLD1d64T_UPD
                break;
              }
              break;
            case 1:
              // Check Inst{4} ...
              switch (fieldFromInstruction(insn, 4, 1)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 886; // VLD3LNd16
                else
                  return 889; // VLD3LNd16_UPD
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{4} ...
            switch (fieldFromInstruction(insn, 4, 1)) {
            case 0:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 1:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 898; // VLD3LNq16
                else
                  return 901; // VLD3LNq16_UPD
                break;
              }
              break;
            }
            break;
          }
          break;
        case 7:
          // Check Inst{5} ...
          switch (fieldFromInstruction(insn, 5, 1)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7-6} ...
              switch (fieldFromInstruction(insn, 6, 2)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 778; // VLD1d8
                else
                  return 783; // VLD1d8_UPD
                break;
              case 1:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 756; // VLD1d16
                else
                  return 761; // VLD1d16_UPD
                break;
              case 2:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 762; // VLD1d32
                else
                  return 767; // VLD1d32_UPD
                break;
              case 3:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 768; // VLD1d64
                else
                  return 777; // VLD1d64_UPD
                break;
              }
              break;
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 951; // VLD4LNd16
              else
                return 954; // VLD4LNd16_UPD
              break;
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 963; // VLD4LNq16
              else
                return 966; // VLD4LNq16_UPD
              break;
            }
            break;
          }
          break;
        case 8:
          // Check Inst{6} ...
          switch (fieldFromInstruction(insn, 6, 1)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7} ...
              switch (fieldFromInstruction(insn, 7, 1)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 852; // VLD2d8
                else
                  return 855; // VLD2d8_UPD
                break;
              case 1:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 848; // VLD2d32
                else
                  return 851; // VLD2d32_UPD
                break;
              }
              break;
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 746; // VLD1LNd32
              else
                return 747; // VLD1LNd32_UPD
              break;
            }
            break;
          case 1:
            // Check Inst{7} ...
            switch (fieldFromInstruction(insn, 7, 1)) {
            case 0:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 844; // VLD2d16
                else
                  return 847; // VLD2d16_UPD
                break;
              }
              break;
            }
            break;
          }
          break;
        case 9:
          // Check Inst{6} ...
          switch (fieldFromInstruction(insn, 6, 1)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7} ...
              switch (fieldFromInstruction(insn, 7, 1)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 842; // VLD2b8
                else
                  return 843; // VLD2b8_UPD
                break;
              case 1:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 840; // VLD2b32
                else
                  return 841; // VLD2b32_UPD
                break;
              }
              break;
            case 1:
              // Check Inst{5} ...
              switch (fieldFromInstruction(insn, 5, 1)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 822; // VLD2LNd32
                else
                  return 825; // VLD2LNd32_UPD
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7} ...
              switch (fieldFromInstruction(insn, 7, 1)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 838; // VLD2b16
                else
                  return 839; // VLD2b16_UPD
                break;
              }
              break;
            case 1:
              // Check Inst{5} ...
              switch (fieldFromInstruction(insn, 5, 1)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 834; // VLD2LNq32
                else
                  return 837; // VLD2LNq32_UPD
                break;
              }
              break;
            }
            break;
          }
          break;
        case 10:
          // Check Inst{6} ...
          switch (fieldFromInstruction(insn, 6, 1)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7} ...
              switch (fieldFromInstruction(insn, 7, 1)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 796; // VLD1q8
                else
                  return 799; // VLD1q8_UPD
                break;
              case 1:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 788; // VLD1q32
                else
                  return 791; // VLD1q32_UPD
                break;
              }
              break;
            case 1:
              // Check Inst{5-4} ...
              switch (fieldFromInstruction(insn, 4, 2)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 890; // VLD3LNd32
                else
                  return 893; // VLD3LNd32_UPD
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7} ...
              switch (fieldFromInstruction(insn, 7, 1)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 784; // VLD1q16
                else
                  return 787; // VLD1q16_UPD
                break;
              case 1:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 792; // VLD1q64
                else
                  return 795; // VLD1q64_UPD
                break;
              }
              break;
            case 1:
              // Check Inst{5-4} ...
              switch (fieldFromInstruction(insn, 4, 2)) {
              case 0:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 902; // VLD3LNq32
                else
                  return 905; // VLD3LNq32_UPD
                break;
              }
              break;
            }
            break;
          }
          break;
        case 11:
          // Check Inst{6} ...
          switch (fieldFromInstruction(insn, 6, 1)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 955; // VLD4LNd32
              else
                return 958; // VLD4LNd32_UPD
              break;
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 967; // VLD4LNq32
              else
                return 970; // VLD4LNq32_UPD
              break;
            }
            break;
          }
          break;
        case 12:
          // Check Inst{7-5} ...
          switch (fieldFromInstruction(insn, 5, 3)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 730; // VLD1DUPd8
              else
                return 731; // VLD1DUPd8_UPD
              break;
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 740; // VLD1DUPq8
              else
                return 743; // VLD1DUPq8_UPD
              break;
            }
            break;
          case 2:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 726; // VLD1DUPd16
              else
                return 727; // VLD1DUPd16_UPD
              break;
            }
            break;
          case 3:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 732; // VLD1DUPq16
              else
                return 735; // VLD1DUPq16_UPD
              break;
            }
            break;
          case 4:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 728; // VLD1DUPd32
              else
                return 729; // VLD1DUPd32_UPD
              break;
            }
            break;
          case 5:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 736; // VLD1DUPq32
              else
                return 739; // VLD1DUPq32_UPD
              break;
            }
            break;
          }
          break;
        case 13:
          // Check Inst{7-5} ...
          switch (fieldFromInstruction(insn, 5, 3)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 812; // VLD2DUPd8
              else
                return 815; // VLD2DUPd8_UPD
              break;
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 816; // VLD2DUPd8x2
              else
                return 817; // VLD2DUPd8x2_UPD
              break;
            }
            break;
          case 2:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 800; // VLD2DUPd16
              else
                return 803; // VLD2DUPd16_UPD
              break;
            }
            break;
          case 3:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 804; // VLD2DUPd16x2
              else
                return 805; // VLD2DUPd16x2_UPD
              break;
            }
            break;
          case 4:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 806; // VLD2DUPd32
              else
                return 809; // VLD2DUPd32_UPD
              break;
            }
            break;
          case 5:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 810; // VLD2DUPd32x2
              else
                return 811; // VLD2DUPd32x2_UPD
              break;
            }
            break;
          }
          break;
        case 14:
          // Check Inst{7-5} ...
          switch (fieldFromInstruction(insn, 5, 3)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 880; // VLD3DUPd8
              else
                return 883; // VLD3DUPd8_UPD
              break;
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 884; // VLD3DUPd8x2
              else
                return 885; // VLD3DUPd8x2_UPD
              break;
            }
            break;
          case 2:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 868; // VLD3DUPd16
              else
                return 871; // VLD3DUPd16_UPD
              break;
            }
            break;
          case 3:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 872; // VLD3DUPd16x2
              else
                return 873; // VLD3DUPd16x2_UPD
              break;
            }
            break;
          case 4:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 874; // VLD3DUPd32
              else
                return 877; // VLD3DUPd32_UPD
              break;
            }
            break;
          case 5:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 878; // VLD3DUPd32x2
              else
                return 879; // VLD3DUPd32x2_UPD
              break;
            }
            break;
          }
          break;
        case 15:
          // Check Inst{5} ...
          switch (fieldFromInstruction(insn, 5, 1)) {
          case 0:
            // Check Inst{7} ...
            switch (fieldFromInstruction(insn, 7, 1)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                // Check Inst{24-23} ...
                switch (fieldFromInstruction(insn, 23, 2)) {
                case 1:
                  // Check Inst{3-0} for singleton decoding...
                  if (fieldFromInstruction(insn, 0, 4) == 15)
                    return 945; // VLD4DUPd8
                  else
                    return 948; // VLD4DUPd8_UPD
                  break;
                }
                break;
              case 1:
                // Check Inst{24-23} ...
                switch (fieldFromInstruction(insn, 23, 2)) {
                case 1:
                  // Check Inst{3-0} for singleton decoding...
                  if (fieldFromInstruction(insn, 0, 4) == 15)
                    return 933; // VLD4DUPd16
                  else
                    return 936; // VLD4DUPd16_UPD
                  break;
                }
                break;
              }
              break;
            case 1:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 1:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 939; // VLD4DUPd32
                else
                  return 942; // VLD4DUPd32_UPD
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{7} ...
            switch (fieldFromInstruction(insn, 7, 1)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                // Check Inst{24-23} ...
                switch (fieldFromInstruction(insn, 23, 2)) {
                case 1:
                  // Check Inst{3-0} for singleton decoding...
                  if (fieldFromInstruction(insn, 0, 4) == 15)
                    return 949; // VLD4DUPd8x2
                  else
                    return 950; // VLD4DUPd8x2_UPD
                  break;
                }
                break;
              case 1:
                // Check Inst{24-23} ...
                switch (fieldFromInstruction(insn, 23, 2)) {
                case 1:
                  // Check Inst{3-0} for singleton decoding...
                  if (fieldFromInstruction(insn, 0, 4) == 15)
                    return 937; // VLD4DUPd16x2
                  else
                    return 938; // VLD4DUPd16x2_UPD
                  break;
                }
                break;
              }
              break;
            case 1:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 1:
                // Check Inst{3-0} for singleton decoding...
                if (fieldFromInstruction(insn, 0, 4) == 15)
                  return 943; // VLD4DUPd32x2
                else
                  return 944; // VLD4DUPd32x2_UPD
                break;
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 3:
        // Check Inst{19-4} ...
        switch (fieldFromInstruction(insn, 4, 16)) {
        case 65281:
          // Check Inst{24-22} && Inst{3-0} for singleton decoding...
          if (fieldFromInstruction(insn, 22, 3) == 5 && fieldFromInstruction(insn, 0, 4) == 15)
            return 87; // CLREX
          break;
        case 65284:
          // Check Inst{24-22} for singleton decoding...
          if (fieldFromInstruction(insn, 22, 3) == 5)
            return 102; // DSB
          break;
        case 65285:
          // Check Inst{24-22} for singleton decoding...
          if (fieldFromInstruction(insn, 22, 3) == 5)
            return 100; // DMB
          break;
        case 65286:
          // Check Inst{24-22} && Inst{3-0} for singleton decoding...
          if (fieldFromInstruction(insn, 22, 3) == 5 && fieldFromInstruction(insn, 0, 4) == 15)
            return 109; // ISB
          break;
        }
        break;
      }
      break;
    case 3:
      // Check Inst{22-20} ...
      switch (fieldFromInstruction(insn, 20, 3)) {
      case 1:
        // Check Inst{24-24} && Inst{15-12} for singleton decoding...
        if (fieldFromInstruction(insn, 24, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
          return 229; // PLDWrs
        break;
      case 5:
        // Check Inst{24} ...
        switch (fieldFromInstruction(insn, 24, 1)) {
        case 0:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 4) == 15)
            return 233; // PLIrs
          break;
        case 1:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 4) == 15)
            return 231; // PLDrs
          break;
        }
        break;
      }
      break;
    case 4:
      // Check Inst{22-20} ...
      switch (fieldFromInstruction(insn, 20, 3)) {
      case 1:
        return 248; // RFE
      case 3:
        return 249; // RFEW
      case 4:
        return 320; // SRS
      case 6:
        return 321; // SRSW
      }
      break;
    case 6:
      // Check Inst{22-20} ...
      switch (fieldFromInstruction(insn, 20, 3)) {
      case 0:
        // Check Inst{24} ...
        switch (fieldFromInstruction(insn, 24, 1)) {
        case 0:
          // Check Inst{23-23} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 1)
            return 332; // STC2_OPTION
          break;
        case 1:
          return 331; // STC2_OFFSET
        }
        break;
      case 1:
        // Check Inst{24} ...
        switch (fieldFromInstruction(insn, 24, 1)) {
        case 0:
          // Check Inst{23-23} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 1)
            return 119; // LDC2_OPTION
          break;
        case 1:
          return 118; // LDC2_OFFSET
        }
        break;
      case 2:
        // Check Inst{24} ...
        switch (fieldFromInstruction(insn, 24, 1)) {
        case 0:
          return 333; // STC2_POST
        case 1:
          return 334; // STC2_PRE
        }
        break;
      case 3:
        // Check Inst{24} ...
        switch (fieldFromInstruction(insn, 24, 1)) {
        case 0:
          return 120; // LDC2_POST
        case 1:
          return 121; // LDC2_PRE
        }
        break;
      case 4:
        // Check Inst{24} ...
        switch (fieldFromInstruction(insn, 24, 1)) {
        case 0:
          // Check Inst{23} ...
          switch (fieldFromInstruction(insn, 23, 1)) {
          case 0:
            return 174; // MCRR2
          case 1:
            return 328; // STC2L_OPTION
          }
          break;
        case 1:
          return 327; // STC2L_OFFSET
        }
        break;
      case 5:
        // Check Inst{24} ...
        switch (fieldFromInstruction(insn, 24, 1)) {
        case 0:
          // Check Inst{23} ...
          switch (fieldFromInstruction(insn, 23, 1)) {
          case 0:
            return 202; // MRRC2
          case 1:
            return 115; // LDC2L_OPTION
          }
          break;
        case 1:
          return 114; // LDC2L_OFFSET
        }
        break;
      case 6:
        // Check Inst{24} ...
        switch (fieldFromInstruction(insn, 24, 1)) {
        case 0:
          return 329; // STC2L_POST
        case 1:
          return 330; // STC2L_PRE
        }
        break;
      case 7:
        // Check Inst{24} ...
        switch (fieldFromInstruction(insn, 24, 1)) {
        case 0:
          return 116; // LDC2L_POST
        case 1:
          return 117; // LDC2L_PRE
        }
        break;
      }
      break;
    case 7:
      // Check Inst{4} ...
      switch (fieldFromInstruction(insn, 4, 1)) {
      case 0:
        // Check Inst{24-24} for singleton decoding...
        if (fieldFromInstruction(insn, 24, 1) == 0)
          return 86; // CDP2
        break;
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          // Check Inst{24-24} for singleton decoding...
          if (fieldFromInstruction(insn, 24, 1) == 0)
            return 172; // MCR2
          break;
        case 1:
          // Check Inst{24-24} for singleton decoding...
          if (fieldFromInstruction(insn, 24, 1) == 0)
            return 200; // MRC2
          break;
        }
        break;
      }
      break;
    }
    break;
  default:
    break; // fallthrough
  }
  // Check Inst{27-26} ...
  switch (fieldFromInstruction(insn, 26, 2)) {
  case 0:
    // Check Inst{25-24} ...
    switch (fieldFromInstruction(insn, 24, 2)) {
    case 0:
      // Check Inst{21} ...
      switch (fieldFromInstruction(insn, 21, 1)) {
      case 0:
        // Check Inst{23-22} ...
        switch (fieldFromInstruction(insn, 22, 2)) {
        case 0:
          // Check Inst{11-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 8) == 0)
            return 30; // ANDrr
          else
            // Check Inst{7-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 4) == 9)
              return 207; // MUL
            else
              return 31; // ANDrs
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{7-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 4) == 9)
              return 421; // UMAAL
            break;
          case 1:
            // Check Inst{11-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 8) == 0)
              return 373; // SUBSrr
            else
              return 374; // SUBSrs
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{11-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 8) == 0)
            return 376; // SUBrr
          else
            return 377; // SUBrs
          break;
          break;
        case 2:
          // Check Inst{11-4} ...
          switch (fieldFromInstruction(insn, 4, 8)) {
          case 0:
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 1)
              return 21; // ADDSrr
            else
              return 24; // ADDrr
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{7-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 4) == 9)
            return 425; // UMULL
          else
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 1)
              return 22; // ADDSrs
            else
              return 25; // ADDrs
          break;
          break;
        case 3:
          // Check Inst{11-4} ...
          switch (fieldFromInstruction(insn, 4, 8)) {
          case 0:
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 1)
              return 266; // SBCSSrr
            else
              return 269; // SBCrr
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{7-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 4) == 9)
            return 312; // SMULL
          else
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 1)
              return 267; // SBCSSrs
            else
              return 270; // SBCrs
          break;
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 11:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 365; // STRH_POST
          case 1:
            return 153; // LDRH_POST
          }
          break;
        case 13:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 145; // LDRD_POST
          case 1:
            return 157; // LDRSB_POST
          }
          break;
        case 15:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 357; // STRD_POST
          case 1:
            return 161; // LDRSH_POST
          }
          break;
        }
        break;
        break;
      case 1:
        // Check Inst{23-22} ...
        switch (fieldFromInstruction(insn, 22, 2)) {
        case 0:
          // Check Inst{11-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 8) == 0)
            return 104; // EORrr
          else
            // Check Inst{7-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 4) == 9)
              return 175; // MLA
            else
              return 105; // EORrs
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{7-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 4) == 9)
              return 177; // MLS
            break;
          case 1:
            // Check Inst{11-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 8) == 0)
              return 252; // RSBSrr
            else
              return 253; // RSBSrs
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{11-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 8) == 0)
            return 255; // RSBrr
          else
            return 256; // RSBrs
          break;
          break;
        case 2:
          // Check Inst{11-4} ...
          switch (fieldFromInstruction(insn, 4, 8)) {
          case 0:
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 1)
              return 15; // ADCSSrr
            else
              return 18; // ADCrr
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{7-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 4) == 9)
            return 423; // UMLAL
          else
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 1)
              return 16; // ADCSSrs
            else
              return 19; // ADCrs
          break;
          break;
        case 3:
          // Check Inst{11-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 8) == 0)
            return 260; // RSCrr
          else
            // Check Inst{7-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 4) == 9)
              return 286; // SMLAL
            else
              return 261; // RSCrs
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 11:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 364; // STRHT
          case 1:
            return 152; // LDRHT
          }
          break;
        case 13:
          // Check Inst{20-20} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 1)
            return 156; // LDRSBT
          break;
        case 15:
          // Check Inst{20-20} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 1)
            return 160; // LDRSHT
          break;
        }
        break;
        break;
      }
      break;
    case 1:
      // Check Inst{21} ...
      switch (fieldFromInstruction(insn, 21, 1)) {
      case 0:
        // Check Inst{23-22} ...
        switch (fieldFromInstruction(insn, 22, 2)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{7-4} ...
            switch (fieldFromInstruction(insn, 4, 4)) {
            case 0:
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction(insn, 16, 4) == 15)
                return 203; // MRS
              break;
            case 5:
              // Check Inst{11-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 4) == 0)
                return 234; // QADD
              break;
            case 8:
              return 282; // SMLABB
            case 9:
              // Check Inst{11-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 4) == 0)
                return 379; // SWP
              break;
            case 10:
              return 294; // SMLATB
            case 12:
              return 283; // SMLABT
            case 14:
              return 295; // SMLATT
            }
            break;
          case 1:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction(insn, 12, 4)) {
            case 0:
              // Check Inst{11-4} for singleton decoding...
              if (fieldFromInstruction(insn, 4, 8) == 0)
                return 409; // TSTrr
              else
                return 410; // TSTrs
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{7-4} ...
            switch (fieldFromInstruction(insn, 4, 4)) {
            case 0:
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction(insn, 16, 4) == 15)
                return 204; // MRSsys
              break;
            case 5:
              // Check Inst{11-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 4) == 0)
                return 238; // QDADD
              break;
            case 8:
              return 287; // SMLALBB
            case 9:
              // Check Inst{11-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 4) == 0)
                return 380; // SWPB
              break;
            case 10:
              return 291; // SMLALTB
            case 12:
              return 288; // SMLALBT
            case 14:
              return 292; // SMLALTT
            }
            break;
          case 1:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction(insn, 12, 4)) {
            case 0:
              // Check Inst{11-4} for singleton decoding...
              if (fieldFromInstruction(insn, 4, 8) == 0)
                return 93; // CMPrr
              else
                return 94; // CMPrs
              break;
            }
            break;
          }
          break;
        case 2:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{11-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 8) == 249)
              return 359; // STREX
            break;
          case 1:
            // Check Inst{11-0} for singleton decoding...
            if (fieldFromInstruction(insn, 0, 12) == 3999)
              return 147; // LDREX
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{11-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 8) == 0)
            return 215; // ORRrr
          else
            return 216; // ORRrs
          break;
          break;
        case 3:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{11-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 8) == 249)
              return 360; // STREXB
            break;
          case 1:
            // Check Inst{11-0} for singleton decoding...
            if (fieldFromInstruction(insn, 0, 12) == 3999)
              return 148; // LDREXB
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{11-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 8) == 0)
            return 63; // BICrr
          else
            return 64; // BICrs
          break;
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 11:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 363; // STRH
          case 1:
            return 151; // LDRH
          }
          break;
        case 13:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 144; // LDRD
          case 1:
            return 155; // LDRSB
          }
          break;
        case 15:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 356; // STRD
          case 1:
            return 159; // LDRSH
          }
          break;
        }
        break;
        break;
      case 1:
        // Check Inst{23-22} ...
        switch (fieldFromInstruction(insn, 22, 2)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{7-4} ...
            switch (fieldFromInstruction(insn, 4, 4)) {
            case 1:
              // Check Inst{19-8} && Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 12) == 4095 && fieldFromInstruction(insn, 0, 4) == 14)
                return 82; // BX_RET
              break;
            case 2:
              return 80; // BXJ
            case 3:
              // Check Inst{19-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 12) == 4095)
                return 70; // BLXr9_pred
              break;
            case 5:
              // Check Inst{11-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 4) == 0)
                return 241; // QSUB
              break;
            case 7:
              return 65; // BKPT
            case 8:
              return 296; // SMLAWB
            case 10:
              return 316; // SMULWB
            case 12:
              return 297; // SMLAWT
            case 14:
              return 317; // SMULWT
            }
            break;
          case 1:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction(insn, 12, 4)) {
            case 0:
              // Check Inst{11-4} for singleton decoding...
              if (fieldFromInstruction(insn, 4, 8) == 0)
                return 404; // TEQrr
              else
                return 405; // TEQrs
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{7-4} ...
            switch (fieldFromInstruction(insn, 4, 4)) {
            case 1:
              // Check Inst{19-16} && Inst{11-8} for singleton decoding...
              if (fieldFromInstruction(insn, 16, 4) == 15 && fieldFromInstruction(insn, 8, 4) == 15)
                return 88; // CLZ
              break;
            case 5:
              // Check Inst{11-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 4) == 0)
                return 239; // QDSUB
              break;
            case 7:
              // Check Inst{19-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 12) == 0)
                return 281; // SMC
              break;
            case 8:
              return 310; // SMULBB
            case 10:
              return 314; // SMULTB
            case 12:
              return 311; // SMULBT
            case 14:
              return 315; // SMULTT
            }
            break;
          case 1:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction(insn, 12, 4)) {
            case 0:
              // Check Inst{11-4} for singleton decoding...
              if (fieldFromInstruction(insn, 4, 8) == 0)
                return 90; // CMNzrr
              else
                return 91; // CMNzrs
              break;
            }
            break;
          }
          break;
        case 2:
          // Check Inst{20-0} for singleton decoding...
          if (fieldFromInstruction(insn, 0, 21) == 61454)
            return 183; // MOVPCLR
          else
            // Check Inst{20} ...
            switch (fieldFromInstruction(insn, 20, 1)) {
            case 0:
              // Check Inst{11-4} for singleton decoding...
              if (fieldFromInstruction(insn, 4, 8) == 249)
                return 361; // STREXD
              break;
            case 1:
              // Check Inst{11-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 12) == 3999)
                return 149; // LDREXD
              break;
            default:
              break; // fallthrough
            }
            // Check Inst{11-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 8) == 0)
              return 194; // MOVr
            else
              return 196; // MOVs
            break;
          break;
        case 3:
          // Check Inst{20-20} && Inst{11-0} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 1 && fieldFromInstruction(insn, 0, 12) == 3999)
            return 150; // LDREXH
          else
            // Check Inst{11-4} ...
            switch (fieldFromInstruction(insn, 4, 8)) {
            case 0:
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction(insn, 16, 4) == 0)
                return 211; // MVNr
              break;
            case 249:
              // Check Inst{20-20} for singleton decoding...
              if (fieldFromInstruction(insn, 20, 1) == 0)
                return 362; // STREXH
              break;
            default:
              break; // fallthrough
            }
            // Check Inst{19-16} for singleton decoding...
            if (fieldFromInstruction(insn, 16, 4) == 0)
              return 212; // MVNs
            break;
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          // Check Inst{23-23} && Inst{20-20} && Inst{15-8} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 0 && fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 8, 8) == 240)
            return 205; // MSR
          break;
        case 11:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 366; // STRH_PRE
          case 1:
            return 154; // LDRH_PRE
          }
          break;
        case 13:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 146; // LDRD_PRE
          case 1:
            return 158; // LDRSB_PRE
          }
          break;
        case 15:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 358; // STRD_PRE
          case 1:
            return 162; // LDRSH_PRE
          }
          break;
        }
        break;
        break;
      }
      break;
    case 2:
      // Check Inst{23-21} ...
      switch (fieldFromInstruction(insn, 21, 3)) {
      case 0:
        // Check Inst{20-16} for singleton decoding...
        if (fieldFromInstruction(insn, 16, 5) == 15)
          return 28; // ADR
        else
          return 29; // ANDri
        break;
      case 1:
        return 103; // EORri
      case 2:
        // Check Inst{20-20} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 1) == 1)
          return 372; // SUBSri
        else
          return 375; // SUBri
        break;
      case 3:
        // Check Inst{20-20} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 1) == 1)
          return 251; // RSBSri
        else
          return 254; // RSBri
        break;
      case 4:
        // Check Inst{20-20} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 1) == 1)
          return 20; // ADDSri
        else
          return 23; // ADDri
        break;
      case 5:
        // Check Inst{20-20} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 1) == 1)
          return 14; // ADCSSri
        else
          return 17; // ADCri
        break;
      case 6:
        // Check Inst{20-20} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 1) == 1)
          return 265; // SBCSSri
        else
          return 268; // SBCri
        break;
      case 7:
        return 259; // RSCri
      }
      break;
    case 3:
      // Check Inst{21} ...
      switch (fieldFromInstruction(insn, 21, 1)) {
      case 0:
        // Check Inst{23-22} ...
        switch (fieldFromInstruction(insn, 22, 2)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 191; // MOVi16
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 0)
              return 408; // TSTri
            break;
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 185; // MOVTi16
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 0)
              return 92; // CMPri
            break;
          }
          break;
        case 2:
          return 214; // ORRri
        case 3:
          return 62; // BICri
        }
        break;
      case 1:
        // Check Inst{23} ...
        switch (fieldFromInstruction(insn, 23, 1)) {
        case 0:
          // Check Inst{15-12} ...
          switch (fieldFromInstruction(insn, 12, 4)) {
          case 0:
            // Check Inst{22} ...
            switch (fieldFromInstruction(insn, 22, 1)) {
            case 0:
              // Check Inst{20-20} for singleton decoding...
              if (fieldFromInstruction(insn, 20, 1) == 1)
                return 403; // TEQri
              break;
            case 1:
              // Check Inst{20-20} for singleton decoding...
              if (fieldFromInstruction(insn, 20, 1) == 1)
                return 89; // CMNzri
              break;
            }
            break;
          case 15:
            // Check Inst{20} ...
            switch (fieldFromInstruction(insn, 20, 1)) {
            case 0:
              // Check Inst{11-0} ...
              switch (fieldFromInstruction(insn, 0, 12)) {
              case 0:
                // Check Inst{22-22} && Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 22, 1) == 0 && fieldFromInstruction(insn, 16, 4) == 0)
                  return 213; // NOP
                break;
              case 1:
                // Check Inst{22-22} && Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 22, 1) == 0 && fieldFromInstruction(insn, 16, 4) == 0)
                  return 1876; // YIELD
                break;
              case 2:
                // Check Inst{22-22} && Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 22, 1) == 0 && fieldFromInstruction(insn, 16, 4) == 0)
                  return 1874; // WFE
                break;
              case 3:
                // Check Inst{22-22} && Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 22, 1) == 0 && fieldFromInstruction(insn, 16, 4) == 0)
                  return 1875; // WFI
                break;
              case 4:
                // Check Inst{22-22} && Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 22, 1) == 0 && fieldFromInstruction(insn, 16, 4) == 0)
                  return 274; // SEV
                break;
              default:
                break; // fallthrough
              }
              // Check Inst{22-22} && Inst{19-16} && Inst{11-4} for singleton decoding...
              if (fieldFromInstruction(insn, 22, 1) == 0 && fieldFromInstruction(insn, 16, 4) == 0 && fieldFromInstruction(insn, 4, 8) == 15)
                return 99; // DBG
              else
                return 206; // MSRi
              break;
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{22} ...
          switch (fieldFromInstruction(insn, 22, 1)) {
          case 0:
            // Check Inst{19-16} for singleton decoding...
            if (fieldFromInstruction(insn, 16, 4) == 0)
              return 190; // MOVi
            break;
          case 1:
            // Check Inst{19-16} ...
            switch (fieldFromInstruction(insn, 16, 4)) {
            case 0:
              // Check Inst{20-20} for singleton decoding...
              if (fieldFromInstruction(insn, 20, 1) == 0)
                return 209; // MVNCCi
              else
                return 210; // MVNi
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 1:
    // Check Inst{22-21} ...
    switch (fieldFromInstruction(insn, 21, 2)) {
    case 0:
      // Check Inst{20} ...
      switch (fieldFromInstruction(insn, 20, 1)) {
      case 0:
        // Check Inst{24} ...
        switch (fieldFromInstruction(insn, 24, 1)) {
        case 0:
          // Check Inst{11-4} ...
          switch (fieldFromInstruction(insn, 4, 8)) {
          case 7:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 1:
              // Check Inst{25} ...
              switch (fieldFromInstruction(insn, 25, 1)) {
              case 1:
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 387; // SXTB16r
                else
                  return 381; // SXTAB16rr
                break;
              }
              break;
            }
            break;
          case 251:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1)
              return 272; // SEL
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{9-4} ...
          switch (fieldFromInstruction(insn, 4, 6)) {
          case 7:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 1:
              // Check Inst{25} ...
              switch (fieldFromInstruction(insn, 25, 1)) {
              case 1:
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 388; // SXTB16r_rot
                else
                  return 382; // SXTAB16rr_rot
                break;
              }
              break;
            }
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{6-4} ...
          switch (fieldFromInstruction(insn, 4, 3)) {
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1)
              return 226; // PKHBT
            break;
          case 5:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1)
              return 227; // PKHTB
            break;
          default:
            break; // fallthrough
          }
          return 368; // STR_POST
          break;
          break;
          break;
        case 1:
          // Check Inst{25} ...
          switch (fieldFromInstruction(insn, 25, 1)) {
          case 0:
            return 370; // STRi12
          case 1:
            // Check Inst{7-4} ...
            switch (fieldFromInstruction(insn, 4, 4)) {
            case 1:
              // Check Inst{23} ...
              switch (fieldFromInstruction(insn, 23, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 308; // SMUAD
                else
                  return 284; // SMLAD
                break;
              case 1:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 433; // USAD8
                else
                  return 434; // USADA8
                break;
              }
              break;
            case 3:
              // Check Inst{23} ...
              switch (fieldFromInstruction(insn, 23, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 309; // SMUADX
                else
                  return 285; // SMLADX
                break;
              }
              break;
            case 5:
              // Check Inst{23} ...
              switch (fieldFromInstruction(insn, 23, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 318; // SMUSD
                else
                  return 298; // SMLSD
                break;
              }
              break;
            case 7:
              // Check Inst{23} ...
              switch (fieldFromInstruction(insn, 23, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 319; // SMUSDX
                else
                  return 299; // SMLSDX
                break;
              }
              break;
            default:
              break; // fallthrough
            }
            return 371; // STRrs
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{24} ...
        switch (fieldFromInstruction(insn, 24, 1)) {
        case 0:
          // Check Inst{11-4} ...
          switch (fieldFromInstruction(insn, 4, 8)) {
          case 241:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 262; // SADD16
            break;
          case 243:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 264; // SASX
            break;
          case 245:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 324; // SSAX
            break;
          case 247:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 325; // SSUB16
            break;
          case 249:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 263; // SADD8
            break;
          case 255:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 326; // SSUB8
            break;
          default:
            break; // fallthrough
          }
          return 164; // LDR_POST
          break;
        case 1:
          // Check Inst{25} ...
          switch (fieldFromInstruction(insn, 25, 1)) {
          case 0:
            // Check Inst{19-16} for singleton decoding...
            if (fieldFromInstruction(insn, 16, 4) == 15)
              return 166; // LDRcp
            else
              return 167; // LDRi12
            break;
          case 1:
            return 168; // LDRrs
          }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{24} ...
      switch (fieldFromInstruction(insn, 24, 1)) {
      case 0:
        // Check Inst{11-4} ...
        switch (fieldFromInstruction(insn, 4, 8)) {
        case 7:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 1:
              // Check Inst{25} ...
              switch (fieldFromInstruction(insn, 25, 1)) {
              case 1:
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 389; // SXTBr
                else
                  return 383; // SXTABrr
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 1:
              // Check Inst{25} ...
              switch (fieldFromInstruction(insn, 25, 1)) {
              case 1:
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 391; // SXTHr
                else
                  return 385; // SXTAHrr
                break;
              }
              break;
            }
            break;
          }
          break;
        case 241:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 235; // QADD16
            break;
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 275; // SHADD16
            break;
          }
          break;
        case 243:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{25-25} for singleton decoding...
              if (fieldFromInstruction(insn, 25, 1) == 1)
                return 237; // QASX
              break;
            case 1:
              // Check Inst{25-25} for singleton decoding...
              if (fieldFromInstruction(insn, 25, 1) == 1)
                return 323; // SSAT16
              break;
            }
            break;
          case 1:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{25-25} for singleton decoding...
              if (fieldFromInstruction(insn, 25, 1) == 1)
                return 277; // SHASX
              break;
            case 1:
              // Check Inst{25-25} && Inst{19-16} for singleton decoding...
              if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 16, 4) == 15)
                return 245; // REV
              break;
            }
            break;
          }
          break;
        case 245:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 240; // QSAX
            break;
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 278; // SHSAX
            break;
          }
          break;
        case 247:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 242; // QSUB16
            break;
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 279; // SHSUB16
            break;
          }
          break;
        case 249:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 236; // QADD8
            break;
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 276; // SHADD8
            break;
          }
          break;
        case 251:
          // Check Inst{25-25} && Inst{23-23} && Inst{20-16} for singleton decoding...
          if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 16, 5) == 31)
            return 246; // REV16
          break;
        case 255:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 243; // QSUB8
            break;
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 280; // SHSUB8
            break;
          }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{20-16} ...
        switch (fieldFromInstruction(insn, 16, 5)) {
        case 15:
          // Check Inst{25-25} && Inst{23-23} && Inst{9-4} for singleton decoding...
          if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 4, 6) == 7)
            return 390; // SXTBr_rot
          break;
        case 31:
          // Check Inst{25-25} && Inst{23-23} && Inst{9-4} for singleton decoding...
          if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 4, 6) == 7)
            return 392; // SXTHr_rot
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          // Check Inst{25-25} && Inst{23-23} && Inst{9-4} for singleton decoding...
          if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 4, 6) == 7)
            return 384; // SXTABrr_rot
          else
            return 367; // STRT
          break;
        case 1:
          // Check Inst{25-25} && Inst{23-23} && Inst{9-4} for singleton decoding...
          if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 4, 6) == 7)
            return 386; // SXTAHrr_rot
          else
            return 163; // LDRT
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{25-25} && Inst{23-23} && Inst{5-4} for singleton decoding...
        if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 4, 2) == 1)
          return 322; // SSAT
        break;
        break;
        break;
        break;
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          return 369; // STR_PRE
        case 1:
          return 165; // LDR_PRE
        default:
          break; // fallthrough
        }
        // Check Inst{25-25} && Inst{23-23} && Inst{6-4} for singleton decoding...
        if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 4, 3) == 5)
          return 271; // SBFX
        break;
        break;
      }
      break;
    case 2:
      // Check Inst{24} ...
      switch (fieldFromInstruction(insn, 24, 1)) {
      case 0:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          // Check Inst{11-4} ...
          switch (fieldFromInstruction(insn, 4, 8)) {
          case 7:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 1:
              // Check Inst{25} ...
              switch (fieldFromInstruction(insn, 25, 1)) {
              case 1:
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 446; // UXTB16r
                else
                  return 440; // UXTAB16rr
                break;
              }
              break;
            }
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{9-4} ...
          switch (fieldFromInstruction(insn, 4, 6)) {
          case 7:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 1:
              // Check Inst{25} ...
              switch (fieldFromInstruction(insn, 25, 1)) {
              case 1:
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 447; // UXTB16r_rot
                else
                  return 441; // UXTAB16rr_rot
                break;
              }
              break;
            }
            break;
          default:
            break; // fallthrough
          }
          return 352; // STRB_POST
          break;
          break;
        case 1:
          // Check Inst{11-4} ...
          switch (fieldFromInstruction(insn, 4, 8)) {
          case 241:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 411; // UADD16
            break;
          case 243:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 413; // UASX
            break;
          case 245:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 437; // USAX
            break;
          case 247:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 438; // USUB16
            break;
          case 249:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 412; // UADD8
            break;
          case 255:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 439; // USUB8
            break;
          default:
            break; // fallthrough
          }
          return 140; // LDRB_POST
          break;
        }
        break;
      case 1:
        // Check Inst{25} ...
        switch (fieldFromInstruction(insn, 25, 1)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 354; // STRBi12
          case 1:
            return 142; // LDRBi12
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{7-4} ...
            switch (fieldFromInstruction(insn, 4, 4)) {
            case 1:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0)
                return 289; // SMLALD
              break;
            case 3:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0)
                return 290; // SMLALDX
              break;
            case 5:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0)
                return 300; // SMLSLD
              break;
            case 7:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0)
                return 301; // SMLSLDX
              break;
            default:
              break; // fallthrough
            }
            return 355; // STRBrs
            break;
          case 1:
            // Check Inst{7-4} ...
            switch (fieldFromInstruction(insn, 4, 4)) {
            case 1:
              // Check Inst{23} ...
              switch (fieldFromInstruction(insn, 23, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 306; // SMMUL
                else
                  return 302; // SMMLA
                break;
              }
              break;
            case 3:
              // Check Inst{23} ...
              switch (fieldFromInstruction(insn, 23, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 307; // SMMULR
                else
                  return 303; // SMMLAR
                break;
              }
              break;
            case 13:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0)
                return 304; // SMMLS
              break;
            case 15:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0)
                return 305; // SMMLSR
              break;
            default:
              break; // fallthrough
            }
            return 143; // LDRBrs
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{6-4} ...
          switch (fieldFromInstruction(insn, 4, 3)) {
          case 1:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 59; // BFC
              else
                return 60; // BFI
              break;
            }
            break;
          }
          break;
          break;
        }
        break;
      }
      break;
    case 3:
      // Check Inst{24} ...
      switch (fieldFromInstruction(insn, 24, 1)) {
      case 0:
        // Check Inst{11-4} ...
        switch (fieldFromInstruction(insn, 4, 8)) {
        case 7:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 1:
              // Check Inst{25} ...
              switch (fieldFromInstruction(insn, 25, 1)) {
              case 1:
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 448; // UXTBr
                else
                  return 442; // UXTABrr
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 1:
              // Check Inst{25} ...
              switch (fieldFromInstruction(insn, 25, 1)) {
              case 1:
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 450; // UXTHr
                else
                  return 444; // UXTAHrr
                break;
              }
              break;
            }
            break;
          }
          break;
        case 241:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 427; // UQADD16
            break;
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 415; // UHADD16
            break;
          }
          break;
        case 243:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{25-25} for singleton decoding...
              if (fieldFromInstruction(insn, 25, 1) == 1)
                return 429; // UQASX
              break;
            case 1:
              // Check Inst{25-25} for singleton decoding...
              if (fieldFromInstruction(insn, 25, 1) == 1)
                return 436; // USAT16
              break;
            }
            break;
          case 1:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{25-25} for singleton decoding...
              if (fieldFromInstruction(insn, 25, 1) == 1)
                return 417; // UHASX
              break;
            case 1:
              // Check Inst{25-25} && Inst{19-16} for singleton decoding...
              if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 16, 4) == 15)
                return 244; // RBIT
              break;
            }
            break;
          }
          break;
        case 245:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 430; // UQSAX
            break;
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 418; // UHSAX
            break;
          }
          break;
        case 247:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 431; // UQSUB16
            break;
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 419; // UHSUB16
            break;
          }
          break;
        case 249:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 428; // UQADD8
            break;
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 416; // UHADD8
            break;
          }
          break;
        case 251:
          // Check Inst{25-25} && Inst{23-23} && Inst{20-16} for singleton decoding...
          if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 16, 5) == 31)
            return 247; // REVSH
          break;
        case 255:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 432; // UQSUB8
            break;
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 420; // UHSUB8
            break;
          }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{20-16} ...
        switch (fieldFromInstruction(insn, 16, 5)) {
        case 15:
          // Check Inst{25-25} && Inst{23-23} && Inst{9-4} for singleton decoding...
          if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 4, 6) == 7)
            return 449; // UXTBr_rot
          break;
        case 31:
          // Check Inst{25-25} && Inst{23-23} && Inst{9-4} for singleton decoding...
          if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 4, 6) == 7)
            return 451; // UXTHr_rot
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          // Check Inst{25-25} && Inst{23-23} && Inst{9-4} for singleton decoding...
          if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 4, 6) == 7)
            return 443; // UXTABrr_rot
          else
            return 351; // STRBT
          break;
        case 1:
          // Check Inst{25-25} && Inst{23-23} && Inst{9-4} for singleton decoding...
          if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 4, 6) == 7)
            return 445; // UXTAHrr_rot
          else
            return 139; // LDRBT
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{25-25} && Inst{23-23} && Inst{5-4} for singleton decoding...
        if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 4, 2) == 1)
          return 435; // USAT
        break;
        break;
        break;
        break;
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          return 353; // STRB_PRE
        case 1:
          return 141; // LDRB_PRE
        default:
          break; // fallthrough
        }
        // Check Inst{25-25} && Inst{23-23} && Inst{6-4} for singleton decoding...
        if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 4, 3) == 5)
          return 414; // UBFX
        break;
        break;
      }
      break;
    }
    break;
  case 2:
    // Check Inst{25-24} ...
    switch (fieldFromInstruction(insn, 24, 2)) {
    case 0:
      // Check Inst{23-20} ...
      switch (fieldFromInstruction(insn, 20, 4)) {
      case 0:
        return 343; // STMDA
      case 1:
        return 130; // LDMDA
      case 2:
        return 344; // STMDA_UPD
      case 3:
        return 131; // LDMDA_UPD
      case 8:
        return 347; // STMIA
      case 9:
        return 134; // LDMIA
      case 10:
        return 348; // STMIA_UPD
      case 11:
        return 136; // LDMIA_UPD
      }
      break;
    case 1:
      // Check Inst{23-20} ...
      switch (fieldFromInstruction(insn, 20, 4)) {
      case 0:
        return 345; // STMDB
      case 1:
        return 132; // LDMDB
      case 2:
        return 346; // STMDB_UPD
      case 3:
        return 133; // LDMDB_UPD
      case 8:
        return 349; // STMIB
      case 9:
        return 137; // LDMIB
      case 10:
        return 350; // STMIB_UPD
      case 11:
        return 138; // LDMIB_UPD
      }
      break;
    case 2:
      return 84; // Bcc
    case 3:
      return 73; // BLr9_pred
    }
    break;
  case 3:
    // Check Inst{25-24} ...
    switch (fieldFromInstruction(insn, 24, 2)) {
    case 0:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction(insn, 20, 2)) {
      case 0:
        // Check Inst{23} ...
        switch (fieldFromInstruction(insn, 23, 1)) {
        case 0:
          // Check Inst{22} ...
          switch (fieldFromInstruction(insn, 22, 1)) {
          case 1:
            // Check Inst{11-6} ...
            switch (fieldFromInstruction(insn, 6, 6)) {
            case 40:
              // Check Inst{4-4} for singleton decoding...
              if (fieldFromInstruction(insn, 4, 1) == 1)
                return 1111; // VMOVSRR
              break;
            case 44:
              // Check Inst{4-4} for singleton decoding...
              if (fieldFromInstruction(insn, 4, 1) == 1)
                return 1091; // VMOVDRR
              break;
            default:
              break; // fallthrough
            }
            return 173; // MCRR
            break;
          }
          break;
        case 1:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction(insn, 8, 4)) {
          case 10:
            return 1781; // VSTMSIA
          case 11:
            return 1775; // VSTMDIA
          default:
            break; // fallthrough
          }
          // Check Inst{22} ...
          switch (fieldFromInstruction(insn, 22, 1)) {
          case 0:
            if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
            return 340; // STC_OPTION
          case 1:
            if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
            return 336; // STCL_OPTION
          }
          break;
          break;
        }
        break;
      case 1:
        // Check Inst{23} ...
        switch (fieldFromInstruction(insn, 23, 1)) {
        case 0:
          // Check Inst{22} ...
          switch (fieldFromInstruction(insn, 22, 1)) {
          case 1:
            // Check Inst{11-6} ...
            switch (fieldFromInstruction(insn, 6, 6)) {
            case 40:
              // Check Inst{4-4} for singleton decoding...
              if (fieldFromInstruction(insn, 4, 1) == 1)
                return 1107; // VMOVRRS
              break;
            case 44:
              // Check Inst{4-4} for singleton decoding...
              if (fieldFromInstruction(insn, 4, 1) == 1)
                return 1106; // VMOVRRD
              break;
            default:
              break; // fallthrough
            }
            return 201; // MRRC
            break;
          }
          break;
        case 1:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction(insn, 8, 4)) {
          case 10:
            return 1006; // VLDMSIA
          case 11:
            return 1000; // VLDMDIA
          default:
            break; // fallthrough
          }
          // Check Inst{22} ...
          switch (fieldFromInstruction(insn, 22, 1)) {
          case 0:
            if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
            return 127; // LDC_OPTION
          case 1:
            if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
            return 123; // LDCL_OPTION
          }
          break;
          break;
        }
        break;
      case 2:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction(insn, 8, 4)) {
        case 10:
          // Check Inst{23-23} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 1)
            return 1782; // VSTMSIA_UPD
          break;
        case 11:
          // Check Inst{23-23} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 1)
            return 1776; // VSTMDIA_UPD
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{22} ...
        switch (fieldFromInstruction(insn, 22, 1)) {
        case 0:
          if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
          return 341; // STC_POST
        case 1:
          if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
          return 337; // STCL_POST
        }
        break;
        break;
      case 3:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction(insn, 8, 4)) {
        case 10:
          // Check Inst{23-23} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 1)
            return 1007; // VLDMSIA_UPD
          break;
        case 11:
          // Check Inst{23-23} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 1)
            return 1001; // VLDMDIA_UPD
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{22} ...
        switch (fieldFromInstruction(insn, 22, 1)) {
        case 0:
          if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
          return 128; // LDC_POST
        case 1:
          if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
          return 124; // LDCL_POST
        }
        break;
        break;
      }
      break;
    case 1:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction(insn, 20, 2)) {
      case 0:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction(insn, 8, 4)) {
        case 10:
          // Check Inst{23-23} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 0)
            return 1779; // VSTMSDB
          else
            return 1784; // VSTRS
          break;
        case 11:
          // Check Inst{23-23} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 0)
            return 1773; // VSTMDDB
          else
            return 1783; // VSTRD
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{22} ...
        switch (fieldFromInstruction(insn, 22, 1)) {
        case 0:
          if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
          return 339; // STC_OFFSET
        case 1:
          if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
          return 335; // STCL_OFFSET
        }
        break;
        break;
      case 1:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction(insn, 8, 4)) {
        case 10:
          // Check Inst{23-23} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 0)
            return 1004; // VLDMSDB
          else
            return 1009; // VLDRS
          break;
        case 11:
          // Check Inst{23-23} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 0)
            return 998; // VLDMDDB
          else
            return 1008; // VLDRD
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{22} ...
        switch (fieldFromInstruction(insn, 22, 1)) {
        case 0:
          if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
          return 126; // LDC_OFFSET
        case 1:
          if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
          return 122; // LDCL_OFFSET
        }
        break;
        break;
      case 2:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction(insn, 8, 4)) {
        case 10:
          // Check Inst{23-23} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 0)
            return 1780; // VSTMSDB_UPD
          break;
        case 11:
          // Check Inst{23-23} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 0)
            return 1774; // VSTMDDB_UPD
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{22} ...
        switch (fieldFromInstruction(insn, 22, 1)) {
        case 0:
          if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
          return 342; // STC_PRE
        case 1:
          if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
          return 338; // STCL_PRE
        }
        break;
        break;
      case 3:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction(insn, 8, 4)) {
        case 10:
          // Check Inst{23-23} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 0)
            return 1005; // VLDMSDB_UPD
          break;
        case 11:
          // Check Inst{23-23} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 0)
            return 999; // VLDMDDB_UPD
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{22} ...
        switch (fieldFromInstruction(insn, 22, 1)) {
        case 0:
          if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
          return 129; // LDC_PRE
        case 1:
          if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
          return 125; // LDCL_PRE
        }
        break;
        break;
      }
      break;
    case 2:
      // Check Inst{4} ...
      switch (fieldFromInstruction(insn, 4, 1)) {
      case 0:
        // Check Inst{21-16} ...
        switch (fieldFromInstruction(insn, 16, 6)) {
        case 48:
          // Check Inst{11-6} ...
          switch (fieldFromInstruction(insn, 6, 6)) {
          case 41:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1109; // VMOVS
            break;
          case 43:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 491; // VABSS
            break;
          case 45:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1090; // VMOVD
            break;
          case 47:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 490; // VABSD
            break;
          }
          break;
        case 49:
          // Check Inst{11-6} ...
          switch (fieldFromInstruction(insn, 6, 6)) {
          case 41:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1163; // VNEGS
            break;
          case 43:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1548; // VSQRTS
            break;
          case 45:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1162; // VNEGD
            break;
          case 47:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1547; // VSQRTD
            break;
          }
          break;
        case 50:
          // Check Inst{11-6} ...
          switch (fieldFromInstruction(insn, 6, 6)) {
          case 41:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 644; // VCVTBSH
            break;
          case 43:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 648; // VCVTTSH
            break;
          }
          break;
        case 51:
          // Check Inst{11-6} ...
          switch (fieldFromInstruction(insn, 6, 6)) {
          case 41:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 643; // VCVTBHS
            break;
          case 43:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 647; // VCVTTHS
            break;
          }
          break;
        case 52:
          // Check Inst{11-6} ...
          switch (fieldFromInstruction(insn, 6, 6)) {
          case 41:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 638; // VCMPS
            break;
          case 43:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 635; // VCMPES
            break;
          case 45:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 633; // VCMPD
            break;
          case 47:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 634; // VCMPED
            break;
          }
          break;
        case 53:
          // Check Inst{11-5} ...
          switch (fieldFromInstruction(insn, 5, 7)) {
          case 82:
            // Check Inst{23-23} && Inst{3-0} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 0, 4) == 0)
              return 640; // VCMPZS
            break;
          case 86:
            // Check Inst{23-23} && Inst{3-0} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 0, 4) == 0)
              return 637; // VCMPEZS
            break;
          case 90:
            // Check Inst{23-23} && Inst{3-0} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 0, 4) == 0)
              return 639; // VCMPZD
            break;
          case 94:
            // Check Inst{23-23} && Inst{3-0} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 0, 4) == 0)
              return 636; // VCMPEZD
            break;
          }
          break;
        case 55:
          // Check Inst{11-6} ...
          switch (fieldFromInstruction(insn, 6, 6)) {
          case 43:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 645; // VCVTDS
            break;
          case 47:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 646; // VCVTSD
            break;
          }
          break;
        case 56:
          // Check Inst{11-6} ...
          switch (fieldFromInstruction(insn, 6, 6)) {
          case 41:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1859; // VUITOS
            break;
          case 43:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1536; // VSITOS
            break;
          case 45:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1858; // VUITOD
            break;
          case 47:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1535; // VSITOD
            break;
          }
          break;
        case 58:
          // Check Inst{11-6} ...
          switch (fieldFromInstruction(insn, 6, 6)) {
          case 41:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1534; // VSHTOS
            break;
          case 43:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1546; // VSLTOS
            break;
          case 45:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1533; // VSHTOD
            break;
          case 47:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1545; // VSLTOD
            break;
          }
          break;
        case 59:
          // Check Inst{11-6} ...
          switch (fieldFromInstruction(insn, 6, 6)) {
          case 41:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1857; // VUHTOS
            break;
          case 43:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1861; // VULTOS
            break;
          case 45:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1856; // VUHTOD
            break;
          case 47:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1860; // VULTOD
            break;
          }
          break;
        case 60:
          // Check Inst{11-6} ...
          switch (fieldFromInstruction(insn, 6, 6)) {
          case 41:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1839; // VTOUIRS
            break;
          case 43:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1841; // VTOUIZS
            break;
          case 45:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1838; // VTOUIRD
            break;
          case 47:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1840; // VTOUIZD
            break;
          }
          break;
        case 61:
          // Check Inst{11-6} ...
          switch (fieldFromInstruction(insn, 6, 6)) {
          case 41:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1831; // VTOSIRS
            break;
          case 43:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1833; // VTOSIZS
            break;
          case 45:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1830; // VTOSIRD
            break;
          case 47:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1832; // VTOSIZD
            break;
          }
          break;
        case 62:
          // Check Inst{11-6} ...
          switch (fieldFromInstruction(insn, 6, 6)) {
          case 41:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1829; // VTOSHS
            break;
          case 43:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1835; // VTOSLS
            break;
          case 45:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1828; // VTOSHD
            break;
          case 47:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1834; // VTOSLD
            break;
          }
          break;
        case 63:
          // Check Inst{11-6} ...
          switch (fieldFromInstruction(insn, 6, 6)) {
          case 41:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1837; // VTOUHS
            break;
          case 43:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1843; // VTOULS
            break;
          case 45:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1836; // VTOUHD
            break;
          case 47:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1842; // VTOULD
            break;
          }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{21-20} ...
        switch (fieldFromInstruction(insn, 20, 2)) {
        case 0:
          // Check Inst{6} ...
          switch (fieldFromInstruction(insn, 6, 1)) {
          case 0:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction(insn, 8, 4)) {
            case 10:
              // Check Inst{23} ...
              switch (fieldFromInstruction(insn, 23, 1)) {
              case 0:
                return 1049; // VMLAS
              case 1:
                return 668; // VDIVS
              }
              break;
            case 11:
              // Check Inst{23} ...
              switch (fieldFromInstruction(insn, 23, 1)) {
              case 0:
                return 1038; // VMLAD
              case 1:
                return 667; // VDIVD
              }
              break;
            }
            break;
          case 1:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction(insn, 8, 4)) {
            case 10:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0)
                return 1075; // VMLSS
              break;
            case 11:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0)
                return 1064; // VMLSD
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{6} ...
          switch (fieldFromInstruction(insn, 6, 1)) {
          case 0:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction(insn, 8, 4)) {
            case 10:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0)
                return 1175; // VNMLSS
              break;
            case 11:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0)
                return 1174; // VNMLSD
              break;
            }
            break;
          case 1:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction(insn, 8, 4)) {
            case 10:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0)
                return 1173; // VNMLAS
              break;
            case 11:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0)
                return 1172; // VNMLAD
              break;
            }
            break;
          }
          break;
        case 2:
          // Check Inst{6} ...
          switch (fieldFromInstruction(insn, 6, 1)) {
          case 0:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction(insn, 8, 4)) {
            case 10:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0)
                return 1139; // VMULS
              break;
            case 11:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0)
                return 1127; // VMULD
              break;
            }
            break;
          case 1:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction(insn, 8, 4)) {
            case 10:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0)
                return 1177; // VNMULS
              break;
            case 11:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0)
                return 1176; // VNMULD
              break;
            }
            break;
          }
          break;
        case 3:
          // Check Inst{6} ...
          switch (fieldFromInstruction(insn, 6, 1)) {
          case 0:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction(insn, 8, 4)) {
            case 10:
              // Check Inst{23} ...
              switch (fieldFromInstruction(insn, 23, 1)) {
              case 0:
                return 514; // VADDS
              case 1:
                // Check Inst{7-7} && Inst{5-5} for singleton decoding...
                if (fieldFromInstruction(insn, 7, 1) == 0 && fieldFromInstruction(insn, 5, 1) == 0)
                  return 107; // FCONSTS
                break;
              }
              break;
            case 11:
              // Check Inst{23} ...
              switch (fieldFromInstruction(insn, 23, 1)) {
              case 0:
                return 504; // VADDD
              case 1:
                // Check Inst{7-7} && Inst{5-5} for singleton decoding...
                if (fieldFromInstruction(insn, 7, 1) == 0 && fieldFromInstruction(insn, 5, 1) == 0)
                  return 106; // FCONSTD
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction(insn, 8, 4)) {
            case 10:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0)
                return 1795; // VSUBS
              break;
            case 11:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0)
                return 1785; // VSUBD
              break;
            }
            break;
          }
          break;
        default:
          break; // fallthrough
        }
        return 85; // CDP
        break;
        break;
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          // Check Inst{23-21} ...
          switch (fieldFromInstruction(insn, 21, 3)) {
          case 0:
            // Check Inst{11-8} && Inst{6-5} && Inst{3-0} for singleton decoding...
            if (fieldFromInstruction(insn, 8, 4) == 10 && fieldFromInstruction(insn, 5, 2) == 0 && fieldFromInstruction(insn, 0, 4) == 0)
              return 1110; // VMOVSR
            break;
          case 4:
            // Check Inst{6-5} ...
            switch (fieldFromInstruction(insn, 5, 2)) {
            case 0:
              // Check Inst{11-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 4) == 11)
                return 671; // VDUP32d
              break;
            case 1:
              // Check Inst{11-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 4) == 11)
                return 669; // VDUP16d
              break;
            }
            break;
          case 5:
            // Check Inst{6-5} ...
            switch (fieldFromInstruction(insn, 5, 2)) {
            case 0:
              // Check Inst{11-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 4) == 11)
                return 672; // VDUP32q
              break;
            case 1:
              // Check Inst{11-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 4) == 11)
                return 670; // VDUP16q
              break;
            }
            break;
          case 6:
            // Check Inst{11-8} && Inst{6-5} for singleton decoding...
            if (fieldFromInstruction(insn, 8, 4) == 11 && fieldFromInstruction(insn, 5, 2) == 0)
              return 673; // VDUP8d
            break;
          case 7:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction(insn, 8, 4)) {
            case 10:
              // Check Inst{19-16} ...
              switch (fieldFromInstruction(insn, 16, 4)) {
              case 0:
                // Check Inst{7-7} for singleton decoding...
                if (fieldFromInstruction(insn, 7, 1) == 0)
                  return 1126; // VMSR_FPSID
                break;
              case 1:
                // Check Inst{7-7} for singleton decoding...
                if (fieldFromInstruction(insn, 7, 1) == 0)
                  return 1124; // VMSR
                break;
              case 8:
                // Check Inst{7-7} for singleton decoding...
                if (fieldFromInstruction(insn, 7, 1) == 0)
                  return 1125; // VMSR_FPEXC
                break;
              }
              break;
            case 11:
              // Check Inst{6-5} for singleton decoding...
              if (fieldFromInstruction(insn, 5, 2) == 0)
                return 674; // VDUP8q
              break;
            }
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{23-22} ...
          switch (fieldFromInstruction(insn, 22, 2)) {
          case 0:
            // Check Inst{5} ...
            switch (fieldFromInstruction(insn, 5, 1)) {
            case 0:
              // Check Inst{11-8} && Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 4) == 11 && fieldFromInstruction(insn, 6, 1) == 0)
                return 1479; // VSETLNi32
              break;
            case 1:
              // Check Inst{11-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 4) == 11)
                return 1478; // VSETLNi16
              break;
            }
            break;
          case 1:
            // Check Inst{11-8} for singleton decoding...
            if (fieldFromInstruction(insn, 8, 4) == 11)
              return 1480; // VSETLNi8
            break;
          default:
            break; // fallthrough
          }
          return 171; // MCR
          break;
          break;
        case 1:
          // Check Inst{23-21} ...
          switch (fieldFromInstruction(insn, 21, 3)) {
          case 0:
            // Check Inst{11-8} && Inst{6-5} && Inst{3-0} for singleton decoding...
            if (fieldFromInstruction(insn, 8, 4) == 10 && fieldFromInstruction(insn, 5, 2) == 0 && fieldFromInstruction(insn, 0, 4) == 0)
              return 1108; // VMOVRS
            break;
          case 7:
            // Check Inst{19-16} ...
            switch (fieldFromInstruction(insn, 16, 4)) {
            case 0:
              // Check Inst{11-5} && Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 5, 7) == 80 && fieldFromInstruction(insn, 0, 4) == 0)
                return 1123; // VMRS_FPSID
              break;
            case 1:
              // Check Inst{3-0} ...
              switch (fieldFromInstruction(insn, 0, 4)) {
              case 0:
                // Check Inst{11-5} ...
                switch (fieldFromInstruction(insn, 5, 7)) {
                case 80:
                  // Check Inst{15-12} for singleton decoding...
                  if (fieldFromInstruction(insn, 12, 4) == 15)
                    return 108; // FMSTAT
                  else
                    return 1121; // VMRS
                  break;
                }
                break;
              }
              break;
            case 8:
              // Check Inst{11-5} && Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 5, 7) == 80 && fieldFromInstruction(insn, 0, 4) == 0)
                return 1122; // VMRS_FPEXC
              break;
            }
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{23-22} ...
          switch (fieldFromInstruction(insn, 22, 2)) {
          case 0:
            // Check Inst{5} ...
            switch (fieldFromInstruction(insn, 5, 1)) {
            case 0:
              // Check Inst{11-8} && Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 4) == 11 && fieldFromInstruction(insn, 6, 1) == 0)
                return 697; // VGETLNi32
              break;
            case 1:
              // Check Inst{11-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 4) == 11)
                return 698; // VGETLNs16
              break;
            }
            break;
          case 1:
            // Check Inst{11-8} for singleton decoding...
            if (fieldFromInstruction(insn, 8, 4) == 11)
              return 699; // VGETLNs8
            break;
          case 2:
            // Check Inst{11-8} && Inst{5-5} for singleton decoding...
            if (fieldFromInstruction(insn, 8, 4) == 11 && fieldFromInstruction(insn, 5, 1) == 1)
              return 700; // VGETLNu16
            break;
          case 3:
            // Check Inst{11-8} for singleton decoding...
            if (fieldFromInstruction(insn, 8, 4) == 11)
              return 701; // VGETLNu8
            break;
          default:
            break; // fallthrough
          }
          return 199; // MRC
          break;
          break;
        }
        break;
      }
      break;
    case 3:
      return 378; // SVC
    }
    break;
  }

  return 0;
}

static uint16_t decodeThumbInstruction(field_t insn) {
  // Check Inst{31-27} ...
  switch (fieldFromInstruction(insn, 27, 5)) {
  case 0:
    // Check Inst{26-12} ...
    switch (fieldFromInstruction(insn, 12, 15)) {
    case 0:
      // Check Inst{11} ...
      switch (fieldFromInstruction(insn, 11, 1)) {
      case 0:
        // Check Inst{10-6} for singleton decoding...
        if (fieldFromInstruction(insn, 6, 5) == 0)
          return 2299; // tMOVSr
        else
          return 2290; // tLSLri
        break;
      case 1:
        return 2292; // tLSRri
      }
      break;
    case 1:
      // Check Inst{11} ...
      switch (fieldFromInstruction(insn, 11, 1)) {
      case 0:
        return 2245; // tASRri
      case 1:
        // Check Inst{10-9} ...
        switch (fieldFromInstruction(insn, 9, 2)) {
        case 0:
          return 2238; // tADDrr
        case 1:
          return 2336; // tSUBrr
        case 2:
          return 2233; // tADDi3
        case 3:
          return 2334; // tSUBi3
        }
        break;
      }
      break;
    case 2:
      // Check Inst{11} ...
      switch (fieldFromInstruction(insn, 11, 1)) {
      case 0:
        return 2302; // tMOVi8
      case 1:
        return 2269; // tCMPi8
      }
      break;
    case 3:
      // Check Inst{11} ...
      switch (fieldFromInstruction(insn, 11, 1)) {
      case 0:
        return 2234; // tADDi8
      case 1:
        return 2335; // tSUBi8
      }
      break;
    case 4:
      // Check Inst{11} ...
      switch (fieldFromInstruction(insn, 11, 1)) {
      case 0:
        // Check Inst{10-8} ...
        switch (fieldFromInstruction(insn, 8, 3)) {
        case 0:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction(insn, 6, 2)) {
          case 0:
            return 2244; // tAND
          case 1:
            return 2272; // tEOR
          case 2:
            return 2291; // tLSLrr
          case 3:
            return 2293; // tLSRrr
          }
          break;
        case 1:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction(insn, 6, 2)) {
          case 0:
            return 2246; // tASRrr
          case 1:
            return 2231; // tADC
          case 2:
            return 2321; // tSBC
          case 3:
            return 2318; // tROR
          }
          break;
        case 2:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction(insn, 6, 2)) {
          case 0:
            return 2344; // tTST
          case 1:
            return 2319; // tRSB
          case 2:
            return 2270; // tCMPr
          case 3:
            return 2267; // tCMNz
          }
          break;
        case 3:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction(insn, 6, 2)) {
          case 0:
            return 2310; // tORR
          case 1:
            return 2307; // tMUL
          case 2:
            return 2248; // tBIC
          case 3:
            return 2308; // tMVN
          }
          break;
        case 4:
          return 2232; // tADDhirr
        case 5:
          return 2268; // tCMPhir
        case 6:
          // Check Inst{7-7} && Inst{2-0} for singleton decoding...
          if (fieldFromInstruction(insn, 7, 1) == 1 && fieldFromInstruction(insn, 0, 3) == 7)
            return 2256; // tBRIND
          else
            // Check Inst{7-6} for singleton decoding...
            if (fieldFromInstruction(insn, 6, 2) == 0)
              return 2303; // tMOVr
            else
              // Check Inst{7-7} for singleton decoding...
              if (fieldFromInstruction(insn, 7, 1) == 0)
                return 2301; // tMOVgpr2tgpr
              else
                // Check Inst{6-6} for singleton decoding...
                if (fieldFromInstruction(insn, 6, 1) == 0)
                  return 2304; // tMOVtgpr2gpr
                else
                  return 2300; // tMOVgpr2gpr
          break;
        case 7:
          // Check Inst{7} ...
          switch (fieldFromInstruction(insn, 7, 1)) {
          case 0:
            // Check Inst{2-0} ...
            switch (fieldFromInstruction(insn, 0, 3)) {
            case 0:
              // Check Inst{6-3} for singleton decoding...
              if (fieldFromInstruction(insn, 3, 4) == 14)
                return 2259; // tBX_RET
              else
                return 2260; // tBX_RET_vararg
              break;
            }
            break;
          case 1:
            // Check Inst{2-0} for singleton decoding...
            if (fieldFromInstruction(insn, 0, 3) == 0)
              return 2254; // tBLXr_r9
            break;
          }
          break;
        }
        break;
      case 1:
        return 2284; // tLDRpci
      }
      break;
    case 5:
      // Check Inst{11-9} ...
      switch (fieldFromInstruction(insn, 9, 3)) {
      case 0:
        return 2332; // tSTRr
      case 1:
        return 2330; // tSTRHr
      case 2:
        return 2328; // tSTRBr
      case 3:
        return 2281; // tLDRSB
      case 4:
        return 2286; // tLDRr
      case 5:
        return 2280; // tLDRHr
      case 6:
        return 2278; // tLDRBr
      case 7:
        return 2282; // tLDRSH
      }
      break;
    case 6:
      // Check Inst{11} ...
      switch (fieldFromInstruction(insn, 11, 1)) {
      case 0:
        return 2331; // tSTRi
      case 1:
        return 2283; // tLDRi
      }
      break;
    case 7:
      // Check Inst{11} ...
      switch (fieldFromInstruction(insn, 11, 1)) {
      case 0:
        return 2327; // tSTRBi
      case 1:
        return 2277; // tLDRBi
      }
      break;
    case 8:
      // Check Inst{11} ...
      switch (fieldFromInstruction(insn, 11, 1)) {
      case 0:
        return 2329; // tSTRHi
      case 1:
        return 2279; // tLDRHi
      }
      break;
    case 9:
      // Check Inst{11} ...
      switch (fieldFromInstruction(insn, 11, 1)) {
      case 0:
        return 2333; // tSTRspi
      case 1:
        return 2287; // tLDRspi
      }
      break;
    case 10:
      // Check Inst{11} ...
      switch (fieldFromInstruction(insn, 11, 1)) {
      case 0:
        return 2235; // tADDrPCi
      case 1:
        return 2237; // tADDrSPi
      }
      break;
    case 11:
      // Check Inst{11-10} ...
      switch (fieldFromInstruction(insn, 10, 2)) {
      case 0:
        // Check Inst{8} ...
        switch (fieldFromInstruction(insn, 8, 1)) {
        case 0:
          // Check Inst{7} ...
          switch (fieldFromInstruction(insn, 7, 1)) {
          case 0:
            // Check Inst{9} ...
            switch (fieldFromInstruction(insn, 9, 1)) {
            case 0:
              return 2239; // tADDspi
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 2340; // tSXTH
              case 1:
                return 2339; // tSXTB
              }
              break;
            }
            break;
          case 1:
            // Check Inst{9} ...
            switch (fieldFromInstruction(insn, 9, 1)) {
            case 0:
              return 2337; // tSUBspi
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 2346; // tUXTH
              case 1:
                return 2345; // tUXTB
              }
              break;
            }
            break;
          }
          break;
        case 1:
          return 2265; // tCBZ
        }
        break;
      case 1:
        // Check Inst{9} ...
        switch (fieldFromInstruction(insn, 9, 1)) {
        case 0:
          return 2314; // tPUSH
        case 1:
          // Check Inst{3} ...
          switch (fieldFromInstruction(insn, 3, 1)) {
          case 0:
            // Check Inst{8-5} ...
            switch (fieldFromInstruction(insn, 5, 4)) {
            case 2:
              // Check Inst{4-4} && Inst{2-0} for singleton decoding...
              if (fieldFromInstruction(insn, 4, 1) == 1 && fieldFromInstruction(insn, 0, 3) == 0)
                return 2323; // tSETENDLE
              break;
            case 3:
              return 2271; // tCPS
            }
            break;
          case 1:
            // Check Inst{8-4} && Inst{2-0} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 5) == 5 && fieldFromInstruction(insn, 0, 3) == 0)
              return 2322; // tSETENDBE
            break;
          }
          break;
        }
        break;
      case 2:
        // Check Inst{8} ...
        switch (fieldFromInstruction(insn, 8, 1)) {
        case 0:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction(insn, 6, 2)) {
          case 0:
            // Check Inst{9-9} for singleton decoding...
            if (fieldFromInstruction(insn, 9, 1) == 1)
              return 2315; // tREV
            break;
          case 1:
            // Check Inst{9-9} for singleton decoding...
            if (fieldFromInstruction(insn, 9, 1) == 1)
              return 2316; // tREV16
            break;
          case 3:
            // Check Inst{9-9} for singleton decoding...
            if (fieldFromInstruction(insn, 9, 1) == 1)
              return 2317; // tREVSH
            break;
          }
          break;
        case 1:
          return 2264; // tCBNZ
        }
        break;
      case 3:
        // Check Inst{9} ...
        switch (fieldFromInstruction(insn, 9, 1)) {
        case 0:
          return 2312; // tPOP
        case 1:
          // Check Inst{8} ...
          switch (fieldFromInstruction(insn, 8, 1)) {
          case 0:
            return 2249; // tBKPT
          case 1:
            // Check Inst{7-0} ...
            switch (fieldFromInstruction(insn, 0, 8)) {
            case 0:
              return 2309; // tNOP
            case 16:
              return 2349; // tYIELD
            case 32:
              return 2347; // tWFE
            case 48:
              return 2348; // tWFI
            case 64:
              return 2324; // tSEV
            default:
              break; // fallthrough
            }
            return 1928; // t2IT
            break;
          }
          break;
        }
        break;
      }
      break;
    case 12:
      // Check Inst{11} ...
      switch (fieldFromInstruction(insn, 11, 1)) {
      case 0:
        return fieldFromInstruction(insn, 0, 4) == 15 ? 2325 /* tSTMIA */ : 2326/* tSTMIA_UPD */ ; // Advanced SIMD addressing mode
      case 1:
        return fieldFromInstruction(insn, 0, 4) == 15 ? 2275 /* tLDMIA */ : 2276/* tLDMIA_UPD */ ; // Advanced SIMD addressing mode
      }
      break;
    case 13:
      // Check Inst{11-0} for singleton decoding...
      if (fieldFromInstruction(insn, 0, 12) == 3838)
        return 2343; // tTRAP
      else
        // Check Inst{11-8} for singleton decoding...
        if (fieldFromInstruction(insn, 8, 4) == 15)
          return 2338; // tSVC
        else
          return 2262; // tBcc
      break;
    case 14:
      // Check Inst{11-11} for singleton decoding...
      if (fieldFromInstruction(insn, 11, 1) == 0)
        return 2247; // tB
      break;
    }
    break;
  case 29:
    // Check Inst{26-24} ...
    switch (fieldFromInstruction(insn, 24, 3)) {
    case 0:
      // Check Inst{22-20} ...
      switch (fieldFromInstruction(insn, 20, 3)) {
      case 0:
        // Check Inst{23} ...
        switch (fieldFromInstruction(insn, 23, 1)) {
        case 0:
          return 2118; // t2SRSDB
        case 1:
          return 2129; // t2STMIA
        }
        break;
      case 1:
        // Check Inst{23} ...
        switch (fieldFromInstruction(insn, 23, 1)) {
        case 0:
          return 2050; // t2RFEDB
        case 1:
          return 1933; // t2LDMIA
        }
        break;
      case 2:
        // Check Inst{23} ...
        switch (fieldFromInstruction(insn, 23, 1)) {
        case 0:
          return 2119; // t2SRSDBW
        case 1:
          return 2130; // t2STMIA_UPD
        }
        break;
      case 3:
        // Check Inst{23} ...
        switch (fieldFromInstruction(insn, 23, 1)) {
        case 0:
          return 2051; // t2RFEDBW
        case 1:
          return 1935; // t2LDMIA_UPD
        }
        break;
      case 4:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          // Check Inst{23-23} && Inst{3-0} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 0 && fieldFromInstruction(insn, 0, 4) == 0)
            return 2140; // t2STREX
          break;
        case 4:
          // Check Inst{23-23} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 1)
            return 2141; // t2STREXB
          break;
        case 5:
          // Check Inst{23-23} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 1)
            return 2143; // t2STREXH
          break;
        case 7:
          // Check Inst{23-23} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 1)
            return 2142; // t2STREXD
          break;
        }
        break;
      case 5:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction(insn, 8, 4)) {
          case 0:
            // Check Inst{23-23} && Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
              return 2178; // t2TBB
            break;
          case 15:
            // Check Inst{23-23} && Inst{3-0} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 0 && fieldFromInstruction(insn, 0, 4) == 0)
              return 1946; // t2LDREX
            break;
          }
          break;
        case 1:
          // Check Inst{23-23} && Inst{15-8} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 8, 8) == 240)
            return 2180; // t2TBH
          break;
        case 4:
          // Check Inst{23-23} && Inst{11-8} && Inst{3-0} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 8, 4) == 15 && fieldFromInstruction(insn, 0, 4) == 15)
            return 1947; // t2LDREXB
          break;
        case 5:
          // Check Inst{23-23} && Inst{11-8} && Inst{3-0} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 8, 4) == 15 && fieldFromInstruction(insn, 0, 4) == 15)
            return 1949; // t2LDREXH
          break;
        case 7:
          // Check Inst{23-23} && Inst{3-0} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 0, 4) == 15)
            return 1948; // t2LDREXD
          break;
        }
        break;
      case 6:
        return 2137; // t2STRD_POST
      case 7:
        return 1943; // t2LDRD_POST
      }
      break;
    case 1:
      // Check Inst{22-20} ...
      switch (fieldFromInstruction(insn, 20, 3)) {
      case 0:
        // Check Inst{23} ...
        switch (fieldFromInstruction(insn, 23, 1)) {
        case 0:
          return 2127; // t2STMDB
        case 1:
          return 2120; // t2SRSIA
        }
        break;
      case 1:
        // Check Inst{23} ...
        switch (fieldFromInstruction(insn, 23, 1)) {
        case 0:
          return 1931; // t2LDMDB
        case 1:
          return 2052; // t2RFEIA
        }
        break;
      case 2:
        // Check Inst{23} ...
        switch (fieldFromInstruction(insn, 23, 1)) {
        case 0:
          return 2128; // t2STMDB_UPD
        case 1:
          return 2121; // t2SRSIAW
        }
        break;
      case 3:
        // Check Inst{23} ...
        switch (fieldFromInstruction(insn, 23, 1)) {
        case 0:
          return 1932; // t2LDMDB_UPD
        case 1:
          return 2053; // t2RFEIAW
        }
        break;
      case 4:
        return 2139; // t2STRDi8
      case 5:
        return 1945; // t2LDRDi8
      case 6:
        return 2138; // t2STRD_PRE
      case 7:
        return 1944; // t2LDRD_PRE
      }
      break;
    case 2:
      // Check Inst{23-21} ...
      switch (fieldFromInstruction(insn, 21, 3)) {
      case 0:
        // Check Inst{20-20} && Inst{14-4} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 1) == 1 && fieldFromInstruction(insn, 4, 11) == 240)
          return 2187; // t2TSTrr
        else
          // Check Inst{20-20} && Inst{11-8} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 1 && fieldFromInstruction(insn, 8, 4) == 15)
            return 2188; // t2TSTrs
          else
            // Check Inst{14-12} && Inst{7-4} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 4, 4) == 0)
              return 1895; // t2ANDrr
            else
              return 1896; // t2ANDrs
        break;
      case 1:
        // Check Inst{14-12} && Inst{7-4} for singleton decoding...
        if (fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 4, 4) == 0)
          return 1904; // t2BICrr
        else
          return 1905; // t2BICrs
        break;
      case 2:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          // Check Inst{14-12} ...
          switch (fieldFromInstruction(insn, 12, 3)) {
          case 0:
            // Check Inst{20-16} for singleton decoding...
            if (fieldFromInstruction(insn, 16, 5) == 15)
              return 1995; // t2MOVCCr
            else
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction(insn, 16, 4) == 15)
                return 2005; // t2MOVr
              else
                return 2023; // t2ORRrr
            break;
          }
          break;
        case 3:
          // Check Inst{19-16} && Inst{14-12} for singleton decoding...
          if (fieldFromInstruction(insn, 16, 4) == 15 && fieldFromInstruction(insn, 12, 3) == 0)
            return 2056; // t2RRX
          break;
        case 5:
          // Check Inst{20-16} && Inst{14-12} for singleton decoding...
          if (fieldFromInstruction(insn, 16, 5) == 31 && fieldFromInstruction(insn, 12, 3) == 0)
            return 2007; // t2MOVsrl_flag
          break;
        case 6:
          // Check Inst{20-16} && Inst{14-12} for singleton decoding...
          if (fieldFromInstruction(insn, 16, 5) == 31 && fieldFromInstruction(insn, 12, 3) == 0)
            return 2006; // t2MOVsra_flag
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{5-4} ...
        switch (fieldFromInstruction(insn, 4, 2)) {
        case 0:
          // Check Inst{19-16} ...
          switch (fieldFromInstruction(insn, 16, 4)) {
          case 15:
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 0)
              return 1993; // t2MOVCClsl
            else
              return 1981; // t2LSLri
            break;
          }
          break;
        case 1:
          // Check Inst{19-16} ...
          switch (fieldFromInstruction(insn, 16, 4)) {
          case 15:
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 0)
              return 1994; // t2MOVCClsr
            else
              return 1983; // t2LSRri
            break;
          }
          break;
        case 2:
          // Check Inst{19-16} ...
          switch (fieldFromInstruction(insn, 16, 4)) {
          case 15:
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 0)
              return 1989; // t2MOVCCasr
            else
              return 1897; // t2ASRri
            break;
          }
          break;
        case 3:
          // Check Inst{19-16} ...
          switch (fieldFromInstruction(insn, 16, 4)) {
          case 15:
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 0)
              return 1996; // t2MOVCCror
            else
              return 2054; // t2RORri
            break;
          }
          break;
        default:
          break; // fallthrough
        }
        return 2024; // t2ORRrs
        break;
        break;
      case 3:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          // Check Inst{14-12} ...
          switch (fieldFromInstruction(insn, 12, 3)) {
          case 0:
            // Check Inst{19-16} for singleton decoding...
            if (fieldFromInstruction(insn, 16, 4) == 15)
              return 2016; // t2MVNr
            else
              return 2020; // t2ORNrr
            break;
          }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{19-16} for singleton decoding...
        if (fieldFromInstruction(insn, 16, 4) == 15)
          return 2017; // t2MVNs
        else
          return 2021; // t2ORNrs
        break;
        break;
      case 4:
        // Check Inst{20-20} && Inst{14-4} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 1) == 1 && fieldFromInstruction(insn, 4, 11) == 240)
          return 2183; // t2TEQrr
        else
          // Check Inst{20-20} && Inst{11-8} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 1 && fieldFromInstruction(insn, 8, 4) == 15)
            return 2184; // t2TEQrs
          else
            // Check Inst{14-12} && Inst{7-4} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 4, 4) == 0)
              return 1925; // t2EORrr
            else
              return 1926; // t2EORrs
        break;
      case 6:
        // Check Inst{5-4} ...
        switch (fieldFromInstruction(insn, 4, 2)) {
        case 0:
          // Check Inst{20-20} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 0)
            return 2025; // t2PKHBT
          break;
        case 2:
          // Check Inst{20-20} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 0)
            return 2026; // t2PKHTB
          break;
        }
        break;
      }
      break;
    case 3:
      // Check Inst{23-21} ...
      switch (fieldFromInstruction(insn, 21, 3)) {
      case 0:
        // Check Inst{20-20} && Inst{14-4} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 1) == 1 && fieldFromInstruction(insn, 4, 11) == 240)
          return 1913; // t2CMNzrr
        else
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 1:
            // Check Inst{14-12} && Inst{7-4} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 4, 4) == 0)
              return 1884; // t2ADDSrr
            else
              // Check Inst{11-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 4) == 15)
                return 1914; // t2CMNzrs
              else
                return 1885; // t2ADDSrs
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{14-12} && Inst{7-4} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 4, 4) == 0)
            return 1891; // t2ADDrr
          else
            return 1892; // t2ADDrs
          break;
        break;
      case 2:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          // Check Inst{14-12} ...
          switch (fieldFromInstruction(insn, 12, 3)) {
          case 0:
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 1)
              return 1878; // t2ADCSrr
            else
              return 1881; // t2ADCrr
            break;
          }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{20-20} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 1) == 1)
          return 1879; // t2ADCSrs
        else
          return 1882; // t2ADCrs
        break;
        break;
      case 3:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          // Check Inst{14-12} ...
          switch (fieldFromInstruction(insn, 12, 3)) {
          case 0:
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 1)
              return 2066; // t2SBCSrr
            else
              return 2069; // t2SBCrr
            break;
          }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{20-20} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 1) == 1)
          return 2067; // t2SBCSrs
        else
          return 2070; // t2SBCrs
        break;
        break;
      case 5:
        // Check Inst{20-20} && Inst{14-4} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 1) == 1 && fieldFromInstruction(insn, 4, 11) == 240)
          return 1916; // t2CMPrr
        else
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 1:
            // Check Inst{11-8} for singleton decoding...
            if (fieldFromInstruction(insn, 8, 4) == 15)
              return 1917; // t2CMPrs
            else
              // Check Inst{14-12} && Inst{7-4} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 4, 4) == 0)
                return 2157; // t2SUBSrr
              else
                return 2158; // t2SUBSrs
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{14-12} && Inst{7-4} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 4, 4) == 0)
            return 2164; // t2SUBrr
          else
            return 2165; // t2SUBrs
          break;
        break;
      case 6:
        // Check Inst{14-12} && Inst{7-4} for singleton decoding...
        if (fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 4, 4) == 0)
          return 2060; // t2RSBrr
        else
          // Check Inst{20-20} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 1)
            return 2058; // t2RSBSrs
          else
            return 2061; // t2RSBrs
        break;
      }
      break;
    case 4:
      // Check Inst{23-20} ...
      switch (fieldFromInstruction(insn, 20, 4)) {
      case 4:
        return 2295; // tMCRR
      case 5:
        return 2306; // tMRRC
      }
      break;
    case 6:
      // Check Inst{4} ...
      switch (fieldFromInstruction(insn, 4, 1)) {
      case 0:
        return 2266; // tCDP
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          return 2294; // tMCR
        case 1:
          return 2305; // tMRC
        }
        break;
      }
      break;
    }
    break;
  case 30:
    // Check Inst{15} ...
    switch (fieldFromInstruction(insn, 15, 1)) {
    case 0:
      // Check Inst{25-24} ...
      switch (fieldFromInstruction(insn, 24, 2)) {
      case 0:
        // Check Inst{23-21} ...
        switch (fieldFromInstruction(insn, 21, 3)) {
        case 0:
          // Check Inst{20-20} && Inst{11-8} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 1 && fieldFromInstruction(insn, 8, 4) == 15)
            return 2186; // t2TSTri
          else
            return 1894; // t2ANDri
          break;
        case 1:
          return 1903; // t2BICri
        case 2:
          // Check Inst{20-16} for singleton decoding...
          if (fieldFromInstruction(insn, 16, 5) == 15)
            return 1990; // t2MOVCCi
          else
            // Check Inst{19-16} for singleton decoding...
            if (fieldFromInstruction(insn, 16, 4) == 15)
              return 2001; // t2MOVi
            else
              return 2022; // t2ORRri
          break;
        case 3:
          // Check Inst{20-16} for singleton decoding...
          if (fieldFromInstruction(insn, 16, 5) == 15)
            return 2014; // t2MVNCCi
          else
            // Check Inst{19-16} for singleton decoding...
            if (fieldFromInstruction(insn, 16, 4) == 15)
              return 2015; // t2MVNi
            else
              return 2019; // t2ORNri
          break;
        case 4:
          // Check Inst{20-20} && Inst{11-8} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 1 && fieldFromInstruction(insn, 8, 4) == 15)
            return 2182; // t2TEQri
          else
            return 1924; // t2EORri
          break;
        }
        break;
      case 1:
        // Check Inst{23-21} ...
        switch (fieldFromInstruction(insn, 21, 3)) {
        case 0:
          // Check Inst{20-20} && Inst{11-8} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 1 && fieldFromInstruction(insn, 8, 4) == 15)
            return 1912; // t2CMNzri
          else
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 1)
              return 1883; // t2ADDSri
            else
              return 1889; // t2ADDri
          break;
        case 2:
          // Check Inst{20-20} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 1)
            return 1877; // t2ADCSri
          else
            return 1880; // t2ADCri
          break;
        case 3:
          // Check Inst{20-20} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 1)
            return 2065; // t2SBCSri
          else
            return 2068; // t2SBCri
          break;
        case 5:
          // Check Inst{20-20} && Inst{11-8} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 1 && fieldFromInstruction(insn, 8, 4) == 15)
            return 1915; // t2CMPri
          else
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 1)
              return 2156; // t2SUBSri
            else
              return 2162; // t2SUBri
          break;
        case 6:
          // Check Inst{20-20} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 1)
            return 2057; // t2RSBSri
          else
            return 2059; // t2RSBri
          break;
        }
        break;
      case 2:
        // Check Inst{22} ...
        switch (fieldFromInstruction(insn, 22, 1)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{21} ...
            switch (fieldFromInstruction(insn, 21, 1)) {
            case 0:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0)
                return 1890; // t2ADDri12
              break;
            case 1:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 2163; // t2SUBri12
              break;
            default:
              break; // fallthrough
            }
            // Check Inst{19-16} for singleton decoding...
            if (fieldFromInstruction(insn, 16, 4) == 15)
              return 1893; // t2ADR
            break;
            break;
          }
          break;
        case 1:
          // Check Inst{23} ...
          switch (fieldFromInstruction(insn, 23, 1)) {
          case 0:
            // Check Inst{21-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 2) == 0)
              return 2002; // t2MOVi16
            break;
          case 1:
            // Check Inst{21-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 2) == 0)
              return 1997; // t2MOVTi16
            break;
          }
          break;
        }
        break;
      case 3:
        // Check Inst{23-22} ...
        switch (fieldFromInstruction(insn, 22, 2)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{21-21} && Inst{14-12} && Inst{7-6} for singleton decoding...
            if (fieldFromInstruction(insn, 21, 1) == 1 && fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 6, 2) == 0)
              return 2123; // t2SSAT16
            else
              return 2122; // t2SSAT
            break;
          }
          break;
        case 1:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction(insn, 20, 2)) {
          case 0:
            return 2071; // t2SBFX
          case 2:
            // Check Inst{19-16} for singleton decoding...
            if (fieldFromInstruction(insn, 16, 4) == 15)
              return 1900; // t2BFC
            else
              return 1901; // t2BFI
            break;
          }
          break;
        case 2:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{21-21} && Inst{14-12} && Inst{7-6} for singleton decoding...
            if (fieldFromInstruction(insn, 21, 1) == 1 && fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 6, 2) == 0)
              return 2212; // t2USAT16
            else
              return 2211; // t2USAT
            break;
          }
          break;
        case 3:
          // Check Inst{21-20} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 2) == 0)
            return 2192; // t2UBFX
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{12} ...
      switch (fieldFromInstruction(insn, 12, 1)) {
      case 0:
        // Check Inst{14} ...
        switch (fieldFromInstruction(insn, 14, 1)) {
        case 0:
          // Check Inst{26-16} ...
          switch (fieldFromInstruction(insn, 16, 11)) {
          case 943:
            // Check Inst{8} ...
            switch (fieldFromInstruction(insn, 8, 1)) {
            case 0:
              // Check Inst{4-0} ...
              switch (fieldFromInstruction(insn, 0, 5)) {
              case 0:
                // Check Inst{10-9} && Inst{7-5} for singleton decoding...
                if (fieldFromInstruction(insn, 9, 2) == 0 && fieldFromInstruction(insn, 5, 3) == 0)
                  return 2018; // t2NOP
                else
                  return 1919; // t2CPS2p
                break;
              case 1:
                // Check Inst{10-9} && Inst{7-5} for singleton decoding...
                if (fieldFromInstruction(insn, 9, 2) == 0 && fieldFromInstruction(insn, 5, 3) == 0)
                  return 2230; // t2YIELD
                break;
              case 2:
                // Check Inst{10-9} && Inst{7-5} for singleton decoding...
                if (fieldFromInstruction(insn, 9, 2) == 0 && fieldFromInstruction(insn, 5, 3) == 0)
                  return 2228; // t2WFE
                break;
              case 3:
                // Check Inst{10-9} && Inst{7-5} for singleton decoding...
                if (fieldFromInstruction(insn, 9, 2) == 0 && fieldFromInstruction(insn, 5, 3) == 0)
                  return 2229; // t2WFI
                break;
              case 4:
                // Check Inst{10-9} && Inst{7-5} for singleton decoding...
                if (fieldFromInstruction(insn, 9, 2) == 0 && fieldFromInstruction(insn, 5, 3) == 0)
                  return 2074; // t2SEV
                break;
              }
              break;
            case 1:
              // Check Inst{10-9} && Inst{7-5} for singleton decoding...
              if (fieldFromInstruction(insn, 9, 2) == 0 && fieldFromInstruction(insn, 5, 3) == 0)
                return 1918; // t2CPS1p
              else
                return 1920; // t2CPS3p
              break;
            }
            break;
          case 959:
            // Check Inst{11-4} ...
            switch (fieldFromInstruction(insn, 4, 8)) {
            case 242:
              // Check Inst{13-13} && Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 13, 1) == 0 && fieldFromInstruction(insn, 0, 4) == 15)
                return 1910; // t2CLREX
              break;
            case 244:
              // Check Inst{13-13} for singleton decoding...
              if (fieldFromInstruction(insn, 13, 1) == 0)
                return 1923; // t2DSB
              break;
            case 245:
              // Check Inst{13-13} for singleton decoding...
              if (fieldFromInstruction(insn, 13, 1) == 0)
                return 1922; // t2DMB
              break;
            case 246:
              // Check Inst{13-13} && Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 13, 1) == 0 && fieldFromInstruction(insn, 0, 4) == 15)
                return 1927; // t2ISB
              break;
            }
            break;
          case 1007:
            return 2010; // t2MRS
          case 1023:
            return 2011; // t2MRSsys
          default:
            break; // fallthrough
          }
          // Check Inst{26-20} ...
          switch (fieldFromInstruction(insn, 20, 7)) {
          case 58:
            // Check Inst{10-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 7) == 15)
              return 1921; // t2DBG
            break;
          case 60:
            return 1907; // t2BXJ
          case 127:
            // Check Inst{13-13} for singleton decoding...
            if (fieldFromInstruction(insn, 13, 1) == 0)
              return 2081; // t2SMC
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{26-21} && Inst{13-13} for singleton decoding...
          if (fieldFromInstruction(insn, 21, 6) == 28 && fieldFromInstruction(insn, 13, 1) == 0)
            return 2012; // t2MSR
          else
            return 1908; // t2Bcc
          break;
          break;
          break;
        case 1:
          // Check Inst{13-13} && Inst{11-11} && Inst{0-0} for singleton decoding...
          if (fieldFromInstruction(insn, 13, 1) == 1 && fieldFromInstruction(insn, 11, 1) == 1 && fieldFromInstruction(insn, 0, 1) == 0)
            return 2252; // tBLXi_r9
          break;
        }
        break;
      case 1:
        // Check Inst{14} ...
        switch (fieldFromInstruction(insn, 14, 1)) {
        case 0:
          return 1899; // t2B
        case 1:
          // Check Inst{13-13} && Inst{11-11} for singleton decoding...
          if (fieldFromInstruction(insn, 13, 1) == 1 && fieldFromInstruction(insn, 11, 1) == 1)
            return 2255; // tBLr9
          break;
        }
        break;
      }
      break;
    }
    break;
  case 31:
    // Check Inst{26-24} ...
    switch (fieldFromInstruction(insn, 24, 3)) {
    case 0:
      // Check Inst{22-20} ...
      switch (fieldFromInstruction(insn, 20, 3)) {
      case 0:
        // Check Inst{23-23} && Inst{11-6} for singleton decoding...
        if (fieldFromInstruction(insn, 23, 1) == 0 && fieldFromInstruction(insn, 6, 6) == 0)
          return 2136; // t2STRBs
        else
          // Check Inst{23-23} && Inst{11-8} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 0 && fieldFromInstruction(insn, 8, 4) == 14)
            return 2131; // t2STRBT
          else
            // Check Inst{8} ...
            switch (fieldFromInstruction(insn, 8, 1)) {
            case 0:
              // Check Inst{23-23} && Inst{11-10} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0 && fieldFromInstruction(insn, 10, 2) == 3)
                return 2135; // t2STRBi8
              break;
            case 1:
              // Check Inst{11-10} ...
              switch (fieldFromInstruction(insn, 10, 2)) {
              case 2:
                // Check Inst{23-23} for singleton decoding...
                if (fieldFromInstruction(insn, 23, 1) == 0)
                  return 2132; // t2STRB_POST
                break;
              case 3:
                // Check Inst{23-23} for singleton decoding...
                if (fieldFromInstruction(insn, 23, 1) == 0)
                  return 2133; // t2STRB_PRE
                break;
              }
              break;
            default:
              break; // fallthrough
            }
            return 2134; // t2STRBi12
        break;
      case 1:
        // Check Inst{23} ...
        switch (fieldFromInstruction(insn, 23, 1)) {
        case 0:
          // Check Inst{11-10} ...
          switch (fieldFromInstruction(insn, 10, 2)) {
          case 0:
            // Check Inst{9-6} ...
            switch (fieldFromInstruction(insn, 6, 4)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 4) == 15)
                return 2032; // t2PLDs
              else
                return 1942; // t2LDRBs
              break;
            }
            break;
          case 2:
            // Check Inst{8-8} for singleton decoding...
            if (fieldFromInstruction(insn, 8, 1) == 1)
              return 1937; // t2LDRB_POST
            break;
          case 3:
            // Check Inst{8} ...
            switch (fieldFromInstruction(insn, 8, 1)) {
            case 0:
              // Check Inst{9} ...
              switch (fieldFromInstruction(insn, 9, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 2031; // t2PLDi8
                break;
              case 1:
                return 1936; // t2LDRBT
              default:
                break; // fallthrough
              }
              return 1940; // t2LDRBi8
              break;
            case 1:
              return 1938; // t2LDRB_PRE
            }
            break;
          }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{19-16} for singleton decoding...
        if (fieldFromInstruction(insn, 16, 4) == 15)
          return 1941; // t2LDRBpci
        else
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 4) == 15)
            return 2030; // t2PLDi12
          else
            return 1939; // t2LDRBi12
        break;
        break;
      case 2:
        // Check Inst{23-23} && Inst{11-6} for singleton decoding...
        if (fieldFromInstruction(insn, 23, 1) == 0 && fieldFromInstruction(insn, 6, 6) == 0)
          return 2149; // t2STRHs
        else
          // Check Inst{23-23} && Inst{11-8} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 0 && fieldFromInstruction(insn, 8, 4) == 14)
            return 2144; // t2STRHT
          else
            // Check Inst{8} ...
            switch (fieldFromInstruction(insn, 8, 1)) {
            case 0:
              // Check Inst{23-23} && Inst{11-10} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0 && fieldFromInstruction(insn, 10, 2) == 3)
                return 2148; // t2STRHi8
              break;
            case 1:
              // Check Inst{11-10} ...
              switch (fieldFromInstruction(insn, 10, 2)) {
              case 2:
                // Check Inst{23-23} for singleton decoding...
                if (fieldFromInstruction(insn, 23, 1) == 0)
                  return 2145; // t2STRH_POST
                break;
              case 3:
                // Check Inst{23-23} for singleton decoding...
                if (fieldFromInstruction(insn, 23, 1) == 0)
                  return 2146; // t2STRH_PRE
                break;
              }
              break;
            default:
              break; // fallthrough
            }
            return 2147; // t2STRHi12
        break;
      case 3:
        // Check Inst{23} ...
        switch (fieldFromInstruction(insn, 23, 1)) {
        case 0:
          // Check Inst{11-10} ...
          switch (fieldFromInstruction(insn, 10, 2)) {
          case 0:
            // Check Inst{9-6} ...
            switch (fieldFromInstruction(insn, 6, 4)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 4) == 15)
                return 2029; // t2PLDWs
              else
                return 1956; // t2LDRHs
              break;
            }
            break;
          case 2:
            // Check Inst{8-8} for singleton decoding...
            if (fieldFromInstruction(insn, 8, 1) == 1)
              return 1951; // t2LDRH_POST
            break;
          case 3:
            // Check Inst{8} ...
            switch (fieldFromInstruction(insn, 8, 1)) {
            case 0:
              // Check Inst{9} ...
              switch (fieldFromInstruction(insn, 9, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 2028; // t2PLDWi8
                break;
              case 1:
                return 1950; // t2LDRHT
              default:
                break; // fallthrough
              }
              return 1954; // t2LDRHi8
              break;
            case 1:
              return 1952; // t2LDRH_PRE
            }
            break;
          }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{19-16} for singleton decoding...
        if (fieldFromInstruction(insn, 16, 4) == 15)
          return 1955; // t2LDRHpci
        else
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 4) == 15)
            return 2027; // t2PLDWi12
          else
            return 1953; // t2LDRHi12
        break;
        break;
      case 4:
        // Check Inst{23-23} && Inst{11-6} for singleton decoding...
        if (fieldFromInstruction(insn, 23, 1) == 0 && fieldFromInstruction(insn, 6, 6) == 0)
          return 2155; // t2STRs
        else
          // Check Inst{23-23} && Inst{11-8} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 0 && fieldFromInstruction(insn, 8, 4) == 14)
            return 2150; // t2STRT
          else
            // Check Inst{8} ...
            switch (fieldFromInstruction(insn, 8, 1)) {
            case 0:
              // Check Inst{23-23} && Inst{11-10} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0 && fieldFromInstruction(insn, 10, 2) == 3)
                return 2154; // t2STRi8
              break;
            case 1:
              // Check Inst{11-10} ...
              switch (fieldFromInstruction(insn, 10, 2)) {
              case 2:
                // Check Inst{23-23} for singleton decoding...
                if (fieldFromInstruction(insn, 23, 1) == 0)
                  return 2151; // t2STR_POST
                break;
              case 3:
                // Check Inst{23-23} for singleton decoding...
                if (fieldFromInstruction(insn, 23, 1) == 0)
                  return 2152; // t2STR_PRE
                break;
              }
              break;
            default:
              break; // fallthrough
            }
            return 2153; // t2STRi12
        break;
      case 5:
        // Check Inst{23-23} && Inst{11-6} for singleton decoding...
        if (fieldFromInstruction(insn, 23, 1) == 0 && fieldFromInstruction(insn, 6, 6) == 0)
          return 1978; // t2LDRs
        else
          // Check Inst{23-23} && Inst{11-8} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 0 && fieldFromInstruction(insn, 8, 4) == 14)
            return 1971; // t2LDRT
          else
            // Check Inst{8} ...
            switch (fieldFromInstruction(insn, 8, 1)) {
            case 0:
              // Check Inst{23-23} && Inst{11-10} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0 && fieldFromInstruction(insn, 10, 2) == 3)
                return 1975; // t2LDRi8
              break;
            case 1:
              // Check Inst{11-10} ...
              switch (fieldFromInstruction(insn, 10, 2)) {
              case 2:
                // Check Inst{23-23} for singleton decoding...
                if (fieldFromInstruction(insn, 23, 1) == 0)
                  return 1972; // t2LDR_POST
                break;
              case 3:
                // Check Inst{23-23} for singleton decoding...
                if (fieldFromInstruction(insn, 23, 1) == 0)
                  return 1973; // t2LDR_PRE
                break;
              }
              break;
            default:
              break; // fallthrough
            }
            // Check Inst{19-16} for singleton decoding...
            if (fieldFromInstruction(insn, 16, 4) == 15)
              return 1976; // t2LDRpci
            else
              return 1974; // t2LDRi12
            break;
        break;
      }
      break;
    case 1:
      // Check Inst{22-20} ...
      switch (fieldFromInstruction(insn, 20, 3)) {
      case 1:
        // Check Inst{23} ...
        switch (fieldFromInstruction(insn, 23, 1)) {
        case 0:
          // Check Inst{11-10} ...
          switch (fieldFromInstruction(insn, 10, 2)) {
          case 0:
            // Check Inst{9-6} ...
            switch (fieldFromInstruction(insn, 6, 4)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 4) == 15)
                return 2035; // t2PLIs
              else
                return 1963; // t2LDRSBs
              break;
            }
            break;
          case 2:
            // Check Inst{8-8} for singleton decoding...
            if (fieldFromInstruction(insn, 8, 1) == 1)
              return 1958; // t2LDRSB_POST
            break;
          case 3:
            // Check Inst{8} ...
            switch (fieldFromInstruction(insn, 8, 1)) {
            case 0:
              // Check Inst{9} ...
              switch (fieldFromInstruction(insn, 9, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 2034; // t2PLIi8
                break;
              case 1:
                return 1957; // t2LDRSBT
              default:
                break; // fallthrough
              }
              return 1961; // t2LDRSBi8
              break;
            case 1:
              return 1959; // t2LDRSB_PRE
            }
            break;
          }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{19-16} for singleton decoding...
        if (fieldFromInstruction(insn, 16, 4) == 15)
          return 1962; // t2LDRSBpci
        else
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 4) == 15)
            return 2033; // t2PLIi12
          else
            return 1960; // t2LDRSBi12
        break;
        break;
      case 3:
        // Check Inst{23-23} && Inst{11-6} for singleton decoding...
        if (fieldFromInstruction(insn, 23, 1) == 0 && fieldFromInstruction(insn, 6, 6) == 0)
          return 1970; // t2LDRSHs
        else
          // Check Inst{23-23} && Inst{11-8} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 0 && fieldFromInstruction(insn, 8, 4) == 14)
            return 1964; // t2LDRSHT
          else
            // Check Inst{8} ...
            switch (fieldFromInstruction(insn, 8, 1)) {
            case 0:
              // Check Inst{23-23} && Inst{11-10} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0 && fieldFromInstruction(insn, 10, 2) == 3)
                return 1968; // t2LDRSHi8
              break;
            case 1:
              // Check Inst{11-10} ...
              switch (fieldFromInstruction(insn, 10, 2)) {
              case 2:
                // Check Inst{23-23} for singleton decoding...
                if (fieldFromInstruction(insn, 23, 1) == 0)
                  return 1965; // t2LDRSH_POST
                break;
              case 3:
                // Check Inst{23-23} for singleton decoding...
                if (fieldFromInstruction(insn, 23, 1) == 0)
                  return 1966; // t2LDRSH_PRE
                break;
              }
              break;
            default:
              break; // fallthrough
            }
            // Check Inst{19-16} for singleton decoding...
            if (fieldFromInstruction(insn, 16, 4) == 15)
              return 1969; // t2LDRSHpci
            else
              return 1967; // t2LDRSHi12
            break;
        break;
      }
      break;
    case 2:
      // Check Inst{23-21} ...
      switch (fieldFromInstruction(insn, 21, 3)) {
      case 0:
        // Check Inst{7} ...
        switch (fieldFromInstruction(insn, 7, 1)) {
        case 0:
          // Check Inst{15-12} && Inst{6-4} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 4) == 15 && fieldFromInstruction(insn, 4, 3) == 0)
            return 1982; // t2LSLrr
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction(insn, 12, 4)) {
            case 15:
              // Check Inst{5-4} ...
              switch (fieldFromInstruction(insn, 4, 2)) {
              case 0:
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 2176; // t2SXTHr
                else
                  return 2170; // t2SXTAHrr
                break;
              default:
                break; // fallthrough
              }
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction(insn, 16, 4) == 15)
                return 2177; // t2SXTHr_rot
              else
                return 2171; // t2SXTAHrr_rot
              break;
              break;
            }
            break;
          case 1:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction(insn, 12, 4)) {
            case 15:
              // Check Inst{5-4} ...
              switch (fieldFromInstruction(insn, 4, 2)) {
              case 0:
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 2226; // t2UXTHr
                else
                  return 2220; // t2UXTAHrr
                break;
              default:
                break; // fallthrough
              }
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction(insn, 16, 4) == 15)
                return 2227; // t2UXTHr_rot
              else
                return 2221; // t2UXTAHrr_rot
              break;
              break;
            }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{7} ...
        switch (fieldFromInstruction(insn, 7, 1)) {
        case 0:
          // Check Inst{15-12} && Inst{6-4} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 4) == 15 && fieldFromInstruction(insn, 4, 3) == 0)
            return 1984; // t2LSRrr
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction(insn, 12, 4)) {
            case 15:
              // Check Inst{5-4} ...
              switch (fieldFromInstruction(insn, 4, 2)) {
              case 0:
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 2172; // t2SXTB16r
                else
                  return 2166; // t2SXTAB16rr
                break;
              default:
                break; // fallthrough
              }
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction(insn, 16, 4) == 15)
                return 2173; // t2SXTB16r_rot
              else
                return 2167; // t2SXTAB16rr_rot
              break;
              break;
            }
            break;
          case 1:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction(insn, 12, 4)) {
            case 15:
              // Check Inst{5-4} ...
              switch (fieldFromInstruction(insn, 4, 2)) {
              case 0:
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 2222; // t2UXTB16r
                else
                  return 2216; // t2UXTAB16rr
                break;
              default:
                break; // fallthrough
              }
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction(insn, 16, 4) == 15)
                return 2223; // t2UXTB16r_rot
              else
                return 2217; // t2UXTAB16rr_rot
              break;
              break;
            }
            break;
          }
          break;
        }
        break;
      case 2:
        // Check Inst{7} ...
        switch (fieldFromInstruction(insn, 7, 1)) {
        case 0:
          // Check Inst{15-12} && Inst{6-4} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 4) == 15 && fieldFromInstruction(insn, 4, 3) == 0)
            return 1898; // t2ASRrr
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction(insn, 12, 4)) {
            case 15:
              // Check Inst{5-4} ...
              switch (fieldFromInstruction(insn, 4, 2)) {
              case 0:
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 2174; // t2SXTBr
                else
                  return 2168; // t2SXTABrr
                break;
              default:
                break; // fallthrough
              }
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction(insn, 16, 4) == 15)
                return 2175; // t2SXTBr_rot
              else
                return 2169; // t2SXTABrr_rot
              break;
              break;
            }
            break;
          case 1:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction(insn, 12, 4)) {
            case 15:
              // Check Inst{5-4} ...
              switch (fieldFromInstruction(insn, 4, 2)) {
              case 0:
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 2224; // t2UXTBr
                else
                  return 2218; // t2UXTABrr
                break;
              default:
                break; // fallthrough
              }
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction(insn, 16, 4) == 15)
                return 2225; // t2UXTBr_rot
              else
                return 2219; // t2UXTABrr_rot
              break;
              break;
            }
            break;
          }
          break;
        }
        break;
      case 3:
        // Check Inst{15-12} && Inst{7-4} for singleton decoding...
        if (fieldFromInstruction(insn, 12, 4) == 15 && fieldFromInstruction(insn, 4, 4) == 0)
          return 2055; // t2RORrr
        break;
      case 4:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2063; // t2SADD8
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2062; // t2SADD16
            break;
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2038; // t2QADD8
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2037; // t2QADD16
            break;
          }
          break;
        case 2:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2076; // t2SHADD8
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2075; // t2SHADD16
            break;
          }
          break;
        case 4:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2190; // t2UADD8
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2189; // t2UADD16
            break;
          }
          break;
        case 5:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2204; // t2UQADD8
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2203; // t2UQADD16
            break;
          }
          break;
        case 6:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2195; // t2UHADD8
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2194; // t2UHADD16
            break;
          }
          break;
        case 8:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2036; // t2QADD
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2047; // t2REV
            break;
          }
          break;
        case 9:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2040; // t2QDADD
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2048; // t2REV16
            break;
          }
          break;
        case 10:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2043; // t2QSUB
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2046; // t2RBIT
            break;
          }
          break;
        case 11:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2041; // t2QDSUB
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2049; // t2REVSH
            break;
          }
          break;
        }
        break;
      case 5:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
            return 2064; // t2SASX
          break;
        case 1:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
            return 2039; // t2QASX
          break;
        case 2:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
            return 2077; // t2SHASX
          break;
        case 4:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
            return 2191; // t2UASX
          break;
        case 5:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
            return 2205; // t2UQASX
          break;
        case 6:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
            return 2196; // t2UHASX
          break;
        case 8:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2073; // t2SEL
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 1911; // t2CLZ
            break;
          }
          break;
        }
        break;
      case 6:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2126; // t2SSUB8
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2125; // t2SSUB16
            break;
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2045; // t2QSUB8
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2044; // t2QSUB16
            break;
          }
          break;
        case 2:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2080; // t2SHSUB8
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2079; // t2SHSUB16
            break;
          }
          break;
        case 4:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2215; // t2USUB8
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2214; // t2USUB16
            break;
          }
          break;
        case 5:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2208; // t2UQSUB8
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2207; // t2UQSUB16
            break;
          }
          break;
        case 6:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2199; // t2UHSUB8
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2198; // t2UHSUB16
            break;
          }
          break;
        }
        break;
      case 7:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
            return 2124; // t2SSAX
          break;
        case 1:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
            return 2042; // t2QSAX
          break;
        case 2:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
            return 2078; // t2SHSAX
          break;
        case 4:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
            return 2213; // t2USAX
          break;
        case 5:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
            return 2206; // t2UQSAX
          break;
        case 6:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
            return 2197; // t2UHSAX
          break;
        }
        break;
      }
      break;
    case 3:
      // Check Inst{23-20} ...
      switch (fieldFromInstruction(insn, 20, 4)) {
      case 0:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 4) == 15)
            return 2013; // t2MUL
          else
            return 1987; // t2MLA
          break;
        case 1:
          return 1988; // t2MLS
        }
        break;
      case 1:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 4) == 15)
            return 2109; // t2SMULBB
          else
            return 2082; // t2SMLABB
          break;
        case 1:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 4) == 15)
            return 2110; // t2SMULBT
          else
            return 2083; // t2SMLABT
          break;
        case 2:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 4) == 15)
            return 2112; // t2SMULTB
          else
            return 2093; // t2SMLATB
          break;
        case 3:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 4) == 15)
            return 2113; // t2SMULTT
          else
            return 2094; // t2SMLATT
          break;
        }
        break;
      case 2:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 4) == 15)
            return 2107; // t2SMUAD
          else
            return 2084; // t2SMLAD
          break;
        case 1:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 4) == 15)
            return 2108; // t2SMUADX
          else
            return 2085; // t2SMLADX
          break;
        }
        break;
      case 3:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 4) == 15)
            return 2114; // t2SMULWB
          else
            return 2095; // t2SMLAWB
          break;
        case 1:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 4) == 15)
            return 2115; // t2SMULWT
          else
            return 2096; // t2SMLAWT
          break;
        }
        break;
      case 4:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 4) == 15)
            return 2116; // t2SMUSD
          else
            return 2097; // t2SMLSD
          break;
        case 1:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 4) == 15)
            return 2117; // t2SMUSDX
          else
            return 2098; // t2SMLSDX
          break;
        }
        break;
      case 5:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 4) == 15)
            return 2105; // t2SMMUL
          else
            return 2101; // t2SMMLA
          break;
        case 1:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 4) == 15)
            return 2106; // t2SMMULR
          else
            return 2102; // t2SMMLAR
          break;
        }
        break;
      case 6:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          return 2103; // t2SMMLS
        case 1:
          return 2104; // t2SMMLSR
        }
        break;
      case 7:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 4) == 15)
            return 2209; // t2USAD8
          else
            return 2210; // t2USADA8
          break;
        }
        break;
      case 8:
        // Check Inst{7-4} for singleton decoding...
        if (fieldFromInstruction(insn, 4, 4) == 0)
          return 2111; // t2SMULL
        break;
      case 9:
        // Check Inst{15-12} && Inst{7-4} for singleton decoding...
        if (fieldFromInstruction(insn, 12, 4) == 15 && fieldFromInstruction(insn, 4, 4) == 15)
          return 2072; // t2SDIV
        break;
      case 10:
        // Check Inst{7-4} for singleton decoding...
        if (fieldFromInstruction(insn, 4, 4) == 0)
          return 2202; // t2UMULL
        break;
      case 11:
        // Check Inst{15-12} && Inst{7-4} for singleton decoding...
        if (fieldFromInstruction(insn, 12, 4) == 15 && fieldFromInstruction(insn, 4, 4) == 15)
          return 2193; // t2UDIV
        break;
      case 12:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          return 2086; // t2SMLAL
        case 8:
          return 2087; // t2SMLALBB
        case 9:
          return 2088; // t2SMLALBT
        case 10:
          return 2091; // t2SMLALTB
        case 11:
          return 2092; // t2SMLALTT
        case 12:
          return 2089; // t2SMLALD
        case 13:
          return 2090; // t2SMLALDX
        }
        break;
      case 13:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 12:
          return 2099; // t2SMLSLD
        case 13:
          return 2100; // t2SMLSLDX
        }
        break;
      case 14:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          return 2201; // t2UMLAL
        case 6:
          return 2200; // t2UMAAL
        }
        break;
      }
      break;
    case 4:
      // Check Inst{23-20} ...
      switch (fieldFromInstruction(insn, 20, 4)) {
      case 4:
        return 1986; // t2MCRR2
      case 5:
        return 2009; // t2MRRC2
      }
      break;
    case 6:
      // Check Inst{4} ...
      switch (fieldFromInstruction(insn, 4, 1)) {
      case 0:
        return 1909; // t2CDP2
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          return 1985; // t2MCR2
        case 1:
          return 2008; // t2MRC2
        }
        break;
      }
      break;
    }
    break;
  }

  return 0;
}

} // End llvm namespace 
