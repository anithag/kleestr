//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void X86IntelInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    11U,	// AAA
    134217743U,	// AAD8i8
    134217748U,	// AAM8i8
    25U,	// AAS
    29U,	// ABS_F
    0U,	// ABS_Fp32
    0U,	// ABS_Fp64
    0U,	// ABS_Fp80
    134217762U,	// ADC16i16
    272629804U,	// ADC16mi
    272629804U,	// ADC16mi8
    272629804U,	// ADC16mr
    411041836U,	// ADC16ri
    411041836U,	// ADC16ri8
    415236140U,	// ADC16rm
    411041836U,	// ADC16rr
    138543148U,	// ADC16rr_REV
    134217777U,	// ADC32i32
    541065260U,	// ADC32mi
    541065260U,	// ADC32mi8
    541065260U,	// ADC32mr
    411041836U,	// ADC32ri
    411041836U,	// ADC32ri8
    419430444U,	// ADC32rm
    411041836U,	// ADC32rr
    138543148U,	// ADC32rr_REV
    134217788U,	// ADC64i32
    675282988U,	// ADC64mi32
    675282988U,	// ADC64mi8
    675282988U,	// ADC64mr
    411041836U,	// ADC64ri32
    411041836U,	// ADC64ri8
    423624748U,	// ADC64rm
    411041836U,	// ADC64rr
    138543148U,	// ADC64rr_REV
    134217799U,	// ADC8i8
    809500716U,	// ADC8mi
    809500716U,	// ADC8mr
    411041836U,	// ADC8ri
    427819052U,	// ADC8rm
    411041836U,	// ADC8rr
    138543148U,	// ADC8rr_REV
    134217809U,	// ADD16i16
    272629851U,	// ADD16mi
    272629851U,	// ADD16mi8
    272629851U,	// ADD16mr
    411041883U,	// ADD16ri
    411041883U,	// ADD16ri8
    0U,	// ADD16ri8_DB
    0U,	// ADD16ri_DB
    415236187U,	// ADD16rm
    411041883U,	// ADD16rr
    0U,	// ADD16rr_DB
    138543195U,	// ADD16rr_REV
    134217824U,	// ADD32i32
    541065307U,	// ADD32mi
    541065307U,	// ADD32mi8
    541065307U,	// ADD32mr
    411041883U,	// ADD32ri
    411041883U,	// ADD32ri8
    0U,	// ADD32ri8_DB
    0U,	// ADD32ri_DB
    419430491U,	// ADD32rm
    411041883U,	// ADD32rr
    0U,	// ADD32rr_DB
    138543195U,	// ADD32rr_REV
    134217835U,	// ADD64i32
    675283035U,	// ADD64mi32
    675283035U,	// ADD64mi8
    675283035U,	// ADD64mr
    411041883U,	// ADD64ri32
    0U,	// ADD64ri32_DB
    411041883U,	// ADD64ri8
    0U,	// ADD64ri8_DB
    423624795U,	// ADD64rm
    411041883U,	// ADD64rr
    0U,	// ADD64rr_DB
    138543195U,	// ADD64rr_REV
    134217846U,	// ADD8i8
    809500763U,	// ADD8mi
    809500763U,	// ADD8mr
    411041883U,	// ADD8ri
    427819099U,	// ADD8rm
    411041883U,	// ADD8rr
    138543195U,	// ADD8rr_REV
    138674304U,	// ADDPDrm
    138543232U,	// ADDPDrr
    138674311U,	// ADDPSrm
    138543239U,	// ADDPSrr
    138805390U,	// ADDSDrm
    138805390U,	// ADDSDrm_Int
    138543246U,	// ADDSDrr
    138543246U,	// ADDSDrr_Int
    138936469U,	// ADDSSrm
    138936469U,	// ADDSSrm_Int
    138543253U,	// ADDSSrr
    138543253U,	// ADDSSrr_Int
    138674332U,	// ADDSUBPDrm
    138543260U,	// ADDSUBPDrr
    138674342U,	// ADDSUBPSrm
    138543270U,	// ADDSUBPSrr
    939524272U,	// ADD_F32m
    1073742000U,	// ADD_F64m
    268435638U,	// ADD_FI16m
    536871094U,	// ADD_FI32m
    134217917U,	// ADD_FPrST0
    134217904U,	// ADD_FST0r
    0U,	// ADD_Fp32
    0U,	// ADD_Fp32m
    0U,	// ADD_Fp64
    0U,	// ADD_Fp64m
    0U,	// ADD_Fp64m32
    0U,	// ADD_Fp80
    0U,	// ADD_Fp80m32
    0U,	// ADD_Fp80m64
    0U,	// ADD_FpI16m32
    0U,	// ADD_FpI16m64
    0U,	// ADD_FpI16m80
    0U,	// ADD_FpI32m32
    0U,	// ADD_FpI32m64
    0U,	// ADD_FpI32m80
    163578032U,	// ADD_FrST0
    196U,	// ADJCALLSTACKDOWN32
    196U,	// ADJCALLSTACKDOWN64
    214U,	// ADJCALLSTACKUP32
    214U,	// ADJCALLSTACKUP64
    139067622U,	// AESDECLASTrm
    138543334U,	// AESDECLASTrr
    139067634U,	// AESDECrm
    138543346U,	// AESDECrr
    139067642U,	// AESENCLASTrm
    138543354U,	// AESENCLASTrr
    139067654U,	// AESENCrm
    138543366U,	// AESENCrr
    139198734U,	// AESIMCrm
    139329806U,	// AESIMCrr
    139198742U,	// AESKEYGENASSIST128rm
    139329814U,	// AESKEYGENASSIST128rr
    134218023U,	// AND16i16
    272630065U,	// AND16mi
    272630065U,	// AND16mi8
    272630065U,	// AND16mr
    411042097U,	// AND16ri
    411042097U,	// AND16ri8
    415236401U,	// AND16rm
    411042097U,	// AND16rr
    138543409U,	// AND16rr_REV
    134218038U,	// AND32i32
    541065521U,	// AND32mi
    541065521U,	// AND32mi8
    541065521U,	// AND32mr
    411042097U,	// AND32ri
    411042097U,	// AND32ri8
    419430705U,	// AND32rm
    411042097U,	// AND32rr
    138543409U,	// AND32rr_REV
    134218049U,	// AND64i32
    675283249U,	// AND64mi32
    675283249U,	// AND64mi8
    675283249U,	// AND64mr
    411042097U,	// AND64ri32
    411042097U,	// AND64ri8
    423625009U,	// AND64rm
    411042097U,	// AND64rr
    138543409U,	// AND64rr_REV
    134218060U,	// AND8i8
    809500977U,	// AND8mi
    809500977U,	// AND8mr
    411042097U,	// AND8ri
    427819313U,	// AND8rm
    411042097U,	// AND8rr
    138543409U,	// AND8rr_REV
    138674518U,	// ANDNPDrm
    138543446U,	// ANDNPDrr
    138674526U,	// ANDNPSrm
    138543454U,	// ANDNPSrr
    138674534U,	// ANDPDrm
    138543462U,	// ANDPDrr
    138674541U,	// ANDPSrm
    138543469U,	// ANDPSrr
    1207959924U,	// ARPL16mr
    436207988U,	// ARPL16rr
    378U,	// ATOMADD6432
    399U,	// ATOMAND16
    418U,	// ATOMAND32
    437U,	// ATOMAND64
    456U,	// ATOMAND6432
    477U,	// ATOMAND8
    495U,	// ATOMMAX16
    514U,	// ATOMMAX32
    533U,	// ATOMMAX64
    552U,	// ATOMMIN16
    571U,	// ATOMMIN32
    590U,	// ATOMMIN64
    609U,	// ATOMNAND16
    629U,	// ATOMNAND32
    649U,	// ATOMNAND64
    669U,	// ATOMNAND6432
    691U,	// ATOMNAND8
    710U,	// ATOMOR16
    728U,	// ATOMOR32
    746U,	// ATOMOR64
    764U,	// ATOMOR6432
    784U,	// ATOMOR8
    801U,	// ATOMSUB6432
    822U,	// ATOMSWAP6432
    844U,	// ATOMUMAX16
    864U,	// ATOMUMAX32
    884U,	// ATOMUMAX64
    904U,	// ATOMUMIN16
    924U,	// ATOMUMIN32
    944U,	// ATOMUMIN64
    964U,	// ATOMXOR16
    983U,	// ATOMXOR32
    1002U,	// ATOMXOR64
    1021U,	// ATOMXOR6432
    1042U,	// ATOMXOR8
    0U,	// AVX_SET0PD
    0U,	// AVX_SET0PDY
    0U,	// AVX_SET0PI
    0U,	// AVX_SET0PS
    0U,	// AVX_SET0PSY
    139068452U,	// BLENDPDrmi
    138544164U,	// BLENDPDrri
    139068461U,	// BLENDPSrmi
    138544173U,	// BLENDPSrri
    139068470U,	// BLENDVPDrm0
    138544182U,	// BLENDVPDrr0
    139068480U,	// BLENDVPSrm0
    138544192U,	// BLENDVPSrr0
    139461706U,	// BOUNDS16rm
    139592778U,	// BOUNDS32rm
    139461713U,	// BSF16rm
    139330641U,	// BSF16rr
    139592785U,	// BSF32rm
    139330641U,	// BSF32rr
    139723857U,	// BSF64rm
    139330641U,	// BSF64rr
    139461718U,	// BSR16rm
    139330646U,	// BSR16rr
    139592790U,	// BSR32rm
    139330646U,	// BSR32rr
    139723862U,	// BSR64rm
    139330646U,	// BSR64rr
    134218843U,	// BSWAP32r
    134218843U,	// BSWAP64r
    272630882U,	// BT16mi8
    272630882U,	// BT16mr
    139330658U,	// BT16ri8
    139330658U,	// BT16rr
    541066338U,	// BT32mi8
    541066338U,	// BT32mr
    139330658U,	// BT32ri8
    139330658U,	// BT32rr
    675284066U,	// BT64mi8
    675284066U,	// BT64mr
    139330658U,	// BT64ri8
    139330658U,	// BT64rr
    272630886U,	// BTC16mi8
    272630886U,	// BTC16mr
    139330662U,	// BTC16ri8
    139330662U,	// BTC16rr
    541066342U,	// BTC32mi8
    541066342U,	// BTC32mr
    139330662U,	// BTC32ri8
    139330662U,	// BTC32rr
    675284070U,	// BTC64mi8
    675284070U,	// BTC64mr
    139330662U,	// BTC64ri8
    139330662U,	// BTC64rr
    272630891U,	// BTR16mi8
    272630891U,	// BTR16mr
    139330667U,	// BTR16ri8
    139330667U,	// BTR16rr
    541066347U,	// BTR32mi8
    541066347U,	// BTR32mr
    139330667U,	// BTR32ri8
    139330667U,	// BTR32rr
    675284075U,	// BTR64mi8
    675284075U,	// BTR64mr
    139330667U,	// BTR64ri8
    139330667U,	// BTR64rr
    272630896U,	// BTS16mi8
    272630896U,	// BTS16mr
    139330672U,	// BTS16ri8
    139330672U,	// BTS16rr
    541066352U,	// BTS32mi8
    541066352U,	// BTS32mr
    139330672U,	// BTS32ri8
    139330672U,	// BTS32rr
    675284080U,	// BTS64mi8
    675284080U,	// BTS64mr
    139330672U,	// BTS64ri8
    139330672U,	// BTS64rr
    536872053U,	// CALL32m
    134218869U,	// CALL32r
    671089781U,	// CALL64m
    1342178421U,	// CALL64pcrel32
    134218869U,	// CALL64r
    1342178427U,	// CALLpcrel16
    1342178421U,	// CALLpcrel32
    1154U,	// CBW
    1158U,	// CDQ
    1162U,	// CDQE
    1167U,	// CHS_F
    0U,	// CHS_Fp32
    0U,	// CHS_Fp64
    0U,	// CHS_Fp80
    1172U,	// CLC
    1176U,	// CLD
    805307548U,	// CLFLUSH
    1189U,	// CLI
    1193U,	// CLTS
    1198U,	// CMC
    139855026U,	// CMOVA16rm
    138544306U,	// CMOVA16rr
    139986098U,	// CMOVA32rm
    138544306U,	// CMOVA32rr
    140117170U,	// CMOVA64rm
    138544306U,	// CMOVA64rr
    139855033U,	// CMOVAE16rm
    138544313U,	// CMOVAE16rr
    139986105U,	// CMOVAE32rm
    138544313U,	// CMOVAE32rr
    140117177U,	// CMOVAE64rm
    138544313U,	// CMOVAE64rr
    139855041U,	// CMOVB16rm
    138544321U,	// CMOVB16rr
    139986113U,	// CMOVB32rm
    138544321U,	// CMOVB32rr
    140117185U,	// CMOVB64rm
    138544321U,	// CMOVB64rr
    139855048U,	// CMOVBE16rm
    138544328U,	// CMOVBE16rr
    139986120U,	// CMOVBE32rm
    138544328U,	// CMOVBE32rr
    140117192U,	// CMOVBE64rm
    138544328U,	// CMOVBE64rr
    134218960U,	// CMOVBE_F
    0U,	// CMOVBE_Fp32
    0U,	// CMOVBE_Fp64
    0U,	// CMOVBE_Fp80
    134218977U,	// CMOVB_F
    0U,	// CMOVB_Fp32
    0U,	// CMOVB_Fp64
    0U,	// CMOVB_Fp80
    139855089U,	// CMOVE16rm
    138544369U,	// CMOVE16rr
    139986161U,	// CMOVE32rm
    138544369U,	// CMOVE32rr
    140117233U,	// CMOVE64rm
    138544369U,	// CMOVE64rr
    134219000U,	// CMOVE_F
    0U,	// CMOVE_Fp32
    0U,	// CMOVE_Fp64
    0U,	// CMOVE_Fp80
    139855112U,	// CMOVG16rm
    138544392U,	// CMOVG16rr
    139986184U,	// CMOVG32rm
    138544392U,	// CMOVG32rr
    140117256U,	// CMOVG64rm
    138544392U,	// CMOVG64rr
    139855119U,	// CMOVGE16rm
    138544399U,	// CMOVGE16rr
    139986191U,	// CMOVGE32rm
    138544399U,	// CMOVGE32rr
    140117263U,	// CMOVGE64rm
    138544399U,	// CMOVGE64rr
    139855127U,	// CMOVL16rm
    138544407U,	// CMOVL16rr
    139986199U,	// CMOVL32rm
    138544407U,	// CMOVL32rr
    140117271U,	// CMOVL64rm
    138544407U,	// CMOVL64rr
    139855134U,	// CMOVLE16rm
    138544414U,	// CMOVLE16rr
    139986206U,	// CMOVLE32rm
    138544414U,	// CMOVLE32rr
    140117278U,	// CMOVLE64rm
    138544414U,	// CMOVLE64rr
    134219046U,	// CMOVNBE_F
    0U,	// CMOVNBE_Fp32
    0U,	// CMOVNBE_Fp64
    0U,	// CMOVNBE_Fp80
    134219064U,	// CMOVNB_F
    0U,	// CMOVNB_Fp32
    0U,	// CMOVNB_Fp64
    0U,	// CMOVNB_Fp80
    139855177U,	// CMOVNE16rm
    138544457U,	// CMOVNE16rr
    139986249U,	// CMOVNE32rm
    138544457U,	// CMOVNE32rr
    140117321U,	// CMOVNE64rm
    138544457U,	// CMOVNE64rr
    134219089U,	// CMOVNE_F
    0U,	// CMOVNE_Fp32
    0U,	// CMOVNE_Fp64
    0U,	// CMOVNE_Fp80
    139855202U,	// CMOVNO16rm
    138544482U,	// CMOVNO16rr
    139986274U,	// CMOVNO32rm
    138544482U,	// CMOVNO32rr
    140117346U,	// CMOVNO64rm
    138544482U,	// CMOVNO64rr
    139855210U,	// CMOVNP16rm
    138544490U,	// CMOVNP16rr
    139986282U,	// CMOVNP32rm
    138544490U,	// CMOVNP32rr
    140117354U,	// CMOVNP64rm
    138544490U,	// CMOVNP64rr
    134219122U,	// CMOVNP_F
    0U,	// CMOVNP_Fp32
    0U,	// CMOVNP_Fp64
    0U,	// CMOVNP_Fp80
    139855235U,	// CMOVNS16rm
    138544515U,	// CMOVNS16rr
    139986307U,	// CMOVNS32rm
    138544515U,	// CMOVNS32rr
    140117379U,	// CMOVNS64rm
    138544515U,	// CMOVNS64rr
    139855243U,	// CMOVO16rm
    138544523U,	// CMOVO16rr
    139986315U,	// CMOVO32rm
    138544523U,	// CMOVO32rr
    140117387U,	// CMOVO64rm
    138544523U,	// CMOVO64rr
    139855250U,	// CMOVP16rm
    138544530U,	// CMOVP16rr
    139986322U,	// CMOVP32rm
    138544530U,	// CMOVP32rr
    140117394U,	// CMOVP64rm
    138544530U,	// CMOVP64rr
    134219161U,	// CMOVP_F
    0U,	// CMOVP_Fp32
    0U,	// CMOVP_Fp64
    0U,	// CMOVP_Fp80
    139855274U,	// CMOVS16rm
    138544554U,	// CMOVS16rr
    139986346U,	// CMOVS32rm
    138544554U,	// CMOVS32rr
    140117418U,	// CMOVS64rm
    138544554U,	// CMOVS64rr
    1457U,	// CMOV_FR32
    1476U,	// CMOV_FR64
    1495U,	// CMOV_GR16
    1515U,	// CMOV_GR32
    1535U,	// CMOV_GR8
    1553U,	// CMOV_RFP32
    1573U,	// CMOV_RFP64
    1593U,	// CMOV_RFP80
    1613U,	// CMOV_V2F64
    1633U,	// CMOV_V2I64
    1653U,	// CMOV_V4F32
    134219401U,	// CMP16i16
    272631443U,	// CMP16mi
    272631443U,	// CMP16mi8
    272631443U,	// CMP16mr
    139331219U,	// CMP16ri
    139331219U,	// CMP16ri8
    139462291U,	// CMP16rm
    139331219U,	// CMP16rr
    138544787U,	// CMP16rr_REV
    134219416U,	// CMP32i32
    541066899U,	// CMP32mi
    541066899U,	// CMP32mi8
    541066899U,	// CMP32mr
    139331219U,	// CMP32ri
    139331219U,	// CMP32ri8
    139593363U,	// CMP32rm
    139331219U,	// CMP32rr
    138544787U,	// CMP32rr_REV
    134219427U,	// CMP64i32
    675284627U,	// CMP64mi32
    675284627U,	// CMP64mi8
    675284627U,	// CMP64mr
    139331219U,	// CMP64ri32
    139331219U,	// CMP64ri8
    139724435U,	// CMP64rm
    139331219U,	// CMP64rr
    138544787U,	// CMP64rr_REV
    134219438U,	// CMP8i8
    809502355U,	// CMP8mi
    809502355U,	// CMP8mr
    139331219U,	// CMP8ri
    140248723U,	// CMP8rm
    139331219U,	// CMP8rr
    138544787U,	// CMP8rr_REV
    1514407608U,	// CMPPDrmi
    138675900U,	// CMPPDrmi_alt
    1648494264U,	// CMPPDrri
    138544828U,	// CMPPDrri_alt
    1518601912U,	// CMPPSrmi
    138675907U,	// CMPPSrmi_alt
    1652688568U,	// CMPPSrri
    138544835U,	// CMPPSrri_alt
    1738U,	// CMPS16
    1738U,	// CMPS32
    1743U,	// CMPS64
    1738U,	// CMPS8
    1522927288U,	// CMPSDrm
    138806997U,	// CMPSDrm_alt
    1656882872U,	// CMPSDrr
    138544853U,	// CMPSDrr_alt
    1527252664U,	// CMPSSrm
    138938076U,	// CMPSSrm_alt
    1661077176U,	// CMPSSrr
    138544860U,	// CMPSSrr_alt
    1744832227U,	// CMPXCHG16B
    272631535U,	// CMPXCHG16rm
    139331311U,	// CMPXCHG16rr
    541066991U,	// CMPXCHG32rm
    139331311U,	// CMPXCHG32rr
    675284719U,	// CMPXCHG64rm
    139331311U,	// CMPXCHG64rr
    671090424U,	// CMPXCHG8B
    809502447U,	// CMPXCHG8rm
    139331311U,	// CMPXCHG8rr
    140379907U,	// COMISDrm
    139331331U,	// COMISDrr
    140379915U,	// COMISSrm
    139331339U,	// COMISSrr
    134219539U,	// COMP_FST0r
    134219546U,	// COM_FIPr
    134219554U,	// COM_FIr
    134219561U,	// COM_FST0r
    1839U,	// COS_F
    0U,	// COS_Fp32
    0U,	// COS_Fp64
    0U,	// COS_Fp80
    1844U,	// CPUID
    1850U,	// CQO
    415237950U,	// CRC32m16
    419432254U,	// CRC32m32
    427820862U,	// CRC32m8
    411043646U,	// CRC32r16
    411043646U,	// CRC32r32
    411043646U,	// CRC32r8
    423626558U,	// CRC64m64
    427820862U,	// CRC64m8
    411043646U,	// CRC64r64
    411043646U,	// CRC64r8
    1862U,	// CS_PREFIX
    140379977U,	// CVTDQ2PDrm
    139331401U,	// CVTDQ2PDrr
    139200339U,	// CVTDQ2PSrm
    139331411U,	// CVTDQ2PSrr
    140379997U,	// CVTPD2DQrm
    139331421U,	// CVTPD2DQrr
    140380007U,	// CVTPD2PSrm
    139331431U,	// CVTPD2PSrr
    140380017U,	// CVTPS2DQrm
    139331441U,	// CVTPS2DQrr
    140511099U,	// CVTPS2PDrm
    139331451U,	// CVTPS2PDrr
    140380037U,	// CVTSD2SI64rm
    139331461U,	// CVTSD2SI64rr
    140380037U,	// CVTSD2SIrm
    139331461U,	// CVTSD2SIrr
    140511119U,	// CVTSD2SSrm
    139331471U,	// CVTSD2SSrr
    139724697U,	// CVTSI2SD64rm
    139331481U,	// CVTSI2SD64rr
    139593625U,	// CVTSI2SDrm
    139331481U,	// CVTSI2SDrr
    139724707U,	// CVTSI2SS64rm
    139331491U,	// CVTSI2SS64rr
    139593635U,	// CVTSI2SSrm
    139331491U,	// CVTSI2SSrr
    140642221U,	// CVTSS2SDrm
    139331501U,	// CVTSS2SDrr
    140642231U,	// CVTSS2SI64rm
    139331511U,	// CVTSS2SI64rr
    140642231U,	// CVTSS2SIrm
    139331511U,	// CVTSS2SIrr
    140380097U,	// CVTTPD2DQrm
    139331521U,	// CVTTPD2DQrr
    140380108U,	// CVTTPS2DQrm
    139331532U,	// CVTTPS2DQrr
    140511191U,	// CVTTSD2SI64rm
    139331543U,	// CVTTSD2SI64rr
    140511191U,	// CVTTSD2SIrm
    139331543U,	// CVTTSD2SIrr
    140642274U,	// CVTTSS2SI64rm
    139331554U,	// CVTTSS2SI64rr
    140642274U,	// CVTTSS2SIrm
    139331554U,	// CVTTSS2SIrr
    2029U,	// CWD
    2033U,	// CWDE
    2038U,	// DAA
    2042U,	// DAS
    2046U,	// DATA16_PREFIX
    268437509U,	// DEC16m
    134219781U,	// DEC16r
    536872965U,	// DEC32m
    134219781U,	// DEC32r
    268437509U,	// DEC64_16m
    134219781U,	// DEC64_16r
    536872965U,	// DEC64_32m
    134219781U,	// DEC64_32r
    671090693U,	// DEC64m
    134219781U,	// DEC64r
    805308421U,	// DEC8m
    134219781U,	// DEC8r
    268437514U,	// DIV16m
    134219786U,	// DIV16r
    536872970U,	// DIV32m
    134219786U,	// DIV32r
    671090698U,	// DIV64m
    134219786U,	// DIV64r
    805308426U,	// DIV8m
    134219786U,	// DIV8r
    138676239U,	// DIVPDrm
    138545167U,	// DIVPDrr
    138676246U,	// DIVPSrm
    138545174U,	// DIVPSrr
    939526173U,	// DIVR_F32m
    1073743901U,	// DIVR_F64m
    268437540U,	// DIVR_FI16m
    536872996U,	// DIVR_FI32m
    134219820U,	// DIVR_FPrST0
    134219805U,	// DIVR_FST0r
    0U,	// DIVR_Fp32m
    0U,	// DIVR_Fp64m
    0U,	// DIVR_Fp64m32
    0U,	// DIVR_Fp80m32
    0U,	// DIVR_Fp80m64
    0U,	// DIVR_FpI16m32
    0U,	// DIVR_FpI16m64
    0U,	// DIVR_FpI16m80
    0U,	// DIVR_FpI32m32
    0U,	// DIVR_FpI32m64
    0U,	// DIVR_FpI32m80
    163579933U,	// DIVR_FrST0
    138807348U,	// DIVSDrm
    138807348U,	// DIVSDrm_Int
    138545204U,	// DIVSDrr
    138545204U,	// DIVSDrr_Int
    138938427U,	// DIVSSrm
    138938427U,	// DIVSSrm_Int
    138545211U,	// DIVSSrr
    138545211U,	// DIVSSrr_Int
    939526210U,	// DIV_F32m
    1073743938U,	// DIV_F64m
    268437576U,	// DIV_FI16m
    536873032U,	// DIV_FI32m
    134219855U,	// DIV_FPrST0
    134219842U,	// DIV_FST0r
    0U,	// DIV_Fp32
    0U,	// DIV_Fp32m
    0U,	// DIV_Fp64
    0U,	// DIV_Fp64m
    0U,	// DIV_Fp64m32
    0U,	// DIV_Fp80
    0U,	// DIV_Fp80m32
    0U,	// DIV_Fp80m64
    0U,	// DIV_FpI16m32
    0U,	// DIV_FpI16m64
    0U,	// DIV_FpI16m80
    0U,	// DIV_FpI32m32
    0U,	// DIV_FpI32m64
    0U,	// DIV_FpI32m80
    163579970U,	// DIV_FrST0
    139069526U,	// DPPDrmi
    138545238U,	// DPPDrri
    139069532U,	// DPPSrmi
    138545244U,	// DPPSrri
    2146U,	// DS_PREFIX
    134219877U,	// EH_RETURN
    134219877U,	// EH_RETURN64
    139331708U,	// ENTER
    2179U,	// ES_PREFIX
    943720582U,	// EXTRACTPSmr
    139331718U,	// EXTRACTPSrr
    2193U,	// F2XM1
    139331735U,	// FARCALL16i
    1879050391U,	// FARCALL16m
    139331735U,	// FARCALL32i
    1879050391U,	// FARCALL32m
    1879050391U,	// FARCALL64
    139331742U,	// FARJMP16i
    1879050398U,	// FARJMP16m
    139331742U,	// FARJMP32i
    1879050398U,	// FARJMP32m
    1879050398U,	// FARJMP64
    939526308U,	// FBLDm
    939526314U,	// FBSTPm
    939525929U,	// FCOM32m
    1073743657U,	// FCOM64m
    939525907U,	// FCOMP32m
    1073743635U,	// FCOMP64m
    2225U,	// FCOMPP
    2232U,	// FDECSTP
    2240U,	// FEMMS
    134219974U,	// FFREE
    268437709U,	// FICOM16m
    536873165U,	// FICOM32m
    268437716U,	// FICOMP16m
    536873172U,	// FICOMP32m
    2268U,	// FINCSTP
    268437732U,	// FLDCW16m
    939526379U,	// FLDENVm
    2291U,	// FLDL2E
    2298U,	// FLDL2T
    2305U,	// FLDLG2
    2312U,	// FLDLN2
    2319U,	// FLDPI
    2325U,	// FNCLEX
    2332U,	// FNINIT
    2339U,	// FNOP
    268437800U,	// FNSTCW16m
    2352U,	// FNSTSW8r
    939526459U,	// FNSTSWm
    0U,	// FP32_TO_INT16_IN_MEM
    0U,	// FP32_TO_INT32_IN_MEM
    0U,	// FP32_TO_INT64_IN_MEM
    0U,	// FP64_TO_INT16_IN_MEM
    0U,	// FP64_TO_INT32_IN_MEM
    0U,	// FP64_TO_INT64_IN_MEM
    0U,	// FP80_TO_INT16_IN_MEM
    0U,	// FP80_TO_INT32_IN_MEM
    0U,	// FP80_TO_INT64_IN_MEM
    2371U,	// FPATAN
    2378U,	// FPREM
    2384U,	// FPREM1
    2391U,	// FPTAN
    2397U,	// FRNDINT
    939526501U,	// FRSTORm
    939526509U,	// FSAVEm
    2421U,	// FSCALE
    2428U,	// FSINCOS
    939526532U,	// FSTENVm
    2445U,	// FS_PREFIX
    2448U,	// FXAM
    1879050645U,	// FXRSTOR
    1879050654U,	// FXRSTOR64
    1879050664U,	// FXSAVE
    1879050672U,	// FXSAVE64
    2489U,	// FXTRACT
    2497U,	// FYL2X
    2503U,	// FYL2XP1
    0U,	// FpGET_ST0_32
    0U,	// FpGET_ST0_64
    0U,	// FpGET_ST0_80
    0U,	// FpGET_ST1_32
    0U,	// FpGET_ST1_64
    0U,	// FpGET_ST1_80
    0U,	// FpSET_ST0_32
    0U,	// FpSET_ST0_64
    0U,	// FpSET_ST0_80
    0U,	// FpSET_ST1_32
    0U,	// FpSET_ST1_64
    0U,	// FpSET_ST1_80
    138674518U,	// FsANDNPDrm
    138543446U,	// FsANDNPDrr
    138674526U,	// FsANDNPSrm
    138543454U,	// FsANDNPSrr
    138674534U,	// FsANDPDrm
    138543462U,	// FsANDPDrr
    138674541U,	// FsANDPSrm
    138543469U,	// FsANDPSrr
    0U,	// FsFLD0SD
    0U,	// FsFLD0SS
    140380623U,	// FsMOVAPDrm
    139332047U,	// FsMOVAPDrr
    140380631U,	// FsMOVAPSrm
    139332055U,	// FsMOVAPSrr
    138676703U,	// FsORPDrm
    138545631U,	// FsORPDrr
    138676709U,	// FsORPSrm
    138545637U,	// FsORPSrr
    138676715U,	// FsXORPDrm
    138545643U,	// FsXORPDrr
    138676722U,	// FsXORPSrm
    138545650U,	// FsXORPSrr
    2553U,	// GS_PREFIX
    138676732U,	// HADDPDrm
    138545660U,	// HADDPDrr
    138676740U,	// HADDPSrm
    138545668U,	// HADDPSrr
    2572U,	// HLT
    138676752U,	// HSUBPDrm
    138545680U,	// HSUBPDrr
    138676760U,	// HSUBPSrm
    138545688U,	// HSUBPSrr
    268438048U,	// IDIV16m
    134220320U,	// IDIV16r
    536873504U,	// IDIV32m
    134220320U,	// IDIV32r
    671091232U,	// IDIV64m
    134220320U,	// IDIV64r
    805308960U,	// IDIV8m
    134220320U,	// IDIV8r
    268438054U,	// ILD_F16m
    536873510U,	// ILD_F32m
    671091238U,	// ILD_F64m
    0U,	// ILD_Fp16m32
    0U,	// ILD_Fp16m64
    0U,	// ILD_Fp16m80
    0U,	// ILD_Fp32m32
    0U,	// ILD_Fp32m64
    0U,	// ILD_Fp32m80
    0U,	// ILD_Fp64m32
    0U,	// ILD_Fp64m64
    0U,	// ILD_Fp64m80
    268438060U,	// IMUL16m
    134220332U,	// IMUL16r
    139856428U,	// IMUL16rm
    139463212U,	// IMUL16rmi
    139463212U,	// IMUL16rmi8
    138545708U,	// IMUL16rr
    139332140U,	// IMUL16rri
    139332140U,	// IMUL16rri8
    536873516U,	// IMUL32m
    134220332U,	// IMUL32r
    139987500U,	// IMUL32rm
    139594284U,	// IMUL32rmi
    139594284U,	// IMUL32rmi8
    138545708U,	// IMUL32rr
    139332140U,	// IMUL32rri
    139332140U,	// IMUL32rri8
    671091244U,	// IMUL64m
    134220332U,	// IMUL64r
    140118572U,	// IMUL64rm
    139725356U,	// IMUL64rmi32
    139725356U,	// IMUL64rmi8
    138545708U,	// IMUL64rr
    139332140U,	// IMUL64rri32
    139332140U,	// IMUL64rri8
    805308972U,	// IMUL8m
    134220332U,	// IMUL8r
    2610U,	// IN16
    134220342U,	// IN16ri
    2623U,	// IN16rr
    2610U,	// IN32
    134220363U,	// IN32ri
    2645U,	// IN32rr
    2610U,	// IN8
    134220386U,	// IN8ri
    2667U,	// IN8rr
    268438135U,	// INC16m
    134220407U,	// INC16r
    536873591U,	// INC32m
    134220407U,	// INC32r
    268438135U,	// INC64_16m
    134220407U,	// INC64_16r
    536873591U,	// INC64_32m
    134220407U,	// INC64_32r
    671091319U,	// INC64m
    134220407U,	// INC64r
    805309047U,	// INC8m
    134220407U,	// INC8r
    138939004U,	// INSERTPSrm
    138545788U,	// INSERTPSrr
    134220422U,	// INT
    2699U,	// INT3
    2704U,	// INTO
    2709U,	// INVD
    2714U,	// INVEPT
    805309089U,	// INVLPG
    2729U,	// INVVPID
    2737U,	// IRET16
    2743U,	// IRET32
    2749U,	// IRET64
    268438211U,	// ISTT_FP16m
    536873667U,	// ISTT_FP32m
    671091395U,	// ISTT_FP64m
    0U,	// ISTT_Fp16m32
    0U,	// ISTT_Fp16m64
    0U,	// ISTT_Fp16m80
    0U,	// ISTT_Fp32m32
    0U,	// ISTT_Fp32m64
    0U,	// ISTT_Fp32m80
    0U,	// ISTT_Fp64m32
    0U,	// ISTT_Fp64m64
    0U,	// ISTT_Fp64m80
    268438219U,	// IST_F16m
    536873675U,	// IST_F32m
    268438225U,	// IST_FP16m
    536873681U,	// IST_FP32m
    671091409U,	// IST_FP64m
    0U,	// IST_Fp16m32
    0U,	// IST_Fp16m64
    0U,	// IST_Fp16m80
    0U,	// IST_Fp32m32
    0U,	// IST_Fp32m64
    0U,	// IST_Fp32m80
    0U,	// IST_Fp64m32
    0U,	// IST_Fp64m64
    0U,	// IST_Fp64m80
    1523058360U,	// Int_CMPSDrm
    1656882872U,	// Int_CMPSDrr
    1527252664U,	// Int_CMPSSrm
    1661077176U,	// Int_CMPSSrr
    140379907U,	// Int_COMISDrm
    139331331U,	// Int_COMISDrr
    140379915U,	// Int_COMISSrm
    139331339U,	// Int_COMISSrr
    139724617U,	// Int_CVTDQ2PDrm
    139331401U,	// Int_CVTDQ2PDrr
    139200339U,	// Int_CVTDQ2PSrm
    139331411U,	// Int_CVTDQ2PSrr
    140379997U,	// Int_CVTPD2DQrm
    139331421U,	// Int_CVTPD2DQrr
    140380007U,	// Int_CVTPD2PSrm
    139331431U,	// Int_CVTPD2PSrr
    140380017U,	// Int_CVTPS2DQrm
    139331441U,	// Int_CVTPS2DQrr
    140511099U,	// Int_CVTPS2PDrm
    139331451U,	// Int_CVTPS2PDrr
    138807183U,	// Int_CVTSD2SSrm
    138545039U,	// Int_CVTSD2SSrr
    140117913U,	// Int_CVTSI2SD64rm
    138545049U,	// Int_CVTSI2SD64rr
    139986841U,	// Int_CVTSI2SDrm
    138545049U,	// Int_CVTSI2SDrr
    140117923U,	// Int_CVTSI2SS64rm
    138545059U,	// Int_CVTSI2SS64rr
    139986851U,	// Int_CVTSI2SSrm
    138545059U,	// Int_CVTSI2SSrr
    138938285U,	// Int_CVTSS2SDrm
    138545069U,	// Int_CVTSS2SDrr
    140642231U,	// Int_CVTSS2SI64rm
    139331511U,	// Int_CVTSS2SI64rr
    140642231U,	// Int_CVTSS2SIrm
    139331511U,	// Int_CVTSS2SIrr
    140380119U,	// Int_CVTTSD2SI64rm
    139331543U,	// Int_CVTTSD2SI64rr
    140380119U,	// Int_CVTTSD2SIrm
    139331543U,	// Int_CVTTSD2SIrr
    140642274U,	// Int_CVTTSS2SI64rm
    139331554U,	// Int_CVTTSS2SI64rr
    140642274U,	// Int_CVTTSS2SIrm
    139331554U,	// Int_CVTTSS2SIrr
    2776U,	// Int_MemBarrier
    134220516U,	// Int_MemBarrierNoSSE64
    140380918U,	// Int_UCOMISDrm
    139332342U,	// Int_UCOMISDrr
    140380927U,	// Int_UCOMISSrm
    139332351U,	// Int_UCOMISSrr
    1523452680U,	// Int_VCMPSDrm
    1657670408U,	// Int_VCMPSDrr
    1527646984U,	// Int_VCMPSSrm
    1661864712U,	// Int_VCMPSSrr
    140380941U,	// Int_VCOMISDrm
    139332365U,	// Int_VCOMISDrr
    140380950U,	// Int_VCOMISSrm
    139332374U,	// Int_VCOMISSrr
    139725599U,	// Int_VCVTDQ2PDrm
    139332383U,	// Int_VCVTDQ2PDrr
    139201322U,	// Int_VCVTDQ2PSrm
    139332394U,	// Int_VCVTDQ2PSrr
    140380981U,	// Int_VCVTPD2DQrm
    139332405U,	// Int_VCVTPD2DQrr
    140380992U,	// Int_VCVTPD2PSrm
    139332416U,	// Int_VCVTPD2PSrr
    140381003U,	// Int_VCVTPS2DQrm
    139332427U,	// Int_VCVTPS2DQrr
    140512086U,	// Int_VCVTPS2PDrm
    139332438U,	// Int_VCVTPS2PDrr
    140381025U,	// Int_VCVTSD2SI64rm
    139332449U,	// Int_VCVTSD2SI64rr
    140381025U,	// Int_VCVTSD2SIrm
    139332449U,	// Int_VCVTSD2SIrr
    139332460U,	// Int_VCVTSD2SSrm
    139332460U,	// Int_VCVTSD2SSrr
    139332471U,	// Int_VCVTSI2SD64rm
    139332471U,	// Int_VCVTSI2SD64rr
    139332471U,	// Int_VCVTSI2SDrm
    139332471U,	// Int_VCVTSI2SDrr
    139332482U,	// Int_VCVTSI2SS64rm
    139332482U,	// Int_VCVTSI2SS64rr
    139332482U,	// Int_VCVTSI2SSrm
    139332482U,	// Int_VCVTSI2SSrr
    139332493U,	// Int_VCVTSS2SDrm
    139332493U,	// Int_VCVTSS2SDrr
    140643224U,	// Int_VCVTSS2SI64rm
    139332504U,	// Int_VCVTSS2SI64rr
    140643224U,	// Int_VCVTSS2SIrm
    139332504U,	// Int_VCVTSS2SIrr
    140381091U,	// Int_VCVTTPD2DQrm
    139332515U,	// Int_VCVTTPD2DQrr
    140381103U,	// Int_VCVTTPS2DQrm
    139332527U,	// Int_VCVTTPS2DQrr
    140381115U,	// Int_VCVTTSD2SI64rm
    139332539U,	// Int_VCVTTSD2SI64rr
    140381115U,	// Int_VCVTTSD2SIrm
    139332539U,	// Int_VCVTTSD2SIrr
    140643271U,	// Int_VCVTTSS2SI64rm
    139332551U,	// Int_VCVTTSS2SI64rr
    140643271U,	// Int_VCVTTSS2SIrm
    139332551U,	// Int_VCVTTSS2SIrr
    140381139U,	// Int_VUCOMISDrm
    139332563U,	// Int_VUCOMISDrr
    140381149U,	// Int_VUCOMISSrm
    139332573U,	// Int_VUCOMISSrr
    1342180327U,	// JAE_1
    1342180327U,	// JAE_4
    1342180332U,	// JA_1
    1342180332U,	// JA_4
    1342180336U,	// JBE_1
    1342180336U,	// JBE_4
    1342180341U,	// JB_1
    1342180341U,	// JB_4
    1342180345U,	// JCXZ
    1342180351U,	// JECXZ_32
    1342180351U,	// JECXZ_64
    1342180358U,	// JE_1
    1342180358U,	// JE_4
    1342180362U,	// JGE_1
    1342180362U,	// JGE_4
    1342180367U,	// JG_1
    1342180367U,	// JG_4
    1342180371U,	// JLE_1
    1342180371U,	// JLE_4
    1342180376U,	// JL_1
    1342180376U,	// JL_4
    536874012U,	// JMP32m
    134220828U,	// JMP32r
    671091740U,	// JMP64m
    1342180380U,	// JMP64pcrel32
    134220828U,	// JMP64r
    1342180380U,	// JMP_1
    1342180380U,	// JMP_4
    1342180385U,	// JNE_1
    1342180385U,	// JNE_4
    1342180390U,	// JNO_1
    1342180390U,	// JNO_4
    1342180395U,	// JNP_1
    1342180395U,	// JNP_4
    1342180400U,	// JNS_1
    1342180400U,	// JNS_4
    1342180405U,	// JO_1
    1342180405U,	// JO_4
    1342180409U,	// JP_1
    1342180409U,	// JP_4
    1342180413U,	// JRCXZ
    1342180420U,	// JS_1
    1342180420U,	// JS_4
    3144U,	// LAHF
    139463757U,	// LAR16rm
    139332685U,	// LAR16rr
    139463757U,	// LAR32rm
    139332685U,	// LAR32rr
    139463757U,	// LAR64rm
    139332685U,	// LAR64rr
    272632914U,	// LCMPXCHG16
    541068370U,	// LCMPXCHG32
    2013269089U,	// LCMPXCHG64
    809503826U,	// LCMPXCHG8
    671091825U,	// LCMPXCHG8B
    139201666U,	// LDDQUrm
    536874121U,	// LDMXCSR
    140774546U,	// LDS16rm
    140774546U,	// LDS32rm
    3223U,	// LD_F0
    3228U,	// LD_F1
    939527329U,	// LD_F32m
    1073745057U,	// LD_F64m
    2147486881U,	// LD_F80m
    0U,	// LD_Fp032
    0U,	// LD_Fp064
    0U,	// LD_Fp080
    0U,	// LD_Fp132
    0U,	// LD_Fp164
    0U,	// LD_Fp180
    0U,	// LD_Fp32m
    0U,	// LD_Fp32m64
    0U,	// LD_Fp32m80
    0U,	// LD_Fp64m
    0U,	// LD_Fp64m80
    0U,	// LD_Fp80m
    134220961U,	// LD_Frr
    139594918U,	// LEA16r
    139594918U,	// LEA32r
    139594918U,	// LEA64_32r
    139725990U,	// LEA64r
    3243U,	// LEAVE
    3243U,	// LEAVE64
    140774577U,	// LES16rm
    140774577U,	// LES32rm
    3254U,	// LFENCE
    140774589U,	// LFS16rm
    140774589U,	// LFS32rm
    140774589U,	// LFS64rm
    1879051458U,	// LGDT16m
    1879051465U,	// LGDTm
    140774607U,	// LGS16rm
    140774607U,	// LGS32rm
    140774607U,	// LGS64rm
    1879051476U,	// LIDT16m
    1879051483U,	// LIDTm
    268438753U,	// LLDT16m
    134221025U,	// LLDT16r
    268438759U,	// LMSW16m
    134221031U,	// LMSW16r
    272633069U,	// LOCK_ADD16mi
    272633069U,	// LOCK_ADD16mi8
    272633069U,	// LOCK_ADD16mr
    541068525U,	// LOCK_ADD32mi
    541068525U,	// LOCK_ADD32mi8
    541068525U,	// LOCK_ADD32mr
    675286253U,	// LOCK_ADD64mi32
    675286253U,	// LOCK_ADD64mi8
    675286253U,	// LOCK_ADD64mr
    809503981U,	// LOCK_ADD8mi
    809503981U,	// LOCK_ADD8mr
    268438776U,	// LOCK_DEC16m
    536874232U,	// LOCK_DEC32m
    671091960U,	// LOCK_DEC64m
    805309688U,	// LOCK_DEC8m
    268438787U,	// LOCK_INC16m
    536874243U,	// LOCK_INC32m
    671091971U,	// LOCK_INC64m
    805309699U,	// LOCK_INC8m
    3342U,	// LOCK_PREFIX
    272633107U,	// LOCK_SUB16mi
    272633107U,	// LOCK_SUB16mi8
    272633107U,	// LOCK_SUB16mr
    541068563U,	// LOCK_SUB32mi
    541068563U,	// LOCK_SUB32mi8
    541068563U,	// LOCK_SUB32mr
    675286291U,	// LOCK_SUB64mi32
    675286291U,	// LOCK_SUB64mi8
    675286291U,	// LOCK_SUB64mr
    809504019U,	// LOCK_SUB8mi
    809504019U,	// LOCK_SUB8mr
    3358U,	// LODSB
    3364U,	// LODSD
    3370U,	// LODSQ
    3376U,	// LODSW
    1342180662U,	// LOOP
    1342180668U,	// LOOPE
    1342180675U,	// LOOPNE
    134221131U,	// LRETI
    134221137U,	// LRETIW
    3416U,	// LRETL
    3422U,	// LRETQ
    139464036U,	// LSL16rm
    139332964U,	// LSL16rr
    139595108U,	// LSL32rm
    139332964U,	// LSL32rr
    139726180U,	// LSL64rm
    139332964U,	// LSL64rr
    140774761U,	// LSS16rm
    140774761U,	// LSS32rm
    140774761U,	// LSS64rm
    3438U,	// LTRm
    3438U,	// LTRr
    2281704819U,	// LXADD16
    2415922547U,	// LXADD32
    423628147U,	// LXADD64
    2550140275U,	// LXADD8
    139332991U,	// MASKMOVDQU
    139332991U,	// MASKMOVDQU64
    138677643U,	// MAXPDrm
    138677643U,	// MAXPDrm_Int
    138546571U,	// MAXPDrr
    138546571U,	// MAXPDrr_Int
    138677650U,	// MAXPSrm
    138677650U,	// MAXPSrm_Int
    138546578U,	// MAXPSrr
    138546578U,	// MAXPSrr_Int
    138808729U,	// MAXSDrm
    138808729U,	// MAXSDrm_Int
    138546585U,	// MAXSDrr
    138546585U,	// MAXSDrr_Int
    138939808U,	// MAXSSrm
    138939808U,	// MAXSSrm_Int
    138546592U,	// MAXSSrr
    138546592U,	// MAXSSrr_Int
    3495U,	// MFENCE
    138677678U,	// MINPDrm
    138677678U,	// MINPDrm_Int
    138546606U,	// MINPDrr
    138546606U,	// MINPDrr_Int
    138677685U,	// MINPSrm
    138677685U,	// MINPSrm_Int
    138546613U,	// MINPSrr
    138546613U,	// MINPSrr_Int
    138808764U,	// MINSDrm
    138808764U,	// MINSDrm_Int
    138546620U,	// MINSDrr
    138546620U,	// MINSDrr_Int
    138939843U,	// MINSSrm
    138939843U,	// MINSSrm_Int
    138546627U,	// MINSSrr
    138546627U,	// MINSSrr_Int
    140381642U,	// MMX_CVTPD2PIirm
    139333066U,	// MMX_CVTPD2PIirr
    139726292U,	// MMX_CVTPI2PDirm
    139333076U,	// MMX_CVTPI2PDirr
    140119518U,	// MMX_CVTPI2PSirm
    138546654U,	// MMX_CVTPI2PSirr
    140512744U,	// MMX_CVTPS2PIirm
    139333096U,	// MMX_CVTPS2PIirr
    140381682U,	// MMX_CVTTPD2PIirm
    139333106U,	// MMX_CVTTPD2PIirr
    140512765U,	// MMX_CVTTPS2PIirm
    139333117U,	// MMX_CVTTPS2PIirr
    3592U,	// MMX_EMMS
    139333133U,	// MMX_MASKMOVQ
    139333133U,	// MMX_MASKMOVQ64
    139333143U,	// MMX_MOVD64from64rr
    139333143U,	// MMX_MOVD64grr
    541068823U,	// MMX_MOVD64mr
    139595287U,	// MMX_MOVD64rm
    139333143U,	// MMX_MOVD64rr
    139333143U,	// MMX_MOVD64rrv164
    139333143U,	// MMX_MOVD64to64rr
    139333149U,	// MMX_MOVDQ2Qrr
    139333149U,	// MMX_MOVFR642Qrr
    675286566U,	// MMX_MOVNTQmr
    139333166U,	// MMX_MOVQ2DQrr
    139333166U,	// MMX_MOVQ2FR64rr
    675286583U,	// MMX_MOVQ64mr
    139726391U,	// MMX_MOVQ64rm
    139333175U,	// MMX_MOVQ64rr
    139595287U,	// MMX_MOVZDI2PDIrm
    139333143U,	// MMX_MOVZDI2PDIrr
    139726397U,	// MMX_PABSBrm64
    139333181U,	// MMX_PABSBrr64
    139726404U,	// MMX_PABSDrm64
    139333188U,	// MMX_PABSDrr64
    139726411U,	// MMX_PABSWrm64
    139333195U,	// MMX_PABSWrr64
    140119634U,	// MMX_PACKSSDWirm
    138546770U,	// MMX_PACKSSDWirr
    140119644U,	// MMX_PACKSSWBirm
    138546780U,	// MMX_PACKSSWBirr
    140119654U,	// MMX_PACKUSWBirm
    138546790U,	// MMX_PACKUSWBirr
    140119664U,	// MMX_PADDBirm
    138546800U,	// MMX_PADDBirr
    140119671U,	// MMX_PADDDirm
    138546807U,	// MMX_PADDDirr
    140119678U,	// MMX_PADDQirm
    138546814U,	// MMX_PADDQirr
    140119685U,	// MMX_PADDSBirm
    138546821U,	// MMX_PADDSBirr
    140119693U,	// MMX_PADDSWirm
    138546829U,	// MMX_PADDSWirr
    140119701U,	// MMX_PADDUSBirm
    138546837U,	// MMX_PADDUSBirr
    140119710U,	// MMX_PADDUSWirm
    138546846U,	// MMX_PADDUSWirr
    140119719U,	// MMX_PADDWirm
    138546855U,	// MMX_PADDWirr
    140119726U,	// MMX_PALIGNR64irm
    138546862U,	// MMX_PALIGNR64irr
    140119735U,	// MMX_PANDNirm
    138546871U,	// MMX_PANDNirr
    140119742U,	// MMX_PANDirm
    138546878U,	// MMX_PANDirr
    140119748U,	// MMX_PAVGBirm
    138546884U,	// MMX_PAVGBirr
    140119755U,	// MMX_PAVGWirm
    138546891U,	// MMX_PAVGWirr
    140119762U,	// MMX_PCMPEQBirm
    138546898U,	// MMX_PCMPEQBirr
    140119771U,	// MMX_PCMPEQDirm
    138546907U,	// MMX_PCMPEQDirr
    140119780U,	// MMX_PCMPEQWirm
    138546916U,	// MMX_PCMPEQWirr
    140119789U,	// MMX_PCMPGTBirm
    138546925U,	// MMX_PCMPGTBirr
    140119798U,	// MMX_PCMPGTDirm
    138546934U,	// MMX_PCMPGTDirr
    140119807U,	// MMX_PCMPGTWirm
    138546943U,	// MMX_PCMPGTWirr
    139333384U,	// MMX_PEXTRWirri
    140119824U,	// MMX_PHADDSWrm64
    138546960U,	// MMX_PHADDSWrr64
    140119833U,	// MMX_PHADDWrm64
    138546969U,	// MMX_PHADDWrr64
    140119841U,	// MMX_PHADDrm64
    138546977U,	// MMX_PHADDrr64
    140119849U,	// MMX_PHSUBDrm64
    138546985U,	// MMX_PHSUBDrr64
    140119857U,	// MMX_PHSUBSWrm64
    138546993U,	// MMX_PHSUBSWrr64
    140119866U,	// MMX_PHSUBWrm64
    138547002U,	// MMX_PHSUBWrr64
    139857730U,	// MMX_PINSRWirmi
    138547010U,	// MMX_PINSRWirri
    140119882U,	// MMX_PMADDUBSWrm64
    138547018U,	// MMX_PMADDUBSWrr64
    140119893U,	// MMX_PMADDWDirm
    138547029U,	// MMX_PMADDWDirr
    140119902U,	// MMX_PMAXSWirm
    138547038U,	// MMX_PMAXSWirr
    140119910U,	// MMX_PMAXUBirm
    138547046U,	// MMX_PMAXUBirr
    140119918U,	// MMX_PMINSWirm
    138547054U,	// MMX_PMINSWirr
    140119926U,	// MMX_PMINUBirm
    138547062U,	// MMX_PMINUBirr
    139333502U,	// MMX_PMOVMSKBrr
    140119944U,	// MMX_PMULHRSWrm64
    138547080U,	// MMX_PMULHRSWrr64
    140119954U,	// MMX_PMULHUWirm
    138547090U,	// MMX_PMULHUWirr
    140119963U,	// MMX_PMULHWirm
    138547099U,	// MMX_PMULHWirr
    140119971U,	// MMX_PMULLWirm
    138547107U,	// MMX_PMULLWirr
    140119979U,	// MMX_PMULUDQirm
    138547115U,	// MMX_PMULUDQirr
    140119988U,	// MMX_PORirm
    138547124U,	// MMX_PORirr
    140119993U,	// MMX_PSADBWirm
    138547129U,	// MMX_PSADBWirr
    140120001U,	// MMX_PSHUFBrm64
    138547137U,	// MMX_PSHUFBrr64
    139726793U,	// MMX_PSHUFWmi
    139333577U,	// MMX_PSHUFWri
    140120017U,	// MMX_PSIGNBrm64
    138547153U,	// MMX_PSIGNBrr64
    140120025U,	// MMX_PSIGNDrm64
    138547161U,	// MMX_PSIGNDrr64
    140120033U,	// MMX_PSIGNWrm64
    138547169U,	// MMX_PSIGNWrr64
    138547177U,	// MMX_PSLLDri
    140120041U,	// MMX_PSLLDrm
    138547177U,	// MMX_PSLLDrr
    138547184U,	// MMX_PSLLQri
    140120048U,	// MMX_PSLLQrm
    138547184U,	// MMX_PSLLQrr
    138547191U,	// MMX_PSLLWri
    140120055U,	// MMX_PSLLWrm
    138547191U,	// MMX_PSLLWrr
    138547198U,	// MMX_PSRADri
    140120062U,	// MMX_PSRADrm
    138547198U,	// MMX_PSRADrr
    138547205U,	// MMX_PSRAWri
    140120069U,	// MMX_PSRAWrm
    138547205U,	// MMX_PSRAWrr
    138547212U,	// MMX_PSRLDri
    140120076U,	// MMX_PSRLDrm
    138547212U,	// MMX_PSRLDrr
    138547219U,	// MMX_PSRLQri
    140120083U,	// MMX_PSRLQrm
    138547219U,	// MMX_PSRLQrr
    138547226U,	// MMX_PSRLWri
    140120090U,	// MMX_PSRLWrm
    138547226U,	// MMX_PSRLWrr
    140120097U,	// MMX_PSUBBirm
    138547233U,	// MMX_PSUBBirr
    140120104U,	// MMX_PSUBDirm
    138547240U,	// MMX_PSUBDirr
    140120111U,	// MMX_PSUBQirm
    138547247U,	// MMX_PSUBQirr
    140120118U,	// MMX_PSUBSBirm
    138547254U,	// MMX_PSUBSBirr
    140120126U,	// MMX_PSUBSWirm
    138547262U,	// MMX_PSUBSWirr
    140120134U,	// MMX_PSUBUSBirm
    138547270U,	// MMX_PSUBUSBirr
    140120143U,	// MMX_PSUBUSWirm
    138547279U,	// MMX_PSUBUSWirr
    140120152U,	// MMX_PSUBWirm
    138547288U,	// MMX_PSUBWirr
    140120159U,	// MMX_PUNPCKHBWirm
    138547295U,	// MMX_PUNPCKHBWirr
    140120170U,	// MMX_PUNPCKHDQirm
    138547306U,	// MMX_PUNPCKHDQirr
    140120181U,	// MMX_PUNPCKHWDirm
    138547317U,	// MMX_PUNPCKHWDirr
    140120192U,	// MMX_PUNPCKLBWirm
    138547328U,	// MMX_PUNPCKLBWirr
    140120203U,	// MMX_PUNPCKLDQirm
    138547339U,	// MMX_PUNPCKLDQirr
    140120214U,	// MMX_PUNPCKLWDirm
    138547350U,	// MMX_PUNPCKLWDirr
    140120225U,	// MMX_PXORirm
    138547361U,	// MMX_PXORirr
    0U,	// MONITOR
    4263U,	// MONITORrrr
    1396707503U,	// MOV16ao16
    272634031U,	// MOV16mi
    272634031U,	// MOV16mr
    272634031U,	// MOV16ms
    1342181556U,	// MOV16o16a
    0U,	// MOV16r0
    139333807U,	// MOV16ri
    139464879U,	// MOV16rm
    139333807U,	// MOV16rr
    139333807U,	// MOV16rr_REV
    139333807U,	// MOV16rs
    139464879U,	// MOV16sm
    139333807U,	// MOV16sr
    1400901807U,	// MOV32ao32
    139333807U,	// MOV32cr
    139333807U,	// MOV32dr
    541069487U,	// MOV32mi
    541069487U,	// MOV32mr
    541069487U,	// MOV32ms
    1342181566U,	// MOV32o32a
    0U,	// MOV32r0
    139333807U,	// MOV32rc
    139333807U,	// MOV32rd
    139333807U,	// MOV32ri
    139595951U,	// MOV32rm
    139333807U,	// MOV32rr
    139333807U,	// MOV32rr_REV
    139333807U,	// MOV32rs
    139595951U,	// MOV32sm
    139333807U,	// MOV32sr
    139333807U,	// MOV64cr
    139333807U,	// MOV64dr
    675287215U,	// MOV64mi32
    675287215U,	// MOV64mr
    675287215U,	// MOV64ms
    0U,	// MOV64r0
    139333807U,	// MOV64rc
    139333807U,	// MOV64rd
    139333833U,	// MOV64ri
    139333807U,	// MOV64ri32
    0U,	// MOV64ri64i32
    139727023U,	// MOV64rm
    139333807U,	// MOV64rr
    139333807U,	// MOV64rr_REV
    139333807U,	// MOV64rs
    139727023U,	// MOV64sm
    139333807U,	// MOV64sr
    139333175U,	// MOV64toPQIrr
    139726391U,	// MOV64toSDrm
    139333175U,	// MOV64toSDrr
    1405096111U,	// MOV8ao8
    809504943U,	// MOV8mi
    809504943U,	// MOV8mr
    809504943U,	// MOV8mr_NOREX
    1342181585U,	// MOV8o8a
    0U,	// MOV8r0
    139333807U,	// MOV8ri
    140251311U,	// MOV8rm
    140251311U,	// MOV8rm_NOREX
    139333807U,	// MOV8rr
    139333807U,	// MOV8rr_NOREX
    139333807U,	// MOV8rr_REV
    2684357071U,	// MOVAPDmr
    140380623U,	// MOVAPDrm
    139332047U,	// MOVAPDrr
    2684357079U,	// MOVAPSmr
    140380631U,	// MOVAPSrm
    139332055U,	// MOVAPSrr
    140513499U,	// MOVDDUPrm
    139333851U,	// MOVDDUPrr
    139595287U,	// MOVDI2PDIrm
    139333143U,	// MOVDI2PDIrr
    139595287U,	// MOVDI2SSrm
    139333143U,	// MOVDI2SSrr
    1749029092U,	// MOVDQAmr
    139202788U,	// MOVDQArm
    139333860U,	// MOVDQArr
    1749029100U,	// MOVDQUmr
    1749029100U,	// MOVDQUmr_Int
    139202796U,	// MOVDQUrm
    139202796U,	// MOVDQUrm_Int
    139333868U,	// MOVDQUrr
    138547444U,	// MOVHLPSrr
    1077940477U,	// MOVHPDmr
    138809597U,	// MOVHPDrm
    1077940485U,	// MOVHPSmr
    138809605U,	// MOVHPSrm
    138547469U,	// MOVLHPSrr
    1077940502U,	// MOVLPDmr
    138809622U,	// MOVLPDrm
    1077940510U,	// MOVLPSmr
    138809630U,	// MOVLPSrm
    675286583U,	// MOVLQ128mr
    139333926U,	// MOVMSKPDrr32
    139333926U,	// MOVMSKPDrr64
    139333936U,	// MOVMSKPSrr32
    139333936U,	// MOVMSKPSrr64
    139202874U,	// MOVNTDQArm
    2684358980U,	// MOVNTDQ_64mr
    2684358980U,	// MOVNTDQmr
    2684358980U,	// MOVNTDQmr_Int
    675287373U,	// MOVNTI_64mr
    541069645U,	// MOVNTImr
    541069645U,	// MOVNTImr_Int
    2684358997U,	// MOVNTPDmr
    1749029205U,	// MOVNTPDmr_Int
    2684359006U,	// MOVNTPSmr
    1749029214U,	// MOVNTPSmr_Int
    0U,	// MOVPC32r
    541068823U,	// MOVPDI2DImr
    139333143U,	// MOVPDI2DIrr
    675286583U,	// MOVPQI2QImr
    139333175U,	// MOVPQIto64rr
    139726391U,	// MOVQI2PQIrm
    139333175U,	// MOVQxrxr
    4455U,	// MOVSB
    4456U,	// MOVSD
    1077940590U,	// MOVSDmr
    140513646U,	// MOVSDrm
    138547566U,	// MOVSDrr
    675286583U,	// MOVSDto64mr
    139333175U,	// MOVSDto64rr
    140382581U,	// MOVSHDUPrm
    139334005U,	// MOVSHDUPrr
    140382591U,	// MOVSLDUPrm
    139334015U,	// MOVSLDUPrr
    4489U,	// MOVSQ
    541068823U,	// MOVSS2DImr
    139333143U,	// MOVSS2DIrr
    943722895U,	// MOVSSmr
    140644751U,	// MOVSSrm
    138547599U,	// MOVSSrr
    4455U,	// MOVSW
    0U,	// MOVSX16rm8
    140251542U,	// MOVSX16rm8W
    0U,	// MOVSX16rr8
    139334038U,	// MOVSX16rr8W
    139465110U,	// MOVSX32rm16
    140251542U,	// MOVSX32rm8
    139334038U,	// MOVSX32rr16
    139334038U,	// MOVSX32rr8
    139465110U,	// MOVSX64rm16
    139596189U,	// MOVSX64rm32
    140251542U,	// MOVSX64rm8
    139334038U,	// MOVSX64rr16
    139334045U,	// MOVSX64rr32
    139334038U,	// MOVSX64rr8
    2684359077U,	// MOVUPDmr
    2684359077U,	// MOVUPDmr_Int
    140382629U,	// MOVUPDrm
    140382629U,	// MOVUPDrm_Int
    139334053U,	// MOVUPDrr
    2684359085U,	// MOVUPSmr
    2684359085U,	// MOVUPSmr_Int
    140382637U,	// MOVUPSrm
    140382637U,	// MOVUPSrm_Int
    139334061U,	// MOVUPSrr
    139595287U,	// MOVZDI2PDIrm
    139333143U,	// MOVZDI2PDIrr
    139202103U,	// MOVZPQILo2PQIrm
    139333175U,	// MOVZPQILo2PQIrr
    139726391U,	// MOVZQI2PQIrm
    139333175U,	// MOVZQI2PQIrr
    0U,	// MOVZX16rm8
    140251573U,	// MOVZX16rm8W
    0U,	// MOVZX16rr8
    139334069U,	// MOVZX16rr8W
    140251573U,	// MOVZX32_NOREXrm8
    139334069U,	// MOVZX32_NOREXrr8
    139465141U,	// MOVZX32rm16
    140251573U,	// MOVZX32rm8
    139334069U,	// MOVZX32rr16
    139334069U,	// MOVZX32rr8
    0U,	// MOVZX64rm16
    139465141U,	// MOVZX64rm16_Q
    0U,	// MOVZX64rm32
    0U,	// MOVZX64rm8
    140251573U,	// MOVZX64rm8_Q
    0U,	// MOVZX64rr16
    139334069U,	// MOVZX64rr16_Q
    0U,	// MOVZX64rr32
    0U,	// MOVZX64rr8
    139334069U,	// MOVZX64rr8_Q
    0U,	// MOV_Fp3232
    0U,	// MOV_Fp3264
    0U,	// MOV_Fp3280
    0U,	// MOV_Fp6432
    0U,	// MOV_Fp6464
    0U,	// MOV_Fp6480
    0U,	// MOV_Fp8032
    0U,	// MOV_Fp8064
    0U,	// MOV_Fp8080
    139071932U,	// MPSADBWrmi
    138547644U,	// MPSADBWrri
    268440005U,	// MUL16m
    134222277U,	// MUL16r
    536875461U,	// MUL32m
    134222277U,	// MUL32r
    671093189U,	// MUL64m
    134222277U,	// MUL64r
    805310917U,	// MUL8m
    134222277U,	// MUL8r
    138678730U,	// MULPDrm
    138547658U,	// MULPDrr
    138678737U,	// MULPSrm
    138547665U,	// MULPSrr
    138809816U,	// MULSDrm
    138809816U,	// MULSDrm_Int
    138547672U,	// MULSDrr
    138547672U,	// MULSDrr_Int
    138940895U,	// MULSSrm
    138940895U,	// MULSSrm_Int
    138547679U,	// MULSSrr
    138547679U,	// MULSSrr_Int
    939528678U,	// MUL_F32m
    1073746406U,	// MUL_F64m
    268440044U,	// MUL_FI16m
    536875500U,	// MUL_FI32m
    134222323U,	// MUL_FPrST0
    134222310U,	// MUL_FST0r
    0U,	// MUL_Fp32
    0U,	// MUL_Fp32m
    0U,	// MUL_Fp64
    0U,	// MUL_Fp64m
    0U,	// MUL_Fp64m32
    0U,	// MUL_Fp80
    0U,	// MUL_Fp80m32
    0U,	// MUL_Fp80m64
    0U,	// MUL_FpI16m32
    0U,	// MUL_FpI16m64
    0U,	// MUL_FpI16m80
    0U,	// MUL_FpI32m32
    0U,	// MUL_FpI32m64
    0U,	// MUL_FpI32m80
    163582438U,	// MUL_FrST0
    0U,	// MWAIT
    4602U,	// MWAITrr
    268440064U,	// NEG16m
    134222336U,	// NEG16r
    536875520U,	// NEG32m
    134222336U,	// NEG32r
    671093248U,	// NEG64m
    134222336U,	// NEG64r
    805310976U,	// NEG8m
    134222336U,	// NEG8r
    4613U,	// NOOP
    536875529U,	// NOOPL
    268440073U,	// NOOPW
    268440078U,	// NOT16m
    134222350U,	// NOT16r
    536875534U,	// NOT32m
    134222350U,	// NOT32r
    671093262U,	// NOT64m
    134222350U,	// NOT64r
    805310990U,	// NOT8m
    134222350U,	// NOT8r
    134222355U,	// OR16i16
    272634396U,	// OR16mi
    272634396U,	// OR16mi8
    272634396U,	// OR16mr
    411046428U,	// OR16ri
    411046428U,	// OR16ri8
    415240732U,	// OR16rm
    411046428U,	// OR16rr
    138547740U,	// OR16rr_REV
    134222368U,	// OR32i32
    541069852U,	// OR32mi
    541069852U,	// OR32mi8
    541069852U,	// OR32mr
    541069866U,	// OR32mrLocked
    411046428U,	// OR32ri
    411046428U,	// OR32ri8
    419435036U,	// OR32rm
    411046428U,	// OR32rr
    138547740U,	// OR32rr_REV
    134222388U,	// OR64i32
    675287580U,	// OR64mi32
    675287580U,	// OR64mi8
    675287580U,	// OR64mr
    411046428U,	// OR64ri32
    411046428U,	// OR64ri8
    423629340U,	// OR64rm
    411046428U,	// OR64rr
    138547740U,	// OR64rr_REV
    134222398U,	// OR8i8
    809505308U,	// OR8mi
    809505308U,	// OR8mr
    411046428U,	// OR8ri
    427823644U,	// OR8rm
    411046428U,	// OR8rr
    138547740U,	// OR8rr_REV
    138676703U,	// ORPDrm
    138545631U,	// ORPDrr
    138676709U,	// ORPSrm
    138545637U,	// ORPSrr
    201331271U,	// OUT16ir
    4684U,	// OUT16rr
    205525575U,	// OUT32ir
    4697U,	// OUT32rr
    209719879U,	// OUT8ir
    4711U,	// OUT8rr
    4724U,	// OUTSB
    4730U,	// OUTSD
    4736U,	// OUTSW
    139202109U,	// PABSBrm128
    139333181U,	// PABSBrr128
    139202116U,	// PABSDrm128
    139333188U,	// PABSDrr128
    139202123U,	// PABSWrm128
    139333195U,	// PABSWrr128
    139071058U,	// PACKSSDWrm
    138546770U,	// PACKSSDWrr
    139071068U,	// PACKSSWBrm
    138546780U,	// PACKSSWBrr
    139072134U,	// PACKUSDWrm
    138547846U,	// PACKUSDWrr
    139071078U,	// PACKUSWBrm
    138546790U,	// PACKUSWBrr
    139071088U,	// PADDBrm
    138546800U,	// PADDBrr
    139071095U,	// PADDDrm
    138546807U,	// PADDDrr
    139071102U,	// PADDQrm
    138546814U,	// PADDQrr
    139071109U,	// PADDSBrm
    138546821U,	// PADDSBrr
    139071117U,	// PADDSWrm
    138546829U,	// PADDSWrr
    139071125U,	// PADDUSBrm
    138546837U,	// PADDUSBrr
    139071134U,	// PADDUSWrm
    138546846U,	// PADDUSWrr
    139071143U,	// PADDWrm
    138546855U,	// PADDWrr
    139071150U,	// PALIGNR128rm
    138546862U,	// PALIGNR128rr
    139071159U,	// PANDNrm
    138546871U,	// PANDNrr
    139071166U,	// PANDrm
    138546878U,	// PANDrr
    4752U,	// PAUSE
    139071172U,	// PAVGBrm
    138546884U,	// PAVGBrr
    140120726U,	// PAVGUSBrm
    138547862U,	// PAVGUSBrr
    139071179U,	// PAVGWrm
    138546891U,	// PAVGWrr
    139072159U,	// PBLENDVBrm0
    138547871U,	// PBLENDVBrr0
    139072169U,	// PBLENDWrmi
    138547881U,	// PBLENDWrri
    139071186U,	// PCMPEQBrm
    138546898U,	// PCMPEQBrr
    139071195U,	// PCMPEQDrm
    138546907U,	// PCMPEQDrr
    139072178U,	// PCMPEQQrm
    138547890U,	// PCMPEQQrr
    139071204U,	// PCMPEQWrm
    138546916U,	// PCMPEQWrr
    139203259U,	// PCMPESTRIArm
    139334331U,	// PCMPESTRIArr
    139203259U,	// PCMPESTRICrm
    139334331U,	// PCMPESTRICrr
    139203259U,	// PCMPESTRIOrm
    139334331U,	// PCMPESTRIOrr
    139203259U,	// PCMPESTRISrm
    139334331U,	// PCMPESTRISrr
    139203259U,	// PCMPESTRIZrm
    139334331U,	// PCMPESTRIZrr
    139203259U,	// PCMPESTRIrm
    139334331U,	// PCMPESTRIrr
    0U,	// PCMPESTRM128MEM
    0U,	// PCMPESTRM128REG
    139203270U,	// PCMPESTRM128rm
    139334342U,	// PCMPESTRM128rr
    139071213U,	// PCMPGTBrm
    138546925U,	// PCMPGTBrr
    139071222U,	// PCMPGTDrm
    138546934U,	// PCMPGTDrr
    139072209U,	// PCMPGTQrm
    138547921U,	// PCMPGTQrr
    139071231U,	// PCMPGTWrm
    138546943U,	// PCMPGTWrr
    139203290U,	// PCMPISTRIArm
    139334362U,	// PCMPISTRIArr
    139203290U,	// PCMPISTRICrm
    139334362U,	// PCMPISTRICrr
    139203290U,	// PCMPISTRIOrm
    139334362U,	// PCMPISTRIOrr
    139203290U,	// PCMPISTRISrm
    139334362U,	// PCMPISTRISrr
    139203290U,	// PCMPISTRIZrm
    139334362U,	// PCMPISTRIZrr
    139203290U,	// PCMPISTRIrm
    139334362U,	// PCMPISTRIrr
    0U,	// PCMPISTRM128MEM
    0U,	// PCMPISTRM128REG
    139203301U,	// PCMPISTRM128rm
    139334373U,	// PCMPISTRM128rr
    809505520U,	// PEXTRBmr
    139334384U,	// PEXTRBrr
    541070072U,	// PEXTRDmr
    139334392U,	// PEXTRDrr
    675287808U,	// PEXTRQmr
    139334400U,	// PEXTRQrr
    272633608U,	// PEXTRWmr
    139333384U,	// PEXTRWri
    140120840U,	// PF2IDrm
    138547976U,	// PF2IDrr
    140120847U,	// PF2IWrm
    138547983U,	// PF2IWrr
    140120854U,	// PFACCrm
    138547990U,	// PFACCrr
    140120861U,	// PFADDrm
    138547997U,	// PFADDrr
    140120868U,	// PFCMPEQrm
    138548004U,	// PFCMPEQrr
    140120877U,	// PFCMPGErm
    138548013U,	// PFCMPGErr
    140120886U,	// PFCMPGTrm
    138548022U,	// PFCMPGTrr
    140120895U,	// PFMAXrm
    138548031U,	// PFMAXrr
    140120902U,	// PFMINrm
    138548038U,	// PFMINrr
    140120909U,	// PFMULrm
    138548045U,	// PFMULrr
    140120916U,	// PFNACCrm
    138548052U,	// PFNACCrr
    140120924U,	// PFPNACCrm
    138548060U,	// PFPNACCrr
    140120933U,	// PFRCPIT1rm
    138548069U,	// PFRCPIT1rr
    140120943U,	// PFRCPIT2rm
    138548079U,	// PFRCPIT2rr
    140120953U,	// PFRCPrm
    138548089U,	// PFRCPrr
    140120960U,	// PFRSQIT1rm
    138548096U,	// PFRSQIT1rr
    140120970U,	// PFRSQRTrm
    138548106U,	// PFRSQRTrr
    140120979U,	// PFSUBRrm
    138548115U,	// PFSUBRrr
    140120987U,	// PFSUBrm
    138548123U,	// PFSUBrr
    139071265U,	// PHADDDrm128
    138546977U,	// PHADDDrr128
    139071248U,	// PHADDSWrm128
    138546960U,	// PHADDSWrr128
    139071257U,	// PHADDWrm128
    138546969U,	// PHADDWrr128
    139203490U,	// PHMINPOSUWrm128
    139334562U,	// PHMINPOSUWrr128
    139071273U,	// PHSUBDrm128
    138546985U,	// PHSUBDrr128
    139071281U,	// PHSUBSWrm128
    138546993U,	// PHSUBSWrr128
    139071290U,	// PHSUBWrm128
    138547002U,	// PHSUBWrr128
    140121006U,	// PI2FDrm
    138548142U,	// PI2FDrr
    140121013U,	// PI2FWrm
    138548149U,	// PI2FWrr
    140907452U,	// PINSRBrm
    138548156U,	// PINSRBrr
    139989956U,	// PINSRDrm
    138548164U,	// PINSRDrr
    140121036U,	// PINSRQrm
    138548172U,	// PINSRQrr
    139857730U,	// PINSRWrmi
    138547010U,	// PINSRWrri
    139071306U,	// PMADDUBSWrm128
    138547018U,	// PMADDUBSWrr128
    139071317U,	// PMADDWDrm
    138547029U,	// PMADDWDrr
    139072468U,	// PMAXSBrm
    138548180U,	// PMAXSBrr
    139072476U,	// PMAXSDrm
    138548188U,	// PMAXSDrr
    139071326U,	// PMAXSWrm
    138547038U,	// PMAXSWrr
    139071334U,	// PMAXUBrm
    138547046U,	// PMAXUBrr
    139072484U,	// PMAXUDrm
    138548196U,	// PMAXUDrr
    139072492U,	// PMAXUWrm
    138548204U,	// PMAXUWrr
    139072500U,	// PMINSBrm
    138548212U,	// PMINSBrr
    139072508U,	// PMINSDrm
    138548220U,	// PMINSDrr
    139071342U,	// PMINSWrm
    138547054U,	// PMINSWrr
    139071350U,	// PMINUBrm
    138547062U,	// PMINUBrr
    139072516U,	// PMINUDrm
    138548228U,	// PMINUDrr
    139072524U,	// PMINUWrm
    138548236U,	// PMINUWrr
    139333502U,	// PMOVMSKBrr
    139596820U,	// PMOVSXBDrm
    139334676U,	// PMOVSXBDrr
    139465758U,	// PMOVSXBQrm
    139334686U,	// PMOVSXBQrr
    139727912U,	// PMOVSXBWrm
    139334696U,	// PMOVSXBWrr
    139727922U,	// PMOVSXDQrm
    139334706U,	// PMOVSXDQrr
    139727932U,	// PMOVSXWDrm
    139334716U,	// PMOVSXWDrr
    139596870U,	// PMOVSXWQrm
    139334726U,	// PMOVSXWQrr
    139596880U,	// PMOVZXBDrm
    139334736U,	// PMOVZXBDrr
    139465818U,	// PMOVZXBQrm
    139334746U,	// PMOVZXBQrr
    139727972U,	// PMOVZXBWrm
    139334756U,	// PMOVZXBWrr
    139727982U,	// PMOVZXDQrm
    139334766U,	// PMOVZXDQrr
    139727992U,	// PMOVZXWDrm
    139334776U,	// PMOVZXWDrr
    139596930U,	// PMOVZXWQrm
    139334786U,	// PMOVZXWQrr
    139072652U,	// PMULDQrm
    138548364U,	// PMULDQrr
    139071368U,	// PMULHRSWrm128
    138547080U,	// PMULHRSWrr128
    140121236U,	// PMULHRWrm
    138548372U,	// PMULHRWrr
    139071378U,	// PMULHUWrm
    138547090U,	// PMULHUWrr
    139071387U,	// PMULHWrm
    138547099U,	// PMULHWrr
    139072669U,	// PMULLDrm
    138548381U,	// PMULLDrr
    139071395U,	// PMULLWrm
    138547107U,	// PMULLWrr
    139071403U,	// PMULUDQrm
    138547115U,	// PMULUDQrr
    134223013U,	// POP16r
    268440741U,	// POP16rmm
    134223013U,	// POP16rmr
    134223013U,	// POP32r
    536876197U,	// POP32rmm
    134223013U,	// POP32rmr
    134223013U,	// POP64r
    671093925U,	// POP64rmm
    134223013U,	// POP64rmr
    5290U,	// POPA32
    139465903U,	// POPCNT16rm
    139334831U,	// POPCNT16rr
    139596975U,	// POPCNT32rm
    139334831U,	// POPCNT32rr
    139728047U,	// POPCNT64rm
    139334831U,	// POPCNT64rr
    5303U,	// POPDS16
    5303U,	// POPDS32
    5311U,	// POPES16
    5311U,	// POPES32
    5319U,	// POPF16
    5324U,	// POPF32
    5330U,	// POPF64
    5336U,	// POPFS16
    5336U,	// POPFS32
    5336U,	// POPFS64
    5344U,	// POPGS16
    5344U,	// POPGS32
    5344U,	// POPGS64
    5352U,	// POPSS16
    5352U,	// POPSS32
    139071412U,	// PORrm
    138547124U,	// PORrr
    536876272U,	// PREFETCH
    805311738U,	// PREFETCHNTA
    805311751U,	// PREFETCHT0
    805311763U,	// PREFETCHT1
    805311775U,	// PREFETCHT2
    268440875U,	// PREFETCHW
    139071417U,	// PSADBWrm
    138547129U,	// PSADBWrr
    139071425U,	// PSHUFBrm128
    138547137U,	// PSHUFBrr128
    139203894U,	// PSHUFDmi
    139334966U,	// PSHUFDri
    139203902U,	// PSHUFHWmi
    139334974U,	// PSHUFHWri
    139203911U,	// PSHUFLWmi
    139334983U,	// PSHUFLWri
    139071441U,	// PSIGNBrm128
    138547153U,	// PSIGNBrr128
    139071449U,	// PSIGNDrm128
    138547161U,	// PSIGNDrr128
    139071457U,	// PSIGNWrm128
    138547169U,	// PSIGNWrr128
    138548560U,	// PSLLDQri
    138547177U,	// PSLLDri
    139071465U,	// PSLLDrm
    138547177U,	// PSLLDrr
    138547184U,	// PSLLQri
    139071472U,	// PSLLQrm
    138547184U,	// PSLLQrr
    138547191U,	// PSLLWri
    139071479U,	// PSLLWrm
    138547191U,	// PSLLWrr
    138547198U,	// PSRADri
    139071486U,	// PSRADrm
    138547198U,	// PSRADrr
    138547205U,	// PSRAWri
    139071493U,	// PSRAWrm
    138547205U,	// PSRAWrr
    138548568U,	// PSRLDQri
    138547212U,	// PSRLDri
    139071500U,	// PSRLDrm
    138547212U,	// PSRLDrr
    138547219U,	// PSRLQri
    139071507U,	// PSRLQrm
    138547219U,	// PSRLQrr
    138547226U,	// PSRLWri
    139071514U,	// PSRLWrm
    138547226U,	// PSRLWrr
    139071521U,	// PSUBBrm
    138547233U,	// PSUBBrr
    139071528U,	// PSUBDrm
    138547240U,	// PSUBDrr
    139071535U,	// PSUBQrm
    138547247U,	// PSUBQrr
    139071542U,	// PSUBSBrm
    138547254U,	// PSUBSBrr
    139071550U,	// PSUBSWrm
    138547262U,	// PSUBSWrr
    139071558U,	// PSUBUSBrm
    138547270U,	// PSUBUSBrr
    139071567U,	// PSUBUSWrm
    138547279U,	// PSUBUSWrr
    139071576U,	// PSUBWrm
    138547288U,	// PSUBWrr
    140121440U,	// PSWAPDrm
    138548576U,	// PSWAPDrr
    140383592U,	// PTESTrm
    139335016U,	// PTESTrr
    139071583U,	// PUNPCKHBWrm
    138547295U,	// PUNPCKHBWrr
    139071594U,	// PUNPCKHDQrm
    138547306U,	// PUNPCKHDQrr
    139072880U,	// PUNPCKHQDQrm
    138548592U,	// PUNPCKHQDQrr
    139071605U,	// PUNPCKHWDrm
    138547317U,	// PUNPCKHWDrr
    139071616U,	// PUNPCKLBWrm
    138547328U,	// PUNPCKLBWrr
    139071627U,	// PUNPCKLDQrm
    138547339U,	// PUNPCKLDQrr
    139072892U,	// PUNPCKLQDQrm
    138548604U,	// PUNPCKLQDQrr
    139071638U,	// PUNPCKLWDrm
    138547350U,	// PUNPCKLWDrr
    134223240U,	// PUSH16r
    268440968U,	// PUSH16rmm
    134223240U,	// PUSH16rmr
    134223240U,	// PUSH32r
    536876424U,	// PUSH32rmm
    134223240U,	// PUSH32rmr
    134223240U,	// PUSH64i16
    134223240U,	// PUSH64i32
    134223240U,	// PUSH64i8
    134223240U,	// PUSH64r
    671094152U,	// PUSH64rmm
    134223240U,	// PUSH64rmr
    5518U,	// PUSHA32
    5524U,	// PUSHCS16
    5524U,	// PUSHCS32
    5533U,	// PUSHDS16
    5533U,	// PUSHDS32
    5542U,	// PUSHES16
    5542U,	// PUSHES32
    5551U,	// PUSHF16
    5557U,	// PUSHF32
    5564U,	// PUSHF64
    5571U,	// PUSHFS16
    5571U,	// PUSHFS32
    5571U,	// PUSHFS64
    5580U,	// PUSHGS16
    5580U,	// PUSHGS32
    5580U,	// PUSHGS64
    5589U,	// PUSHSS16
    5589U,	// PUSHSS32
    134223240U,	// PUSHi16
    134223240U,	// PUSHi32
    134223240U,	// PUSHi8
    139071649U,	// PXORrm
    138547361U,	// PXORrr
    268441054U,	// RCL16m1
    348132830U,	// RCL16mCL
    272635358U,	// RCL16mi
    134223326U,	// RCL16r1
    213915102U,	// RCL16rCL
    138548702U,	// RCL16ri
    536876510U,	// RCL32m1
    616568286U,	// RCL32mCL
    541070814U,	// RCL32mi
    134223326U,	// RCL32r1
    213915102U,	// RCL32rCL
    138548702U,	// RCL32ri
    671094238U,	// RCL64m1
    750786014U,	// RCL64mCL
    675288542U,	// RCL64mi
    134223326U,	// RCL64r1
    213915102U,	// RCL64rCL
    138548702U,	// RCL64ri
    805311966U,	// RCL8m1
    885003742U,	// RCL8mCL
    809506270U,	// RCL8mi
    134223326U,	// RCL8r1
    213915102U,	// RCL8rCL
    138548702U,	// RCL8ri
    140383715U,	// RCPPSm
    140383715U,	// RCPPSm_Int
    139335139U,	// RCPPSr
    139335139U,	// RCPPSr_Int
    140645866U,	// RCPSSm
    140645866U,	// RCPSSm_Int
    139335146U,	// RCPSSr
    139335146U,	// RCPSSr_Int
    268441073U,	// RCR16m1
    348132849U,	// RCR16mCL
    272635377U,	// RCR16mi
    134223345U,	// RCR16r1
    213915121U,	// RCR16rCL
    138548721U,	// RCR16ri
    536876529U,	// RCR32m1
    616568305U,	// RCR32mCL
    541070833U,	// RCR32mi
    134223345U,	// RCR32r1
    213915121U,	// RCR32rCL
    138548721U,	// RCR32ri
    671094257U,	// RCR64m1
    750786033U,	// RCR64mCL
    675288561U,	// RCR64mi
    134223345U,	// RCR64r1
    213915121U,	// RCR64rCL
    138548721U,	// RCR64ri
    805311985U,	// RCR8m1
    885003761U,	// RCR8mCL
    809506289U,	// RCR8mi
    134223345U,	// RCR8r1
    213915121U,	// RCR8rCL
    138548721U,	// RCR8ri
    5622U,	// RDMSR
    5628U,	// RDPMC
    5634U,	// RDTSC
    5640U,	// RDTSCP
    5647U,	// REPNE_PREFIX
    5653U,	// REP_MOVSB
    5663U,	// REP_MOVSD
    5673U,	// REP_MOVSQ
    5683U,	// REP_MOVSW
    5693U,	// REP_PREFIX
    5697U,	// REP_STOSB
    5707U,	// REP_STOSD
    5717U,	// REP_STOSQ
    5727U,	// REP_STOSW
    5737U,	// RET
    134223469U,	// RETI
    134223474U,	// RETIW
    5752U,	// REX64_PREFIX
    268441214U,	// ROL16m1
    348132990U,	// ROL16mCL
    272635518U,	// ROL16mi
    134223486U,	// ROL16r1
    213915262U,	// ROL16rCL
    138548862U,	// ROL16ri
    536876670U,	// ROL32m1
    616568446U,	// ROL32mCL
    541070974U,	// ROL32mi
    134223486U,	// ROL32r1
    213915262U,	// ROL32rCL
    138548862U,	// ROL32ri
    671094398U,	// ROL64m1
    754980478U,	// ROL64mCL
    675288702U,	// ROL64mi
    134223486U,	// ROL64r1
    218109566U,	// ROL64rCL
    138548862U,	// ROL64ri
    805312126U,	// ROL8m1
    885003902U,	// ROL8mCL
    809506430U,	// ROL8mi
    134223486U,	// ROL8r1
    213915262U,	// ROL8rCL
    138548862U,	// ROL8ri
    268441219U,	// ROR16m1
    348132995U,	// ROR16mCL
    272635523U,	// ROR16mi
    134223491U,	// ROR16r1
    213915267U,	// ROR16rCL
    138548867U,	// ROR16ri
    536876675U,	// ROR32m1
    616568451U,	// ROR32mCL
    541070979U,	// ROR32mi
    134223491U,	// ROR32r1
    213915267U,	// ROR32rCL
    138548867U,	// ROR32ri
    671094403U,	// ROR64m1
    754980483U,	// ROR64mCL
    675288707U,	// ROR64mi
    134223491U,	// ROR64r1
    218109571U,	// ROR64rCL
    138548867U,	// ROR64ri
    805312131U,	// ROR8m1
    885003907U,	// ROR8mCL
    809506435U,	// ROR8mi
    134223491U,	// ROR8r1
    213915267U,	// ROR8rCL
    138548867U,	// ROR8ri
    141039240U,	// ROUNDPDm
    139335304U,	// ROUNDPDr
    141039249U,	// ROUNDPSm
    139335313U,	// ROUNDPSr
    138811034U,	// ROUNDSDm
    138548890U,	// ROUNDSDr
    138942115U,	// ROUNDSSm
    138548899U,	// ROUNDSSr
    5804U,	// RSM
    140383920U,	// RSQRTPSm
    140383920U,	// RSQRTPSm_Int
    139335344U,	// RSQRTPSr
    139335344U,	// RSQRTPSr_Int
    140646073U,	// RSQRTSSm
    140646073U,	// RSQRTSSm_Int
    139335353U,	// RSQRTSSr
    139335353U,	// RSQRTSSr_Int
    5826U,	// SAHF
    268441287U,	// SAR16m1
    348133063U,	// SAR16mCL
    272635591U,	// SAR16mi
    134223559U,	// SAR16r1
    213915335U,	// SAR16rCL
    138548935U,	// SAR16ri
    536876743U,	// SAR32m1
    616568519U,	// SAR32mCL
    541071047U,	// SAR32mi
    134223559U,	// SAR32r1
    213915335U,	// SAR32rCL
    138548935U,	// SAR32ri
    671094471U,	// SAR64m1
    754980551U,	// SAR64mCL
    675288775U,	// SAR64mi
    134223559U,	// SAR64r1
    218109639U,	// SAR64rCL
    138548935U,	// SAR64ri
    805312199U,	// SAR8m1
    885003975U,	// SAR8mCL
    809506503U,	// SAR8mi
    134223559U,	// SAR8r1
    213915335U,	// SAR8rCL
    138548935U,	// SAR8ri
    134223564U,	// SBB16i16
    272635606U,	// SBB16mi
    272635606U,	// SBB16mi8
    272635606U,	// SBB16mr
    411047638U,	// SBB16ri
    411047638U,	// SBB16ri8
    415241942U,	// SBB16rm
    411047638U,	// SBB16rr
    138548950U,	// SBB16rr_REV
    134223579U,	// SBB32i32
    541071062U,	// SBB32mi
    541071062U,	// SBB32mi8
    541071062U,	// SBB32mr
    411047638U,	// SBB32ri
    411047638U,	// SBB32ri8
    419436246U,	// SBB32rm
    411047638U,	// SBB32rr
    138548950U,	// SBB32rr_REV
    134223590U,	// SBB64i32
    675288790U,	// SBB64mi32
    675288790U,	// SBB64mi8
    675288790U,	// SBB64mr
    411047638U,	// SBB64ri32
    411047638U,	// SBB64ri8
    423630550U,	// SBB64rm
    411047638U,	// SBB64rr
    138548950U,	// SBB64rr_REV
    134223601U,	// SBB8i8
    809506518U,	// SBB8mi
    809506518U,	// SBB8mr
    411047638U,	// SBB8ri
    427824854U,	// SBB8rm
    411047638U,	// SBB8rr
    138548950U,	// SBB8rr_REV
    5883U,	// SCAS16
    5883U,	// SCAS32
    5888U,	// SCAS64
    5883U,	// SCAS8
    805312262U,	// SETAEm
    134223622U,	// SETAEr
    805312269U,	// SETAm
    134223629U,	// SETAr
    805312275U,	// SETBEm
    134223635U,	// SETBEr
    0U,	// SETB_C16r
    0U,	// SETB_C32r
    0U,	// SETB_C64r
    0U,	// SETB_C8r
    805312282U,	// SETBm
    134223642U,	// SETBr
    805312288U,	// SETEm
    134223648U,	// SETEr
    805312294U,	// SETGEm
    134223654U,	// SETGEr
    805312301U,	// SETGm
    134223661U,	// SETGr
    805312307U,	// SETLEm
    134223667U,	// SETLEr
    805312314U,	// SETLm
    134223674U,	// SETLr
    805312320U,	// SETNEm
    134223680U,	// SETNEr
    805312327U,	// SETNOm
    134223687U,	// SETNOr
    805312334U,	// SETNPm
    134223694U,	// SETNPr
    805312341U,	// SETNSm
    134223701U,	// SETNSr
    805312348U,	// SETOm
    134223708U,	// SETOr
    805312354U,	// SETPm
    134223714U,	// SETPr
    805312360U,	// SETSm
    134223720U,	// SETSr
    5998U,	// SFENCE
    1879054197U,	// SGDT16m
    1879054204U,	// SGDTm
    268441474U,	// SHL16m1
    348133250U,	// SHL16mCL
    272635778U,	// SHL16mi
    134223746U,	// SHL16r1
    213915522U,	// SHL16rCL
    138549122U,	// SHL16ri
    536876930U,	// SHL32m1
    616568706U,	// SHL32mCL
    541071234U,	// SHL32mi
    134223746U,	// SHL32r1
    213915522U,	// SHL32rCL
    138549122U,	// SHL32ri
    671094658U,	// SHL64m1
    754980738U,	// SHL64mCL
    675288962U,	// SHL64mi
    134223746U,	// SHL64r1
    218109826U,	// SHL64rCL
    138549122U,	// SHL64ri
    805312386U,	// SHL8m1
    885004162U,	// SHL8mCL
    809506690U,	// SHL8mi
    134223746U,	// SHL8r1
    213915522U,	// SHL8rCL
    138549122U,	// SHL8ri
    272635783U,	// SHLD16mrCL
    272635783U,	// SHLD16mri8
    138549127U,	// SHLD16rrCL
    138549127U,	// SHLD16rri8
    541071239U,	// SHLD32mrCL
    541071239U,	// SHLD32mri8
    138549127U,	// SHLD32rrCL
    138549127U,	// SHLD32rri8
    675288967U,	// SHLD64mrCL
    675288967U,	// SHLD64mri8
    138549127U,	// SHLD64rrCL
    138549127U,	// SHLD64rri8
    268441485U,	// SHR16m1
    348133261U,	// SHR16mCL
    272635789U,	// SHR16mi
    134223757U,	// SHR16r1
    213915533U,	// SHR16rCL
    138549133U,	// SHR16ri
    536876941U,	// SHR32m1
    616568717U,	// SHR32mCL
    541071245U,	// SHR32mi
    134223757U,	// SHR32r1
    213915533U,	// SHR32rCL
    138549133U,	// SHR32ri
    671094669U,	// SHR64m1
    754980749U,	// SHR64mCL
    675288973U,	// SHR64mi
    134223757U,	// SHR64r1
    218109837U,	// SHR64rCL
    138549133U,	// SHR64ri
    805312397U,	// SHR8m1
    885004173U,	// SHR8mCL
    809506701U,	// SHR8mi
    134223757U,	// SHR8r1
    213915533U,	// SHR8rCL
    138549133U,	// SHR8ri
    272635794U,	// SHRD16mrCL
    272635794U,	// SHRD16mri8
    138549138U,	// SHRD16rrCL
    138549138U,	// SHRD16rri8
    541071250U,	// SHRD32mrCL
    541071250U,	// SHRD32mri8
    138549138U,	// SHRD32rrCL
    138549138U,	// SHRD32rri8
    675288978U,	// SHRD64mrCL
    675288978U,	// SHRD64mri8
    138549138U,	// SHRD64rrCL
    138549138U,	// SHRD64rri8
    138680216U,	// SHUFPDrmi
    138549144U,	// SHUFPDrri
    138680224U,	// SHUFPSrmi
    138549152U,	// SHUFPSrri
    1879054248U,	// SIDT16m
    1879054255U,	// SIDTm
    6069U,	// SIN_F
    0U,	// SIN_Fp32
    0U,	// SIN_Fp64
    0U,	// SIN_Fp80
    268441530U,	// SLDT16m
    134223802U,	// SLDT16r
    134223802U,	// SLDT32r
    268441530U,	// SLDT64m
    134223802U,	// SLDT64r
    268441536U,	// SMSW16m
    134223808U,	// SMSW16r
    134223808U,	// SMSW32r
    134223808U,	// SMSW64r
    140384198U,	// SQRTPDm
    140384198U,	// SQRTPDm_Int
    139335622U,	// SQRTPDr
    139335622U,	// SQRTPDr_Int
    140384206U,	// SQRTPSm
    140384206U,	// SQRTPSm_Int
    139335630U,	// SQRTPSr
    139335630U,	// SQRTPSr_Int
    140515286U,	// SQRTSDm
    140515286U,	// SQRTSDm_Int
    139335638U,	// SQRTSDr
    139335638U,	// SQRTSDr_Int
    140646366U,	// SQRTSSm
    140646366U,	// SQRTSSm_Int
    139335646U,	// SQRTSSr
    139335646U,	// SQRTSSr_Int
    6118U,	// SQRT_F
    0U,	// SQRT_Fp32
    0U,	// SQRT_Fp64
    0U,	// SQRT_Fp80
    6124U,	// SS_PREFIX
    6127U,	// STC
    6131U,	// STD
    6135U,	// STI
    536877051U,	// STMXCSR
    4455U,	// STOSB
    6148U,	// STOSD
    6154U,	// STOSQ
    4455U,	// STOSW
    6160U,	// STR16r
    6160U,	// STR32r
    6160U,	// STR64r
    6160U,	// STRm
    939530261U,	// ST_F32m
    1073747989U,	// ST_F64m
    939530266U,	// ST_FP32m
    1073747994U,	// ST_FP64m
    2147489818U,	// ST_FP80m
    134223898U,	// ST_FPrr
    0U,	// ST_Fp32m
    0U,	// ST_Fp64m
    0U,	// ST_Fp64m32
    0U,	// ST_Fp80m32
    0U,	// ST_Fp80m64
    0U,	// ST_FpP32m
    0U,	// ST_FpP64m
    0U,	// ST_FpP64m32
    0U,	// ST_FpP80m
    0U,	// ST_FpP80m32
    0U,	// ST_FpP80m64
    134223893U,	// ST_Frr
    134223904U,	// SUB16i16
    272635946U,	// SUB16mi
    272635946U,	// SUB16mi8
    272635946U,	// SUB16mr
    411047978U,	// SUB16ri
    411047978U,	// SUB16ri8
    415242282U,	// SUB16rm
    411047978U,	// SUB16rr
    138549290U,	// SUB16rr_REV
    134223919U,	// SUB32i32
    541071402U,	// SUB32mi
    541071402U,	// SUB32mi8
    541071402U,	// SUB32mr
    411047978U,	// SUB32ri
    411047978U,	// SUB32ri8
    419436586U,	// SUB32rm
    411047978U,	// SUB32rr
    138549290U,	// SUB32rr_REV
    134223930U,	// SUB64i32
    675289130U,	// SUB64mi32
    675289130U,	// SUB64mi8
    675289130U,	// SUB64mr
    411047978U,	// SUB64ri32
    411047978U,	// SUB64ri8
    423630890U,	// SUB64rm
    411047978U,	// SUB64rr
    138549290U,	// SUB64rr_REV
    134223941U,	// SUB8i8
    809506858U,	// SUB8mi
    809506858U,	// SUB8mr
    411047978U,	// SUB8ri
    427825194U,	// SUB8rm
    411047978U,	// SUB8rr
    138549290U,	// SUB8rr_REV
    138680399U,	// SUBPDrm
    138549327U,	// SUBPDrr
    138680406U,	// SUBPSrm
    138549334U,	// SUBPSrr
    939530333U,	// SUBR_F32m
    1073748061U,	// SUBR_F64m
    268441700U,	// SUBR_FI16m
    536877156U,	// SUBR_FI32m
    134223980U,	// SUBR_FPrST0
    134223965U,	// SUBR_FST0r
    0U,	// SUBR_Fp32m
    0U,	// SUBR_Fp64m
    0U,	// SUBR_Fp64m32
    0U,	// SUBR_Fp80m32
    0U,	// SUBR_Fp80m64
    0U,	// SUBR_FpI16m32
    0U,	// SUBR_FpI16m64
    0U,	// SUBR_FpI16m80
    0U,	// SUBR_FpI32m32
    0U,	// SUBR_FpI32m64
    0U,	// SUBR_FpI32m80
    163584093U,	// SUBR_FrST0
    138811508U,	// SUBSDrm
    138811508U,	// SUBSDrm_Int
    138549364U,	// SUBSDrr
    138549364U,	// SUBSDrr_Int
    138942587U,	// SUBSSrm
    138942587U,	// SUBSSrm_Int
    138549371U,	// SUBSSrr
    138549371U,	// SUBSSrr_Int
    939530370U,	// SUB_F32m
    1073748098U,	// SUB_F64m
    268441736U,	// SUB_FI16m
    536877192U,	// SUB_FI32m
    134224015U,	// SUB_FPrST0
    134224002U,	// SUB_FST0r
    0U,	// SUB_Fp32
    0U,	// SUB_Fp32m
    0U,	// SUB_Fp64
    0U,	// SUB_Fp64m
    0U,	// SUB_Fp64m32
    0U,	// SUB_Fp80
    0U,	// SUB_Fp80m32
    0U,	// SUB_Fp80m64
    0U,	// SUB_FpI16m32
    0U,	// SUB_FpI16m64
    0U,	// SUB_FpI16m80
    0U,	// SUB_FpI32m32
    0U,	// SUB_FpI32m64
    0U,	// SUB_FpI32m80
    163584130U,	// SUB_FrST0
    6294U,	// SWAPGS
    6301U,	// SYSCALL
    6309U,	// SYSENTER
    6318U,	// SYSEXIT
    6318U,	// SYSEXIT64
    6326U,	// SYSRETL
    6334U,	// SYSRETQ
    1430260764U,	// TAILJMPd
    1430260764U,	// TAILJMPd64
    624954396U,	// TAILJMPm
    759172124U,	// TAILJMPm64
    0U,	// TAILJMPr
    222301212U,	// TAILJMPr64
    0U,	// TCRETURNdi
    0U,	// TCRETURNdi64
    0U,	// TCRETURNmi
    0U,	// TCRETURNmi64
    0U,	// TCRETURNri
    0U,	// TCRETURNri64
    134224070U,	// TEST16i16
    272636113U,	// TEST16mi
    139335889U,	// TEST16ri
    139466961U,	// TEST16rm
    139335889U,	// TEST16rr
    134224087U,	// TEST32i32
    541071569U,	// TEST32mi
    139335889U,	// TEST32ri
    139598033U,	// TEST32rm
    139335889U,	// TEST32rr
    134224099U,	// TEST64i32
    675289297U,	// TEST64mi32
    139335889U,	// TEST64ri32
    139729105U,	// TEST64rm
    139335889U,	// TEST64rr
    134224111U,	// TEST8i8
    809507025U,	// TEST8mi
    139335889U,	// TEST8ri
    140253393U,	// TEST8rm
    139335889U,	// TEST8rr
    6394U,	// TLSCall_32
    6407U,	// TLSCall_64
    6420U,	// TLS_addr32
    6433U,	// TLS_addr64
    6446U,	// TRAP
    6450U,	// TST_F
    0U,	// TST_Fp32
    0U,	// TST_Fp64
    0U,	// TST_Fp80
    140511990U,	// UCOMISDrm
    139332342U,	// UCOMISDrr
    140643071U,	// UCOMISSrm
    139332351U,	// UCOMISSrr
    134224183U,	// UCOM_FIPr
    134224192U,	// UCOM_FIr
    6472U,	// UCOM_FPPr
    134224208U,	// UCOM_FPr
    0U,	// UCOM_FpIr32
    0U,	// UCOM_FpIr64
    0U,	// UCOM_FpIr80
    0U,	// UCOM_Fpr32
    0U,	// UCOM_Fpr64
    0U,	// UCOM_Fpr80
    134224216U,	// UCOM_Fr
    6495U,	// UD2B
    138680676U,	// UNPCKHPDrm
    138549604U,	// UNPCKHPDrr
    138680686U,	// UNPCKHPSrm
    138549614U,	// UNPCKHPSrr
    138680696U,	// UNPCKLPDrm
    138549624U,	// UNPCKLPDrr
    138680706U,	// UNPCKLPSrm
    138549634U,	// UNPCKLPSrr
    140253580U,	// VAARG_64
    139336087U,	// VADDPDYrm
    139336087U,	// VADDPDYrr
    139336087U,	// VADDPDrm
    139336087U,	// VADDPDrr
    139336095U,	// VADDPSYrm
    139336095U,	// VADDPSYrr
    139336095U,	// VADDPSrm
    139336095U,	// VADDPSrr
    139336103U,	// VADDSDrm
    139336103U,	// VADDSDrm_Int
    139336103U,	// VADDSDrr
    139336103U,	// VADDSDrr_Int
    139336111U,	// VADDSSrm
    139336111U,	// VADDSSrm_Int
    139336111U,	// VADDSSrr
    139336111U,	// VADDSSrr_Int
    139336119U,	// VADDSUBPDYrm
    139336119U,	// VADDSUBPDYrr
    139336119U,	// VADDSUBPDrm
    139336119U,	// VADDSUBPDrr
    139336130U,	// VADDSUBPSYrm
    139336130U,	// VADDSUBPSYrr
    139336130U,	// VADDSUBPSrm
    139336130U,	// VADDSUBPSrr
    139336141U,	// VAESDECLASTrm
    139336141U,	// VAESDECLASTrr
    139336154U,	// VAESDECrm
    139336154U,	// VAESDECrr
    139336163U,	// VAESENCLASTrm
    139336163U,	// VAESENCLASTrr
    139336176U,	// VAESENCrm
    139336176U,	// VAESENCrr
    139205113U,	// VAESIMCrm
    139336185U,	// VAESIMCrr
    139205122U,	// VAESKEYGENASSIST128rm
    139336194U,	// VAESKEYGENASSIST128rr
    139336212U,	// VANDNPDYrm
    139336212U,	// VANDNPDYrr
    139336212U,	// VANDNPDrm
    139336212U,	// VANDNPDrr
    139336221U,	// VANDNPSYrm
    139336221U,	// VANDNPSYrr
    139336221U,	// VANDNPSrm
    139336221U,	// VANDNPSrr
    139336230U,	// VANDPDYrm
    139336230U,	// VANDPDYrr
    139336230U,	// VANDPDrm
    139336230U,	// VANDPDrr
    139336238U,	// VANDPSYrm
    139336238U,	// VANDPSYrr
    139336238U,	// VANDPSrm
    139336238U,	// VANDPSrr
    139336246U,	// VASTART_SAVE_XMM_REGS
    139336270U,	// VBLENDPDYrmi
    139336270U,	// VBLENDPDYrri
    139336270U,	// VBLENDPDrmi
    139336270U,	// VBLENDPDrri
    139336280U,	// VBLENDPSYrmi
    139336280U,	// VBLENDPSYrri
    139336280U,	// VBLENDPSrmi
    139336280U,	// VBLENDPSrri
    139336290U,	// VBLENDVPDYrm
    139336290U,	// VBLENDVPDYrr
    139336290U,	// VBLENDVPDrm
    139336290U,	// VBLENDVPDrr
    139336301U,	// VBLENDVPSYrm
    139336301U,	// VBLENDVPSYrr
    139336301U,	// VBLENDVPSrm
    139336301U,	// VBLENDVPSrr
    140384888U,	// VBROADCASTF128
    140515976U,	// VBROADCASTSD
    140647062U,	// VBROADCASTSS
    140647062U,	// VBROADCASTSSY
    1515064072U,	// VCMPPDYrmi
    139336356U,	// VCMPPDYrmi_alt
    1649281800U,	// VCMPPDYrri
    139336356U,	// VCMPPDYrri_alt
    1515064072U,	// VCMPPDrmi
    139336356U,	// VCMPPDrmi_alt
    1649281800U,	// VCMPPDrri
    139336356U,	// VCMPPDrri_alt
    1519258376U,	// VCMPPSYrmi
    139336364U,	// VCMPPSYrmi_alt
    1653476104U,	// VCMPPSYrri
    139336364U,	// VCMPPSYrri_alt
    1519258376U,	// VCMPPSrmi
    139336364U,	// VCMPPSrmi_alt
    1653476104U,	// VCMPPSrri
    139336364U,	// VCMPPSrri_alt
    1523452680U,	// VCMPSDrm
    139336372U,	// VCMPSDrm_alt
    1657670408U,	// VCMPSDrr
    139336372U,	// VCMPSDrr_alt
    1527646984U,	// VCMPSSrm
    139336380U,	// VCMPSSrm_alt
    1661864712U,	// VCMPSSrr
    139336380U,	// VCMPSSrr_alt
    140380941U,	// VCOMISDrm
    139332365U,	// VCOMISDrr
    140380950U,	// VCOMISSrm
    139332374U,	// VCOMISSrr
    140380959U,	// VCVTDQ2PDYrm
    139332383U,	// VCVTDQ2PDYrr
    140380959U,	// VCVTDQ2PDrm
    139332383U,	// VCVTDQ2PDrr
    141167402U,	// VCVTDQ2PSYrm
    139332394U,	// VCVTDQ2PSYrr
    139201322U,	// VCVTDQ2PSrm
    139332394U,	// VCVTDQ2PSrr
    139332405U,	// VCVTPD2DQXrYr
    140384964U,	// VCVTPD2DQXrm
    139336388U,	// VCVTPD2DQXrr
    141040336U,	// VCVTPD2DQYrm
    139336400U,	// VCVTPD2DQYrr
    139332405U,	// VCVTPD2DQrr
    139332416U,	// VCVTPD2PSXrYr
    140384988U,	// VCVTPD2PSXrm
    139336412U,	// VCVTPD2PSXrr
    141040360U,	// VCVTPD2PSYrm
    139336424U,	// VCVTPD2PSYrr
    139332416U,	// VCVTPD2PSrr
    141036363U,	// VCVTPS2DQYrm
    139332427U,	// VCVTPS2DQYrr
    140381003U,	// VCVTPS2DQrm
    139332427U,	// VCVTPS2DQrr
    140381014U,	// VCVTPS2PDYrm
    139332438U,	// VCVTPS2PDYrr
    140512086U,	// VCVTPS2PDrm
    139332438U,	// VCVTPS2PDrr
    140512097U,	// VCVTSD2SI64rm
    139332449U,	// VCVTSD2SI64rr
    140512097U,	// VCVTSD2SI_altrm
    139332449U,	// VCVTSD2SI_altrr
    139332460U,	// VCVTSD2SSrm
    139332460U,	// VCVTSD2SSrr
    139332471U,	// VCVTSI2SD64rm
    139332471U,	// VCVTSI2SD64rr
    139332471U,	// VCVTSI2SDLrm
    139332471U,	// VCVTSI2SDLrr
    139332471U,	// VCVTSI2SDrm
    139332471U,	// VCVTSI2SDrr
    139332482U,	// VCVTSI2SS64rm
    139332482U,	// VCVTSI2SS64rr
    139332482U,	// VCVTSI2SSrm
    139332482U,	// VCVTSI2SSrr
    139332493U,	// VCVTSS2SDrm
    139332493U,	// VCVTSS2SDrr
    140643224U,	// VCVTSS2SI64rm
    139332504U,	// VCVTSS2SI64rr
    140643224U,	// VCVTSS2SIrm
    139332504U,	// VCVTSS2SIrr
    139332515U,	// VCVTTPD2DQXrYr
    140385012U,	// VCVTTPD2DQXrm
    139336436U,	// VCVTTPD2DQXrr
    141040385U,	// VCVTTPD2DQYrm
    139336449U,	// VCVTTPD2DQYrr
    139332515U,	// VCVTTPD2DQrr
    141036463U,	// VCVTTPS2DQYrm
    139332527U,	// VCVTTPS2DQYrr
    140381103U,	// VCVTTPS2DQrm
    139332527U,	// VCVTTPS2DQrr
    140512187U,	// VCVTTSD2SI64rm
    139332539U,	// VCVTTSD2SI64rr
    140512187U,	// VCVTTSD2SIrm
    139332539U,	// VCVTTSD2SIrr
    140643271U,	// VCVTTSS2SI64rm
    139332551U,	// VCVTTSS2SI64rr
    140643271U,	// VCVTTSS2SIrm
    139332551U,	// VCVTTSS2SIrr
    139336462U,	// VDIVPDYrm
    139336462U,	// VDIVPDYrr
    139336462U,	// VDIVPDrm
    139336462U,	// VDIVPDrr
    139336470U,	// VDIVPSYrm
    139336470U,	// VDIVPSYrr
    139336470U,	// VDIVPSrm
    139336470U,	// VDIVPSrr
    139336478U,	// VDIVSDrm
    139336478U,	// VDIVSDrm_Int
    139336478U,	// VDIVSDrr
    139336478U,	// VDIVSDrr_Int
    139336486U,	// VDIVSSrm
    139336486U,	// VDIVSSrm_Int
    139336486U,	// VDIVSSrr
    139336486U,	// VDIVSSrr_Int
    139336494U,	// VDPPDrmi
    139336494U,	// VDPPDrri
    139336501U,	// VDPPSYrmi
    139336501U,	// VDPPSYrri
    139336501U,	// VDPPSrmi
    139336501U,	// VDPPSrri
    268442428U,	// VERRm
    134224700U,	// VERRr
    268442434U,	// VERWm
    134224706U,	// VERWr
    2691439432U,	// VEXTRACTF128mr
    139336520U,	// VEXTRACTF128rr
    943725398U,	// VEXTRACTPSmr
    139336534U,	// VEXTRACTPSrr
    139336546U,	// VEXTRACTPSrr64
    139336559U,	// VFMADDPDr132m
    139336559U,	// VFMADDPDr132mY
    139336559U,	// VFMADDPDr132r
    139336559U,	// VFMADDPDr132rY
    139336572U,	// VFMADDPDr213m
    139336572U,	// VFMADDPDr213mY
    139336572U,	// VFMADDPDr213r
    139336572U,	// VFMADDPDr213rY
    139336585U,	// VFMADDPDr231m
    139336585U,	// VFMADDPDr231mY
    139336585U,	// VFMADDPDr231r
    139336585U,	// VFMADDPDr231rY
    139336598U,	// VFMADDPSr132m
    139336598U,	// VFMADDPSr132mY
    139336598U,	// VFMADDPSr132r
    139336598U,	// VFMADDPSr132rY
    139336611U,	// VFMADDPSr213m
    139336611U,	// VFMADDPSr213mY
    139336611U,	// VFMADDPSr213r
    139336611U,	// VFMADDPSr213rY
    139336624U,	// VFMADDPSr231m
    139336624U,	// VFMADDPSr231mY
    139336624U,	// VFMADDPSr231r
    139336624U,	// VFMADDPSr231rY
    139336637U,	// VFMADDSUBPDr132m
    139336637U,	// VFMADDSUBPDr132mY
    139336637U,	// VFMADDSUBPDr132r
    139336637U,	// VFMADDSUBPDr132rY
    139336653U,	// VFMADDSUBPDr213m
    139336653U,	// VFMADDSUBPDr213mY
    139336653U,	// VFMADDSUBPDr213r
    139336653U,	// VFMADDSUBPDr213rY
    139336669U,	// VFMADDSUBPDr231m
    139336669U,	// VFMADDSUBPDr231mY
    139336669U,	// VFMADDSUBPDr231r
    139336669U,	// VFMADDSUBPDr231rY
    139336685U,	// VFMADDSUBPSr132m
    139336685U,	// VFMADDSUBPSr132mY
    139336685U,	// VFMADDSUBPSr132r
    139336685U,	// VFMADDSUBPSr132rY
    139336701U,	// VFMADDSUBPSr213m
    139336701U,	// VFMADDSUBPSr213mY
    139336701U,	// VFMADDSUBPSr213r
    139336701U,	// VFMADDSUBPSr213rY
    139336717U,	// VFMADDSUBPSr231m
    139336717U,	// VFMADDSUBPSr231mY
    139336717U,	// VFMADDSUBPSr231r
    139336717U,	// VFMADDSUBPSr231rY
    139336733U,	// VFMSUBADDPDr132m
    139336733U,	// VFMSUBADDPDr132mY
    139336733U,	// VFMSUBADDPDr132r
    139336733U,	// VFMSUBADDPDr132rY
    139336749U,	// VFMSUBADDPDr213m
    139336749U,	// VFMSUBADDPDr213mY
    139336749U,	// VFMSUBADDPDr213r
    139336749U,	// VFMSUBADDPDr213rY
    139336765U,	// VFMSUBADDPDr231m
    139336765U,	// VFMSUBADDPDr231mY
    139336765U,	// VFMSUBADDPDr231r
    139336765U,	// VFMSUBADDPDr231rY
    139336781U,	// VFMSUBADDPSr132m
    139336781U,	// VFMSUBADDPSr132mY
    139336781U,	// VFMSUBADDPSr132r
    139336781U,	// VFMSUBADDPSr132rY
    139336797U,	// VFMSUBADDPSr213m
    139336797U,	// VFMSUBADDPSr213mY
    139336797U,	// VFMSUBADDPSr213r
    139336797U,	// VFMSUBADDPSr213rY
    139336813U,	// VFMSUBADDPSr231m
    139336813U,	// VFMSUBADDPSr231mY
    139336813U,	// VFMSUBADDPSr231r
    139336813U,	// VFMSUBADDPSr231rY
    139336829U,	// VFMSUBPDr132m
    139336829U,	// VFMSUBPDr132mY
    139336829U,	// VFMSUBPDr132r
    139336829U,	// VFMSUBPDr132rY
    139336842U,	// VFMSUBPDr213m
    139336842U,	// VFMSUBPDr213mY
    139336842U,	// VFMSUBPDr213r
    139336842U,	// VFMSUBPDr213rY
    139336855U,	// VFMSUBPDr231m
    139336855U,	// VFMSUBPDr231mY
    139336855U,	// VFMSUBPDr231r
    139336855U,	// VFMSUBPDr231rY
    139336868U,	// VFMSUBPSr132m
    139336868U,	// VFMSUBPSr132mY
    139336868U,	// VFMSUBPSr132r
    139336868U,	// VFMSUBPSr132rY
    139336881U,	// VFMSUBPSr213m
    139336881U,	// VFMSUBPSr213mY
    139336881U,	// VFMSUBPSr213r
    139336881U,	// VFMSUBPSr213rY
    139336894U,	// VFMSUBPSr231m
    139336894U,	// VFMSUBPSr231mY
    139336894U,	// VFMSUBPSr231r
    139336894U,	// VFMSUBPSr231rY
    139336907U,	// VFNMADDPDr132m
    139336907U,	// VFNMADDPDr132mY
    139336907U,	// VFNMADDPDr132r
    139336907U,	// VFNMADDPDr132rY
    139336921U,	// VFNMADDPDr213m
    139336921U,	// VFNMADDPDr213mY
    139336921U,	// VFNMADDPDr213r
    139336921U,	// VFNMADDPDr213rY
    139336935U,	// VFNMADDPDr231m
    139336935U,	// VFNMADDPDr231mY
    139336935U,	// VFNMADDPDr231r
    139336935U,	// VFNMADDPDr231rY
    139336949U,	// VFNMADDPSr132m
    139336949U,	// VFNMADDPSr132mY
    139336949U,	// VFNMADDPSr132r
    139336949U,	// VFNMADDPSr132rY
    139336963U,	// VFNMADDPSr213m
    139336963U,	// VFNMADDPSr213mY
    139336963U,	// VFNMADDPSr213r
    139336963U,	// VFNMADDPSr213rY
    139336977U,	// VFNMADDPSr231m
    139336977U,	// VFNMADDPSr231mY
    139336977U,	// VFNMADDPSr231r
    139336977U,	// VFNMADDPSr231rY
    139336991U,	// VFNMSUBPDr132m
    139336991U,	// VFNMSUBPDr132mY
    139336991U,	// VFNMSUBPDr132r
    139336991U,	// VFNMSUBPDr132rY
    139337005U,	// VFNMSUBPDr213m
    139337005U,	// VFNMSUBPDr213mY
    139337005U,	// VFNMSUBPDr213r
    139337005U,	// VFNMSUBPDr213rY
    139337019U,	// VFNMSUBPDr231m
    139337019U,	// VFNMSUBPDr231mY
    139337019U,	// VFNMSUBPDr231r
    139337019U,	// VFNMSUBPDr231rY
    139337033U,	// VFNMSUBPSr132m
    139337033U,	// VFNMSUBPSr132mY
    139337033U,	// VFNMSUBPSr132r
    139337033U,	// VFNMSUBPSr132rY
    139337047U,	// VFNMSUBPSr213m
    139337047U,	// VFNMSUBPSr213mY
    139337047U,	// VFNMSUBPSr213r
    139337047U,	// VFNMSUBPSr213rY
    139337061U,	// VFNMSUBPSr231m
    139337061U,	// VFNMSUBPSr231mY
    139337061U,	// VFNMSUBPSr231r
    139337061U,	// VFNMSUBPSr231rY
    139336212U,	// VFsANDNPDrm
    139336212U,	// VFsANDNPDrr
    139336221U,	// VFsANDNPSrm
    139336221U,	// VFsANDNPSrr
    139336230U,	// VFsANDPDrm
    139336230U,	// VFsANDPDrr
    139336238U,	// VFsANDPSrm
    139336238U,	// VFsANDPSrr
    0U,	// VFsFLD0SD
    0U,	// VFsFLD0SS
    139337075U,	// VFsORPDrm
    139337075U,	// VFsORPDrr
    139337082U,	// VFsORPSrm
    139337082U,	// VFsORPSrr
    139337089U,	// VFsXORPDrm
    139337089U,	// VFsXORPDrr
    139337097U,	// VFsXORPSrm
    139337097U,	// VFsXORPSrr
    139337105U,	// VHADDPDYrm
    139337105U,	// VHADDPDYrr
    139337105U,	// VHADDPDrm
    139337105U,	// VHADDPDrr
    139337114U,	// VHADDPSYrm
    139337114U,	// VHADDPSYrr
    139337114U,	// VHADDPSrm
    139337114U,	// VHADDPSrr
    139337123U,	// VHSUBPDYrm
    139337123U,	// VHSUBPDYrr
    139337123U,	// VHSUBPDrm
    139337123U,	// VHSUBPDrr
    139337132U,	// VHSUBPSYrm
    139337132U,	// VHSUBPSYrr
    139337132U,	// VHSUBPSrm
    139337132U,	// VHSUBPSrr
    139337141U,	// VINSERTF128rm
    139337141U,	// VINSERTF128rr
    139337154U,	// VINSERTPSrm
    139337154U,	// VINSERTPSrr
    141172173U,	// VLDDQUYrm
    139206093U,	// VLDDQUrm
    536878549U,	// VLDMXCSR
    139337183U,	// VMASKMOVDQU
    139337183U,	// VMASKMOVDQU64
    2825657836U,	// VMASKMOVPDYmr
    139337196U,	// VMASKMOVPDYrm
    2691440108U,	// VMASKMOVPDmr
    139337196U,	// VMASKMOVPDrm
    2825657848U,	// VMASKMOVPSYmr
    139337208U,	// VMASKMOVPSYrm
    2691440120U,	// VMASKMOVPSmr
    139337208U,	// VMASKMOVPSrm
    139337220U,	// VMAXPDYrm
    139337220U,	// VMAXPDYrm_Int
    139337220U,	// VMAXPDYrr
    139337220U,	// VMAXPDYrr_Int
    139337220U,	// VMAXPDrm
    139337220U,	// VMAXPDrm_Int
    139337220U,	// VMAXPDrr
    139337220U,	// VMAXPDrr_Int
    139337228U,	// VMAXPSYrm
    139337228U,	// VMAXPSYrm_Int
    139337228U,	// VMAXPSYrr
    139337228U,	// VMAXPSYrr_Int
    139337228U,	// VMAXPSrm
    139337228U,	// VMAXPSrm_Int
    139337228U,	// VMAXPSrr
    139337228U,	// VMAXPSrr_Int
    139337236U,	// VMAXSDrm
    139337236U,	// VMAXSDrm_Int
    139337236U,	// VMAXSDrr
    139337236U,	// VMAXSDrr_Int
    139337244U,	// VMAXSSrm
    139337244U,	// VMAXSSrm_Int
    139337244U,	// VMAXSSrr
    139337244U,	// VMAXSSrr_Int
    7716U,	// VMCALL
    671096363U,	// VMCLEARm
    139337268U,	// VMINPDYrm
    139337268U,	// VMINPDYrm_Int
    139337268U,	// VMINPDYrr
    139337268U,	// VMINPDYrr_Int
    139337268U,	// VMINPDrm
    139337268U,	// VMINPDrm_Int
    139337268U,	// VMINPDrr
    139337268U,	// VMINPDrr_Int
    139337276U,	// VMINPSYrm
    139337276U,	// VMINPSYrm_Int
    139337276U,	// VMINPSYrr
    139337276U,	// VMINPSYrr_Int
    139337276U,	// VMINPSrm
    139337276U,	// VMINPSrm_Int
    139337276U,	// VMINPSrr
    139337276U,	// VMINPSrr_Int
    139337284U,	// VMINSDrm
    139337284U,	// VMINSDrm_Int
    139337284U,	// VMINSDrr
    139337284U,	// VMINSDrr_Int
    139337292U,	// VMINSSrm
    139337292U,	// VMINSSrm_Int
    139337292U,	// VMINSSrr
    139337292U,	// VMINSSrr_Int
    7764U,	// VMLAUNCH
    2818580061U,	// VMOVAPDYmr
    141041245U,	// VMOVAPDYrm
    139337309U,	// VMOVAPDYrr
    2684362333U,	// VMOVAPDmr
    140385885U,	// VMOVAPDrm
    139337309U,	// VMOVAPDrr
    2818580070U,	// VMOVAPSYmr
    141041254U,	// VMOVAPSYrm
    139337318U,	// VMOVAPSYrr
    2684362342U,	// VMOVAPSmr
    140385894U,	// VMOVAPSrm
    139337318U,	// VMOVAPSrr
    141041263U,	// VMOVDDUPYrm
    139337327U,	// VMOVDDUPYrr
    140516975U,	// VMOVDDUPrm
    139337327U,	// VMOVDDUPrr
    139599481U,	// VMOVDI2PDIrm
    139337337U,	// VMOVDI2PDIrr
    139599481U,	// VMOVDI2SSrm
    139337337U,	// VMOVDI2SSrr
    2952797824U,	// VMOVDQAYmr
    141172352U,	// VMOVDQAYrm
    139337344U,	// VMOVDQAYrr
    1749032576U,	// VMOVDQAmr
    139206272U,	// VMOVDQArm
    139337344U,	// VMOVDQArr
    2952797833U,	// VMOVDQUYmr
    141172361U,	// VMOVDQUYrm
    139337353U,	// VMOVDQUYrr
    1749032585U,	// VMOVDQUmr
    1749032585U,	// VMOVDQUmr_Int
    139206281U,	// VMOVDQUrm
    139206281U,	// VMOVDQUrm_Int
    139337353U,	// VMOVDQUrr
    139337362U,	// VMOVHLPSrr
    1077943964U,	// VMOVHPDmr
    139337372U,	// VMOVHPDrm
    1077943973U,	// VMOVHPSmr
    139337381U,	// VMOVHPSrm
    139337390U,	// VMOVLHPSrr
    1077943992U,	// VMOVLPDmr
    139337400U,	// VMOVLPDrm
    1077944001U,	// VMOVLPSmr
    139337409U,	// VMOVLPSrm
    675290826U,	// VMOVLQ128mr
    139337425U,	// VMOVMSKPDYr64r
    139337425U,	// VMOVMSKPDYrr32
    139337425U,	// VMOVMSKPDYrr64
    139337425U,	// VMOVMSKPDr64r
    139337425U,	// VMOVMSKPDrr32
    139337425U,	// VMOVMSKPDrr64
    139337436U,	// VMOVMSKPSYr64r
    139337436U,	// VMOVMSKPSYrr32
    139337436U,	// VMOVMSKPSYrr64
    139337436U,	// VMOVMSKPSr64r
    139337436U,	// VMOVMSKPSrr32
    139337436U,	// VMOVMSKPSrr64
    139206375U,	// VMOVNTDQArm
    2818580210U,	// VMOVNTDQY_64mr
    2818580210U,	// VMOVNTDQYmr
    2684362482U,	// VMOVNTDQ_64mr
    2684362482U,	// VMOVNTDQmr
    2684362482U,	// VMOVNTDQmr_Int
    2818580220U,	// VMOVNTPDYmr
    2684362492U,	// VMOVNTPDmr
    1749032700U,	// VMOVNTPDmr_Int
    2818580230U,	// VMOVNTPSYmr
    2684362502U,	// VMOVNTPSmr
    1749032710U,	// VMOVNTPSmr_Int
    541073017U,	// VMOVPDI2DImr
    139337337U,	// VMOVPDI2DIrr
    675290826U,	// VMOVPQI2QImr
    139730634U,	// VMOVQI2PQIrm
    139337418U,	// VMOVQd64rr
    139337337U,	// VMOVQd64rr_alt
    139337418U,	// VMOVQs64rr
    139337418U,	// VMOVQxrxr
    1077944080U,	// VMOVSDmr
    140517136U,	// VMOVSDrm
    139337488U,	// VMOVSDrr
    141041432U,	// VMOVSHDUPYrm
    139337496U,	// VMOVSHDUPYrr
    140386072U,	// VMOVSHDUPrm
    139337496U,	// VMOVSHDUPrr
    141041443U,	// VMOVSLDUPYrm
    139337507U,	// VMOVSLDUPYrr
    140386083U,	// VMOVSLDUPrm
    139337507U,	// VMOVSLDUPrr
    541073017U,	// VMOVSS2DImr
    139337337U,	// VMOVSS2DIrr
    943726382U,	// VMOVSSmr
    140648238U,	// VMOVSSrm
    139337518U,	// VMOVSSrr
    2818580278U,	// VMOVUPDYmr
    141041462U,	// VMOVUPDYrm
    139337526U,	// VMOVUPDYrr
    2684362550U,	// VMOVUPDmr
    2684362550U,	// VMOVUPDmr_Int
    140386102U,	// VMOVUPDrm
    140386102U,	// VMOVUPDrm_Int
    139337526U,	// VMOVUPDrr
    2818580287U,	// VMOVUPSYmr
    141041471U,	// VMOVUPSYrm
    139337535U,	// VMOVUPSYrr
    2684362559U,	// VMOVUPSmr
    2684362559U,	// VMOVUPSmr_Int
    140386111U,	// VMOVUPSrm
    140386111U,	// VMOVUPSrm_Int
    139337535U,	// VMOVUPSrr
    139599481U,	// VMOVZDI2PDIrm
    139337337U,	// VMOVZDI2PDIrr
    139206346U,	// VMOVZPQILo2PQIrm
    139337418U,	// VMOVZPQILo2PQIrr
    139730634U,	// VMOVZQI2PQIrm
    139337418U,	// VMOVZQI2PQIrr
    139337544U,	// VMPSADBWrmi
    139337544U,	// VMPSADBWrri
    671096658U,	// VMPTRLDm
    671096667U,	// VMPTRSTm
    541073252U,	// VMREAD32rm
    139337572U,	// VMREAD32rr
    675290980U,	// VMREAD64rm
    139337572U,	// VMREAD64rr
    8044U,	// VMRESUME
    139337589U,	// VMULPDYrm
    139337589U,	// VMULPDYrr
    139337589U,	// VMULPDrm
    139337589U,	// VMULPDrr
    139337597U,	// VMULPSYrm
    139337597U,	// VMULPSYrr
    139337597U,	// VMULPSrm
    139337597U,	// VMULPSrr
    139337605U,	// VMULSDrm
    139337605U,	// VMULSDrm_Int
    139337605U,	// VMULSDrr
    139337605U,	// VMULSDrr_Int
    139337613U,	// VMULSSrm
    139337613U,	// VMULSSrm_Int
    139337613U,	// VMULSSrr
    139337613U,	// VMULSSrr_Int
    139599765U,	// VMWRITE32rm
    139337621U,	// VMWRITE32rr
    139730837U,	// VMWRITE64rm
    139337621U,	// VMWRITE64rr
    8094U,	// VMXOFF
    8101U,	// VMXON
    139337075U,	// VORPDYrm
    139337075U,	// VORPDYrr
    139337075U,	// VORPDrm
    139337075U,	// VORPDrr
    139337082U,	// VORPSYrm
    139337082U,	// VORPSYrr
    139337082U,	// VORPSrm
    139337082U,	// VORPSrr
    139206572U,	// VPABSBrm128
    139337644U,	// VPABSBrr128
    139206580U,	// VPABSDrm128
    139337652U,	// VPABSDrr128
    139206588U,	// VPABSWrm128
    139337660U,	// VPABSWrr128
    139337668U,	// VPACKSSDWrm
    139337668U,	// VPACKSSDWrr
    139337679U,	// VPACKSSWBrm
    139337679U,	// VPACKSSWBrr
    139337690U,	// VPACKUSDWrm
    139337690U,	// VPACKUSDWrr
    139337701U,	// VPACKUSWBrm
    139337701U,	// VPACKUSWBrr
    139337712U,	// VPADDBrm
    139337712U,	// VPADDBrr
    139337720U,	// VPADDDrm
    139337720U,	// VPADDDrr
    139337728U,	// VPADDQrm
    139337728U,	// VPADDQrr
    139337736U,	// VPADDSBrm
    139337736U,	// VPADDSBrr
    139337745U,	// VPADDSWrm
    139337745U,	// VPADDSWrr
    139337754U,	// VPADDUSBrm
    139337754U,	// VPADDUSBrr
    139337764U,	// VPADDUSWrm
    139337764U,	// VPADDUSWrr
    139337774U,	// VPADDWrm
    139337774U,	// VPADDWrr
    139337782U,	// VPALIGNR128rm
    139337782U,	// VPALIGNR128rr
    139337792U,	// VPANDNrm
    139337792U,	// VPANDNrr
    139337800U,	// VPANDrm
    139337800U,	// VPANDrr
    139337807U,	// VPAVGBrm
    139337807U,	// VPAVGBrr
    139337815U,	// VPAVGWrm
    139337815U,	// VPAVGWrr
    139337823U,	// VPBLENDVBrm
    139337823U,	// VPBLENDVBrr
    139337834U,	// VPBLENDWrmi
    139337834U,	// VPBLENDWrri
    139337844U,	// VPCLMULHQHQDQrm
    139337844U,	// VPCLMULHQHQDQrr
    139337859U,	// VPCLMULHQLQDQrm
    139337859U,	// VPCLMULHQLQDQrr
    139337874U,	// VPCLMULLQHQDQrm
    139337874U,	// VPCLMULLQHQDQrr
    139337889U,	// VPCLMULLQLQDQrm
    139337889U,	// VPCLMULLQLQDQrr
    139337904U,	// VPCLMULQDQrm
    139337904U,	// VPCLMULQDQrr
    139337916U,	// VPCMPEQBrm
    139337916U,	// VPCMPEQBrr
    139337926U,	// VPCMPEQDrm
    139337926U,	// VPCMPEQDrr
    139337936U,	// VPCMPEQQrm
    139337936U,	// VPCMPEQQrr
    139337946U,	// VPCMPEQWrm
    139337946U,	// VPCMPEQWrr
    139206884U,	// VPCMPESTRIArm
    139337956U,	// VPCMPESTRIArr
    139206884U,	// VPCMPESTRICrm
    139337956U,	// VPCMPESTRICrr
    139206884U,	// VPCMPESTRIOrm
    139337956U,	// VPCMPESTRIOrr
    139206884U,	// VPCMPESTRISrm
    139337956U,	// VPCMPESTRISrr
    139206884U,	// VPCMPESTRIZrm
    139337956U,	// VPCMPESTRIZrr
    139206884U,	// VPCMPESTRIrm
    139337956U,	// VPCMPESTRIrr
    0U,	// VPCMPESTRM128MEM
    0U,	// VPCMPESTRM128REG
    139206896U,	// VPCMPESTRM128rm
    139337968U,	// VPCMPESTRM128rr
    139337980U,	// VPCMPGTBrm
    139337980U,	// VPCMPGTBrr
    139337990U,	// VPCMPGTDrm
    139337990U,	// VPCMPGTDrr
    139338000U,	// VPCMPGTQrm
    139338000U,	// VPCMPGTQrr
    139338010U,	// VPCMPGTWrm
    139338010U,	// VPCMPGTWrr
    139206948U,	// VPCMPISTRIArm
    139338020U,	// VPCMPISTRIArr
    139206948U,	// VPCMPISTRICrm
    139338020U,	// VPCMPISTRICrr
    139206948U,	// VPCMPISTRIOrm
    139338020U,	// VPCMPISTRIOrr
    139206948U,	// VPCMPISTRISrm
    139338020U,	// VPCMPISTRISrr
    139206948U,	// VPCMPISTRIZrm
    139338020U,	// VPCMPISTRIZrr
    139206948U,	// VPCMPISTRIrm
    139338020U,	// VPCMPISTRIrr
    0U,	// VPCMPISTRM128MEM
    0U,	// VPCMPISTRM128REG
    139206960U,	// VPCMPISTRM128rm
    139338032U,	// VPCMPISTRM128rr
    139338044U,	// VPERM2F128rm
    139338044U,	// VPERM2F128rr
    141041992U,	// VPERMILPDYmi
    139338056U,	// VPERMILPDYri
    139338056U,	// VPERMILPDYrm
    139338056U,	// VPERMILPDYrr
    140386632U,	// VPERMILPDmi
    139338056U,	// VPERMILPDri
    139338056U,	// VPERMILPDrm
    139338056U,	// VPERMILPDrr
    141042003U,	// VPERMILPSYmi
    139338067U,	// VPERMILPSYri
    139338067U,	// VPERMILPSYrm
    139338067U,	// VPERMILPSYrr
    140386643U,	// VPERMILPSmi
    139338067U,	// VPERMILPSri
    139338067U,	// VPERMILPSrm
    139338067U,	// VPERMILPSrr
    809509214U,	// VPEXTRBmr
    139338078U,	// VPEXTRBrr
    139338078U,	// VPEXTRBrr64
    541073767U,	// VPEXTRDmr
    139338087U,	// VPEXTRDrr
    675291504U,	// VPEXTRQmr
    139338096U,	// VPEXTRQrr
    272638329U,	// VPEXTRWmr
    139338105U,	// VPEXTRWri
    139338114U,	// VPHADDDrm128
    139338114U,	// VPHADDDrr128
    139338123U,	// VPHADDSWrm128
    139338123U,	// VPHADDSWrr128
    139338133U,	// VPHADDWrm128
    139338133U,	// VPHADDWrr128
    139207070U,	// VPHMINPOSUWrm128
    139338142U,	// VPHMINPOSUWrr128
    139338155U,	// VPHSUBDrm128
    139338155U,	// VPHSUBDrr128
    139338164U,	// VPHSUBSWrm128
    139338164U,	// VPHSUBSWrr128
    139338174U,	// VPHSUBWrm128
    139338174U,	// VPHSUBWrr128
    139338183U,	// VPINSRBrm
    139338183U,	// VPINSRBrr
    139338192U,	// VPINSRDrm
    139338192U,	// VPINSRDrr
    139338201U,	// VPINSRQrm
    139338201U,	// VPINSRQrr
    139338210U,	// VPINSRWrmi
    139338210U,	// VPINSRWrr64i
    139338210U,	// VPINSRWrri
    139338219U,	// VPMADDUBSWrm128
    139338219U,	// VPMADDUBSWrr128
    139338231U,	// VPMADDWDrm
    139338231U,	// VPMADDWDrr
    139338241U,	// VPMAXSBrm
    139338241U,	// VPMAXSBrr
    139338250U,	// VPMAXSDrm
    139338250U,	// VPMAXSDrr
    139338259U,	// VPMAXSWrm
    139338259U,	// VPMAXSWrr
    139338268U,	// VPMAXUBrm
    139338268U,	// VPMAXUBrr
    139338277U,	// VPMAXUDrm
    139338277U,	// VPMAXUDrr
    139338286U,	// VPMAXUWrm
    139338286U,	// VPMAXUWrr
    139338295U,	// VPMINSBrm
    139338295U,	// VPMINSBrr
    139338304U,	// VPMINSDrm
    139338304U,	// VPMINSDrr
    139338313U,	// VPMINSWrm
    139338313U,	// VPMINSWrr
    139338322U,	// VPMINUBrm
    139338322U,	// VPMINUBrr
    139338331U,	// VPMINUDrm
    139338331U,	// VPMINUDrr
    139338340U,	// VPMINUWrm
    139338340U,	// VPMINUWrr
    139338349U,	// VPMOVMSKBr64r
    139338349U,	// VPMOVMSKBrr
    139600504U,	// VPMOVSXBDrm
    139338360U,	// VPMOVSXBDrr
    139469443U,	// VPMOVSXBQrm
    139338371U,	// VPMOVSXBQrr
    139731598U,	// VPMOVSXBWrm
    139338382U,	// VPMOVSXBWrr
    139731609U,	// VPMOVSXDQrm
    139338393U,	// VPMOVSXDQrr
    139731620U,	// VPMOVSXWDrm
    139338404U,	// VPMOVSXWDrr
    139600559U,	// VPMOVSXWQrm
    139338415U,	// VPMOVSXWQrr
    139600570U,	// VPMOVZXBDrm
    139338426U,	// VPMOVZXBDrr
    139469509U,	// VPMOVZXBQrm
    139338437U,	// VPMOVZXBQrr
    139731664U,	// VPMOVZXBWrm
    139338448U,	// VPMOVZXBWrr
    139731675U,	// VPMOVZXDQrm
    139338459U,	// VPMOVZXDQrr
    139731686U,	// VPMOVZXWDrm
    139338470U,	// VPMOVZXWDrr
    139600625U,	// VPMOVZXWQrm
    139338481U,	// VPMOVZXWQrr
    139338492U,	// VPMULDQrm
    139338492U,	// VPMULDQrr
    139338501U,	// VPMULHRSWrm128
    139338501U,	// VPMULHRSWrr128
    139338512U,	// VPMULHUWrm
    139338512U,	// VPMULHUWrr
    139338522U,	// VPMULHWrm
    139338522U,	// VPMULHWrr
    139338531U,	// VPMULLDrm
    139338531U,	// VPMULLDrr
    139338540U,	// VPMULLWrm
    139338540U,	// VPMULLWrr
    139338549U,	// VPMULUDQrm
    139338549U,	// VPMULUDQrr
    139338559U,	// VPORrm
    139338559U,	// VPORrr
    139338565U,	// VPSADBWrm
    139338565U,	// VPSADBWrr
    139338574U,	// VPSHUFBrm128
    139338574U,	// VPSHUFBrr128
    139207511U,	// VPSHUFDmi
    139338583U,	// VPSHUFDri
    139207520U,	// VPSHUFHWmi
    139338592U,	// VPSHUFHWri
    139207530U,	// VPSHUFLWmi
    139338602U,	// VPSHUFLWri
    139338612U,	// VPSIGNBrm128
    139338612U,	// VPSIGNBrr128
    139338621U,	// VPSIGNDrm128
    139338621U,	// VPSIGNDrr128
    139338630U,	// VPSIGNWrm128
    139338630U,	// VPSIGNWrr128
    139338639U,	// VPSLLDQri
    139338648U,	// VPSLLDri
    139338648U,	// VPSLLDrm
    139338648U,	// VPSLLDrr
    139338656U,	// VPSLLQri
    139338656U,	// VPSLLQrm
    139338656U,	// VPSLLQrr
    139338664U,	// VPSLLWri
    139338664U,	// VPSLLWrm
    139338664U,	// VPSLLWrr
    139338672U,	// VPSRADri
    139338672U,	// VPSRADrm
    139338672U,	// VPSRADrr
    139338680U,	// VPSRAWri
    139338680U,	// VPSRAWrm
    139338680U,	// VPSRAWrr
    139338688U,	// VPSRLDQri
    139338697U,	// VPSRLDri
    139338697U,	// VPSRLDrm
    139338697U,	// VPSRLDrr
    139338705U,	// VPSRLQri
    139338705U,	// VPSRLQrm
    139338705U,	// VPSRLQrr
    139338713U,	// VPSRLWri
    139338713U,	// VPSRLWrm
    139338713U,	// VPSRLWrr
    139338721U,	// VPSUBBrm
    139338721U,	// VPSUBBrr
    139338729U,	// VPSUBDrm
    139338729U,	// VPSUBDrr
    139338737U,	// VPSUBQrm
    139338737U,	// VPSUBQrr
    139338745U,	// VPSUBSBrm
    139338745U,	// VPSUBSBrr
    139338754U,	// VPSUBSWrm
    139338754U,	// VPSUBSWrr
    139338763U,	// VPSUBUSBrm
    139338763U,	// VPSUBUSBrr
    139338773U,	// VPSUBUSWrm
    139338773U,	// VPSUBUSWrr
    139338783U,	// VPSUBWrm
    139338783U,	// VPSUBWrr
    141173799U,	// VPTESTYrm
    139338791U,	// VPTESTYrr
    140387367U,	// VPTESTrm
    139338791U,	// VPTESTrr
    139338799U,	// VPUNPCKHBWrm
    139338799U,	// VPUNPCKHBWrr
    139338811U,	// VPUNPCKHDQrm
    139338811U,	// VPUNPCKHDQrr
    139338823U,	// VPUNPCKHQDQrm
    139338823U,	// VPUNPCKHQDQrr
    139338836U,	// VPUNPCKHWDrm
    139338836U,	// VPUNPCKHWDrr
    139338848U,	// VPUNPCKLBWrm
    139338848U,	// VPUNPCKLBWrr
    139338860U,	// VPUNPCKLDQrm
    139338860U,	// VPUNPCKLDQrr
    139338872U,	// VPUNPCKLQDQrm
    139338872U,	// VPUNPCKLQDQrr
    139338885U,	// VPUNPCKLWDrm
    139338885U,	// VPUNPCKLWDrr
    139338897U,	// VPXORrm
    139338897U,	// VPXORrr
    141042840U,	// VRCPPSYm
    141042840U,	// VRCPPSYm_Int
    139338904U,	// VRCPPSYr
    139338904U,	// VRCPPSYr_Int
    140387480U,	// VRCPPSm
    140387480U,	// VRCPPSm_Int
    139338904U,	// VRCPPSr
    139338904U,	// VRCPPSr_Int
    139338912U,	// VRCPSSm
    141436064U,	// VRCPSSm_Int
    139338912U,	// VRCPSSr
    141436064U,	// VRCPSSr_Int
    141042856U,	// VROUNDPDm
    140387496U,	// VROUNDPDm_AVX
    139338920U,	// VROUNDPDr
    139338920U,	// VROUNDPDr_AVX
    141042866U,	// VROUNDPSm
    140387506U,	// VROUNDPSm_AVX
    139338930U,	// VROUNDPSr
    139338930U,	// VROUNDPSr_AVX
    139338940U,	// VROUNDSDm
    139338940U,	// VROUNDSDm_AVX
    139338940U,	// VROUNDSDr
    139338940U,	// VROUNDSDr_AVX
    139338950U,	// VROUNDSSm
    139338950U,	// VROUNDSSm_AVX
    139338950U,	// VROUNDSSr
    139338950U,	// VROUNDSSr_AVX
    141042856U,	// VROUNDYPDm
    141042856U,	// VROUNDYPDm_AVX
    139338920U,	// VROUNDYPDr
    139338920U,	// VROUNDYPDr_AVX
    141042866U,	// VROUNDYPSm
    141042866U,	// VROUNDYPSm_AVX
    139338930U,	// VROUNDYPSr
    139338930U,	// VROUNDYPSr_AVX
    141042896U,	// VRSQRTPSYm
    141042896U,	// VRSQRTPSYm_Int
    139338960U,	// VRSQRTPSYr
    139338960U,	// VRSQRTPSYr_Int
    140387536U,	// VRSQRTPSm
    140387536U,	// VRSQRTPSm_Int
    139338960U,	// VRSQRTPSr
    139338960U,	// VRSQRTPSr_Int
    139338970U,	// VRSQRTSSm
    141436122U,	// VRSQRTSSm_Int
    139338970U,	// VRSQRTSSr
    141436122U,	// VRSQRTSSr_Int
    138683620U,	// VSHUFPDYrmi
    138552548U,	// VSHUFPDYrri
    138683620U,	// VSHUFPDrmi
    138552548U,	// VSHUFPDrri
    139338989U,	// VSHUFPSYrmi
    139338989U,	// VSHUFPSYrri
    139338989U,	// VSHUFPSrmi
    139338989U,	// VSHUFPSrri
    141042934U,	// VSQRTPDYm
    141042934U,	// VSQRTPDYm_Int
    139338998U,	// VSQRTPDYr
    139338998U,	// VSQRTPDYr_Int
    140387574U,	// VSQRTPDm
    140387574U,	// VSQRTPDm_Int
    139338998U,	// VSQRTPDr
    139338998U,	// VSQRTPDr_Int
    141042943U,	// VSQRTPSYm
    141042943U,	// VSQRTPSYm_Int
    139339007U,	// VSQRTPSYr
    139339007U,	// VSQRTPSYr_Int
    140387583U,	// VSQRTPSm
    140387583U,	// VSQRTPSm_Int
    139339007U,	// VSQRTPSr
    139339007U,	// VSQRTPSr_Int
    139339016U,	// VSQRTSDm
    141436168U,	// VSQRTSDm_Int
    139339016U,	// VSQRTSDr
    141436168U,	// VSQRTSDr_Int
    139339025U,	// VSQRTSSm
    141436177U,	// VSQRTSSm_Int
    139339025U,	// VSQRTSSr
    141436177U,	// VSQRTSSr_Int
    536880410U,	// VSTMXCSR
    139339044U,	// VSUBPDYrm
    139339044U,	// VSUBPDYrr
    139339044U,	// VSUBPDrm
    139339044U,	// VSUBPDrr
    139339052U,	// VSUBPSYrm
    139339052U,	// VSUBPSYrr
    139339052U,	// VSUBPSrm
    139339052U,	// VSUBPSrr
    139339060U,	// VSUBSDrm
    139339060U,	// VSUBSDrm_Int
    139339060U,	// VSUBSDrr
    139339060U,	// VSUBSDrr_Int
    139339068U,	// VSUBSSrm
    139339068U,	// VSUBSSrm_Int
    139339068U,	// VSUBSSrr
    139339068U,	// VSUBSSrr_Int
    141043012U,	// VTESTPDYrm
    139339076U,	// VTESTPDYrr
    140387652U,	// VTESTPDrm
    139339076U,	// VTESTPDrr
    141043021U,	// VTESTPSYrm
    139339085U,	// VTESTPSYrr
    140387661U,	// VTESTPSrm
    139339085U,	// VTESTPSrr
    140512211U,	// VUCOMISDrm
    139332563U,	// VUCOMISDrr
    140643293U,	// VUCOMISSrm
    139332573U,	// VUCOMISSrr
    139339094U,	// VUNPCKHPDYrm
    139339094U,	// VUNPCKHPDYrr
    139339094U,	// VUNPCKHPDrm
    139339094U,	// VUNPCKHPDrr
    139339105U,	// VUNPCKHPSYrm
    139339105U,	// VUNPCKHPSYrr
    139339105U,	// VUNPCKHPSrm
    139339105U,	// VUNPCKHPSrr
    139339116U,	// VUNPCKLPDYrm
    139339116U,	// VUNPCKLPDYrr
    139339116U,	// VUNPCKLPDrm
    139339116U,	// VUNPCKLPDrr
    139339127U,	// VUNPCKLPSYrm
    139339127U,	// VUNPCKLPSYrr
    139339127U,	// VUNPCKLPSrm
    139339127U,	// VUNPCKLPSrr
    139337089U,	// VXORPDYrm
    139337089U,	// VXORPDYrr
    139337089U,	// VXORPDrm
    139337089U,	// VXORPDrr
    139337097U,	// VXORPSYrm
    139337097U,	// VXORPSYrr
    139337097U,	// VXORPSrm
    139337097U,	// VXORPSrr
    9602U,	// VZEROALL
    9611U,	// VZEROUPPER
    0U,	// V_SET0PD
    0U,	// V_SET0PI
    0U,	// V_SET0PS
    0U,	// V_SETALLONES
    9622U,	// WAIT
    9627U,	// WBINVD
    671089781U,	// WINCALL64m
    1342178421U,	// WINCALL64pcrel32
    134218869U,	// WINCALL64r
    9634U,	// WIN_ALLOCA
    9661U,	// WRMSR
    272639427U,	// XADD16rm
    139339203U,	// XADD16rr
    541074883U,	// XADD32rm
    139339203U,	// XADD32rr
    675292611U,	// XADD64rm
    139339203U,	// XADD64rr
    809510339U,	// XADD8rm
    139339203U,	// XADD8rr
    134227401U,	// XCHG16ar
    2281711060U,	// XCHG16rm
    3087017428U,	// XCHG16rr
    134227418U,	// XCHG32ar
    2415928788U,	// XCHG32rm
    3087017428U,	// XCHG32rr
    134227430U,	// XCHG64ar
    3221235156U,	// XCHG64rm
    3087017428U,	// XCHG64rr
    2550146516U,	// XCHG8rm
    3087017428U,	// XCHG8rr
    134227442U,	// XCH_F
    9720U,	// XGETBV
    9727U,	// XLAT
    134227461U,	// XOR16i16
    272639503U,	// XOR16mi
    272639503U,	// XOR16mi8
    272639503U,	// XOR16mr
    411051535U,	// XOR16ri
    411051535U,	// XOR16ri8
    415245839U,	// XOR16rm
    411051535U,	// XOR16rr
    138552847U,	// XOR16rr_REV
    134227476U,	// XOR32i32
    541074959U,	// XOR32mi
    541074959U,	// XOR32mi8
    541074959U,	// XOR32mr
    411051535U,	// XOR32ri
    411051535U,	// XOR32ri8
    419440143U,	// XOR32rm
    411051535U,	// XOR32rr
    138552847U,	// XOR32rr_REV
    134227487U,	// XOR64i32
    675292687U,	// XOR64mi32
    675292687U,	// XOR64mi8
    675292687U,	// XOR64mr
    411051535U,	// XOR64ri32
    411051535U,	// XOR64ri8
    423634447U,	// XOR64rm
    411051535U,	// XOR64rr
    138552847U,	// XOR64rr_REV
    134227498U,	// XOR8i8
    809510415U,	// XOR8mi
    809510415U,	// XOR8mr
    411051535U,	// XOR8ri
    427828751U,	// XOR8rm
    411051535U,	// XOR8rr
    138552847U,	// XOR8rr_REV
    138676715U,	// XORPDrm
    138545643U,	// XORPDrr
    138676722U,	// XORPSrm
    138545650U,	// XORPSrr
    9780U,	// XSETBV
    0U
  };

  const char *AsmStrs = 
    "DBG_VALUE\000aaa\000aad\t\000aam\t\000aas\000fabs\000adc\t%ax, \000adc\t"
    "\000adc\t%eax, \000adc\t%rax, \000adc\t%al, \000add\t%ax, \000add\t\000"
    "add\t%eax, \000add\t%rax, \000add\t%al, \000addpd\t\000addps\t\000addsd"
    "\t\000addss\t\000addsubpd\t\000addsubps\t\000fadd\t\000fiadd\t\000faddp"
    "\t\000#ADJCALLSTACKDOWN\000#ADJCALLSTACKUP\000aesdeclast\t\000aesdec\t\000"
    "aesenclast\t\000aesenc\t\000aesimc\t\000aeskeygenassist\t\000and\t%ax, "
    "\000and\t\000and\t%eax, \000and\t%rax, \000and\t%al, \000andnpd\t\000an"
    "dnps\t\000andpd\t\000andps\t\000arpl\t\000#ATOMADD6432 PSEUDO!\000#ATOM"
    "AND16 PSEUDO!\000#ATOMAND32 PSEUDO!\000#ATOMAND64 PSEUDO!\000#ATOMAND64"
    "32 PSEUDO!\000#ATOMAND8 PSEUDO!\000#ATOMMAX16 PSEUDO!\000#ATOMMAX32 PSE"
    "UDO!\000#ATOMMAX64 PSEUDO!\000#ATOMMIN16 PSEUDO!\000#ATOMMIN32 PSEUDO!\000"
    "#ATOMMIN64 PSEUDO!\000#ATOMNAND16 PSEUDO!\000#ATOMNAND32 PSEUDO!\000#AT"
    "OMNAND64 PSEUDO!\000#ATOMNAND6432 PSEUDO!\000#ATOMNAND8 PSEUDO!\000#ATO"
    "MOR16 PSEUDO!\000#ATOMOR32 PSEUDO!\000#ATOMOR64 PSEUDO!\000#ATOMOR6432 "
    "PSEUDO!\000#ATOMOR8 PSEUDO!\000#ATOMSUB6432 PSEUDO!\000#ATOMSWAP6432 PS"
    "EUDO!\000#ATOMUMAX16 PSEUDO!\000#ATOMUMAX32 PSEUDO!\000#ATOMUMAX64 PSEU"
    "DO!\000#ATOMUMIN16 PSEUDO!\000#ATOMUMIN32 PSEUDO!\000#ATOMUMIN64 PSEUDO"
    "!\000#ATOMXOR16 PSEUDO!\000#ATOMXOR32 PSEUDO!\000#ATOMXOR64 PSEUDO!\000"
    "#ATOMXOR6432 PSEUDO!\000#ATOMXOR8 PSEUDO!\000blendpd\t\000blendps\t\000"
    "blendvpd\t\000blendvps\t\000bound\t\000bsf\t\000bsr\t\000bswap\t\000bt\t"
    "\000btc\t\000btr\t\000bts\t\000call\t\000callw\t\000cbw\000cdq\000cdqe\000"
    "fchs\000clc\000cld\000clflush\t\000cli\000clts\000cmc\000cmova\t\000cmo"
    "vae\t\000cmovb\t\000cmovbe\t\000fcmovbe\t%ST(0), \000fcmovb\t%ST(0), \000"
    "cmove\t\000fcmove\t%ST(0), \000cmovg\t\000cmovge\t\000cmovl\t\000cmovle"
    "\t\000fcmovnbe\t%ST(0), \000fcmovnb\t%ST(0), \000cmovne\t\000fcmovne\t%"
    "ST(0), \000cmovno\t\000cmovnp\t\000fcmovnu\t%ST(0), \000cmovns\t\000cmo"
    "vo\t\000cmovp\t\000fcmovu\t %ST(0), \000cmovs\t\000#CMOV_FR32 PSEUDO!\000"
    "#CMOV_FR64 PSEUDO!\000#CMOV_GR16* PSEUDO!\000#CMOV_GR32* PSEUDO!\000#CM"
    "OV_GR8 PSEUDO!\000#CMOV_RFP32 PSEUDO!\000#CMOV_RFP64 PSEUDO!\000#CMOV_R"
    "FP80 PSEUDO!\000#CMOV_V2F64 PSEUDO!\000#CMOV_V2I64 PSEUDO!\000#CMOV_V4F"
    "32 PSEUDO!\000cmp\t%ax, \000cmp\t\000cmp\t%eax, \000cmp\t%rax, \000cmp\t"
    "%al, \000cmp\000cmppd\t\000cmpps\t\000cmps\000cmpsq\000cmpsd\t\000cmpss"
    "\t\000cmpxchg16b\t\000cmpxchg\t\000cmpxchg8b\t\000comisd\t\000comiss\t\000"
    "fcomp\t\000fcompi\t\000fcomi\t\000fcom\t\000fcos\000cpuid\000cqo\000crc"
    "32 \t\000cs\000cvtdq2pd\t\000cvtdq2ps\t\000cvtpd2dq\t\000cvtpd2ps\t\000"
    "cvtps2dq\t\000cvtps2pd\t\000cvtsd2si\t\000cvtsd2ss\t\000cvtsi2sd\t\000c"
    "vtsi2ss\t\000cvtss2sd\t\000cvtss2si\t\000cvttpd2dq\t\000cvttps2dq\t\000"
    "cvttsd2si\t\000cvttss2si\t\000cwd\000cwde\000daa\000das\000data16\000de"
    "c\t\000div\t\000divpd\t\000divps\t\000fdivr\t\000fidivr\t\000fdivrp\t\000"
    "divsd\t\000divss\t\000fdiv\t\000fidiv\t\000fdivp\t\000dppd\t\000dpps\t\000"
    "ds\000ret\t#eh_return, addr: \000enter\t\000es\000extractps\t\000f2xm1\000"
    "lcall\t\000ljmp\t\000fbld\t\000fbstp\t\000fcompp\000fdecstp\000femms\000"
    "ffree\t\000ficom\t\000ficomp\t\000fincstp\000fldcw\t\000fldenv\t\000fld"
    "l2e\000fldl2t\000fldlg2\000fldln2\000fldpi\000fnclex\000fninit\000fnop\000"
    "fnstcw\t\000fnstsw %ax\000fnstsw\t\000fpatan\000fprem\000fprem1\000fpta"
    "n\000frndint\000frstor\t\000fnsave\t\000fscale\000fsincos\000fnstenv\t\000"
    "fs\000fxam\000fxrstor\t\000fxrstorq\t\000fxsave\t\000fxsaveq\t\000fxtra"
    "ct\000fyl2x\000fyl2xp1\000movapd\t\000movaps\t\000orpd\t\000orps\t\000x"
    "orpd\t\000xorps\t\000gs\000haddpd\t\000haddps\t\000hlt\000hsubpd\t\000h"
    "subps\t\000idiv\t\000fild\t\000imul\t\000ins\000in\t%AX, \000in\t%AX, %"
    "DX\000in\t%EAX, \000in\t%EAX, %DX\000in\t%AL, \000in\t%AL, %DX\000inc\t"
    "\000insertps\t\000int\t\000int3\000into\000invd\000invept\000invlpg\t\000"
    "invvpid\000iretw\000iretd\000iretq\000fisttp\t\000fist\t\000fistp\t\000"
    "#MEMBARRIER\000lock\n\tor\t(%rsp), \000ucomisd\t\000ucomiss\t\000vcmp\000"
    "vcomisd\t\000vcomiss\t\000vcvtdq2pd\t\000vcvtdq2ps\t\000vcvtpd2dq\t\000"
    "vcvtpd2ps\t\000vcvtps2dq\t\000vcvtps2pd\t\000vcvtsd2si\t\000vcvtsd2ss\t"
    "\000vcvtsi2sd\t\000vcvtsi2ss\t\000vcvtss2sd\t\000vcvtss2si\t\000vcvttpd"
    "2dq\t\000vcvttps2dq\t\000vcvttsd2si\t\000vcvttss2si\t\000vucomisd\t\000"
    "vucomiss\t\000jae\t\000ja\t\000jbe\t\000jb\t\000jcxz\t\000jecxz\t\000je"
    "\t\000jge\t\000jg\t\000jle\t\000jl\t\000jmp\t\000jne\t\000jno\t\000jnp\t"
    "\000jns\t\000jo\t\000jp\t\000jrcxz\t\000js\t\000lahf\000lar\t\000lock\n"
    "\tcmpxchg\t\000lock\n\tcmpxchgq\t\000lock\n\tcmpxchg8b\t\000lddqu\t\000"
    "ldmxcsr\t\000lds\t\000fldz\000fld1\000fld\t\000lea\t\000leave\000les\t\000"
    "lfence\000lfs\t\000lgdtw\t\000lgdt\t\000lgs\t\000lidtw\t\000lidt\t\000l"
    "ldt\t\000lmsw\t\000lock\n\tadd\t\000lock\n\tdec\t\000lock\n\tinc\t\000l"
    "ock\000lock\n\tsub\t\000lodsb\000lodsd\000lodsq\000lodsw\000loop\t\000l"
    "oope\t\000loopne\t\000lret\t\000lretw\t\000lretl\000lretq\000lsl\t\000l"
    "ss\t\000ltr\t\000lock\n\txadd\t\000maskmovdqu\t\000maxpd\t\000maxps\t\000"
    "maxsd\t\000maxss\t\000mfence\000minpd\t\000minps\t\000minsd\t\000minss\t"
    "\000cvtpd2pi\t\000cvtpi2pd\t\000cvtpi2ps\t\000cvtps2pi\t\000cvttpd2pi\t"
    "\000cvttps2pi\t\000emms\000maskmovq\t\000movd\t\000movdq2q\t\000movntq\t"
    "\000movq2dq\t\000movq\t\000pabsb\t\000pabsd\t\000pabsw\t\000packssdw\t\000"
    "packsswb\t\000packuswb\t\000paddb\t\000paddd\t\000paddq\t\000paddsb\t\000"
    "paddsw\t\000paddusb\t\000paddusw\t\000paddw\t\000palignr\t\000pandn\t\000"
    "pand\t\000pavgb\t\000pavgw\t\000pcmpeqb\t\000pcmpeqd\t\000pcmpeqw\t\000"
    "pcmpgtb\t\000pcmpgtd\t\000pcmpgtw\t\000pextrw\t\000phaddsw\t\000phaddw\t"
    "\000phaddd\t\000phsubd\t\000phsubsw\t\000phsubw\t\000pinsrw\t\000pmaddu"
    "bsw\t\000pmaddwd\t\000pmaxsw\t\000pmaxub\t\000pminsw\t\000pminub\t\000p"
    "movmskb\t\000pmulhrsw\t\000pmulhuw\t\000pmulhw\t\000pmullw\t\000pmuludq"
    "\t\000por\t\000psadbw\t\000pshufb\t\000pshufw\t\000psignb\t\000psignd\t"
    "\000psignw\t\000pslld\t\000psllq\t\000psllw\t\000psrad\t\000psraw\t\000"
    "psrld\t\000psrlq\t\000psrlw\t\000psubb\t\000psubd\t\000psubq\t\000psubs"
    "b\t\000psubsw\t\000psubusb\t\000psubusw\t\000psubw\t\000punpckhbw\t\000"
    "punpckhdq\t\000punpckhwd\t\000punpcklbw\t\000punpckldq\t\000punpcklwd\t"
    "\000pxor\t\000monitor\000mov\t\000mov\t%ax, \000mov\t%eax, \000movabs\t"
    "\000mov\t%al, \000movddup\t\000movdqa\t\000movdqu\t\000movhlps\t\000mov"
    "hpd\t\000movhps\t\000movlhps\t\000movlpd\t\000movlps\t\000movmskpd\t\000"
    "movmskps\t\000movntdqa\t\000movntdq\t\000movnti\t\000movntpd\t\000movnt"
    "ps\t\000\000movsd\000movsd\t\000movshdup\t\000movsldup\t\000movsq\000mo"
    "vss\t\000movsx\t\000movsxd\t\000movupd\t\000movups\t\000movzx\t\000mpsa"
    "dbw\t\000mul\t\000mulpd\t\000mulps\t\000mulsd\t\000mulss\t\000fmul\t\000"
    "fimul\t\000fmulp\t\000mwait\000neg\t\000nop\000nop\t\000not\t\000or\t%a"
    "x, \000or\t\000or\t%eax, \000lock\n\tor\t\000or\t%rax, \000or\t%al, \000"
    "out\t\000out\t%DX, %AX\000out\t%DX, %EAX\000out\t%DX, %AL\000outsb\000o"
    "utsd\000outsw\000packusdw\t\000pause\000pavgusb\t\000pblendvb\t\000pble"
    "ndw\t\000pcmpeqq\t\000pcmpestri\t\000pcmpestrm\t\000pcmpgtq\t\000pcmpis"
    "tri\t\000pcmpistrm\t\000pextrb\t\000pextrd\t\000pextrq\t\000pf2id\t\000"
    "pf2iw\t\000pfacc\t\000pfadd\t\000pfcmpeq\t\000pfcmpge\t\000pfcmpgt\t\000"
    "pfmax\t\000pfmin\t\000pfmul\t\000pfnacc\t\000pfpnacc\t\000pfrcpit1\t\000"
    "pfrcpit2\t\000pfrcp\t\000pfrsqit1\t\000pfrsqrt\t\000pfsubr\t\000pfsub\t"
    "\000phminposuw\t\000pi2fd\t\000pi2fw\t\000pinsrb\t\000pinsrd\t\000pinsr"
    "q\t\000pmaxsb\t\000pmaxsd\t\000pmaxud\t\000pmaxuw\t\000pminsb\t\000pmin"
    "sd\t\000pminud\t\000pminuw\t\000pmovsxbd\t\000pmovsxbq\t\000pmovsxbw\t\000"
    "pmovsxdq\t\000pmovsxwd\t\000pmovsxwq\t\000pmovzxbd\t\000pmovzxbq\t\000p"
    "movzxbw\t\000pmovzxdq\t\000pmovzxwd\t\000pmovzxwq\t\000pmuldq\t\000pmul"
    "hrw\t\000pmulld\t\000pop\t\000popa\000popcnt\t\000pop\t%ds\000pop\t%es\000"
    "popf\000popfd\000popfq\000pop\t%fs\000pop\t%gs\000pop\t%ss\000prefetch "
    "\000prefetchnta\t\000prefetcht0\t\000prefetcht1\t\000prefetcht2\t\000pr"
    "efetchw \000pshufd\t\000pshufhw\t\000pshuflw\t\000pslldq\t\000psrldq\t\000"
    "pswapd\t\000ptest \t\000punpckhqdq\t\000punpcklqdq\t\000push\t\000pusha"
    "\000push\t%cs\000push\t%ds\000push\t%es\000pushf\000pushfd\000pushfq\000"
    "push\t%fs\000push\t%gs\000push\t%ss\000rcl\t\000rcpps\t\000rcpss\t\000r"
    "cr\t\000rdmsr\000rdpmc\000rdtsc\000rdtscp\000repne\000rep movsb\000rep "
    "movsd\000rep movsq\000rep movsw\000rep\000rep stosb\000rep stosd\000rep"
    " stosq\000rep stosw\000ret\000ret\t\000retw\t\000rex64\000rol\t\000ror\t"
    "\000roundpd\t\000roundps\t\000roundsd\t\000roundss\t\000rsm\000rsqrtps\t"
    "\000rsqrtss\t\000sahf\000sar\t\000sbb\t%ax, \000sbb\t\000sbb\t%eax, \000"
    "sbb\t%rax, \000sbb\t%al, \000scas\000scasq\000setae\t\000seta\t\000setb"
    "e\t\000setb\t\000sete\t\000setge\t\000setg\t\000setle\t\000setl\t\000se"
    "tne\t\000setno\t\000setnp\t\000setns\t\000seto\t\000setp\t\000sets\t\000"
    "sfence\000sgdtw\t\000sgdt\t\000shl\t\000shld\t\000shr\t\000shrd\t\000sh"
    "ufpd\t\000shufps\t\000sidtw\t\000sidt\t\000fsin\000sldt\t\000smsw\t\000"
    "sqrtpd\t\000sqrtps\t\000sqrtsd\t\000sqrtss\t\000fsqrt\000ss\000stc\000s"
    "td\000sti\000stmxcsr\t\000stosd\000stosq\000str\t\000fst\t\000fstp\t\000"
    "sub\t%ax, \000sub\t\000sub\t%eax, \000sub\t%rax, \000sub\t%al, \000subp"
    "d\t\000subps\t\000fsubr\t\000fisubr\t\000fsubrp\t\000subsd\t\000subss\t"
    "\000fsub\t\000fisub\t\000fsubp\t\000swapgs\000syscall\000sysenter\000sy"
    "sexit\000sysretl\000sysretq\000test\t%ax, \000test\t\000test\t%eax, \000"
    "test\t%rax, \000test\t%al, \000# TLSCall_32\000# TLSCall_64\000# TLS_ad"
    "dr32\000# TLS_addr64\000ud2\000ftst\000fucompi\t\000fucomi\t\000fucompp"
    "\000fucomp\t\000fucom\t\000ud2b\000unpckhpd\t\000unpckhps\t\000unpcklpd"
    "\t\000unpcklps\t\000#VAARG_64 \000vaddpd\t\000vaddps\t\000vaddsd\t\000v"
    "addss\t\000vaddsubpd\t\000vaddsubps\t\000vaesdeclast\t\000vaesdec\t\000"
    "vaesenclast\t\000vaesenc\t\000vaesimc\t\000vaeskeygenassist\t\000vandnp"
    "d\t\000vandnps\t\000vandpd\t\000vandps\t\000#VASTART_SAVE_XMM_REGS \000"
    "vblendpd\t\000vblendps\t\000vblendvpd\t\000vblendvps\t\000vbroadcastf12"
    "8\t\000vbroadcastsd\t\000vbroadcastss\t\000vcmppd\t\000vcmpps\t\000vcmp"
    "sd\t\000vcmpss\t\000vcvtpd2dqx\t\000vcvtpd2dqy\t\000vcvtpd2psx\t\000vcv"
    "tpd2psy\t\000vcvttpd2dqx\t\000vcvttpd2dqy\t\000vdivpd\t\000vdivps\t\000"
    "vdivsd\t\000vdivss\t\000vdppd\t\000vdpps\t\000verr\t\000verw\t\000vextr"
    "actf128\t\000vextractps\t\000vextractps \t\000vfmadd132pd\t\000vfmadd21"
    "3pd\t\000vfmadd231pd\t\000vfmadd132ps\t\000vfmadd213ps\t\000vfmadd231ps"
    "\t\000vfmaddsub132pd\t\000vfmaddsub213pd\t\000vfmaddsub231pd\t\000vfmad"
    "dsub132ps\t\000vfmaddsub213ps\t\000vfmaddsub231ps\t\000vfmsubadd132pd\t"
    "\000vfmsubadd213pd\t\000vfmsubadd231pd\t\000vfmsubadd132ps\t\000vfmsuba"
    "dd213ps\t\000vfmsubadd231ps\t\000vfmsub132pd\t\000vfmsub213pd\t\000vfms"
    "ub231pd\t\000vfmsub132ps\t\000vfmsub213ps\t\000vfmsub231ps\t\000vfnmadd"
    "132pd\t\000vfnmadd213pd\t\000vfnmadd231pd\t\000vfnmadd132ps\t\000vfnmad"
    "d213ps\t\000vfnmadd231ps\t\000vfnmsub132pd\t\000vfnmsub213pd\t\000vfnms"
    "ub231pd\t\000vfnmsub132ps\t\000vfnmsub213ps\t\000vfnmsub231ps\t\000vorp"
    "d\t\000vorps\t\000vxorpd\t\000vxorps\t\000vhaddpd\t\000vhaddps\t\000vhs"
    "ubpd\t\000vhsubps\t\000vinsertf128\t\000vinsertps\t\000vlddqu\t\000vldm"
    "xcsr\t\000vmaskmovdqu\t\000vmaskmovpd\t\000vmaskmovps\t\000vmaxpd\t\000"
    "vmaxps\t\000vmaxsd\t\000vmaxss\t\000vmcall\000vmclear\t\000vminpd\t\000"
    "vminps\t\000vminsd\t\000vminss\t\000vmlaunch\000vmovapd\t\000vmovaps\t\000"
    "vmovddup\t\000vmovd\t\000vmovdqa\t\000vmovdqu\t\000vmovhlps\t\000vmovhp"
    "d\t\000vmovhps\t\000vmovlhps\t\000vmovlpd\t\000vmovlps\t\000vmovq\t\000"
    "vmovmskpd\t\000vmovmskps\t\000vmovntdqa\t\000vmovntdq\t\000vmovntpd\t\000"
    "vmovntps\t\000vmovsd\t\000vmovshdup\t\000vmovsldup\t\000vmovss\t\000vmo"
    "vupd\t\000vmovups\t\000vmpsadbw\t\000vmptrld\t\000vmptrst\t\000vmread\t"
    "\000vmresume\000vmulpd\t\000vmulps\t\000vmulsd\t\000vmulss\t\000vmwrite"
    "\t\000vmxoff\000vmxon\t\000vpabsb\t\000vpabsd\t\000vpabsw\t\000vpackssd"
    "w\t\000vpacksswb\t\000vpackusdw\t\000vpackuswb\t\000vpaddb\t\000vpaddd\t"
    "\000vpaddq\t\000vpaddsb\t\000vpaddsw\t\000vpaddusb\t\000vpaddusw\t\000v"
    "paddw\t\000vpalignr\t\000vpandn\t\000vpand\t\000vpavgb\t\000vpavgw\t\000"
    "vpblendvb\t\000vpblendw\t\000vpclmulhqhqdq\t\000vpclmulhqlqdq\t\000vpcl"
    "mullqhqdq\t\000vpclmullqlqdq\t\000vpclmulqdq\t\000vpcmpeqb\t\000vpcmpeq"
    "d\t\000vpcmpeqq\t\000vpcmpeqw\t\000vpcmpestri\t\000vpcmpestrm\t\000vpcm"
    "pgtb\t\000vpcmpgtd\t\000vpcmpgtq\t\000vpcmpgtw\t\000vpcmpistri\t\000vpc"
    "mpistrm\t\000vperm2f128\t\000vpermilpd\t\000vpermilps\t\000vpextrb\t\000"
    "vpextrd\t\000vpextrq\t\000vpextrw\t\000vphaddd\t\000vphaddsw\t\000vphad"
    "dw\t\000vphminposuw\t\000vphsubd\t\000vphsubsw\t\000vphsubw\t\000vpinsr"
    "b\t\000vpinsrd\t\000vpinsrq\t\000vpinsrw\t\000vpmaddubsw\t\000vpmaddwd\t"
    "\000vpmaxsb\t\000vpmaxsd\t\000vpmaxsw\t\000vpmaxub\t\000vpmaxud\t\000vp"
    "maxuw\t\000vpminsb\t\000vpminsd\t\000vpminsw\t\000vpminub\t\000vpminud\t"
    "\000vpminuw\t\000vpmovmskb\t\000vpmovsxbd\t\000vpmovsxbq\t\000vpmovsxbw"
    "\t\000vpmovsxdq\t\000vpmovsxwd\t\000vpmovsxwq\t\000vpmovzxbd\t\000vpmov"
    "zxbq\t\000vpmovzxbw\t\000vpmovzxdq\t\000vpmovzxwd\t\000vpmovzxwq\t\000v"
    "pmuldq\t\000vpmulhrsw\t\000vpmulhuw\t\000vpmulhw\t\000vpmulld\t\000vpmu"
    "llw\t\000vpmuludq\t\000vpor\t\000vpsadbw\t\000vpshufb\t\000vpshufd\t\000"
    "vpshufhw\t\000vpshuflw\t\000vpsignb\t\000vpsignd\t\000vpsignw\t\000vpsl"
    "ldq\t\000vpslld\t\000vpsllq\t\000vpsllw\t\000vpsrad\t\000vpsraw\t\000vp"
    "srldq\t\000vpsrld\t\000vpsrlq\t\000vpsrlw\t\000vpsubb\t\000vpsubd\t\000"
    "vpsubq\t\000vpsubsb\t\000vpsubsw\t\000vpsubusb\t\000vpsubusw\t\000vpsub"
    "w\t\000vptest\t\000vpunpckhbw\t\000vpunpckhdq\t\000vpunpckhqdq\t\000vpu"
    "npckhwd\t\000vpunpcklbw\t\000vpunpckldq\t\000vpunpcklqdq\t\000vpunpcklw"
    "d\t\000vpxor\t\000vrcpps\t\000vrcpss\t\000vroundpd\t\000vroundps\t\000v"
    "roundsd\t\000vroundss\t\000vrsqrtps\t\000vrsqrtss\t\000vshufpd\t\000vsh"
    "ufps\t\000vsqrtpd\t\000vsqrtps\t\000vsqrtsd\t\000vsqrtss\t\000vstmxcsr\t"
    "\000vsubpd\t\000vsubps\t\000vsubsd\t\000vsubss\t\000vtestpd\t\000vtestp"
    "s\t\000vunpckhpd\t\000vunpckhps\t\000vunpcklpd\t\000vunpcklps\t\000vzer"
    "oall\000vzeroupper\000wait\000wbinvd\000# dynamic stack allocation\000w"
    "rmsr\000xadd\t\000xchg\t%ax, \000xchg\t\000xchg\t%eax, \000xchg\t%rax, "
    "\000fxch\t\000xgetbv\000xlatb\000xor\t%ax, \000xor\t\000xor\t%eax, \000"
    "xor\t%rax, \000xor\t%al, \000xsetbv\000";

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 5 bits for 25 unique commands.
  switch ((Bits >> 27) & 31) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, AAA, AAS, ABS_F, ADJCALLSTACKDOWN32, ADJCALLSTACKDOWN64, AD...
    return;
    break;
  case 1:
    // AAD8i8, AAM8i8, ADC16i16, ADC16rr_REV, ADC32i32, ADC32rr_REV, ADC64i32...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADC16mi, ADC16mi8, ADC16mr, ADD16mi, ADD16mi8, ADD16mr, ADD_FI16m, AND...
    printi16mem(MI, 0, O); 
    break;
  case 3:
    // ADC16ri, ADC16ri8, ADC16rm, ADC16rr, ADC32ri, ADC32ri8, ADC32rm, ADC32...
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 4:
    // ADC32mi, ADC32mi8, ADC32mr, ADD32mi, ADD32mi8, ADD32mr, ADD_FI32m, AND...
    printi32mem(MI, 0, O); 
    break;
  case 5:
    // ADC64mi32, ADC64mi8, ADC64mr, ADD64mi32, ADD64mi8, ADD64mr, AND64mi32,...
    printi64mem(MI, 0, O); 
    break;
  case 6:
    // ADC8mi, ADC8mr, ADD8mi, ADD8mr, AND8mi, AND8mr, CLFLUSH, CMP8mi, CMP8m...
    printi8mem(MI, 0, O); 
    break;
  case 7:
    // ADD_F32m, DIVR_F32m, DIV_F32m, EXTRACTPSmr, FBLDm, FBSTPm, FCOM32m, FC...
    printf32mem(MI, 0, O); 
    break;
  case 8:
    // ADD_F64m, DIVR_F64m, DIV_F64m, FCOM64m, FCOMP64m, LD_F64m, MOVHPDmr, M...
    printf64mem(MI, 0, O); 
    break;
  case 9:
    // ARPL16mr
    printi16mem(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 10:
    // CALL64pcrel32, CALLpcrel16, CALLpcrel32, JAE_1, JAE_4, JA_1, JA_4, JBE...
    print_pcrel_imm(MI, 0, O); 
    break;
  case 11:
    // CMPPDrmi, CMPPSrmi, CMPSDrm, CMPSSrm, Int_CMPSDrm, Int_CMPSSrm, Int_VC...
    printSSECC(MI, 7, O); 
    break;
  case 12:
    // CMPPDrri, CMPPSrri, CMPSDrr, CMPSSrr, Int_CMPSDrr, Int_CMPSSrr, Int_VC...
    printSSECC(MI, 3, O); 
    break;
  case 13:
    // CMPXCHG16B, MOVDQAmr, MOVDQUmr, MOVDQUmr_Int, MOVNTPDmr_Int, MOVNTPSmr...
    printi128mem(MI, 0, O); 
    break;
  case 14:
    // FARCALL16m, FARCALL32m, FARCALL64, FARJMP16m, FARJMP32m, FARJMP64, FXR...
    printopaquemem(MI, 0, O); 
    return;
    break;
  case 15:
    // LCMPXCHG64
    printOperand(MI, 5, O); 
    O << ','; 
    printi64mem(MI, 0, O); 
    return;
    break;
  case 16:
    // LD_F80m, ST_FP80m
    printf80mem(MI, 0, O); 
    return;
    break;
  case 17:
    // LXADD16, XCHG16rm
    printi16mem(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 18:
    // LXADD32, XCHG32rm
    printi32mem(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 19:
    // LXADD8, XCHG8rm
    printi8mem(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 20:
    // MOVAPDmr, MOVAPSmr, MOVNTDQ_64mr, MOVNTDQmr, MOVNTDQmr_Int, MOVNTPDmr,...
    printf128mem(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    break;
  case 21:
    // VMASKMOVPDYmr, VMASKMOVPSYmr, VMOVAPDYmr, VMOVAPSYmr, VMOVNTDQY_64mr, ...
    printf256mem(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    break;
  case 22:
    // VMOVDQAYmr, VMOVDQUYmr
    printi256mem(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case 23:
    // XCHG16rr, XCHG32rr, XCHG64rr, XCHG8rr
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 24:
    // XCHG64rm
    printi64mem(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 1 encoded into 5 bits for 22 unique commands.
  switch ((Bits >> 22) & 31) {
  default:   // unreachable.
  case 0:
    // AAD8i8, AAM8i8, ADC16i16, ADC32i32, ADC64i32, ADC8i8, ADD16i16, ADD32i...
    return;
    break;
  case 1:
    // ADC16mi, ADC16mi8, ADC16mr, ADC16rr_REV, ADC32mi, ADC32mi8, ADC32mr, A...
    O << ", "; 
    break;
  case 2:
    // ADC16ri, ADC16ri8, ADC16rr, ADC32ri, ADC32ri8, ADC32rr, ADC64ri32, ADC...
    printOperand(MI, 2, O); 
    return;
    break;
  case 3:
    // ADC16rm, ADD16rm, AND16rm, CRC32m16, OR16rm, SBB16rm, SUB16rm, XOR16rm
    printi16mem(MI, 2, O); 
    return;
    break;
  case 4:
    // ADC32rm, ADD32rm, AND32rm, CRC32m32, OR32rm, SBB32rm, SUB32rm, XOR32rm
    printi32mem(MI, 2, O); 
    return;
    break;
  case 5:
    // ADC64rm, ADD64rm, AND64rm, CRC64m64, LXADD64, OR64rm, SBB64rm, SUB64rm...
    printi64mem(MI, 2, O); 
    return;
    break;
  case 6:
    // ADC8rm, ADD8rm, AND8rm, CRC32m8, CRC64m8, OR8rm, SBB8rm, SUB8rm, XOR8r...
    printi8mem(MI, 2, O); 
    return;
    break;
  case 7:
    // ADD_FrST0, DIVR_FrST0, DIV_FrST0, MUL_FrST0, SUBR_FrST0, SUB_FrST0
    O << ", %ST(0)"; 
    return;
    break;
  case 8:
    // ARPL16rr
    printOperand(MI, 0, O); 
    return;
    break;
  case 9:
    // CMPPDrmi, CMPPDrri, VCMPPDYrmi, VCMPPDYrri, VCMPPDrmi, VCMPPDrri
    O << "pd\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 10:
    // CMPPSrmi, CMPPSrri, VCMPPSYrmi, VCMPPSYrri, VCMPPSrmi, VCMPPSrri
    O << "ps\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 11:
    // CMPSDrm, CMPSDrr, Int_CMPSDrm, Int_CMPSDrr, Int_VCMPSDrm, Int_VCMPSDrr...
    O << "sd\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 12:
    // CMPSSrm, CMPSSrr, Int_CMPSSrm, Int_CMPSSrr, Int_VCMPSSrm, Int_VCMPSSrr...
    O << "ss\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 13:
    // MOV16ao16
    O << ", %ax"; 
    return;
    break;
  case 14:
    // MOV32ao32
    O << ", %eax"; 
    return;
    break;
  case 15:
    // MOV8ao8
    O << ", %al"; 
    return;
    break;
  case 16:
    // OUT16ir
    O << ", %AX"; 
    return;
    break;
  case 17:
    // OUT32ir
    O << ", %EAX"; 
    return;
    break;
  case 18:
    // OUT8ir
    O << ", %AL"; 
    return;
    break;
  case 19:
    // RCL16mCL, RCL16rCL, RCL32mCL, RCL32rCL, RCL64mCL, RCL64rCL, RCL8mCL, R...
    O << ", CL"; 
    return;
    break;
  case 20:
    // ROL64mCL, ROL64rCL, ROR64mCL, ROR64rCL, SAR64mCL, SAR64rCL, SHL64mCL, ...
    O << ", %CL"; 
    return;
    break;
  case 21:
    // TAILJMPd, TAILJMPd64, TAILJMPm, TAILJMPm64, TAILJMPr64
    O << "  # TAILCALL"; 
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 24 unique commands.
  switch ((Bits >> 17) & 31) {
  default:   // unreachable.
  case 0:
    // ADC16mi, ADC16mi8, ADC16mr, ADC32mi, ADC32mi8, ADC32mr, ADC64mi32, ADC...
    printOperand(MI, 5, O); 
    break;
  case 1:
    // ADC16rr_REV, ADC32rr_REV, ADC64rr_REV, ADC8rr_REV, ADD16rr_REV, ADD32r...
    printOperand(MI, 2, O); 
    break;
  case 2:
    // ADDPDrm, ADDPSrm, ADDSUBPDrm, ADDSUBPSrm, ANDNPDrm, ANDNPSrm, ANDPDrm,...
    printf128mem(MI, 2, O); 
    break;
  case 3:
    // ADDSDrm, ADDSDrm_Int, CMPSDrm, CMPSDrm_alt, DIVSDrm, DIVSDrm_Int, Int_...
    printf64mem(MI, 2, O); 
    break;
  case 4:
    // ADDSSrm, ADDSSrm_Int, CMPSSrm, CMPSSrm_alt, DIVSSrm, DIVSSrm_Int, INSE...
    printf32mem(MI, 2, O); 
    break;
  case 5:
    // AESDECLASTrm, AESDECrm, AESENCLASTrm, AESENCrm, BLENDPDrmi, BLENDPSrmi...
    printi128mem(MI, 2, O); 
    break;
  case 6:
    // AESIMCrm, AESKEYGENASSIST128rm, CVTDQ2PSrm, Int_CVTDQ2PSrm, Int_VCVTDQ...
    printi128mem(MI, 1, O); 
    break;
  case 7:
    // AESIMCrr, AESKEYGENASSIST128rr, BSF16rr, BSF32rr, BSF64rr, BSR16rr, BS...
    printOperand(MI, 1, O); 
    break;
  case 8:
    // BOUNDS16rm, BSF16rm, BSR16rm, CMP16rm, IMUL16rmi, IMUL16rmi8, LAR16rm,...
    printi16mem(MI, 1, O); 
    break;
  case 9:
    // BOUNDS32rm, BSF32rm, BSR32rm, CMP32rm, CVTSI2SDrm, CVTSI2SSrm, IMUL32r...
    printi32mem(MI, 1, O); 
    break;
  case 10:
    // BSF64rm, BSR64rm, CMP64rm, CVTSI2SD64rm, CVTSI2SS64rm, IMUL64rmi32, IM...
    printi64mem(MI, 1, O); 
    break;
  case 11:
    // CMOVA16rm, CMOVAE16rm, CMOVB16rm, CMOVBE16rm, CMOVE16rm, CMOVG16rm, CM...
    printi16mem(MI, 2, O); 
    break;
  case 12:
    // CMOVA32rm, CMOVAE32rm, CMOVB32rm, CMOVBE32rm, CMOVE32rm, CMOVG32rm, CM...
    printi32mem(MI, 2, O); 
    break;
  case 13:
    // CMOVA64rm, CMOVAE64rm, CMOVB64rm, CMOVBE64rm, CMOVE64rm, CMOVG64rm, CM...
    printi64mem(MI, 2, O); 
    break;
  case 14:
    // CMP8rm, MOV8rm, MOV8rm_NOREX, MOVSX16rm8W, MOVSX32rm8, MOVSX64rm8, MOV...
    printi8mem(MI, 1, O); 
    break;
  case 15:
    // COMISDrm, COMISSrm, CVTDQ2PDrm, CVTPD2DQrm, CVTPD2PSrm, CVTPS2DQrm, CV...
    printf128mem(MI, 1, O); 
    break;
  case 16:
    // CVTPS2PDrm, CVTSD2SSrm, CVTTSD2SI64rm, CVTTSD2SIrm, Int_CVTPS2PDrm, In...
    printf64mem(MI, 1, O); 
    return;
    break;
  case 17:
    // CVTSS2SDrm, CVTSS2SI64rm, CVTSS2SIrm, CVTTSS2SI64rm, CVTTSS2SIrm, Int_...
    printf32mem(MI, 1, O); 
    return;
    break;
  case 18:
    // LDS16rm, LDS32rm, LES16rm, LES32rm, LFS16rm, LFS32rm, LFS64rm, LGS16rm...
    printopaquemem(MI, 1, O); 
    return;
    break;
  case 19:
    // PINSRBrm
    printi8mem(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 7, O); 
    return;
    break;
  case 20:
    // ROUNDPDm, ROUNDPSm, VCVTPD2DQYrm, VCVTPD2PSYrm, VCVTPS2DQYrm, VCVTTPD2...
    printf256mem(MI, 1, O); 
    break;
  case 21:
    // VCVTDQ2PSYrm, VLDDQUYrm, VMOVDQAYrm, VMOVDQUYrm, VPTESTYrm
    printi256mem(MI, 1, O); 
    return;
    break;
  case 22:
    // VEXTRACTF128mr, VMASKMOVPDYmr, VMASKMOVPDmr, VMASKMOVPSYmr, VMASKMOVPS...
    printOperand(MI, 6, O); 
    return;
    break;
  case 23:
    // VRCPSSm_Int, VRCPSSr_Int, VRSQRTSSm_Int, VRSQRTSSr_Int, VSQRTSDm_Int, ...
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  }

  switch (MI->getOpcode()) {
  case X86::ADC16mi:
  case X86::ADC16mi8:
  case X86::ADC16mr:
  case X86::ADC16rr_REV:
  case X86::ADC32mi:
  case X86::ADC32mi8:
  case X86::ADC32mr:
  case X86::ADC32rr_REV:
  case X86::ADC64mi32:
  case X86::ADC64mi8:
  case X86::ADC64mr:
  case X86::ADC64rr_REV:
  case X86::ADC8mi:
  case X86::ADC8mr:
  case X86::ADC8rr_REV:
  case X86::ADD16mi:
  case X86::ADD16mi8:
  case X86::ADD16mr:
  case X86::ADD16rr_REV:
  case X86::ADD32mi:
  case X86::ADD32mi8:
  case X86::ADD32mr:
  case X86::ADD32rr_REV:
  case X86::ADD64mi32:
  case X86::ADD64mi8:
  case X86::ADD64mr:
  case X86::ADD64rr_REV:
  case X86::ADD8mi:
  case X86::ADD8mr:
  case X86::ADD8rr_REV:
  case X86::ADDPDrm:
  case X86::ADDPDrr:
  case X86::ADDPSrm:
  case X86::ADDPSrr:
  case X86::ADDSDrm:
  case X86::ADDSDrm_Int:
  case X86::ADDSDrr:
  case X86::ADDSDrr_Int:
  case X86::ADDSSrm:
  case X86::ADDSSrm_Int:
  case X86::ADDSSrr:
  case X86::ADDSSrr_Int:
  case X86::ADDSUBPDrm:
  case X86::ADDSUBPDrr:
  case X86::ADDSUBPSrm:
  case X86::ADDSUBPSrr:
  case X86::AESDECLASTrm:
  case X86::AESDECLASTrr:
  case X86::AESDECrm:
  case X86::AESDECrr:
  case X86::AESENCLASTrm:
  case X86::AESENCLASTrr:
  case X86::AESENCrm:
  case X86::AESENCrr:
  case X86::AESIMCrm:
  case X86::AESIMCrr:
  case X86::AND16mi:
  case X86::AND16mi8:
  case X86::AND16mr:
  case X86::AND16rr_REV:
  case X86::AND32mi:
  case X86::AND32mi8:
  case X86::AND32mr:
  case X86::AND32rr_REV:
  case X86::AND64mi32:
  case X86::AND64mi8:
  case X86::AND64mr:
  case X86::AND64rr_REV:
  case X86::AND8mi:
  case X86::AND8mr:
  case X86::AND8rr_REV:
  case X86::ANDNPDrm:
  case X86::ANDNPDrr:
  case X86::ANDNPSrm:
  case X86::ANDNPSrr:
  case X86::ANDPDrm:
  case X86::ANDPDrr:
  case X86::ANDPSrm:
  case X86::ANDPSrr:
  case X86::BOUNDS16rm:
  case X86::BOUNDS32rm:
  case X86::BSF16rm:
  case X86::BSF16rr:
  case X86::BSF32rm:
  case X86::BSF32rr:
  case X86::BSF64rm:
  case X86::BSF64rr:
  case X86::BSR16rm:
  case X86::BSR16rr:
  case X86::BSR32rm:
  case X86::BSR32rr:
  case X86::BSR64rm:
  case X86::BSR64rr:
  case X86::BT16mi8:
  case X86::BT16mr:
  case X86::BT16ri8:
  case X86::BT16rr:
  case X86::BT32mi8:
  case X86::BT32mr:
  case X86::BT32ri8:
  case X86::BT32rr:
  case X86::BT64mi8:
  case X86::BT64mr:
  case X86::BT64ri8:
  case X86::BT64rr:
  case X86::BTC16mi8:
  case X86::BTC16mr:
  case X86::BTC16ri8:
  case X86::BTC16rr:
  case X86::BTC32mi8:
  case X86::BTC32mr:
  case X86::BTC32ri8:
  case X86::BTC32rr:
  case X86::BTC64mi8:
  case X86::BTC64mr:
  case X86::BTC64ri8:
  case X86::BTC64rr:
  case X86::BTR16mi8:
  case X86::BTR16mr:
  case X86::BTR16ri8:
  case X86::BTR16rr:
  case X86::BTR32mi8:
  case X86::BTR32mr:
  case X86::BTR32ri8:
  case X86::BTR32rr:
  case X86::BTR64mi8:
  case X86::BTR64mr:
  case X86::BTR64ri8:
  case X86::BTR64rr:
  case X86::BTS16mi8:
  case X86::BTS16mr:
  case X86::BTS16ri8:
  case X86::BTS16rr:
  case X86::BTS32mi8:
  case X86::BTS32mr:
  case X86::BTS32ri8:
  case X86::BTS32rr:
  case X86::BTS64mi8:
  case X86::BTS64mr:
  case X86::BTS64ri8:
  case X86::BTS64rr:
  case X86::CMOVA16rm:
  case X86::CMOVA16rr:
  case X86::CMOVA32rm:
  case X86::CMOVA32rr:
  case X86::CMOVA64rm:
  case X86::CMOVA64rr:
  case X86::CMOVAE16rm:
  case X86::CMOVAE16rr:
  case X86::CMOVAE32rm:
  case X86::CMOVAE32rr:
  case X86::CMOVAE64rm:
  case X86::CMOVAE64rr:
  case X86::CMOVB16rm:
  case X86::CMOVB16rr:
  case X86::CMOVB32rm:
  case X86::CMOVB32rr:
  case X86::CMOVB64rm:
  case X86::CMOVB64rr:
  case X86::CMOVBE16rm:
  case X86::CMOVBE16rr:
  case X86::CMOVBE32rm:
  case X86::CMOVBE32rr:
  case X86::CMOVBE64rm:
  case X86::CMOVBE64rr:
  case X86::CMOVE16rm:
  case X86::CMOVE16rr:
  case X86::CMOVE32rm:
  case X86::CMOVE32rr:
  case X86::CMOVE64rm:
  case X86::CMOVE64rr:
  case X86::CMOVG16rm:
  case X86::CMOVG16rr:
  case X86::CMOVG32rm:
  case X86::CMOVG32rr:
  case X86::CMOVG64rm:
  case X86::CMOVG64rr:
  case X86::CMOVGE16rm:
  case X86::CMOVGE16rr:
  case X86::CMOVGE32rm:
  case X86::CMOVGE32rr:
  case X86::CMOVGE64rm:
  case X86::CMOVGE64rr:
  case X86::CMOVL16rm:
  case X86::CMOVL16rr:
  case X86::CMOVL32rm:
  case X86::CMOVL32rr:
  case X86::CMOVL64rm:
  case X86::CMOVL64rr:
  case X86::CMOVLE16rm:
  case X86::CMOVLE16rr:
  case X86::CMOVLE32rm:
  case X86::CMOVLE32rr:
  case X86::CMOVLE64rm:
  case X86::CMOVLE64rr:
  case X86::CMOVNE16rm:
  case X86::CMOVNE16rr:
  case X86::CMOVNE32rm:
  case X86::CMOVNE32rr:
  case X86::CMOVNE64rm:
  case X86::CMOVNE64rr:
  case X86::CMOVNO16rm:
  case X86::CMOVNO16rr:
  case X86::CMOVNO32rm:
  case X86::CMOVNO32rr:
  case X86::CMOVNO64rm:
  case X86::CMOVNO64rr:
  case X86::CMOVNP16rm:
  case X86::CMOVNP16rr:
  case X86::CMOVNP32rm:
  case X86::CMOVNP32rr:
  case X86::CMOVNP64rm:
  case X86::CMOVNP64rr:
  case X86::CMOVNS16rm:
  case X86::CMOVNS16rr:
  case X86::CMOVNS32rm:
  case X86::CMOVNS32rr:
  case X86::CMOVNS64rm:
  case X86::CMOVNS64rr:
  case X86::CMOVO16rm:
  case X86::CMOVO16rr:
  case X86::CMOVO32rm:
  case X86::CMOVO32rr:
  case X86::CMOVO64rm:
  case X86::CMOVO64rr:
  case X86::CMOVP16rm:
  case X86::CMOVP16rr:
  case X86::CMOVP32rm:
  case X86::CMOVP32rr:
  case X86::CMOVP64rm:
  case X86::CMOVP64rr:
  case X86::CMOVS16rm:
  case X86::CMOVS16rr:
  case X86::CMOVS32rm:
  case X86::CMOVS32rr:
  case X86::CMOVS64rm:
  case X86::CMOVS64rr:
  case X86::CMP16mi:
  case X86::CMP16mi8:
  case X86::CMP16mr:
  case X86::CMP16ri:
  case X86::CMP16ri8:
  case X86::CMP16rm:
  case X86::CMP16rr:
  case X86::CMP16rr_REV:
  case X86::CMP32mi:
  case X86::CMP32mi8:
  case X86::CMP32mr:
  case X86::CMP32ri:
  case X86::CMP32ri8:
  case X86::CMP32rm:
  case X86::CMP32rr:
  case X86::CMP32rr_REV:
  case X86::CMP64mi32:
  case X86::CMP64mi8:
  case X86::CMP64mr:
  case X86::CMP64ri32:
  case X86::CMP64ri8:
  case X86::CMP64rm:
  case X86::CMP64rr:
  case X86::CMP64rr_REV:
  case X86::CMP8mi:
  case X86::CMP8mr:
  case X86::CMP8ri:
  case X86::CMP8rm:
  case X86::CMP8rr:
  case X86::CMP8rr_REV:
  case X86::CMPPDrmi:
  case X86::CMPPDrri:
  case X86::CMPPSrmi:
  case X86::CMPPSrri:
  case X86::CMPSDrm:
  case X86::CMPSDrr:
  case X86::CMPSSrm:
  case X86::CMPSSrr:
  case X86::CMPXCHG16rm:
  case X86::CMPXCHG16rr:
  case X86::CMPXCHG32rm:
  case X86::CMPXCHG32rr:
  case X86::CMPXCHG64rm:
  case X86::CMPXCHG64rr:
  case X86::CMPXCHG8rm:
  case X86::CMPXCHG8rr:
  case X86::COMISDrm:
  case X86::COMISDrr:
  case X86::COMISSrm:
  case X86::COMISSrr:
  case X86::CVTDQ2PDrm:
  case X86::CVTDQ2PDrr:
  case X86::CVTDQ2PSrm:
  case X86::CVTDQ2PSrr:
  case X86::CVTPD2DQrm:
  case X86::CVTPD2DQrr:
  case X86::CVTPD2PSrm:
  case X86::CVTPD2PSrr:
  case X86::CVTPS2DQrm:
  case X86::CVTPS2DQrr:
  case X86::CVTPS2PDrr:
  case X86::CVTSD2SI64rm:
  case X86::CVTSD2SI64rr:
  case X86::CVTSD2SIrm:
  case X86::CVTSD2SIrr:
  case X86::CVTSD2SSrr:
  case X86::CVTSI2SD64rm:
  case X86::CVTSI2SD64rr:
  case X86::CVTSI2SDrm:
  case X86::CVTSI2SDrr:
  case X86::CVTSI2SS64rm:
  case X86::CVTSI2SS64rr:
  case X86::CVTSI2SSrm:
  case X86::CVTSI2SSrr:
  case X86::CVTSS2SDrr:
  case X86::CVTSS2SI64rr:
  case X86::CVTSS2SIrr:
  case X86::CVTTPD2DQrm:
  case X86::CVTTPD2DQrr:
  case X86::CVTTPS2DQrm:
  case X86::CVTTPS2DQrr:
  case X86::CVTTSD2SI64rr:
  case X86::CVTTSD2SIrr:
  case X86::CVTTSS2SI64rr:
  case X86::CVTTSS2SIrr:
  case X86::DIVPDrm:
  case X86::DIVPDrr:
  case X86::DIVPSrm:
  case X86::DIVPSrr:
  case X86::DIVSDrm:
  case X86::DIVSDrm_Int:
  case X86::DIVSDrr:
  case X86::DIVSDrr_Int:
  case X86::DIVSSrm:
  case X86::DIVSSrm_Int:
  case X86::DIVSSrr:
  case X86::DIVSSrr_Int:
  case X86::ENTER:
  case X86::FARCALL16i:
  case X86::FARCALL32i:
  case X86::FARJMP16i:
  case X86::FARJMP32i:
  case X86::FsANDNPDrm:
  case X86::FsANDNPDrr:
  case X86::FsANDNPSrm:
  case X86::FsANDNPSrr:
  case X86::FsANDPDrm:
  case X86::FsANDPDrr:
  case X86::FsANDPSrm:
  case X86::FsANDPSrr:
  case X86::FsMOVAPDrm:
  case X86::FsMOVAPDrr:
  case X86::FsMOVAPSrm:
  case X86::FsMOVAPSrr:
  case X86::FsORPDrm:
  case X86::FsORPDrr:
  case X86::FsORPSrm:
  case X86::FsORPSrr:
  case X86::FsXORPDrm:
  case X86::FsXORPDrr:
  case X86::FsXORPSrm:
  case X86::FsXORPSrr:
  case X86::HADDPDrm:
  case X86::HADDPDrr:
  case X86::HADDPSrm:
  case X86::HADDPSrr:
  case X86::HSUBPDrm:
  case X86::HSUBPDrr:
  case X86::HSUBPSrm:
  case X86::HSUBPSrr:
  case X86::IMUL16rm:
  case X86::IMUL16rr:
  case X86::IMUL32rm:
  case X86::IMUL32rr:
  case X86::IMUL64rm:
  case X86::IMUL64rr:
  case X86::Int_CMPSDrm:
  case X86::Int_CMPSDrr:
  case X86::Int_CMPSSrm:
  case X86::Int_CMPSSrr:
  case X86::Int_COMISDrm:
  case X86::Int_COMISDrr:
  case X86::Int_COMISSrm:
  case X86::Int_COMISSrr:
  case X86::Int_CVTDQ2PDrm:
  case X86::Int_CVTDQ2PDrr:
  case X86::Int_CVTDQ2PSrm:
  case X86::Int_CVTDQ2PSrr:
  case X86::Int_CVTPD2DQrm:
  case X86::Int_CVTPD2DQrr:
  case X86::Int_CVTPD2PSrm:
  case X86::Int_CVTPD2PSrr:
  case X86::Int_CVTPS2DQrm:
  case X86::Int_CVTPS2DQrr:
  case X86::Int_CVTPS2PDrr:
  case X86::Int_CVTSD2SSrm:
  case X86::Int_CVTSD2SSrr:
  case X86::Int_CVTSI2SD64rm:
  case X86::Int_CVTSI2SD64rr:
  case X86::Int_CVTSI2SDrm:
  case X86::Int_CVTSI2SDrr:
  case X86::Int_CVTSI2SS64rm:
  case X86::Int_CVTSI2SS64rr:
  case X86::Int_CVTSI2SSrm:
  case X86::Int_CVTSI2SSrr:
  case X86::Int_CVTSS2SDrm:
  case X86::Int_CVTSS2SDrr:
  case X86::Int_CVTSS2SI64rr:
  case X86::Int_CVTSS2SIrr:
  case X86::Int_CVTTSD2SI64rm:
  case X86::Int_CVTTSD2SI64rr:
  case X86::Int_CVTTSD2SIrm:
  case X86::Int_CVTTSD2SIrr:
  case X86::Int_CVTTSS2SI64rr:
  case X86::Int_CVTTSS2SIrr:
  case X86::Int_UCOMISDrm:
  case X86::Int_UCOMISDrr:
  case X86::Int_UCOMISSrm:
  case X86::Int_UCOMISSrr:
  case X86::Int_VCOMISDrm:
  case X86::Int_VCOMISDrr:
  case X86::Int_VCOMISSrm:
  case X86::Int_VCOMISSrr:
  case X86::Int_VCVTDQ2PDrm:
  case X86::Int_VCVTDQ2PDrr:
  case X86::Int_VCVTDQ2PSrm:
  case X86::Int_VCVTDQ2PSrr:
  case X86::Int_VCVTPD2DQrm:
  case X86::Int_VCVTPD2DQrr:
  case X86::Int_VCVTPD2PSrm:
  case X86::Int_VCVTPD2PSrr:
  case X86::Int_VCVTPS2DQrm:
  case X86::Int_VCVTPS2DQrr:
  case X86::Int_VCVTPS2PDrr:
  case X86::Int_VCVTSD2SI64rm:
  case X86::Int_VCVTSD2SI64rr:
  case X86::Int_VCVTSD2SIrm:
  case X86::Int_VCVTSD2SIrr:
  case X86::Int_VCVTSS2SI64rr:
  case X86::Int_VCVTSS2SIrr:
  case X86::Int_VCVTTPD2DQrm:
  case X86::Int_VCVTTPD2DQrr:
  case X86::Int_VCVTTPS2DQrm:
  case X86::Int_VCVTTPS2DQrr:
  case X86::Int_VCVTTSD2SI64rm:
  case X86::Int_VCVTTSD2SI64rr:
  case X86::Int_VCVTTSD2SIrm:
  case X86::Int_VCVTTSD2SIrr:
  case X86::Int_VCVTTSS2SI64rr:
  case X86::Int_VCVTTSS2SIrr:
  case X86::Int_VUCOMISDrm:
  case X86::Int_VUCOMISDrr:
  case X86::Int_VUCOMISSrm:
  case X86::Int_VUCOMISSrr:
  case X86::LAR16rm:
  case X86::LAR16rr:
  case X86::LAR32rm:
  case X86::LAR32rr:
  case X86::LAR64rm:
  case X86::LAR64rr:
  case X86::LCMPXCHG16:
  case X86::LCMPXCHG32:
  case X86::LCMPXCHG8:
  case X86::LDDQUrm:
  case X86::LEA16r:
  case X86::LEA32r:
  case X86::LEA64_32r:
  case X86::LEA64r:
  case X86::LOCK_ADD16mi:
  case X86::LOCK_ADD16mi8:
  case X86::LOCK_ADD16mr:
  case X86::LOCK_ADD32mi:
  case X86::LOCK_ADD32mi8:
  case X86::LOCK_ADD32mr:
  case X86::LOCK_ADD64mi32:
  case X86::LOCK_ADD64mi8:
  case X86::LOCK_ADD64mr:
  case X86::LOCK_ADD8mi:
  case X86::LOCK_ADD8mr:
  case X86::LOCK_SUB16mi:
  case X86::LOCK_SUB16mi8:
  case X86::LOCK_SUB16mr:
  case X86::LOCK_SUB32mi:
  case X86::LOCK_SUB32mi8:
  case X86::LOCK_SUB32mr:
  case X86::LOCK_SUB64mi32:
  case X86::LOCK_SUB64mi8:
  case X86::LOCK_SUB64mr:
  case X86::LOCK_SUB8mi:
  case X86::LOCK_SUB8mr:
  case X86::LSL16rm:
  case X86::LSL16rr:
  case X86::LSL32rm:
  case X86::LSL32rr:
  case X86::LSL64rm:
  case X86::LSL64rr:
  case X86::MASKMOVDQU:
  case X86::MASKMOVDQU64:
  case X86::MAXPDrm:
  case X86::MAXPDrm_Int:
  case X86::MAXPDrr:
  case X86::MAXPDrr_Int:
  case X86::MAXPSrm:
  case X86::MAXPSrm_Int:
  case X86::MAXPSrr:
  case X86::MAXPSrr_Int:
  case X86::MAXSDrm:
  case X86::MAXSDrm_Int:
  case X86::MAXSDrr:
  case X86::MAXSDrr_Int:
  case X86::MAXSSrm:
  case X86::MAXSSrm_Int:
  case X86::MAXSSrr:
  case X86::MAXSSrr_Int:
  case X86::MINPDrm:
  case X86::MINPDrm_Int:
  case X86::MINPDrr:
  case X86::MINPDrr_Int:
  case X86::MINPSrm:
  case X86::MINPSrm_Int:
  case X86::MINPSrr:
  case X86::MINPSrr_Int:
  case X86::MINSDrm:
  case X86::MINSDrm_Int:
  case X86::MINSDrr:
  case X86::MINSDrr_Int:
  case X86::MINSSrm:
  case X86::MINSSrm_Int:
  case X86::MINSSrr:
  case X86::MINSSrr_Int:
  case X86::MMX_CVTPD2PIirm:
  case X86::MMX_CVTPD2PIirr:
  case X86::MMX_CVTPI2PDirm:
  case X86::MMX_CVTPI2PDirr:
  case X86::MMX_CVTPI2PSirm:
  case X86::MMX_CVTPI2PSirr:
  case X86::MMX_CVTPS2PIirr:
  case X86::MMX_CVTTPD2PIirm:
  case X86::MMX_CVTTPD2PIirr:
  case X86::MMX_CVTTPS2PIirr:
  case X86::MMX_MASKMOVQ:
  case X86::MMX_MASKMOVQ64:
  case X86::MMX_MOVD64from64rr:
  case X86::MMX_MOVD64grr:
  case X86::MMX_MOVD64mr:
  case X86::MMX_MOVD64rm:
  case X86::MMX_MOVD64rr:
  case X86::MMX_MOVD64rrv164:
  case X86::MMX_MOVD64to64rr:
  case X86::MMX_MOVDQ2Qrr:
  case X86::MMX_MOVFR642Qrr:
  case X86::MMX_MOVNTQmr:
  case X86::MMX_MOVQ2DQrr:
  case X86::MMX_MOVQ2FR64rr:
  case X86::MMX_MOVQ64mr:
  case X86::MMX_MOVQ64rm:
  case X86::MMX_MOVQ64rr:
  case X86::MMX_MOVZDI2PDIrm:
  case X86::MMX_MOVZDI2PDIrr:
  case X86::MMX_PABSBrm64:
  case X86::MMX_PABSBrr64:
  case X86::MMX_PABSDrm64:
  case X86::MMX_PABSDrr64:
  case X86::MMX_PABSWrm64:
  case X86::MMX_PABSWrr64:
  case X86::MMX_PACKSSDWirm:
  case X86::MMX_PACKSSDWirr:
  case X86::MMX_PACKSSWBirm:
  case X86::MMX_PACKSSWBirr:
  case X86::MMX_PACKUSWBirm:
  case X86::MMX_PACKUSWBirr:
  case X86::MMX_PADDBirm:
  case X86::MMX_PADDBirr:
  case X86::MMX_PADDDirm:
  case X86::MMX_PADDDirr:
  case X86::MMX_PADDQirm:
  case X86::MMX_PADDQirr:
  case X86::MMX_PADDSBirm:
  case X86::MMX_PADDSBirr:
  case X86::MMX_PADDSWirm:
  case X86::MMX_PADDSWirr:
  case X86::MMX_PADDUSBirm:
  case X86::MMX_PADDUSBirr:
  case X86::MMX_PADDUSWirm:
  case X86::MMX_PADDUSWirr:
  case X86::MMX_PADDWirm:
  case X86::MMX_PADDWirr:
  case X86::MMX_PANDNirm:
  case X86::MMX_PANDNirr:
  case X86::MMX_PANDirm:
  case X86::MMX_PANDirr:
  case X86::MMX_PAVGBirm:
  case X86::MMX_PAVGBirr:
  case X86::MMX_PAVGWirm:
  case X86::MMX_PAVGWirr:
  case X86::MMX_PCMPEQBirm:
  case X86::MMX_PCMPEQBirr:
  case X86::MMX_PCMPEQDirm:
  case X86::MMX_PCMPEQDirr:
  case X86::MMX_PCMPEQWirm:
  case X86::MMX_PCMPEQWirr:
  case X86::MMX_PCMPGTBirm:
  case X86::MMX_PCMPGTBirr:
  case X86::MMX_PCMPGTDirm:
  case X86::MMX_PCMPGTDirr:
  case X86::MMX_PCMPGTWirm:
  case X86::MMX_PCMPGTWirr:
  case X86::MMX_PHADDSWrm64:
  case X86::MMX_PHADDSWrr64:
  case X86::MMX_PHADDWrm64:
  case X86::MMX_PHADDWrr64:
  case X86::MMX_PHADDrm64:
  case X86::MMX_PHADDrr64:
  case X86::MMX_PHSUBDrm64:
  case X86::MMX_PHSUBDrr64:
  case X86::MMX_PHSUBSWrm64:
  case X86::MMX_PHSUBSWrr64:
  case X86::MMX_PHSUBWrm64:
  case X86::MMX_PHSUBWrr64:
  case X86::MMX_PMADDUBSWrm64:
  case X86::MMX_PMADDUBSWrr64:
  case X86::MMX_PMADDWDirm:
  case X86::MMX_PMADDWDirr:
  case X86::MMX_PMAXSWirm:
  case X86::MMX_PMAXSWirr:
  case X86::MMX_PMAXUBirm:
  case X86::MMX_PMAXUBirr:
  case X86::MMX_PMINSWirm:
  case X86::MMX_PMINSWirr:
  case X86::MMX_PMINUBirm:
  case X86::MMX_PMINUBirr:
  case X86::MMX_PMOVMSKBrr:
  case X86::MMX_PMULHRSWrm64:
  case X86::MMX_PMULHRSWrr64:
  case X86::MMX_PMULHUWirm:
  case X86::MMX_PMULHUWirr:
  case X86::MMX_PMULHWirm:
  case X86::MMX_PMULHWirr:
  case X86::MMX_PMULLWirm:
  case X86::MMX_PMULLWirr:
  case X86::MMX_PMULUDQirm:
  case X86::MMX_PMULUDQirr:
  case X86::MMX_PORirm:
  case X86::MMX_PORirr:
  case X86::MMX_PSADBWirm:
  case X86::MMX_PSADBWirr:
  case X86::MMX_PSHUFBrm64:
  case X86::MMX_PSHUFBrr64:
  case X86::MMX_PSIGNBrm64:
  case X86::MMX_PSIGNBrr64:
  case X86::MMX_PSIGNDrm64:
  case X86::MMX_PSIGNDrr64:
  case X86::MMX_PSIGNWrm64:
  case X86::MMX_PSIGNWrr64:
  case X86::MMX_PSLLDri:
  case X86::MMX_PSLLDrm:
  case X86::MMX_PSLLDrr:
  case X86::MMX_PSLLQri:
  case X86::MMX_PSLLQrm:
  case X86::MMX_PSLLQrr:
  case X86::MMX_PSLLWri:
  case X86::MMX_PSLLWrm:
  case X86::MMX_PSLLWrr:
  case X86::MMX_PSRADri:
  case X86::MMX_PSRADrm:
  case X86::MMX_PSRADrr:
  case X86::MMX_PSRAWri:
  case X86::MMX_PSRAWrm:
  case X86::MMX_PSRAWrr:
  case X86::MMX_PSRLDri:
  case X86::MMX_PSRLDrm:
  case X86::MMX_PSRLDrr:
  case X86::MMX_PSRLQri:
  case X86::MMX_PSRLQrm:
  case X86::MMX_PSRLQrr:
  case X86::MMX_PSRLWri:
  case X86::MMX_PSRLWrm:
  case X86::MMX_PSRLWrr:
  case X86::MMX_PSUBBirm:
  case X86::MMX_PSUBBirr:
  case X86::MMX_PSUBDirm:
  case X86::MMX_PSUBDirr:
  case X86::MMX_PSUBQirm:
  case X86::MMX_PSUBQirr:
  case X86::MMX_PSUBSBirm:
  case X86::MMX_PSUBSBirr:
  case X86::MMX_PSUBSWirm:
  case X86::MMX_PSUBSWirr:
  case X86::MMX_PSUBUSBirm:
  case X86::MMX_PSUBUSBirr:
  case X86::MMX_PSUBUSWirm:
  case X86::MMX_PSUBUSWirr:
  case X86::MMX_PSUBWirm:
  case X86::MMX_PSUBWirr:
  case X86::MMX_PUNPCKHBWirm:
  case X86::MMX_PUNPCKHBWirr:
  case X86::MMX_PUNPCKHDQirm:
  case X86::MMX_PUNPCKHDQirr:
  case X86::MMX_PUNPCKHWDirm:
  case X86::MMX_PUNPCKHWDirr:
  case X86::MMX_PUNPCKLBWirm:
  case X86::MMX_PUNPCKLBWirr:
  case X86::MMX_PUNPCKLDQirm:
  case X86::MMX_PUNPCKLDQirr:
  case X86::MMX_PUNPCKLWDirm:
  case X86::MMX_PUNPCKLWDirr:
  case X86::MMX_PXORirm:
  case X86::MMX_PXORirr:
  case X86::MOV16mi:
  case X86::MOV16mr:
  case X86::MOV16ms:
  case X86::MOV16ri:
  case X86::MOV16rm:
  case X86::MOV16rr:
  case X86::MOV16rr_REV:
  case X86::MOV16rs:
  case X86::MOV16sm:
  case X86::MOV16sr:
  case X86::MOV32cr:
  case X86::MOV32dr:
  case X86::MOV32mi:
  case X86::MOV32mr:
  case X86::MOV32ms:
  case X86::MOV32rc:
  case X86::MOV32rd:
  case X86::MOV32ri:
  case X86::MOV32rm:
  case X86::MOV32rr:
  case X86::MOV32rr_REV:
  case X86::MOV32rs:
  case X86::MOV32sm:
  case X86::MOV32sr:
  case X86::MOV64cr:
  case X86::MOV64dr:
  case X86::MOV64mi32:
  case X86::MOV64mr:
  case X86::MOV64ms:
  case X86::MOV64rc:
  case X86::MOV64rd:
  case X86::MOV64ri:
  case X86::MOV64ri32:
  case X86::MOV64rm:
  case X86::MOV64rr:
  case X86::MOV64rr_REV:
  case X86::MOV64rs:
  case X86::MOV64sm:
  case X86::MOV64sr:
  case X86::MOV64toPQIrr:
  case X86::MOV64toSDrm:
  case X86::MOV64toSDrr:
  case X86::MOV8mi:
  case X86::MOV8mr:
  case X86::MOV8ri:
  case X86::MOV8rm:
  case X86::MOV8rr:
  case X86::MOV8rr_REV:
  case X86::MOVAPDrm:
  case X86::MOVAPDrr:
  case X86::MOVAPSrm:
  case X86::MOVAPSrr:
  case X86::MOVDDUPrr:
  case X86::MOVDI2PDIrm:
  case X86::MOVDI2PDIrr:
  case X86::MOVDI2SSrm:
  case X86::MOVDI2SSrr:
  case X86::MOVDQAmr:
  case X86::MOVDQArm:
  case X86::MOVDQArr:
  case X86::MOVDQUmr:
  case X86::MOVDQUmr_Int:
  case X86::MOVDQUrm:
  case X86::MOVDQUrm_Int:
  case X86::MOVDQUrr:
  case X86::MOVHLPSrr:
  case X86::MOVHPDmr:
  case X86::MOVHPDrm:
  case X86::MOVHPSmr:
  case X86::MOVHPSrm:
  case X86::MOVLHPSrr:
  case X86::MOVLPDmr:
  case X86::MOVLPDrm:
  case X86::MOVLPSmr:
  case X86::MOVLPSrm:
  case X86::MOVLQ128mr:
  case X86::MOVMSKPDrr32:
  case X86::MOVMSKPDrr64:
  case X86::MOVMSKPSrr32:
  case X86::MOVMSKPSrr64:
  case X86::MOVNTDQArm:
  case X86::MOVNTI_64mr:
  case X86::MOVNTImr:
  case X86::MOVNTImr_Int:
  case X86::MOVNTPDmr_Int:
  case X86::MOVNTPSmr_Int:
  case X86::MOVPDI2DImr:
  case X86::MOVPDI2DIrr:
  case X86::MOVPQI2QImr:
  case X86::MOVPQIto64rr:
  case X86::MOVQI2PQIrm:
  case X86::MOVQxrxr:
  case X86::MOVSDmr:
  case X86::MOVSDrr:
  case X86::MOVSDto64mr:
  case X86::MOVSDto64rr:
  case X86::MOVSHDUPrm:
  case X86::MOVSHDUPrr:
  case X86::MOVSLDUPrm:
  case X86::MOVSLDUPrr:
  case X86::MOVSS2DImr:
  case X86::MOVSS2DIrr:
  case X86::MOVSSmr:
  case X86::MOVSSrr:
  case X86::MOVSX16rm8W:
  case X86::MOVSX16rr8W:
  case X86::MOVSX32rm16:
  case X86::MOVSX32rm8:
  case X86::MOVSX32rr16:
  case X86::MOVSX32rr8:
  case X86::MOVSX64rm16:
  case X86::MOVSX64rm32:
  case X86::MOVSX64rm8:
  case X86::MOVSX64rr16:
  case X86::MOVSX64rr32:
  case X86::MOVSX64rr8:
  case X86::MOVUPDrm:
  case X86::MOVUPDrm_Int:
  case X86::MOVUPDrr:
  case X86::MOVUPSrm:
  case X86::MOVUPSrm_Int:
  case X86::MOVUPSrr:
  case X86::MOVZDI2PDIrm:
  case X86::MOVZDI2PDIrr:
  case X86::MOVZPQILo2PQIrm:
  case X86::MOVZPQILo2PQIrr:
  case X86::MOVZQI2PQIrm:
  case X86::MOVZQI2PQIrr:
  case X86::MOVZX16rm8W:
  case X86::MOVZX16rr8W:
  case X86::MOVZX32_NOREXrm8:
  case X86::MOVZX32_NOREXrr8:
  case X86::MOVZX32rm16:
  case X86::MOVZX32rm8:
  case X86::MOVZX32rr16:
  case X86::MOVZX32rr8:
  case X86::MOVZX64rm16_Q:
  case X86::MOVZX64rm8_Q:
  case X86::MOVZX64rr16_Q:
  case X86::MOVZX64rr8_Q:
  case X86::MULPDrm:
  case X86::MULPDrr:
  case X86::MULPSrm:
  case X86::MULPSrr:
  case X86::MULSDrm:
  case X86::MULSDrm_Int:
  case X86::MULSDrr:
  case X86::MULSDrr_Int:
  case X86::MULSSrm:
  case X86::MULSSrm_Int:
  case X86::MULSSrr:
  case X86::MULSSrr_Int:
  case X86::OR16mi:
  case X86::OR16mi8:
  case X86::OR16mr:
  case X86::OR16rr_REV:
  case X86::OR32mi:
  case X86::OR32mi8:
  case X86::OR32mr:
  case X86::OR32mrLocked:
  case X86::OR32rr_REV:
  case X86::OR64mi32:
  case X86::OR64mi8:
  case X86::OR64mr:
  case X86::OR64rr_REV:
  case X86::OR8mi:
  case X86::OR8mr:
  case X86::OR8rr_REV:
  case X86::ORPDrm:
  case X86::ORPDrr:
  case X86::ORPSrm:
  case X86::ORPSrr:
  case X86::PABSBrm128:
  case X86::PABSBrr128:
  case X86::PABSDrm128:
  case X86::PABSDrr128:
  case X86::PABSWrm128:
  case X86::PABSWrr128:
  case X86::PACKSSDWrm:
  case X86::PACKSSDWrr:
  case X86::PACKSSWBrm:
  case X86::PACKSSWBrr:
  case X86::PACKUSDWrm:
  case X86::PACKUSDWrr:
  case X86::PACKUSWBrm:
  case X86::PACKUSWBrr:
  case X86::PADDBrm:
  case X86::PADDBrr:
  case X86::PADDDrm:
  case X86::PADDDrr:
  case X86::PADDQrm:
  case X86::PADDQrr:
  case X86::PADDSBrm:
  case X86::PADDSBrr:
  case X86::PADDSWrm:
  case X86::PADDSWrr:
  case X86::PADDUSBrm:
  case X86::PADDUSBrr:
  case X86::PADDUSWrm:
  case X86::PADDUSWrr:
  case X86::PADDWrm:
  case X86::PADDWrr:
  case X86::PANDNrm:
  case X86::PANDNrr:
  case X86::PANDrm:
  case X86::PANDrr:
  case X86::PAVGBrm:
  case X86::PAVGBrr:
  case X86::PAVGUSBrm:
  case X86::PAVGUSBrr:
  case X86::PAVGWrm:
  case X86::PAVGWrr:
  case X86::PCMPEQBrm:
  case X86::PCMPEQBrr:
  case X86::PCMPEQDrm:
  case X86::PCMPEQDrr:
  case X86::PCMPEQQrm:
  case X86::PCMPEQQrr:
  case X86::PCMPEQWrm:
  case X86::PCMPEQWrr:
  case X86::PCMPGTBrm:
  case X86::PCMPGTBrr:
  case X86::PCMPGTDrm:
  case X86::PCMPGTDrr:
  case X86::PCMPGTQrm:
  case X86::PCMPGTQrr:
  case X86::PCMPGTWrm:
  case X86::PCMPGTWrr:
  case X86::PF2IDrm:
  case X86::PF2IDrr:
  case X86::PF2IWrm:
  case X86::PF2IWrr:
  case X86::PFACCrm:
  case X86::PFACCrr:
  case X86::PFADDrm:
  case X86::PFADDrr:
  case X86::PFCMPEQrm:
  case X86::PFCMPEQrr:
  case X86::PFCMPGErm:
  case X86::PFCMPGErr:
  case X86::PFCMPGTrm:
  case X86::PFCMPGTrr:
  case X86::PFMAXrm:
  case X86::PFMAXrr:
  case X86::PFMINrm:
  case X86::PFMINrr:
  case X86::PFMULrm:
  case X86::PFMULrr:
  case X86::PFNACCrm:
  case X86::PFNACCrr:
  case X86::PFPNACCrm:
  case X86::PFPNACCrr:
  case X86::PFRCPIT1rm:
  case X86::PFRCPIT1rr:
  case X86::PFRCPIT2rm:
  case X86::PFRCPIT2rr:
  case X86::PFRCPrm:
  case X86::PFRCPrr:
  case X86::PFRSQIT1rm:
  case X86::PFRSQIT1rr:
  case X86::PFRSQRTrm:
  case X86::PFRSQRTrr:
  case X86::PFSUBRrm:
  case X86::PFSUBRrr:
  case X86::PFSUBrm:
  case X86::PFSUBrr:
  case X86::PHADDDrm128:
  case X86::PHADDDrr128:
  case X86::PHADDSWrm128:
  case X86::PHADDSWrr128:
  case X86::PHADDWrm128:
  case X86::PHADDWrr128:
  case X86::PHMINPOSUWrm128:
  case X86::PHMINPOSUWrr128:
  case X86::PHSUBDrm128:
  case X86::PHSUBDrr128:
  case X86::PHSUBSWrm128:
  case X86::PHSUBSWrr128:
  case X86::PHSUBWrm128:
  case X86::PHSUBWrr128:
  case X86::PI2FDrm:
  case X86::PI2FDrr:
  case X86::PI2FWrm:
  case X86::PI2FWrr:
  case X86::PMADDUBSWrm128:
  case X86::PMADDUBSWrr128:
  case X86::PMADDWDrm:
  case X86::PMADDWDrr:
  case X86::PMAXSBrm:
  case X86::PMAXSBrr:
  case X86::PMAXSDrm:
  case X86::PMAXSDrr:
  case X86::PMAXSWrm:
  case X86::PMAXSWrr:
  case X86::PMAXUBrm:
  case X86::PMAXUBrr:
  case X86::PMAXUDrm:
  case X86::PMAXUDrr:
  case X86::PMAXUWrm:
  case X86::PMAXUWrr:
  case X86::PMINSBrm:
  case X86::PMINSBrr:
  case X86::PMINSDrm:
  case X86::PMINSDrr:
  case X86::PMINSWrm:
  case X86::PMINSWrr:
  case X86::PMINUBrm:
  case X86::PMINUBrr:
  case X86::PMINUDrm:
  case X86::PMINUDrr:
  case X86::PMINUWrm:
  case X86::PMINUWrr:
  case X86::PMOVMSKBrr:
  case X86::PMOVSXBDrm:
  case X86::PMOVSXBDrr:
  case X86::PMOVSXBQrm:
  case X86::PMOVSXBQrr:
  case X86::PMOVSXBWrm:
  case X86::PMOVSXBWrr:
  case X86::PMOVSXDQrm:
  case X86::PMOVSXDQrr:
  case X86::PMOVSXWDrm:
  case X86::PMOVSXWDrr:
  case X86::PMOVSXWQrm:
  case X86::PMOVSXWQrr:
  case X86::PMOVZXBDrm:
  case X86::PMOVZXBDrr:
  case X86::PMOVZXBQrm:
  case X86::PMOVZXBQrr:
  case X86::PMOVZXBWrm:
  case X86::PMOVZXBWrr:
  case X86::PMOVZXDQrm:
  case X86::PMOVZXDQrr:
  case X86::PMOVZXWDrm:
  case X86::PMOVZXWDrr:
  case X86::PMOVZXWQrm:
  case X86::PMOVZXWQrr:
  case X86::PMULDQrm:
  case X86::PMULDQrr:
  case X86::PMULHRSWrm128:
  case X86::PMULHRSWrr128:
  case X86::PMULHRWrm:
  case X86::PMULHRWrr:
  case X86::PMULHUWrm:
  case X86::PMULHUWrr:
  case X86::PMULHWrm:
  case X86::PMULHWrr:
  case X86::PMULLDrm:
  case X86::PMULLDrr:
  case X86::PMULLWrm:
  case X86::PMULLWrr:
  case X86::PMULUDQrm:
  case X86::PMULUDQrr:
  case X86::POPCNT16rm:
  case X86::POPCNT16rr:
  case X86::POPCNT32rm:
  case X86::POPCNT32rr:
  case X86::POPCNT64rm:
  case X86::POPCNT64rr:
  case X86::PORrm:
  case X86::PORrr:
  case X86::PSADBWrm:
  case X86::PSADBWrr:
  case X86::PSHUFBrm128:
  case X86::PSHUFBrr128:
  case X86::PSIGNBrm128:
  case X86::PSIGNBrr128:
  case X86::PSIGNDrm128:
  case X86::PSIGNDrr128:
  case X86::PSIGNWrm128:
  case X86::PSIGNWrr128:
  case X86::PSLLDQri:
  case X86::PSLLDri:
  case X86::PSLLDrm:
  case X86::PSLLDrr:
  case X86::PSLLQri:
  case X86::PSLLQrm:
  case X86::PSLLQrr:
  case X86::PSLLWri:
  case X86::PSLLWrm:
  case X86::PSLLWrr:
  case X86::PSRADri:
  case X86::PSRADrm:
  case X86::PSRADrr:
  case X86::PSRAWri:
  case X86::PSRAWrm:
  case X86::PSRAWrr:
  case X86::PSRLDQri:
  case X86::PSRLDri:
  case X86::PSRLDrm:
  case X86::PSRLDrr:
  case X86::PSRLQri:
  case X86::PSRLQrm:
  case X86::PSRLQrr:
  case X86::PSRLWri:
  case X86::PSRLWrm:
  case X86::PSRLWrr:
  case X86::PSUBBrm:
  case X86::PSUBBrr:
  case X86::PSUBDrm:
  case X86::PSUBDrr:
  case X86::PSUBQrm:
  case X86::PSUBQrr:
  case X86::PSUBSBrm:
  case X86::PSUBSBrr:
  case X86::PSUBSWrm:
  case X86::PSUBSWrr:
  case X86::PSUBUSBrm:
  case X86::PSUBUSBrr:
  case X86::PSUBUSWrm:
  case X86::PSUBUSWrr:
  case X86::PSUBWrm:
  case X86::PSUBWrr:
  case X86::PSWAPDrm:
  case X86::PSWAPDrr:
  case X86::PTESTrm:
  case X86::PTESTrr:
  case X86::PUNPCKHBWrm:
  case X86::PUNPCKHBWrr:
  case X86::PUNPCKHDQrm:
  case X86::PUNPCKHDQrr:
  case X86::PUNPCKHQDQrm:
  case X86::PUNPCKHQDQrr:
  case X86::PUNPCKHWDrm:
  case X86::PUNPCKHWDrr:
  case X86::PUNPCKLBWrm:
  case X86::PUNPCKLBWrr:
  case X86::PUNPCKLDQrm:
  case X86::PUNPCKLDQrr:
  case X86::PUNPCKLQDQrm:
  case X86::PUNPCKLQDQrr:
  case X86::PUNPCKLWDrm:
  case X86::PUNPCKLWDrr:
  case X86::PXORrm:
  case X86::PXORrr:
  case X86::RCL16mi:
  case X86::RCL16ri:
  case X86::RCL32mi:
  case X86::RCL32ri:
  case X86::RCL64mi:
  case X86::RCL64ri:
  case X86::RCL8mi:
  case X86::RCL8ri:
  case X86::RCPPSm:
  case X86::RCPPSm_Int:
  case X86::RCPPSr:
  case X86::RCPPSr_Int:
  case X86::RCPSSr:
  case X86::RCPSSr_Int:
  case X86::RCR16mi:
  case X86::RCR16ri:
  case X86::RCR32mi:
  case X86::RCR32ri:
  case X86::RCR64mi:
  case X86::RCR64ri:
  case X86::RCR8mi:
  case X86::RCR8ri:
  case X86::ROL16mi:
  case X86::ROL16ri:
  case X86::ROL32mi:
  case X86::ROL32ri:
  case X86::ROL64mi:
  case X86::ROL64ri:
  case X86::ROL8mi:
  case X86::ROL8ri:
  case X86::ROR16mi:
  case X86::ROR16ri:
  case X86::ROR32mi:
  case X86::ROR32ri:
  case X86::ROR64mi:
  case X86::ROR64ri:
  case X86::ROR8mi:
  case X86::ROR8ri:
  case X86::RSQRTPSm:
  case X86::RSQRTPSm_Int:
  case X86::RSQRTPSr:
  case X86::RSQRTPSr_Int:
  case X86::RSQRTSSr:
  case X86::RSQRTSSr_Int:
  case X86::SAR16mi:
  case X86::SAR16ri:
  case X86::SAR32mi:
  case X86::SAR32ri:
  case X86::SAR64mi:
  case X86::SAR64ri:
  case X86::SAR8mi:
  case X86::SAR8ri:
  case X86::SBB16mi:
  case X86::SBB16mi8:
  case X86::SBB16mr:
  case X86::SBB16rr_REV:
  case X86::SBB32mi:
  case X86::SBB32mi8:
  case X86::SBB32mr:
  case X86::SBB32rr_REV:
  case X86::SBB64mi32:
  case X86::SBB64mi8:
  case X86::SBB64mr:
  case X86::SBB64rr_REV:
  case X86::SBB8mi:
  case X86::SBB8mr:
  case X86::SBB8rr_REV:
  case X86::SHL16mi:
  case X86::SHL16ri:
  case X86::SHL32mi:
  case X86::SHL32ri:
  case X86::SHL64mi:
  case X86::SHL64ri:
  case X86::SHL8mi:
  case X86::SHL8ri:
  case X86::SHR16mi:
  case X86::SHR16ri:
  case X86::SHR32mi:
  case X86::SHR32ri:
  case X86::SHR64mi:
  case X86::SHR64ri:
  case X86::SHR8mi:
  case X86::SHR8ri:
  case X86::SQRTPDm:
  case X86::SQRTPDm_Int:
  case X86::SQRTPDr:
  case X86::SQRTPDr_Int:
  case X86::SQRTPSm:
  case X86::SQRTPSm_Int:
  case X86::SQRTPSr:
  case X86::SQRTPSr_Int:
  case X86::SQRTSDr:
  case X86::SQRTSDr_Int:
  case X86::SQRTSSr:
  case X86::SQRTSSr_Int:
  case X86::SUB16mi:
  case X86::SUB16mi8:
  case X86::SUB16mr:
  case X86::SUB16rr_REV:
  case X86::SUB32mi:
  case X86::SUB32mi8:
  case X86::SUB32mr:
  case X86::SUB32rr_REV:
  case X86::SUB64mi32:
  case X86::SUB64mi8:
  case X86::SUB64mr:
  case X86::SUB64rr_REV:
  case X86::SUB8mi:
  case X86::SUB8mr:
  case X86::SUB8rr_REV:
  case X86::SUBPDrm:
  case X86::SUBPDrr:
  case X86::SUBPSrm:
  case X86::SUBPSrr:
  case X86::SUBSDrm:
  case X86::SUBSDrm_Int:
  case X86::SUBSDrr:
  case X86::SUBSDrr_Int:
  case X86::SUBSSrm:
  case X86::SUBSSrm_Int:
  case X86::SUBSSrr:
  case X86::SUBSSrr_Int:
  case X86::TEST16mi:
  case X86::TEST16ri:
  case X86::TEST16rm:
  case X86::TEST16rr:
  case X86::TEST32mi:
  case X86::TEST32ri:
  case X86::TEST32rm:
  case X86::TEST32rr:
  case X86::TEST64mi32:
  case X86::TEST64ri32:
  case X86::TEST64rm:
  case X86::TEST64rr:
  case X86::TEST8mi:
  case X86::TEST8ri:
  case X86::TEST8rm:
  case X86::TEST8rr:
  case X86::UCOMISDrr:
  case X86::UCOMISSrr:
  case X86::UNPCKHPDrm:
  case X86::UNPCKHPDrr:
  case X86::UNPCKHPSrm:
  case X86::UNPCKHPSrr:
  case X86::UNPCKLPDrm:
  case X86::UNPCKLPDrr:
  case X86::UNPCKLPSrm:
  case X86::UNPCKLPSrr:
  case X86::VAESIMCrm:
  case X86::VAESIMCrr:
  case X86::VBROADCASTF128:
  case X86::VCOMISDrm:
  case X86::VCOMISDrr:
  case X86::VCOMISSrm:
  case X86::VCOMISSrr:
  case X86::VCVTDQ2PDYrm:
  case X86::VCVTDQ2PDYrr:
  case X86::VCVTDQ2PDrm:
  case X86::VCVTDQ2PDrr:
  case X86::VCVTDQ2PSYrr:
  case X86::VCVTDQ2PSrm:
  case X86::VCVTDQ2PSrr:
  case X86::VCVTPD2DQXrYr:
  case X86::VCVTPD2DQXrm:
  case X86::VCVTPD2DQXrr:
  case X86::VCVTPD2DQYrm:
  case X86::VCVTPD2DQYrr:
  case X86::VCVTPD2DQrr:
  case X86::VCVTPD2PSXrYr:
  case X86::VCVTPD2PSXrm:
  case X86::VCVTPD2PSXrr:
  case X86::VCVTPD2PSYrm:
  case X86::VCVTPD2PSYrr:
  case X86::VCVTPD2PSrr:
  case X86::VCVTPS2DQYrm:
  case X86::VCVTPS2DQYrr:
  case X86::VCVTPS2DQrm:
  case X86::VCVTPS2DQrr:
  case X86::VCVTPS2PDYrm:
  case X86::VCVTPS2PDYrr:
  case X86::VCVTPS2PDrr:
  case X86::VCVTSD2SI64rr:
  case X86::VCVTSD2SI_altrr:
  case X86::VCVTSS2SI64rr:
  case X86::VCVTSS2SIrr:
  case X86::VCVTTPD2DQXrYr:
  case X86::VCVTTPD2DQXrm:
  case X86::VCVTTPD2DQXrr:
  case X86::VCVTTPD2DQYrm:
  case X86::VCVTTPD2DQYrr:
  case X86::VCVTTPD2DQrr:
  case X86::VCVTTPS2DQYrm:
  case X86::VCVTTPS2DQYrr:
  case X86::VCVTTPS2DQrm:
  case X86::VCVTTPS2DQrr:
  case X86::VCVTTSD2SI64rr:
  case X86::VCVTTSD2SIrr:
  case X86::VCVTTSS2SI64rr:
  case X86::VCVTTSS2SIrr:
  case X86::VLDDQUrm:
  case X86::VMASKMOVDQU:
  case X86::VMASKMOVDQU64:
  case X86::VMOVAPDYrm:
  case X86::VMOVAPDYrr:
  case X86::VMOVAPDrm:
  case X86::VMOVAPDrr:
  case X86::VMOVAPSYrm:
  case X86::VMOVAPSYrr:
  case X86::VMOVAPSrm:
  case X86::VMOVAPSrr:
  case X86::VMOVDDUPYrm:
  case X86::VMOVDDUPYrr:
  case X86::VMOVDDUPrr:
  case X86::VMOVDI2PDIrm:
  case X86::VMOVDI2PDIrr:
  case X86::VMOVDI2SSrm:
  case X86::VMOVDI2SSrr:
  case X86::VMOVDQAYrr:
  case X86::VMOVDQAmr:
  case X86::VMOVDQArm:
  case X86::VMOVDQArr:
  case X86::VMOVDQUYrr:
  case X86::VMOVDQUmr:
  case X86::VMOVDQUmr_Int:
  case X86::VMOVDQUrm:
  case X86::VMOVDQUrm_Int:
  case X86::VMOVDQUrr:
  case X86::VMOVHPDmr:
  case X86::VMOVHPSmr:
  case X86::VMOVLPDmr:
  case X86::VMOVLPSmr:
  case X86::VMOVLQ128mr:
  case X86::VMOVMSKPDYr64r:
  case X86::VMOVMSKPDYrr32:
  case X86::VMOVMSKPDYrr64:
  case X86::VMOVMSKPDr64r:
  case X86::VMOVMSKPDrr32:
  case X86::VMOVMSKPDrr64:
  case X86::VMOVMSKPSYr64r:
  case X86::VMOVMSKPSYrr32:
  case X86::VMOVMSKPSYrr64:
  case X86::VMOVMSKPSr64r:
  case X86::VMOVMSKPSrr32:
  case X86::VMOVMSKPSrr64:
  case X86::VMOVNTDQArm:
  case X86::VMOVNTPDmr_Int:
  case X86::VMOVNTPSmr_Int:
  case X86::VMOVPDI2DImr:
  case X86::VMOVPDI2DIrr:
  case X86::VMOVPQI2QImr:
  case X86::VMOVQI2PQIrm:
  case X86::VMOVQd64rr:
  case X86::VMOVQd64rr_alt:
  case X86::VMOVQs64rr:
  case X86::VMOVQxrxr:
  case X86::VMOVSDmr:
  case X86::VMOVSHDUPYrm:
  case X86::VMOVSHDUPYrr:
  case X86::VMOVSHDUPrm:
  case X86::VMOVSHDUPrr:
  case X86::VMOVSLDUPYrm:
  case X86::VMOVSLDUPYrr:
  case X86::VMOVSLDUPrm:
  case X86::VMOVSLDUPrr:
  case X86::VMOVSS2DImr:
  case X86::VMOVSS2DIrr:
  case X86::VMOVSSmr:
  case X86::VMOVUPDYrm:
  case X86::VMOVUPDYrr:
  case X86::VMOVUPDrm:
  case X86::VMOVUPDrm_Int:
  case X86::VMOVUPDrr:
  case X86::VMOVUPSYrm:
  case X86::VMOVUPSYrr:
  case X86::VMOVUPSrm:
  case X86::VMOVUPSrm_Int:
  case X86::VMOVUPSrr:
  case X86::VMOVZDI2PDIrm:
  case X86::VMOVZDI2PDIrr:
  case X86::VMOVZPQILo2PQIrm:
  case X86::VMOVZPQILo2PQIrr:
  case X86::VMOVZQI2PQIrm:
  case X86::VMOVZQI2PQIrr:
  case X86::VMREAD32rm:
  case X86::VMREAD32rr:
  case X86::VMREAD64rm:
  case X86::VMREAD64rr:
  case X86::VMWRITE32rm:
  case X86::VMWRITE32rr:
  case X86::VMWRITE64rm:
  case X86::VMWRITE64rr:
  case X86::VPABSBrm128:
  case X86::VPABSBrr128:
  case X86::VPABSDrm128:
  case X86::VPABSDrr128:
  case X86::VPABSWrm128:
  case X86::VPABSWrr128:
  case X86::VPHMINPOSUWrm128:
  case X86::VPHMINPOSUWrr128:
  case X86::VPMOVMSKBr64r:
  case X86::VPMOVMSKBrr:
  case X86::VPMOVSXBDrm:
  case X86::VPMOVSXBDrr:
  case X86::VPMOVSXBQrm:
  case X86::VPMOVSXBQrr:
  case X86::VPMOVSXBWrm:
  case X86::VPMOVSXBWrr:
  case X86::VPMOVSXDQrm:
  case X86::VPMOVSXDQrr:
  case X86::VPMOVSXWDrm:
  case X86::VPMOVSXWDrr:
  case X86::VPMOVSXWQrm:
  case X86::VPMOVSXWQrr:
  case X86::VPMOVZXBDrm:
  case X86::VPMOVZXBDrr:
  case X86::VPMOVZXBQrm:
  case X86::VPMOVZXBQrr:
  case X86::VPMOVZXBWrm:
  case X86::VPMOVZXBWrr:
  case X86::VPMOVZXDQrm:
  case X86::VPMOVZXDQrr:
  case X86::VPMOVZXWDrm:
  case X86::VPMOVZXWDrr:
  case X86::VPMOVZXWQrm:
  case X86::VPMOVZXWQrr:
  case X86::VPTESTYrr:
  case X86::VPTESTrm:
  case X86::VPTESTrr:
  case X86::VRCPPSYm:
  case X86::VRCPPSYm_Int:
  case X86::VRCPPSYr:
  case X86::VRCPPSYr_Int:
  case X86::VRCPPSm:
  case X86::VRCPPSm_Int:
  case X86::VRCPPSr:
  case X86::VRCPPSr_Int:
  case X86::VRSQRTPSYm:
  case X86::VRSQRTPSYm_Int:
  case X86::VRSQRTPSYr:
  case X86::VRSQRTPSYr_Int:
  case X86::VRSQRTPSm:
  case X86::VRSQRTPSm_Int:
  case X86::VRSQRTPSr:
  case X86::VRSQRTPSr_Int:
  case X86::VSQRTPDYm:
  case X86::VSQRTPDYm_Int:
  case X86::VSQRTPDYr:
  case X86::VSQRTPDYr_Int:
  case X86::VSQRTPDm:
  case X86::VSQRTPDm_Int:
  case X86::VSQRTPDr:
  case X86::VSQRTPDr_Int:
  case X86::VSQRTPSYm:
  case X86::VSQRTPSYm_Int:
  case X86::VSQRTPSYr:
  case X86::VSQRTPSYr_Int:
  case X86::VSQRTPSm:
  case X86::VSQRTPSm_Int:
  case X86::VSQRTPSr:
  case X86::VSQRTPSr_Int:
  case X86::VTESTPDYrm:
  case X86::VTESTPDYrr:
  case X86::VTESTPDrm:
  case X86::VTESTPDrr:
  case X86::VTESTPSYrm:
  case X86::VTESTPSYrr:
  case X86::VTESTPSrm:
  case X86::VTESTPSrr:
  case X86::VUCOMISDrr:
  case X86::VUCOMISSrr:
  case X86::XADD16rm:
  case X86::XADD16rr:
  case X86::XADD32rm:
  case X86::XADD32rr:
  case X86::XADD64rm:
  case X86::XADD64rr:
  case X86::XADD8rm:
  case X86::XADD8rr:
  case X86::XOR16mi:
  case X86::XOR16mi8:
  case X86::XOR16mr:
  case X86::XOR16rr_REV:
  case X86::XOR32mi:
  case X86::XOR32mi8:
  case X86::XOR32mr:
  case X86::XOR32rr_REV:
  case X86::XOR64mi32:
  case X86::XOR64mi8:
  case X86::XOR64mr:
  case X86::XOR64rr_REV:
  case X86::XOR8mi:
  case X86::XOR8mr:
  case X86::XOR8rr_REV:
  case X86::XORPDrm:
  case X86::XORPDrr:
  case X86::XORPSrm:
  case X86::XORPSrr:
    return;
    break;
  case X86::AESKEYGENASSIST128rm:
  case X86::AESKEYGENASSIST128rr:
  case X86::BLENDPDrmi:
  case X86::BLENDPDrri:
  case X86::BLENDPSrmi:
  case X86::BLENDPSrri:
  case X86::CMPPDrmi_alt:
  case X86::CMPPDrri_alt:
  case X86::CMPPSrmi_alt:
  case X86::CMPPSrri_alt:
  case X86::CMPSDrm_alt:
  case X86::CMPSDrr_alt:
  case X86::CMPSSrm_alt:
  case X86::CMPSSrr_alt:
  case X86::DPPDrmi:
  case X86::DPPDrri:
  case X86::DPPSrmi:
  case X86::DPPSrri:
  case X86::EXTRACTPSmr:
  case X86::EXTRACTPSrr:
  case X86::IMUL16rmi:
  case X86::IMUL16rmi8:
  case X86::IMUL16rri:
  case X86::IMUL16rri8:
  case X86::IMUL32rmi:
  case X86::IMUL32rmi8:
  case X86::IMUL32rri:
  case X86::IMUL32rri8:
  case X86::IMUL64rmi32:
  case X86::IMUL64rmi8:
  case X86::IMUL64rri32:
  case X86::IMUL64rri8:
  case X86::INSERTPSrm:
  case X86::INSERTPSrr:
  case X86::Int_VCMPSDrm:
  case X86::Int_VCMPSDrr:
  case X86::Int_VCMPSSrm:
  case X86::Int_VCMPSSrr:
  case X86::Int_VCVTSD2SSrm:
  case X86::Int_VCVTSD2SSrr:
  case X86::Int_VCVTSI2SD64rm:
  case X86::Int_VCVTSI2SD64rr:
  case X86::Int_VCVTSI2SDrm:
  case X86::Int_VCVTSI2SDrr:
  case X86::Int_VCVTSI2SS64rm:
  case X86::Int_VCVTSI2SS64rr:
  case X86::Int_VCVTSI2SSrm:
  case X86::Int_VCVTSI2SSrr:
  case X86::Int_VCVTSS2SDrm:
  case X86::Int_VCVTSS2SDrr:
  case X86::MMX_PALIGNR64irm:
  case X86::MMX_PALIGNR64irr:
  case X86::MMX_PEXTRWirri:
  case X86::MMX_PINSRWirmi:
  case X86::MMX_PINSRWirri:
  case X86::MMX_PSHUFWmi:
  case X86::MMX_PSHUFWri:
  case X86::MPSADBWrmi:
  case X86::MPSADBWrri:
  case X86::PALIGNR128rm:
  case X86::PALIGNR128rr:
  case X86::PBLENDWrmi:
  case X86::PBLENDWrri:
  case X86::PCMPESTRIArm:
  case X86::PCMPESTRIArr:
  case X86::PCMPESTRICrm:
  case X86::PCMPESTRICrr:
  case X86::PCMPESTRIOrm:
  case X86::PCMPESTRIOrr:
  case X86::PCMPESTRISrm:
  case X86::PCMPESTRISrr:
  case X86::PCMPESTRIZrm:
  case X86::PCMPESTRIZrr:
  case X86::PCMPESTRIrm:
  case X86::PCMPESTRIrr:
  case X86::PCMPESTRM128rm:
  case X86::PCMPESTRM128rr:
  case X86::PCMPISTRIArm:
  case X86::PCMPISTRIArr:
  case X86::PCMPISTRICrm:
  case X86::PCMPISTRICrr:
  case X86::PCMPISTRIOrm:
  case X86::PCMPISTRIOrr:
  case X86::PCMPISTRISrm:
  case X86::PCMPISTRISrr:
  case X86::PCMPISTRIZrm:
  case X86::PCMPISTRIZrr:
  case X86::PCMPISTRIrm:
  case X86::PCMPISTRIrr:
  case X86::PCMPISTRM128rm:
  case X86::PCMPISTRM128rr:
  case X86::PEXTRBmr:
  case X86::PEXTRBrr:
  case X86::PEXTRDmr:
  case X86::PEXTRDrr:
  case X86::PEXTRQmr:
  case X86::PEXTRQrr:
  case X86::PEXTRWmr:
  case X86::PEXTRWri:
  case X86::PINSRBrr:
  case X86::PINSRDrm:
  case X86::PINSRDrr:
  case X86::PINSRQrm:
  case X86::PINSRQrr:
  case X86::PINSRWrmi:
  case X86::PINSRWrri:
  case X86::PSHUFDmi:
  case X86::PSHUFDri:
  case X86::PSHUFHWmi:
  case X86::PSHUFHWri:
  case X86::PSHUFLWmi:
  case X86::PSHUFLWri:
  case X86::ROUNDPDm:
  case X86::ROUNDPDr:
  case X86::ROUNDPSm:
  case X86::ROUNDPSr:
  case X86::ROUNDSDm:
  case X86::ROUNDSDr:
  case X86::ROUNDSSm:
  case X86::ROUNDSSr:
  case X86::SHLD16mri8:
  case X86::SHLD16rri8:
  case X86::SHLD32mri8:
  case X86::SHLD32rri8:
  case X86::SHLD64mri8:
  case X86::SHLD64rri8:
  case X86::SHRD16mri8:
  case X86::SHRD16rri8:
  case X86::SHRD32mri8:
  case X86::SHRD32rri8:
  case X86::SHRD64mri8:
  case X86::SHRD64rri8:
  case X86::SHUFPDrmi:
  case X86::SHUFPDrri:
  case X86::SHUFPSrmi:
  case X86::SHUFPSrri:
  case X86::VADDPDYrm:
  case X86::VADDPDYrr:
  case X86::VADDPDrm:
  case X86::VADDPDrr:
  case X86::VADDPSYrm:
  case X86::VADDPSYrr:
  case X86::VADDPSrm:
  case X86::VADDPSrr:
  case X86::VADDSDrm:
  case X86::VADDSDrm_Int:
  case X86::VADDSDrr:
  case X86::VADDSDrr_Int:
  case X86::VADDSSrm:
  case X86::VADDSSrm_Int:
  case X86::VADDSSrr:
  case X86::VADDSSrr_Int:
  case X86::VADDSUBPDYrm:
  case X86::VADDSUBPDYrr:
  case X86::VADDSUBPDrm:
  case X86::VADDSUBPDrr:
  case X86::VADDSUBPSYrm:
  case X86::VADDSUBPSYrr:
  case X86::VADDSUBPSrm:
  case X86::VADDSUBPSrr:
  case X86::VAESDECLASTrm:
  case X86::VAESDECLASTrr:
  case X86::VAESDECrm:
  case X86::VAESDECrr:
  case X86::VAESENCLASTrm:
  case X86::VAESENCLASTrr:
  case X86::VAESENCrm:
  case X86::VAESENCrr:
  case X86::VAESKEYGENASSIST128rm:
  case X86::VAESKEYGENASSIST128rr:
  case X86::VANDNPDYrm:
  case X86::VANDNPDYrr:
  case X86::VANDNPDrm:
  case X86::VANDNPDrr:
  case X86::VANDNPSYrm:
  case X86::VANDNPSYrr:
  case X86::VANDNPSrm:
  case X86::VANDNPSrr:
  case X86::VANDPDYrm:
  case X86::VANDPDYrr:
  case X86::VANDPDrm:
  case X86::VANDPDrr:
  case X86::VANDPSYrm:
  case X86::VANDPSYrr:
  case X86::VANDPSrm:
  case X86::VANDPSrr:
  case X86::VASTART_SAVE_XMM_REGS:
  case X86::VCMPPDYrmi:
  case X86::VCMPPDYrri:
  case X86::VCMPPDrmi:
  case X86::VCMPPDrri:
  case X86::VCMPPSYrmi:
  case X86::VCMPPSYrri:
  case X86::VCMPPSrmi:
  case X86::VCMPPSrri:
  case X86::VCMPSDrm:
  case X86::VCMPSDrr:
  case X86::VCMPSSrm:
  case X86::VCMPSSrr:
  case X86::VCVTSD2SSrm:
  case X86::VCVTSD2SSrr:
  case X86::VCVTSI2SD64rm:
  case X86::VCVTSI2SD64rr:
  case X86::VCVTSI2SDLrm:
  case X86::VCVTSI2SDLrr:
  case X86::VCVTSI2SDrm:
  case X86::VCVTSI2SDrr:
  case X86::VCVTSI2SS64rm:
  case X86::VCVTSI2SS64rr:
  case X86::VCVTSI2SSrm:
  case X86::VCVTSI2SSrr:
  case X86::VCVTSS2SDrm:
  case X86::VCVTSS2SDrr:
  case X86::VDIVPDYrm:
  case X86::VDIVPDYrr:
  case X86::VDIVPDrm:
  case X86::VDIVPDrr:
  case X86::VDIVPSYrm:
  case X86::VDIVPSYrr:
  case X86::VDIVPSrm:
  case X86::VDIVPSrr:
  case X86::VDIVSDrm:
  case X86::VDIVSDrm_Int:
  case X86::VDIVSDrr:
  case X86::VDIVSDrr_Int:
  case X86::VDIVSSrm:
  case X86::VDIVSSrm_Int:
  case X86::VDIVSSrr:
  case X86::VDIVSSrr_Int:
  case X86::VEXTRACTF128rr:
  case X86::VEXTRACTPSmr:
  case X86::VEXTRACTPSrr:
  case X86::VEXTRACTPSrr64:
  case X86::VFMADDPDr132m:
  case X86::VFMADDPDr132mY:
  case X86::VFMADDPDr132r:
  case X86::VFMADDPDr132rY:
  case X86::VFMADDPDr213m:
  case X86::VFMADDPDr213mY:
  case X86::VFMADDPDr213r:
  case X86::VFMADDPDr213rY:
  case X86::VFMADDPDr231m:
  case X86::VFMADDPDr231mY:
  case X86::VFMADDPDr231r:
  case X86::VFMADDPDr231rY:
  case X86::VFMADDPSr132m:
  case X86::VFMADDPSr132mY:
  case X86::VFMADDPSr132r:
  case X86::VFMADDPSr132rY:
  case X86::VFMADDPSr213m:
  case X86::VFMADDPSr213mY:
  case X86::VFMADDPSr213r:
  case X86::VFMADDPSr213rY:
  case X86::VFMADDPSr231m:
  case X86::VFMADDPSr231mY:
  case X86::VFMADDPSr231r:
  case X86::VFMADDPSr231rY:
  case X86::VFMADDSUBPDr132m:
  case X86::VFMADDSUBPDr132mY:
  case X86::VFMADDSUBPDr132r:
  case X86::VFMADDSUBPDr132rY:
  case X86::VFMADDSUBPDr213m:
  case X86::VFMADDSUBPDr213mY:
  case X86::VFMADDSUBPDr213r:
  case X86::VFMADDSUBPDr213rY:
  case X86::VFMADDSUBPDr231m:
  case X86::VFMADDSUBPDr231mY:
  case X86::VFMADDSUBPDr231r:
  case X86::VFMADDSUBPDr231rY:
  case X86::VFMADDSUBPSr132m:
  case X86::VFMADDSUBPSr132mY:
  case X86::VFMADDSUBPSr132r:
  case X86::VFMADDSUBPSr132rY:
  case X86::VFMADDSUBPSr213m:
  case X86::VFMADDSUBPSr213mY:
  case X86::VFMADDSUBPSr213r:
  case X86::VFMADDSUBPSr213rY:
  case X86::VFMADDSUBPSr231m:
  case X86::VFMADDSUBPSr231mY:
  case X86::VFMADDSUBPSr231r:
  case X86::VFMADDSUBPSr231rY:
  case X86::VFMSUBADDPDr132m:
  case X86::VFMSUBADDPDr132mY:
  case X86::VFMSUBADDPDr132r:
  case X86::VFMSUBADDPDr132rY:
  case X86::VFMSUBADDPDr213m:
  case X86::VFMSUBADDPDr213mY:
  case X86::VFMSUBADDPDr213r:
  case X86::VFMSUBADDPDr213rY:
  case X86::VFMSUBADDPDr231m:
  case X86::VFMSUBADDPDr231mY:
  case X86::VFMSUBADDPDr231r:
  case X86::VFMSUBADDPDr231rY:
  case X86::VFMSUBADDPSr132m:
  case X86::VFMSUBADDPSr132mY:
  case X86::VFMSUBADDPSr132r:
  case X86::VFMSUBADDPSr132rY:
  case X86::VFMSUBADDPSr213m:
  case X86::VFMSUBADDPSr213mY:
  case X86::VFMSUBADDPSr213r:
  case X86::VFMSUBADDPSr213rY:
  case X86::VFMSUBADDPSr231m:
  case X86::VFMSUBADDPSr231mY:
  case X86::VFMSUBADDPSr231r:
  case X86::VFMSUBADDPSr231rY:
  case X86::VFMSUBPDr132m:
  case X86::VFMSUBPDr132mY:
  case X86::VFMSUBPDr132r:
  case X86::VFMSUBPDr132rY:
  case X86::VFMSUBPDr213m:
  case X86::VFMSUBPDr213mY:
  case X86::VFMSUBPDr213r:
  case X86::VFMSUBPDr213rY:
  case X86::VFMSUBPDr231m:
  case X86::VFMSUBPDr231mY:
  case X86::VFMSUBPDr231r:
  case X86::VFMSUBPDr231rY:
  case X86::VFMSUBPSr132m:
  case X86::VFMSUBPSr132mY:
  case X86::VFMSUBPSr132r:
  case X86::VFMSUBPSr132rY:
  case X86::VFMSUBPSr213m:
  case X86::VFMSUBPSr213mY:
  case X86::VFMSUBPSr213r:
  case X86::VFMSUBPSr213rY:
  case X86::VFMSUBPSr231m:
  case X86::VFMSUBPSr231mY:
  case X86::VFMSUBPSr231r:
  case X86::VFMSUBPSr231rY:
  case X86::VFNMADDPDr132m:
  case X86::VFNMADDPDr132mY:
  case X86::VFNMADDPDr132r:
  case X86::VFNMADDPDr132rY:
  case X86::VFNMADDPDr213m:
  case X86::VFNMADDPDr213mY:
  case X86::VFNMADDPDr213r:
  case X86::VFNMADDPDr213rY:
  case X86::VFNMADDPDr231m:
  case X86::VFNMADDPDr231mY:
  case X86::VFNMADDPDr231r:
  case X86::VFNMADDPDr231rY:
  case X86::VFNMADDPSr132m:
  case X86::VFNMADDPSr132mY:
  case X86::VFNMADDPSr132r:
  case X86::VFNMADDPSr132rY:
  case X86::VFNMADDPSr213m:
  case X86::VFNMADDPSr213mY:
  case X86::VFNMADDPSr213r:
  case X86::VFNMADDPSr213rY:
  case X86::VFNMADDPSr231m:
  case X86::VFNMADDPSr231mY:
  case X86::VFNMADDPSr231r:
  case X86::VFNMADDPSr231rY:
  case X86::VFNMSUBPDr132m:
  case X86::VFNMSUBPDr132mY:
  case X86::VFNMSUBPDr132r:
  case X86::VFNMSUBPDr132rY:
  case X86::VFNMSUBPDr213m:
  case X86::VFNMSUBPDr213mY:
  case X86::VFNMSUBPDr213r:
  case X86::VFNMSUBPDr213rY:
  case X86::VFNMSUBPDr231m:
  case X86::VFNMSUBPDr231mY:
  case X86::VFNMSUBPDr231r:
  case X86::VFNMSUBPDr231rY:
  case X86::VFNMSUBPSr132m:
  case X86::VFNMSUBPSr132mY:
  case X86::VFNMSUBPSr132r:
  case X86::VFNMSUBPSr132rY:
  case X86::VFNMSUBPSr213m:
  case X86::VFNMSUBPSr213mY:
  case X86::VFNMSUBPSr213r:
  case X86::VFNMSUBPSr213rY:
  case X86::VFNMSUBPSr231m:
  case X86::VFNMSUBPSr231mY:
  case X86::VFNMSUBPSr231r:
  case X86::VFNMSUBPSr231rY:
  case X86::VFsANDNPDrm:
  case X86::VFsANDNPDrr:
  case X86::VFsANDNPSrm:
  case X86::VFsANDNPSrr:
  case X86::VFsANDPDrm:
  case X86::VFsANDPDrr:
  case X86::VFsANDPSrm:
  case X86::VFsANDPSrr:
  case X86::VFsORPDrm:
  case X86::VFsORPDrr:
  case X86::VFsORPSrm:
  case X86::VFsORPSrr:
  case X86::VFsXORPDrm:
  case X86::VFsXORPDrr:
  case X86::VFsXORPSrm:
  case X86::VFsXORPSrr:
  case X86::VHADDPDYrm:
  case X86::VHADDPDYrr:
  case X86::VHADDPDrm:
  case X86::VHADDPDrr:
  case X86::VHADDPSYrm:
  case X86::VHADDPSYrr:
  case X86::VHADDPSrm:
  case X86::VHADDPSrr:
  case X86::VHSUBPDYrm:
  case X86::VHSUBPDYrr:
  case X86::VHSUBPDrm:
  case X86::VHSUBPDrr:
  case X86::VHSUBPSYrm:
  case X86::VHSUBPSYrr:
  case X86::VHSUBPSrm:
  case X86::VHSUBPSrr:
  case X86::VMASKMOVPDYrm:
  case X86::VMASKMOVPDrm:
  case X86::VMASKMOVPSYrm:
  case X86::VMASKMOVPSrm:
  case X86::VMAXPDYrm:
  case X86::VMAXPDYrm_Int:
  case X86::VMAXPDYrr:
  case X86::VMAXPDYrr_Int:
  case X86::VMAXPDrm:
  case X86::VMAXPDrm_Int:
  case X86::VMAXPDrr:
  case X86::VMAXPDrr_Int:
  case X86::VMAXPSYrm:
  case X86::VMAXPSYrm_Int:
  case X86::VMAXPSYrr:
  case X86::VMAXPSYrr_Int:
  case X86::VMAXPSrm:
  case X86::VMAXPSrm_Int:
  case X86::VMAXPSrr:
  case X86::VMAXPSrr_Int:
  case X86::VMAXSDrm:
  case X86::VMAXSDrm_Int:
  case X86::VMAXSDrr:
  case X86::VMAXSDrr_Int:
  case X86::VMAXSSrm:
  case X86::VMAXSSrm_Int:
  case X86::VMAXSSrr:
  case X86::VMAXSSrr_Int:
  case X86::VMINPDYrm:
  case X86::VMINPDYrm_Int:
  case X86::VMINPDYrr:
  case X86::VMINPDYrr_Int:
  case X86::VMINPDrm:
  case X86::VMINPDrm_Int:
  case X86::VMINPDrr:
  case X86::VMINPDrr_Int:
  case X86::VMINPSYrm:
  case X86::VMINPSYrm_Int:
  case X86::VMINPSYrr:
  case X86::VMINPSYrr_Int:
  case X86::VMINPSrm:
  case X86::VMINPSrm_Int:
  case X86::VMINPSrr:
  case X86::VMINPSrr_Int:
  case X86::VMINSDrm:
  case X86::VMINSDrm_Int:
  case X86::VMINSDrr:
  case X86::VMINSDrr_Int:
  case X86::VMINSSrm:
  case X86::VMINSSrm_Int:
  case X86::VMINSSrr:
  case X86::VMINSSrr_Int:
  case X86::VMOVHLPSrr:
  case X86::VMOVHPDrm:
  case X86::VMOVHPSrm:
  case X86::VMOVLHPSrr:
  case X86::VMOVLPDrm:
  case X86::VMOVLPSrm:
  case X86::VMOVSDrr:
  case X86::VMOVSSrr:
  case X86::VMULPDYrm:
  case X86::VMULPDYrr:
  case X86::VMULPDrm:
  case X86::VMULPDrr:
  case X86::VMULPSYrm:
  case X86::VMULPSYrr:
  case X86::VMULPSrm:
  case X86::VMULPSrr:
  case X86::VMULSDrm:
  case X86::VMULSDrm_Int:
  case X86::VMULSDrr:
  case X86::VMULSDrr_Int:
  case X86::VMULSSrm:
  case X86::VMULSSrm_Int:
  case X86::VMULSSrr:
  case X86::VMULSSrr_Int:
  case X86::VORPDYrm:
  case X86::VORPDYrr:
  case X86::VORPDrm:
  case X86::VORPDrr:
  case X86::VORPSYrm:
  case X86::VORPSYrr:
  case X86::VORPSrm:
  case X86::VORPSrr:
  case X86::VPACKSSDWrm:
  case X86::VPACKSSDWrr:
  case X86::VPACKSSWBrm:
  case X86::VPACKSSWBrr:
  case X86::VPACKUSDWrm:
  case X86::VPACKUSDWrr:
  case X86::VPACKUSWBrm:
  case X86::VPACKUSWBrr:
  case X86::VPADDBrm:
  case X86::VPADDBrr:
  case X86::VPADDDrm:
  case X86::VPADDDrr:
  case X86::VPADDQrm:
  case X86::VPADDQrr:
  case X86::VPADDSBrm:
  case X86::VPADDSBrr:
  case X86::VPADDSWrm:
  case X86::VPADDSWrr:
  case X86::VPADDUSBrm:
  case X86::VPADDUSBrr:
  case X86::VPADDUSWrm:
  case X86::VPADDUSWrr:
  case X86::VPADDWrm:
  case X86::VPADDWrr:
  case X86::VPANDNrm:
  case X86::VPANDNrr:
  case X86::VPANDrm:
  case X86::VPANDrr:
  case X86::VPAVGBrm:
  case X86::VPAVGBrr:
  case X86::VPAVGWrm:
  case X86::VPAVGWrr:
  case X86::VPCLMULHQHQDQrm:
  case X86::VPCLMULHQHQDQrr:
  case X86::VPCLMULHQLQDQrm:
  case X86::VPCLMULHQLQDQrr:
  case X86::VPCLMULLQHQDQrm:
  case X86::VPCLMULLQHQDQrr:
  case X86::VPCLMULLQLQDQrm:
  case X86::VPCLMULLQLQDQrr:
  case X86::VPCMPEQBrm:
  case X86::VPCMPEQBrr:
  case X86::VPCMPEQDrm:
  case X86::VPCMPEQDrr:
  case X86::VPCMPEQQrm:
  case X86::VPCMPEQQrr:
  case X86::VPCMPEQWrm:
  case X86::VPCMPEQWrr:
  case X86::VPCMPESTRIArm:
  case X86::VPCMPESTRIArr:
  case X86::VPCMPESTRICrm:
  case X86::VPCMPESTRICrr:
  case X86::VPCMPESTRIOrm:
  case X86::VPCMPESTRIOrr:
  case X86::VPCMPESTRISrm:
  case X86::VPCMPESTRISrr:
  case X86::VPCMPESTRIZrm:
  case X86::VPCMPESTRIZrr:
  case X86::VPCMPESTRIrm:
  case X86::VPCMPESTRIrr:
  case X86::VPCMPESTRM128rm:
  case X86::VPCMPESTRM128rr:
  case X86::VPCMPGTBrm:
  case X86::VPCMPGTBrr:
  case X86::VPCMPGTDrm:
  case X86::VPCMPGTDrr:
  case X86::VPCMPGTQrm:
  case X86::VPCMPGTQrr:
  case X86::VPCMPGTWrm:
  case X86::VPCMPGTWrr:
  case X86::VPCMPISTRIArm:
  case X86::VPCMPISTRIArr:
  case X86::VPCMPISTRICrm:
  case X86::VPCMPISTRICrr:
  case X86::VPCMPISTRIOrm:
  case X86::VPCMPISTRIOrr:
  case X86::VPCMPISTRISrm:
  case X86::VPCMPISTRISrr:
  case X86::VPCMPISTRIZrm:
  case X86::VPCMPISTRIZrr:
  case X86::VPCMPISTRIrm:
  case X86::VPCMPISTRIrr:
  case X86::VPCMPISTRM128rm:
  case X86::VPCMPISTRM128rr:
  case X86::VPERMILPDYmi:
  case X86::VPERMILPDYri:
  case X86::VPERMILPDYrm:
  case X86::VPERMILPDYrr:
  case X86::VPERMILPDmi:
  case X86::VPERMILPDri:
  case X86::VPERMILPDrm:
  case X86::VPERMILPDrr:
  case X86::VPERMILPSYmi:
  case X86::VPERMILPSYri:
  case X86::VPERMILPSYrm:
  case X86::VPERMILPSYrr:
  case X86::VPERMILPSmi:
  case X86::VPERMILPSri:
  case X86::VPERMILPSrm:
  case X86::VPERMILPSrr:
  case X86::VPEXTRBmr:
  case X86::VPEXTRBrr:
  case X86::VPEXTRBrr64:
  case X86::VPEXTRDmr:
  case X86::VPEXTRDrr:
  case X86::VPEXTRQmr:
  case X86::VPEXTRQrr:
  case X86::VPEXTRWmr:
  case X86::VPEXTRWri:
  case X86::VPHADDDrm128:
  case X86::VPHADDDrr128:
  case X86::VPHADDSWrm128:
  case X86::VPHADDSWrr128:
  case X86::VPHADDWrm128:
  case X86::VPHADDWrr128:
  case X86::VPHSUBDrm128:
  case X86::VPHSUBDrr128:
  case X86::VPHSUBSWrm128:
  case X86::VPHSUBSWrr128:
  case X86::VPHSUBWrm128:
  case X86::VPHSUBWrr128:
  case X86::VPMADDUBSWrm128:
  case X86::VPMADDUBSWrr128:
  case X86::VPMADDWDrm:
  case X86::VPMADDWDrr:
  case X86::VPMAXSBrm:
  case X86::VPMAXSBrr:
  case X86::VPMAXSDrm:
  case X86::VPMAXSDrr:
  case X86::VPMAXSWrm:
  case X86::VPMAXSWrr:
  case X86::VPMAXUBrm:
  case X86::VPMAXUBrr:
  case X86::VPMAXUDrm:
  case X86::VPMAXUDrr:
  case X86::VPMAXUWrm:
  case X86::VPMAXUWrr:
  case X86::VPMINSBrm:
  case X86::VPMINSBrr:
  case X86::VPMINSDrm:
  case X86::VPMINSDrr:
  case X86::VPMINSWrm:
  case X86::VPMINSWrr:
  case X86::VPMINUBrm:
  case X86::VPMINUBrr:
  case X86::VPMINUDrm:
  case X86::VPMINUDrr:
  case X86::VPMINUWrm:
  case X86::VPMINUWrr:
  case X86::VPMULDQrm:
  case X86::VPMULDQrr:
  case X86::VPMULHRSWrm128:
  case X86::VPMULHRSWrr128:
  case X86::VPMULHUWrm:
  case X86::VPMULHUWrr:
  case X86::VPMULHWrm:
  case X86::VPMULHWrr:
  case X86::VPMULLDrm:
  case X86::VPMULLDrr:
  case X86::VPMULLWrm:
  case X86::VPMULLWrr:
  case X86::VPMULUDQrm:
  case X86::VPMULUDQrr:
  case X86::VPORrm:
  case X86::VPORrr:
  case X86::VPSADBWrm:
  case X86::VPSADBWrr:
  case X86::VPSHUFBrm128:
  case X86::VPSHUFBrr128:
  case X86::VPSHUFDmi:
  case X86::VPSHUFDri:
  case X86::VPSHUFHWmi:
  case X86::VPSHUFHWri:
  case X86::VPSHUFLWmi:
  case X86::VPSHUFLWri:
  case X86::VPSIGNBrm128:
  case X86::VPSIGNBrr128:
  case X86::VPSIGNDrm128:
  case X86::VPSIGNDrr128:
  case X86::VPSIGNWrm128:
  case X86::VPSIGNWrr128:
  case X86::VPSLLDQri:
  case X86::VPSLLDri:
  case X86::VPSLLDrm:
  case X86::VPSLLDrr:
  case X86::VPSLLQri:
  case X86::VPSLLQrm:
  case X86::VPSLLQrr:
  case X86::VPSLLWri:
  case X86::VPSLLWrm:
  case X86::VPSLLWrr:
  case X86::VPSRADri:
  case X86::VPSRADrm:
  case X86::VPSRADrr:
  case X86::VPSRAWri:
  case X86::VPSRAWrm:
  case X86::VPSRAWrr:
  case X86::VPSRLDQri:
  case X86::VPSRLDri:
  case X86::VPSRLDrm:
  case X86::VPSRLDrr:
  case X86::VPSRLQri:
  case X86::VPSRLQrm:
  case X86::VPSRLQrr:
  case X86::VPSRLWri:
  case X86::VPSRLWrm:
  case X86::VPSRLWrr:
  case X86::VPSUBBrm:
  case X86::VPSUBBrr:
  case X86::VPSUBDrm:
  case X86::VPSUBDrr:
  case X86::VPSUBQrm:
  case X86::VPSUBQrr:
  case X86::VPSUBSBrm:
  case X86::VPSUBSBrr:
  case X86::VPSUBSWrm:
  case X86::VPSUBSWrr:
  case X86::VPSUBUSBrm:
  case X86::VPSUBUSBrr:
  case X86::VPSUBUSWrm:
  case X86::VPSUBUSWrr:
  case X86::VPSUBWrm:
  case X86::VPSUBWrr:
  case X86::VPUNPCKHBWrm:
  case X86::VPUNPCKHBWrr:
  case X86::VPUNPCKHDQrm:
  case X86::VPUNPCKHDQrr:
  case X86::VPUNPCKHQDQrm:
  case X86::VPUNPCKHQDQrr:
  case X86::VPUNPCKHWDrm:
  case X86::VPUNPCKHWDrr:
  case X86::VPUNPCKLBWrm:
  case X86::VPUNPCKLBWrr:
  case X86::VPUNPCKLDQrm:
  case X86::VPUNPCKLDQrr:
  case X86::VPUNPCKLQDQrm:
  case X86::VPUNPCKLQDQrr:
  case X86::VPUNPCKLWDrm:
  case X86::VPUNPCKLWDrr:
  case X86::VPXORrm:
  case X86::VPXORrr:
  case X86::VRCPSSm:
  case X86::VRCPSSr:
  case X86::VROUNDPDm:
  case X86::VROUNDPDm_AVX:
  case X86::VROUNDPDr:
  case X86::VROUNDPDr_AVX:
  case X86::VROUNDPSm:
  case X86::VROUNDPSm_AVX:
  case X86::VROUNDPSr:
  case X86::VROUNDPSr_AVX:
  case X86::VROUNDYPDm:
  case X86::VROUNDYPDm_AVX:
  case X86::VROUNDYPDr:
  case X86::VROUNDYPDr_AVX:
  case X86::VROUNDYPSm:
  case X86::VROUNDYPSm_AVX:
  case X86::VROUNDYPSr:
  case X86::VROUNDYPSr_AVX:
  case X86::VRSQRTSSm:
  case X86::VRSQRTSSr:
  case X86::VSQRTSDm:
  case X86::VSQRTSDr:
  case X86::VSQRTSSm:
  case X86::VSQRTSSr:
  case X86::VSUBPDYrm:
  case X86::VSUBPDYrr:
  case X86::VSUBPDrm:
  case X86::VSUBPDrr:
  case X86::VSUBPSYrm:
  case X86::VSUBPSYrr:
  case X86::VSUBPSrm:
  case X86::VSUBPSrr:
  case X86::VSUBSDrm:
  case X86::VSUBSDrm_Int:
  case X86::VSUBSDrr:
  case X86::VSUBSDrr_Int:
  case X86::VSUBSSrm:
  case X86::VSUBSSrm_Int:
  case X86::VSUBSSrr:
  case X86::VSUBSSrr_Int:
  case X86::VUNPCKHPDYrm:
  case X86::VUNPCKHPDYrr:
  case X86::VUNPCKHPDrm:
  case X86::VUNPCKHPDrr:
  case X86::VUNPCKHPSYrm:
  case X86::VUNPCKHPSYrr:
  case X86::VUNPCKHPSrm:
  case X86::VUNPCKHPSrr:
  case X86::VUNPCKLPDYrm:
  case X86::VUNPCKLPDYrr:
  case X86::VUNPCKLPDrm:
  case X86::VUNPCKLPDrr:
  case X86::VUNPCKLPSYrm:
  case X86::VUNPCKLPSYrr:
  case X86::VUNPCKLPSrm:
  case X86::VUNPCKLPSrr:
  case X86::VXORPDYrm:
  case X86::VXORPDYrr:
  case X86::VXORPDrm:
  case X86::VXORPDrr:
  case X86::VXORPSYrm:
  case X86::VXORPSYrr:
  case X86::VXORPSrm:
  case X86::VXORPSrr:
    O << ", "; 
    switch (MI->getOpcode()) {
    case X86::AESKEYGENASSIST128rm: 
    case X86::EXTRACTPSmr: 
    case X86::IMUL16rmi: 
    case X86::IMUL16rmi8: 
    case X86::IMUL32rmi: 
    case X86::IMUL32rmi8: 
    case X86::IMUL64rmi32: 
    case X86::IMUL64rmi8: 
    case X86::MMX_PSHUFWmi: 
    case X86::PCMPESTRIArm: 
    case X86::PCMPESTRICrm: 
    case X86::PCMPESTRIOrm: 
    case X86::PCMPESTRISrm: 
    case X86::PCMPESTRIZrm: 
    case X86::PCMPESTRIrm: 
    case X86::PCMPESTRM128rm: 
    case X86::PCMPISTRIArm: 
    case X86::PCMPISTRICrm: 
    case X86::PCMPISTRIOrm: 
    case X86::PCMPISTRISrm: 
    case X86::PCMPISTRIZrm: 
    case X86::PCMPISTRIrm: 
    case X86::PCMPISTRM128rm: 
    case X86::PEXTRBmr: 
    case X86::PEXTRDmr: 
    case X86::PEXTRQmr: 
    case X86::PEXTRWmr: 
    case X86::PSHUFDmi: 
    case X86::PSHUFHWmi: 
    case X86::PSHUFLWmi: 
    case X86::ROUNDPDm: 
    case X86::ROUNDPSm: 
    case X86::SHLD16mri8: 
    case X86::SHLD32mri8: 
    case X86::SHLD64mri8: 
    case X86::SHRD16mri8: 
    case X86::SHRD32mri8: 
    case X86::SHRD64mri8: 
    case X86::VAESKEYGENASSIST128rm: 
    case X86::VEXTRACTPSmr: 
    case X86::VPCMPESTRIArm: 
    case X86::VPCMPESTRICrm: 
    case X86::VPCMPESTRIOrm: 
    case X86::VPCMPESTRISrm: 
    case X86::VPCMPESTRIZrm: 
    case X86::VPCMPESTRIrm: 
    case X86::VPCMPESTRM128rm: 
    case X86::VPCMPISTRIArm: 
    case X86::VPCMPISTRICrm: 
    case X86::VPCMPISTRIOrm: 
    case X86::VPCMPISTRISrm: 
    case X86::VPCMPISTRIZrm: 
    case X86::VPCMPISTRIrm: 
    case X86::VPCMPISTRM128rm: 
    case X86::VPERMILPDYmi: 
    case X86::VPERMILPDmi: 
    case X86::VPERMILPSYmi: 
    case X86::VPERMILPSmi: 
    case X86::VPEXTRBmr: 
    case X86::VPEXTRDmr: 
    case X86::VPEXTRQmr: 
    case X86::VPEXTRWmr: 
    case X86::VPSHUFDmi: 
    case X86::VPSHUFHWmi: 
    case X86::VPSHUFLWmi: 
    case X86::VROUNDPDm: 
    case X86::VROUNDPDm_AVX: 
    case X86::VROUNDPSm: 
    case X86::VROUNDPSm_AVX: 
    case X86::VROUNDYPDm: 
    case X86::VROUNDYPDm_AVX: 
    case X86::VROUNDYPSm: 
    case X86::VROUNDYPSm_AVX: printOperand(MI, 6, O); break;
    case X86::AESKEYGENASSIST128rr: 
    case X86::EXTRACTPSrr: 
    case X86::IMUL16rri: 
    case X86::IMUL16rri8: 
    case X86::IMUL32rri: 
    case X86::IMUL32rri8: 
    case X86::IMUL64rri32: 
    case X86::IMUL64rri8: 
    case X86::Int_VCMPSDrr: 
    case X86::Int_VCMPSSrr: 
    case X86::Int_VCVTSD2SSrr: 
    case X86::Int_VCVTSI2SD64rr: 
    case X86::Int_VCVTSI2SDrr: 
    case X86::Int_VCVTSI2SS64rr: 
    case X86::Int_VCVTSI2SSrr: 
    case X86::Int_VCVTSS2SDrr: 
    case X86::MMX_PEXTRWirri: 
    case X86::MMX_PSHUFWri: 
    case X86::PCMPESTRIArr: 
    case X86::PCMPESTRICrr: 
    case X86::PCMPESTRIOrr: 
    case X86::PCMPESTRISrr: 
    case X86::PCMPESTRIZrr: 
    case X86::PCMPESTRIrr: 
    case X86::PCMPESTRM128rr: 
    case X86::PCMPISTRIArr: 
    case X86::PCMPISTRICrr: 
    case X86::PCMPISTRIOrr: 
    case X86::PCMPISTRISrr: 
    case X86::PCMPISTRIZrr: 
    case X86::PCMPISTRIrr: 
    case X86::PCMPISTRM128rr: 
    case X86::PEXTRBrr: 
    case X86::PEXTRDrr: 
    case X86::PEXTRQrr: 
    case X86::PEXTRWri: 
    case X86::PSHUFDri: 
    case X86::PSHUFHWri: 
    case X86::PSHUFLWri: 
    case X86::ROUNDPDr: 
    case X86::ROUNDPSr: 
    case X86::VADDPDYrr: 
    case X86::VADDPDrr: 
    case X86::VADDPSYrr: 
    case X86::VADDPSrr: 
    case X86::VADDSDrr: 
    case X86::VADDSDrr_Int: 
    case X86::VADDSSrr: 
    case X86::VADDSSrr_Int: 
    case X86::VADDSUBPDYrr: 
    case X86::VADDSUBPDrr: 
    case X86::VADDSUBPSYrr: 
    case X86::VADDSUBPSrr: 
    case X86::VAESDECLASTrr: 
    case X86::VAESDECrr: 
    case X86::VAESENCLASTrr: 
    case X86::VAESENCrr: 
    case X86::VAESKEYGENASSIST128rr: 
    case X86::VANDNPDYrr: 
    case X86::VANDNPDrr: 
    case X86::VANDNPSYrr: 
    case X86::VANDNPSrr: 
    case X86::VANDPDYrr: 
    case X86::VANDPDrr: 
    case X86::VANDPSYrr: 
    case X86::VANDPSrr: 
    case X86::VASTART_SAVE_XMM_REGS: 
    case X86::VCMPPDYrri: 
    case X86::VCMPPDrri: 
    case X86::VCMPPSYrri: 
    case X86::VCMPPSrri: 
    case X86::VCMPSDrr: 
    case X86::VCMPSSrr: 
    case X86::VCVTSD2SSrr: 
    case X86::VCVTSI2SD64rr: 
    case X86::VCVTSI2SDLrr: 
    case X86::VCVTSI2SDrr: 
    case X86::VCVTSI2SS64rr: 
    case X86::VCVTSI2SSrr: 
    case X86::VCVTSS2SDrr: 
    case X86::VDIVPDYrr: 
    case X86::VDIVPDrr: 
    case X86::VDIVPSYrr: 
    case X86::VDIVPSrr: 
    case X86::VDIVSDrr: 
    case X86::VDIVSDrr_Int: 
    case X86::VDIVSSrr: 
    case X86::VDIVSSrr_Int: 
    case X86::VEXTRACTF128rr: 
    case X86::VEXTRACTPSrr: 
    case X86::VEXTRACTPSrr64: 
    case X86::VFMADDPDr132r: 
    case X86::VFMADDPDr132rY: 
    case X86::VFMADDPDr213r: 
    case X86::VFMADDPDr213rY: 
    case X86::VFMADDPDr231r: 
    case X86::VFMADDPDr231rY: 
    case X86::VFMADDPSr132r: 
    case X86::VFMADDPSr132rY: 
    case X86::VFMADDPSr213r: 
    case X86::VFMADDPSr213rY: 
    case X86::VFMADDPSr231r: 
    case X86::VFMADDPSr231rY: 
    case X86::VFMADDSUBPDr132r: 
    case X86::VFMADDSUBPDr132rY: 
    case X86::VFMADDSUBPDr213r: 
    case X86::VFMADDSUBPDr213rY: 
    case X86::VFMADDSUBPDr231r: 
    case X86::VFMADDSUBPDr231rY: 
    case X86::VFMADDSUBPSr132r: 
    case X86::VFMADDSUBPSr132rY: 
    case X86::VFMADDSUBPSr213r: 
    case X86::VFMADDSUBPSr213rY: 
    case X86::VFMADDSUBPSr231r: 
    case X86::VFMADDSUBPSr231rY: 
    case X86::VFMSUBADDPDr132r: 
    case X86::VFMSUBADDPDr132rY: 
    case X86::VFMSUBADDPDr213r: 
    case X86::VFMSUBADDPDr213rY: 
    case X86::VFMSUBADDPDr231r: 
    case X86::VFMSUBADDPDr231rY: 
    case X86::VFMSUBADDPSr132r: 
    case X86::VFMSUBADDPSr132rY: 
    case X86::VFMSUBADDPSr213r: 
    case X86::VFMSUBADDPSr213rY: 
    case X86::VFMSUBADDPSr231r: 
    case X86::VFMSUBADDPSr231rY: 
    case X86::VFMSUBPDr132r: 
    case X86::VFMSUBPDr132rY: 
    case X86::VFMSUBPDr213r: 
    case X86::VFMSUBPDr213rY: 
    case X86::VFMSUBPDr231r: 
    case X86::VFMSUBPDr231rY: 
    case X86::VFMSUBPSr132r: 
    case X86::VFMSUBPSr132rY: 
    case X86::VFMSUBPSr213r: 
    case X86::VFMSUBPSr213rY: 
    case X86::VFMSUBPSr231r: 
    case X86::VFMSUBPSr231rY: 
    case X86::VFNMADDPDr132r: 
    case X86::VFNMADDPDr132rY: 
    case X86::VFNMADDPDr213r: 
    case X86::VFNMADDPDr213rY: 
    case X86::VFNMADDPDr231r: 
    case X86::VFNMADDPDr231rY: 
    case X86::VFNMADDPSr132r: 
    case X86::VFNMADDPSr132rY: 
    case X86::VFNMADDPSr213r: 
    case X86::VFNMADDPSr213rY: 
    case X86::VFNMADDPSr231r: 
    case X86::VFNMADDPSr231rY: 
    case X86::VFNMSUBPDr132r: 
    case X86::VFNMSUBPDr132rY: 
    case X86::VFNMSUBPDr213r: 
    case X86::VFNMSUBPDr213rY: 
    case X86::VFNMSUBPDr231r: 
    case X86::VFNMSUBPDr231rY: 
    case X86::VFNMSUBPSr132r: 
    case X86::VFNMSUBPSr132rY: 
    case X86::VFNMSUBPSr213r: 
    case X86::VFNMSUBPSr213rY: 
    case X86::VFNMSUBPSr231r: 
    case X86::VFNMSUBPSr231rY: 
    case X86::VFsANDNPDrr: 
    case X86::VFsANDNPSrr: 
    case X86::VFsANDPDrr: 
    case X86::VFsANDPSrr: 
    case X86::VFsORPDrr: 
    case X86::VFsORPSrr: 
    case X86::VFsXORPDrr: 
    case X86::VFsXORPSrr: 
    case X86::VHADDPDYrr: 
    case X86::VHADDPDrr: 
    case X86::VHADDPSYrr: 
    case X86::VHADDPSrr: 
    case X86::VHSUBPDYrr: 
    case X86::VHSUBPDrr: 
    case X86::VHSUBPSYrr: 
    case X86::VHSUBPSrr: 
    case X86::VMAXPDYrr: 
    case X86::VMAXPDYrr_Int: 
    case X86::VMAXPDrr: 
    case X86::VMAXPDrr_Int: 
    case X86::VMAXPSYrr: 
    case X86::VMAXPSYrr_Int: 
    case X86::VMAXPSrr: 
    case X86::VMAXPSrr_Int: 
    case X86::VMAXSDrr: 
    case X86::VMAXSDrr_Int: 
    case X86::VMAXSSrr: 
    case X86::VMAXSSrr_Int: 
    case X86::VMINPDYrr: 
    case X86::VMINPDYrr_Int: 
    case X86::VMINPDrr: 
    case X86::VMINPDrr_Int: 
    case X86::VMINPSYrr: 
    case X86::VMINPSYrr_Int: 
    case X86::VMINPSrr: 
    case X86::VMINPSrr_Int: 
    case X86::VMINSDrr: 
    case X86::VMINSDrr_Int: 
    case X86::VMINSSrr: 
    case X86::VMINSSrr_Int: 
    case X86::VMOVHLPSrr: 
    case X86::VMOVLHPSrr: 
    case X86::VMOVSDrr: 
    case X86::VMOVSSrr: 
    case X86::VMULPDYrr: 
    case X86::VMULPDrr: 
    case X86::VMULPSYrr: 
    case X86::VMULPSrr: 
    case X86::VMULSDrr: 
    case X86::VMULSDrr_Int: 
    case X86::VMULSSrr: 
    case X86::VMULSSrr_Int: 
    case X86::VORPDYrr: 
    case X86::VORPDrr: 
    case X86::VORPSYrr: 
    case X86::VORPSrr: 
    case X86::VPACKSSDWrr: 
    case X86::VPACKSSWBrr: 
    case X86::VPACKUSDWrr: 
    case X86::VPACKUSWBrr: 
    case X86::VPADDBrr: 
    case X86::VPADDDrr: 
    case X86::VPADDQrr: 
    case X86::VPADDSBrr: 
    case X86::VPADDSWrr: 
    case X86::VPADDUSBrr: 
    case X86::VPADDUSWrr: 
    case X86::VPADDWrr: 
    case X86::VPANDNrr: 
    case X86::VPANDrr: 
    case X86::VPAVGBrr: 
    case X86::VPAVGWrr: 
    case X86::VPCLMULHQHQDQrr: 
    case X86::VPCLMULHQLQDQrr: 
    case X86::VPCLMULLQHQDQrr: 
    case X86::VPCLMULLQLQDQrr: 
    case X86::VPCMPEQBrr: 
    case X86::VPCMPEQDrr: 
    case X86::VPCMPEQQrr: 
    case X86::VPCMPEQWrr: 
    case X86::VPCMPESTRIArr: 
    case X86::VPCMPESTRICrr: 
    case X86::VPCMPESTRIOrr: 
    case X86::VPCMPESTRISrr: 
    case X86::VPCMPESTRIZrr: 
    case X86::VPCMPESTRIrr: 
    case X86::VPCMPESTRM128rr: 
    case X86::VPCMPGTBrr: 
    case X86::VPCMPGTDrr: 
    case X86::VPCMPGTQrr: 
    case X86::VPCMPGTWrr: 
    case X86::VPCMPISTRIArr: 
    case X86::VPCMPISTRICrr: 
    case X86::VPCMPISTRIOrr: 
    case X86::VPCMPISTRISrr: 
    case X86::VPCMPISTRIZrr: 
    case X86::VPCMPISTRIrr: 
    case X86::VPCMPISTRM128rr: 
    case X86::VPERMILPDYri: 
    case X86::VPERMILPDYrr: 
    case X86::VPERMILPDri: 
    case X86::VPERMILPDrr: 
    case X86::VPERMILPSYri: 
    case X86::VPERMILPSYrr: 
    case X86::VPERMILPSri: 
    case X86::VPERMILPSrr: 
    case X86::VPEXTRBrr: 
    case X86::VPEXTRBrr64: 
    case X86::VPEXTRDrr: 
    case X86::VPEXTRQrr: 
    case X86::VPEXTRWri: 
    case X86::VPHADDDrr128: 
    case X86::VPHADDSWrr128: 
    case X86::VPHADDWrr128: 
    case X86::VPHSUBDrr128: 
    case X86::VPHSUBSWrr128: 
    case X86::VPHSUBWrr128: 
    case X86::VPMADDUBSWrr128: 
    case X86::VPMADDWDrr: 
    case X86::VPMAXSBrr: 
    case X86::VPMAXSDrr: 
    case X86::VPMAXSWrr: 
    case X86::VPMAXUBrr: 
    case X86::VPMAXUDrr: 
    case X86::VPMAXUWrr: 
    case X86::VPMINSBrr: 
    case X86::VPMINSDrr: 
    case X86::VPMINSWrr: 
    case X86::VPMINUBrr: 
    case X86::VPMINUDrr: 
    case X86::VPMINUWrr: 
    case X86::VPMULDQrr: 
    case X86::VPMULHRSWrr128: 
    case X86::VPMULHUWrr: 
    case X86::VPMULHWrr: 
    case X86::VPMULLDrr: 
    case X86::VPMULLWrr: 
    case X86::VPMULUDQrr: 
    case X86::VPORrr: 
    case X86::VPSADBWrr: 
    case X86::VPSHUFBrr128: 
    case X86::VPSHUFDri: 
    case X86::VPSHUFHWri: 
    case X86::VPSHUFLWri: 
    case X86::VPSIGNBrr128: 
    case X86::VPSIGNDrr128: 
    case X86::VPSIGNWrr128: 
    case X86::VPSLLDQri: 
    case X86::VPSLLDri: 
    case X86::VPSLLDrr: 
    case X86::VPSLLQri: 
    case X86::VPSLLQrr: 
    case X86::VPSLLWri: 
    case X86::VPSLLWrr: 
    case X86::VPSRADri: 
    case X86::VPSRADrr: 
    case X86::VPSRAWri: 
    case X86::VPSRAWrr: 
    case X86::VPSRLDQri: 
    case X86::VPSRLDri: 
    case X86::VPSRLDrr: 
    case X86::VPSRLQri: 
    case X86::VPSRLQrr: 
    case X86::VPSRLWri: 
    case X86::VPSRLWrr: 
    case X86::VPSUBBrr: 
    case X86::VPSUBDrr: 
    case X86::VPSUBQrr: 
    case X86::VPSUBSBrr: 
    case X86::VPSUBSWrr: 
    case X86::VPSUBUSBrr: 
    case X86::VPSUBUSWrr: 
    case X86::VPSUBWrr: 
    case X86::VPUNPCKHBWrr: 
    case X86::VPUNPCKHDQrr: 
    case X86::VPUNPCKHQDQrr: 
    case X86::VPUNPCKHWDrr: 
    case X86::VPUNPCKLBWrr: 
    case X86::VPUNPCKLDQrr: 
    case X86::VPUNPCKLQDQrr: 
    case X86::VPUNPCKLWDrr: 
    case X86::VPXORrr: 
    case X86::VRCPSSr: 
    case X86::VROUNDPDr: 
    case X86::VROUNDPDr_AVX: 
    case X86::VROUNDPSr: 
    case X86::VROUNDPSr_AVX: 
    case X86::VROUNDYPDr: 
    case X86::VROUNDYPDr_AVX: 
    case X86::VROUNDYPSr: 
    case X86::VROUNDYPSr_AVX: 
    case X86::VRSQRTSSr: 
    case X86::VSQRTSDr: 
    case X86::VSQRTSSr: 
    case X86::VSUBPDYrr: 
    case X86::VSUBPDrr: 
    case X86::VSUBPSYrr: 
    case X86::VSUBPSrr: 
    case X86::VSUBSDrr: 
    case X86::VSUBSDrr_Int: 
    case X86::VSUBSSrr: 
    case X86::VSUBSSrr_Int: 
    case X86::VUNPCKHPDYrr: 
    case X86::VUNPCKHPDrr: 
    case X86::VUNPCKHPSYrr: 
    case X86::VUNPCKHPSrr: 
    case X86::VUNPCKLPDYrr: 
    case X86::VUNPCKLPDrr: 
    case X86::VUNPCKLPSYrr: 
    case X86::VUNPCKLPSrr: 
    case X86::VXORPDYrr: 
    case X86::VXORPDrr: 
    case X86::VXORPSYrr: 
    case X86::VXORPSrr: printOperand(MI, 2, O); break;
    case X86::BLENDPDrmi: 
    case X86::BLENDPSrmi: 
    case X86::CMPPDrmi_alt: 
    case X86::CMPPSrmi_alt: 
    case X86::CMPSDrm_alt: 
    case X86::CMPSSrm_alt: 
    case X86::DPPDrmi: 
    case X86::DPPSrmi: 
    case X86::INSERTPSrm: 
    case X86::MMX_PALIGNR64irm: 
    case X86::MMX_PINSRWirmi: 
    case X86::MPSADBWrmi: 
    case X86::PALIGNR128rm: 
    case X86::PBLENDWrmi: 
    case X86::PINSRDrm: 
    case X86::PINSRQrm: 
    case X86::PINSRWrmi: 
    case X86::ROUNDSDm: 
    case X86::ROUNDSSm: 
    case X86::SHUFPDrmi: 
    case X86::SHUFPSrmi: printOperand(MI, 7, O); break;
    case X86::BLENDPDrri: 
    case X86::BLENDPSrri: 
    case X86::CMPPDrri_alt: 
    case X86::CMPPSrri_alt: 
    case X86::CMPSDrr_alt: 
    case X86::CMPSSrr_alt: 
    case X86::DPPDrri: 
    case X86::DPPSrri: 
    case X86::INSERTPSrr: 
    case X86::MMX_PALIGNR64irr: 
    case X86::MMX_PINSRWirri: 
    case X86::MPSADBWrri: 
    case X86::PALIGNR128rr: 
    case X86::PBLENDWrri: 
    case X86::PINSRBrr: 
    case X86::PINSRDrr: 
    case X86::PINSRQrr: 
    case X86::PINSRWrri: 
    case X86::ROUNDSDr: 
    case X86::ROUNDSSr: 
    case X86::SHLD16rri8: 
    case X86::SHLD32rri8: 
    case X86::SHLD64rri8: 
    case X86::SHRD16rri8: 
    case X86::SHRD32rri8: 
    case X86::SHRD64rri8: 
    case X86::SHUFPDrri: 
    case X86::SHUFPSrri: printOperand(MI, 3, O); break;
    case X86::Int_VCMPSDrm: 
    case X86::Int_VCMPSSrm: 
    case X86::Int_VCVTSS2SDrm: 
    case X86::VADDSSrm: 
    case X86::VADDSSrm_Int: 
    case X86::VCMPSSrm: 
    case X86::VCVTSS2SDrm: 
    case X86::VDIVSSrm: 
    case X86::VDIVSSrm_Int: 
    case X86::VMAXSSrm: 
    case X86::VMAXSSrm_Int: 
    case X86::VMINSSrm: 
    case X86::VMINSSrm_Int: 
    case X86::VMULSSrm: 
    case X86::VMULSSrm_Int: 
    case X86::VRCPSSm: 
    case X86::VRSQRTSSm: 
    case X86::VSQRTSSm: 
    case X86::VSUBSSrm: 
    case X86::VSUBSSrm_Int: printf32mem(MI, 2, O); break;
    case X86::Int_VCVTSD2SSrm: 
    case X86::VADDSDrm: 
    case X86::VADDSDrm_Int: 
    case X86::VCMPSDrm: 
    case X86::VCVTSD2SSrm: 
    case X86::VDIVSDrm: 
    case X86::VDIVSDrm_Int: 
    case X86::VMAXSDrm: 
    case X86::VMAXSDrm_Int: 
    case X86::VMINSDrm: 
    case X86::VMINSDrm_Int: 
    case X86::VMOVHPDrm: 
    case X86::VMOVHPSrm: 
    case X86::VMOVLPDrm: 
    case X86::VMOVLPSrm: 
    case X86::VMULSDrm: 
    case X86::VMULSDrm_Int: 
    case X86::VSQRTSDm: 
    case X86::VSUBSDrm: 
    case X86::VSUBSDrm_Int: printf64mem(MI, 2, O); break;
    case X86::Int_VCVTSI2SD64rm: 
    case X86::Int_VCVTSI2SS64rm: 
    case X86::VCVTSI2SD64rm: 
    case X86::VCVTSI2SS64rm: printi64mem(MI, 2, O); break;
    case X86::Int_VCVTSI2SDrm: 
    case X86::Int_VCVTSI2SSrm: 
    case X86::VCVTSI2SDLrm: 
    case X86::VCVTSI2SDrm: 
    case X86::VCVTSI2SSrm: printi32mem(MI, 2, O); break;
    case X86::VADDPDYrm: 
    case X86::VADDPSYrm: 
    case X86::VADDSUBPDYrm: 
    case X86::VADDSUBPSYrm: 
    case X86::VANDNPDYrm: 
    case X86::VANDNPSYrm: 
    case X86::VANDPDYrm: 
    case X86::VANDPSYrm: 
    case X86::VDIVPDYrm: 
    case X86::VDIVPSYrm: 
    case X86::VFMADDPDr132mY: 
    case X86::VFMADDPDr213mY: 
    case X86::VFMADDPDr231mY: 
    case X86::VFMADDPSr132mY: 
    case X86::VFMADDPSr213mY: 
    case X86::VFMADDPSr231mY: 
    case X86::VFMADDSUBPDr132mY: 
    case X86::VFMADDSUBPDr213mY: 
    case X86::VFMADDSUBPDr231mY: 
    case X86::VFMADDSUBPSr132mY: 
    case X86::VFMADDSUBPSr213mY: 
    case X86::VFMADDSUBPSr231mY: 
    case X86::VFMSUBADDPDr132mY: 
    case X86::VFMSUBADDPDr213mY: 
    case X86::VFMSUBADDPDr231mY: 
    case X86::VFMSUBADDPSr132mY: 
    case X86::VFMSUBADDPSr213mY: 
    case X86::VFMSUBADDPSr231mY: 
    case X86::VFMSUBPDr132mY: 
    case X86::VFMSUBPDr213mY: 
    case X86::VFMSUBPDr231mY: 
    case X86::VFMSUBPSr132mY: 
    case X86::VFMSUBPSr213mY: 
    case X86::VFMSUBPSr231mY: 
    case X86::VFNMADDPDr132mY: 
    case X86::VFNMADDPDr213mY: 
    case X86::VFNMADDPDr231mY: 
    case X86::VFNMADDPSr132mY: 
    case X86::VFNMADDPSr213mY: 
    case X86::VFNMADDPSr231mY: 
    case X86::VFNMSUBPDr132mY: 
    case X86::VFNMSUBPDr213mY: 
    case X86::VFNMSUBPDr231mY: 
    case X86::VFNMSUBPSr132mY: 
    case X86::VFNMSUBPSr213mY: 
    case X86::VFNMSUBPSr231mY: 
    case X86::VHADDPDYrm: 
    case X86::VHADDPSYrm: 
    case X86::VHSUBPDYrm: 
    case X86::VHSUBPSYrm: 
    case X86::VMASKMOVPDYrm: 
    case X86::VMASKMOVPSYrm: 
    case X86::VMAXPDYrm: 
    case X86::VMAXPDYrm_Int: 
    case X86::VMAXPSYrm: 
    case X86::VMAXPSYrm_Int: 
    case X86::VMINPDYrm: 
    case X86::VMINPDYrm_Int: 
    case X86::VMINPSYrm: 
    case X86::VMINPSYrm_Int: 
    case X86::VMULPDYrm: 
    case X86::VMULPSYrm: 
    case X86::VORPDYrm: 
    case X86::VORPSYrm: 
    case X86::VSUBPDYrm: 
    case X86::VSUBPSYrm: 
    case X86::VUNPCKHPDYrm: 
    case X86::VUNPCKHPSYrm: 
    case X86::VUNPCKLPDYrm: 
    case X86::VUNPCKLPSYrm: 
    case X86::VXORPDYrm: 
    case X86::VXORPSYrm: printf256mem(MI, 2, O); break;
    case X86::VADDPDrm: 
    case X86::VADDPSrm: 
    case X86::VADDSUBPDrm: 
    case X86::VADDSUBPSrm: 
    case X86::VANDNPDrm: 
    case X86::VANDNPSrm: 
    case X86::VANDPDrm: 
    case X86::VANDPSrm: 
    case X86::VCMPPDYrmi: 
    case X86::VCMPPDrmi: 
    case X86::VCMPPSYrmi: 
    case X86::VCMPPSrmi: 
    case X86::VDIVPDrm: 
    case X86::VDIVPSrm: 
    case X86::VFMADDPDr132m: 
    case X86::VFMADDPDr213m: 
    case X86::VFMADDPDr231m: 
    case X86::VFMADDPSr132m: 
    case X86::VFMADDPSr213m: 
    case X86::VFMADDPSr231m: 
    case X86::VFMADDSUBPDr132m: 
    case X86::VFMADDSUBPDr213m: 
    case X86::VFMADDSUBPDr231m: 
    case X86::VFMADDSUBPSr132m: 
    case X86::VFMADDSUBPSr213m: 
    case X86::VFMADDSUBPSr231m: 
    case X86::VFMSUBADDPDr132m: 
    case X86::VFMSUBADDPDr213m: 
    case X86::VFMSUBADDPDr231m: 
    case X86::VFMSUBADDPSr132m: 
    case X86::VFMSUBADDPSr213m: 
    case X86::VFMSUBADDPSr231m: 
    case X86::VFMSUBPDr132m: 
    case X86::VFMSUBPDr213m: 
    case X86::VFMSUBPDr231m: 
    case X86::VFMSUBPSr132m: 
    case X86::VFMSUBPSr213m: 
    case X86::VFMSUBPSr231m: 
    case X86::VFNMADDPDr132m: 
    case X86::VFNMADDPDr213m: 
    case X86::VFNMADDPDr231m: 
    case X86::VFNMADDPSr132m: 
    case X86::VFNMADDPSr213m: 
    case X86::VFNMADDPSr231m: 
    case X86::VFNMSUBPDr132m: 
    case X86::VFNMSUBPDr213m: 
    case X86::VFNMSUBPDr231m: 
    case X86::VFNMSUBPSr132m: 
    case X86::VFNMSUBPSr213m: 
    case X86::VFNMSUBPSr231m: 
    case X86::VFsANDNPDrm: 
    case X86::VFsANDNPSrm: 
    case X86::VFsANDPDrm: 
    case X86::VFsANDPSrm: 
    case X86::VFsORPDrm: 
    case X86::VFsORPSrm: 
    case X86::VFsXORPDrm: 
    case X86::VFsXORPSrm: 
    case X86::VHADDPDrm: 
    case X86::VHADDPSrm: 
    case X86::VHSUBPDrm: 
    case X86::VHSUBPSrm: 
    case X86::VMASKMOVPDrm: 
    case X86::VMASKMOVPSrm: 
    case X86::VMAXPDrm: 
    case X86::VMAXPDrm_Int: 
    case X86::VMAXPSrm: 
    case X86::VMAXPSrm_Int: 
    case X86::VMINPDrm: 
    case X86::VMINPDrm_Int: 
    case X86::VMINPSrm: 
    case X86::VMINPSrm_Int: 
    case X86::VMULPDrm: 
    case X86::VMULPSrm: 
    case X86::VORPDrm: 
    case X86::VORPSrm: 
    case X86::VSUBPDrm: 
    case X86::VSUBPSrm: 
    case X86::VUNPCKHPDrm: 
    case X86::VUNPCKHPSrm: 
    case X86::VUNPCKLPDrm: 
    case X86::VUNPCKLPSrm: 
    case X86::VXORPDrm: 
    case X86::VXORPSrm: printf128mem(MI, 2, O); break;
    case X86::VAESDECLASTrm: 
    case X86::VAESDECrm: 
    case X86::VAESENCLASTrm: 
    case X86::VAESENCrm: 
    case X86::VPACKSSDWrm: 
    case X86::VPACKSSWBrm: 
    case X86::VPACKUSDWrm: 
    case X86::VPACKUSWBrm: 
    case X86::VPADDBrm: 
    case X86::VPADDDrm: 
    case X86::VPADDQrm: 
    case X86::VPADDSBrm: 
    case X86::VPADDSWrm: 
    case X86::VPADDUSBrm: 
    case X86::VPADDUSWrm: 
    case X86::VPADDWrm: 
    case X86::VPANDNrm: 
    case X86::VPANDrm: 
    case X86::VPAVGBrm: 
    case X86::VPAVGWrm: 
    case X86::VPCLMULHQHQDQrm: 
    case X86::VPCLMULHQLQDQrm: 
    case X86::VPCLMULLQHQDQrm: 
    case X86::VPCLMULLQLQDQrm: 
    case X86::VPCMPEQBrm: 
    case X86::VPCMPEQDrm: 
    case X86::VPCMPEQQrm: 
    case X86::VPCMPEQWrm: 
    case X86::VPCMPGTBrm: 
    case X86::VPCMPGTDrm: 
    case X86::VPCMPGTQrm: 
    case X86::VPCMPGTWrm: 
    case X86::VPERMILPDrm: 
    case X86::VPERMILPSrm: 
    case X86::VPHADDDrm128: 
    case X86::VPHADDSWrm128: 
    case X86::VPHADDWrm128: 
    case X86::VPHSUBDrm128: 
    case X86::VPHSUBSWrm128: 
    case X86::VPHSUBWrm128: 
    case X86::VPMADDUBSWrm128: 
    case X86::VPMADDWDrm: 
    case X86::VPMAXSBrm: 
    case X86::VPMAXSDrm: 
    case X86::VPMAXSWrm: 
    case X86::VPMAXUBrm: 
    case X86::VPMAXUDrm: 
    case X86::VPMAXUWrm: 
    case X86::VPMINSBrm: 
    case X86::VPMINSDrm: 
    case X86::VPMINSWrm: 
    case X86::VPMINUBrm: 
    case X86::VPMINUDrm: 
    case X86::VPMINUWrm: 
    case X86::VPMULDQrm: 
    case X86::VPMULHRSWrm128: 
    case X86::VPMULHUWrm: 
    case X86::VPMULHWrm: 
    case X86::VPMULLDrm: 
    case X86::VPMULLWrm: 
    case X86::VPMULUDQrm: 
    case X86::VPORrm: 
    case X86::VPSADBWrm: 
    case X86::VPSHUFBrm128: 
    case X86::VPSIGNBrm128: 
    case X86::VPSIGNDrm128: 
    case X86::VPSIGNWrm128: 
    case X86::VPSLLDrm: 
    case X86::VPSLLQrm: 
    case X86::VPSLLWrm: 
    case X86::VPSRADrm: 
    case X86::VPSRAWrm: 
    case X86::VPSRLDrm: 
    case X86::VPSRLQrm: 
    case X86::VPSRLWrm: 
    case X86::VPSUBBrm: 
    case X86::VPSUBDrm: 
    case X86::VPSUBQrm: 
    case X86::VPSUBSBrm: 
    case X86::VPSUBSWrm: 
    case X86::VPSUBUSBrm: 
    case X86::VPSUBUSWrm: 
    case X86::VPSUBWrm: 
    case X86::VPUNPCKHBWrm: 
    case X86::VPUNPCKHDQrm: 
    case X86::VPUNPCKHQDQrm: 
    case X86::VPUNPCKHWDrm: 
    case X86::VPUNPCKLBWrm: 
    case X86::VPUNPCKLDQrm: 
    case X86::VPUNPCKLQDQrm: 
    case X86::VPUNPCKLWDrm: 
    case X86::VPXORrm: printi128mem(MI, 2, O); break;
    case X86::VPERMILPDYrm: 
    case X86::VPERMILPSYrm: printi256mem(MI, 2, O); break;
    }
    return;
    break;
  case X86::BLENDVPDrm0:
  case X86::BLENDVPDrr0:
  case X86::BLENDVPSrm0:
  case X86::BLENDVPSrr0:
  case X86::MOV8mr_NOREX:
  case X86::MOV8rm_NOREX:
  case X86::MOV8rr_NOREX:
  case X86::PBLENDVBrm0:
  case X86::PBLENDVBrr0:
  case X86::SHLD16mrCL:
  case X86::SHLD16rrCL:
  case X86::SHLD32mrCL:
  case X86::SHLD32rrCL:
  case X86::SHLD64mrCL:
  case X86::SHLD64rrCL:
  case X86::SHRD16mrCL:
  case X86::SHRD16rrCL:
  case X86::SHRD32mrCL:
  case X86::SHRD32rrCL:
  case X86::SHRD64mrCL:
  case X86::SHRD64rrCL:
  case X86::VRCPSSm_Int:
  case X86::VRCPSSr_Int:
  case X86::VRSQRTSSm_Int:
  case X86::VRSQRTSSr_Int:
  case X86::VSQRTSDm_Int:
  case X86::VSQRTSDr_Int:
  case X86::VSQRTSSm_Int:
  case X86::VSQRTSSr_Int:
    switch (MI->getOpcode()) {
    case X86::BLENDVPDrm0: 
    case X86::BLENDVPDrr0: 
    case X86::BLENDVPSrm0: 
    case X86::BLENDVPSrr0: 
    case X86::PBLENDVBrm0: 
    case X86::PBLENDVBrr0: O << ", %xmm0"; break;
    case X86::MOV8mr_NOREX: 
    case X86::MOV8rm_NOREX: 
    case X86::MOV8rr_NOREX: O << "  # NOREX"; break;
    case X86::SHLD16mrCL: 
    case X86::SHLD16rrCL: 
    case X86::SHLD32mrCL: 
    case X86::SHLD32rrCL: 
    case X86::SHRD16mrCL: 
    case X86::SHRD16rrCL: 
    case X86::SHRD32mrCL: 
    case X86::SHRD32rrCL: O << ", CL"; break;
    case X86::SHLD64mrCL: 
    case X86::SHLD64rrCL: 
    case X86::SHRD64mrCL: 
    case X86::SHRD64rrCL: O << ", %CL"; break;
    case X86::VRCPSSm_Int: 
    case X86::VRSQRTSSm_Int: 
    case X86::VSQRTSSm_Int: printf32mem(MI, 1, O); break;
    case X86::VRCPSSr_Int: 
    case X86::VRSQRTSSr_Int: 
    case X86::VSQRTSDr_Int: 
    case X86::VSQRTSSr_Int: printOperand(MI, 1, O); break;
    case X86::VSQRTSDm_Int: printf64mem(MI, 1, O); break;
    }
    return;
    break;
  case X86::VAARG_64:
    O << ", "; 
    printOperand(MI, 6, O); 
    O << ", "; 
    printOperand(MI, 7, O); 
    O << ", "; 
    printOperand(MI, 8, O); 
    return;
    break;
  case X86::VBLENDPDYrmi:
  case X86::VBLENDPDrmi:
  case X86::VBLENDPSYrmi:
  case X86::VBLENDPSrmi:
  case X86::VBLENDVPDYrm:
  case X86::VBLENDVPDrm:
  case X86::VBLENDVPSYrm:
  case X86::VBLENDVPSrm:
  case X86::VCMPPDYrmi_alt:
  case X86::VCMPPDrmi_alt:
  case X86::VCMPPSYrmi_alt:
  case X86::VCMPPSrmi_alt:
  case X86::VCMPSDrm_alt:
  case X86::VCMPSSrm_alt:
  case X86::VDPPDrmi:
  case X86::VDPPSYrmi:
  case X86::VDPPSrmi:
  case X86::VINSERTF128rm:
  case X86::VINSERTPSrm:
  case X86::VMPSADBWrmi:
  case X86::VPALIGNR128rm:
  case X86::VPBLENDVBrm:
  case X86::VPBLENDWrmi:
  case X86::VPCLMULQDQrm:
  case X86::VPERM2F128rm:
  case X86::VPINSRBrm:
  case X86::VPINSRDrm:
  case X86::VPINSRQrm:
  case X86::VPINSRWrmi:
  case X86::VROUNDSDm:
  case X86::VROUNDSDm_AVX:
  case X86::VROUNDSSm:
  case X86::VROUNDSSm_AVX:
  case X86::VSHUFPDYrmi:
  case X86::VSHUFPDrmi:
  case X86::VSHUFPSYrmi:
  case X86::VSHUFPSrmi:
    O << ", "; 
    switch (MI->getOpcode()) {
    case X86::VBLENDPDYrmi: 
    case X86::VBLENDPSYrmi: 
    case X86::VBLENDVPDYrm: 
    case X86::VBLENDVPSYrm: 
    case X86::VDPPSYrmi: printi256mem(MI, 2, O); break;
    case X86::VBLENDPDrmi: 
    case X86::VBLENDPSrmi: 
    case X86::VBLENDVPDrm: 
    case X86::VBLENDVPSrm: 
    case X86::VDPPDrmi: 
    case X86::VDPPSrmi: 
    case X86::VMPSADBWrmi: 
    case X86::VPALIGNR128rm: 
    case X86::VPBLENDVBrm: 
    case X86::VPBLENDWrmi: 
    case X86::VPCLMULQDQrm: printi128mem(MI, 2, O); break;
    case X86::VCMPPDYrmi_alt: 
    case X86::VCMPPDrmi_alt: 
    case X86::VCMPPSYrmi_alt: 
    case X86::VCMPPSrmi_alt: 
    case X86::VINSERTF128rm: 
    case X86::VSHUFPDYrmi: 
    case X86::VSHUFPDrmi: 
    case X86::VSHUFPSYrmi: 
    case X86::VSHUFPSrmi: printf128mem(MI, 2, O); break;
    case X86::VCMPSDrm_alt: 
    case X86::VROUNDSDm: 
    case X86::VROUNDSDm_AVX: printf64mem(MI, 2, O); break;
    case X86::VCMPSSrm_alt: 
    case X86::VINSERTPSrm: 
    case X86::VROUNDSSm: 
    case X86::VROUNDSSm_AVX: printf32mem(MI, 2, O); break;
    case X86::VPERM2F128rm: printf256mem(MI, 2, O); break;
    case X86::VPINSRBrm: printi8mem(MI, 2, O); break;
    case X86::VPINSRDrm: printi32mem(MI, 2, O); break;
    case X86::VPINSRQrm: printi64mem(MI, 2, O); break;
    case X86::VPINSRWrmi: printi16mem(MI, 2, O); break;
    }
    O << ", "; 
    printOperand(MI, 7, O); 
    return;
    break;
  case X86::VBLENDPDYrri:
  case X86::VBLENDPDrri:
  case X86::VBLENDPSYrri:
  case X86::VBLENDPSrri:
  case X86::VBLENDVPDYrr:
  case X86::VBLENDVPDrr:
  case X86::VBLENDVPSYrr:
  case X86::VBLENDVPSrr:
  case X86::VCMPPDYrri_alt:
  case X86::VCMPPDrri_alt:
  case X86::VCMPPSYrri_alt:
  case X86::VCMPPSrri_alt:
  case X86::VCMPSDrr_alt:
  case X86::VCMPSSrr_alt:
  case X86::VDPPDrri:
  case X86::VDPPSYrri:
  case X86::VDPPSrri:
  case X86::VINSERTF128rr:
  case X86::VINSERTPSrr:
  case X86::VMPSADBWrri:
  case X86::VPALIGNR128rr:
  case X86::VPBLENDVBrr:
  case X86::VPBLENDWrri:
  case X86::VPCLMULQDQrr:
  case X86::VPERM2F128rr:
  case X86::VPINSRBrr:
  case X86::VPINSRDrr:
  case X86::VPINSRQrr:
  case X86::VPINSRWrr64i:
  case X86::VPINSRWrri:
  case X86::VROUNDSDr:
  case X86::VROUNDSDr_AVX:
  case X86::VROUNDSSr:
  case X86::VROUNDSSr_AVX:
  case X86::VSHUFPDYrri:
  case X86::VSHUFPDrri:
  case X86::VSHUFPSYrri:
  case X86::VSHUFPSrri:
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  }
  return;
}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *X86IntelInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 160 && "Invalid register number!");

  static const unsigned RegAsmOffset[] = {
    0, 3, 6, 9, 12, 15, 18, 22, 25, 28, 31, 35, 39, 43, 
    47, 51, 55, 59, 63, 67, 71, 76, 81, 86, 91, 96, 101, 104, 
    107, 110, 113, 117, 120, 124, 128, 132, 136, 140, 144, 148, 152, 155, 
    158, 162, 166, 170, 174, 178, 182, 188, 192, 196, 199, 203, 207, 211, 
    215, 219, 223, 227, 231, 235, 238, 241, 244, 248, 252, 256, 260, 264, 
    268, 272, 276, 279, 283, 287, 291, 294, 298, 302, 306, 310, 315, 320, 
    325, 329, 334, 339, 344, 348, 353, 358, 363, 367, 372, 377, 382, 386, 
    391, 396, 401, 405, 410, 415, 420, 424, 428, 432, 436, 440, 444, 448, 
    452, 456, 460, 463, 467, 470, 474, 477, 483, 489, 495, 501, 507, 513, 
    519, 525, 530, 535, 540, 545, 550, 555, 560, 565, 570, 575, 581, 587, 
    593, 599, 605, 611, 616, 621, 626, 631, 636, 641, 646, 651, 656, 661, 
    667, 673, 679, 685, 691, 0
  };

  const char *AsmStrs =
    "ah\000al\000ax\000bh\000bl\000bp\000bpl\000bx\000ch\000cl\000cr0\000cr1"
    "\000cr2\000cr3\000cr4\000cr5\000cr6\000cr7\000cr8\000cr9\000cr10\000cr1"
    "1\000cr12\000cr13\000cr14\000cr15\000cs\000cx\000dh\000di\000dil\000dl\000"
    "dr0\000dr1\000dr2\000dr3\000dr4\000dr5\000dr6\000dr7\000ds\000dx\000eax"
    "\000ebp\000ebx\000ecx\000edi\000edx\000flags\000eip\000eiz\000es\000esi"
    "\000esp\000fp0\000fp1\000fp2\000fp3\000fp4\000fp5\000fp6\000fs\000gs\000"
    "ip\000mm0\000mm1\000mm2\000mm3\000mm4\000mm5\000mm6\000mm7\000r8\000r8b"
    "\000r8d\000r8w\000r9\000r9b\000r9d\000r9w\000r10\000r10b\000r10d\000r10"
    "w\000r11\000r11b\000r11d\000r11w\000r12\000r12b\000r12d\000r12w\000r13\000"
    "r13b\000r13d\000r13w\000r14\000r14b\000r14d\000r14w\000r15\000r15b\000r"
    "15d\000r15w\000rax\000rbp\000rbx\000rcx\000rdi\000rdx\000rip\000riz\000"
    "rsi\000rsp\000si\000sil\000sp\000spl\000ss\000st(0)\000st(1)\000st(2)\000"
    "st(3)\000st(4)\000st(5)\000st(6)\000st(7)\000xmm0\000xmm1\000xmm2\000xm"
    "m3\000xmm4\000xmm5\000xmm6\000xmm7\000xmm8\000xmm9\000xmm10\000xmm11\000"
    "xmm12\000xmm13\000xmm14\000xmm15\000ymm0\000ymm1\000ymm2\000ymm3\000ymm"
    "4\000ymm5\000ymm6\000ymm7\000ymm8\000ymm9\000ymm10\000ymm11\000ymm12\000"
    "ymm13\000ymm14\000ymm15\000";
  return AsmStrs+RegAsmOffset[RegNo-1];
}


#ifdef GET_INSTRUCTION_NAME
#undef GET_INSTRUCTION_NAME

/// getInstructionName: This method is automatically generated by tblgen
/// from the instruction set description.  This returns the enum name of the
/// specified instruction.
const char *X86IntelInstPrinter::getInstructionName(unsigned Opcode) {
  assert(Opcode < 3733 && "Invalid instruction number!");

  static const unsigned InstAsmOffset[] = {
    0, 4, 14, 27, 36, 45, 50, 65, 79, 92, 106, 123, 133, 146, 
    151, 155, 162, 169, 173, 179, 188, 197, 206, 215, 223, 232, 240, 248, 
    257, 265, 273, 285, 294, 302, 311, 319, 327, 336, 344, 352, 364, 373, 
    383, 392, 400, 410, 419, 427, 435, 447, 454, 461, 468, 475, 482, 489, 
    500, 509, 517, 526, 534, 542, 551, 563, 574, 582, 590, 601, 613, 622, 
    630, 639, 647, 655, 664, 676, 687, 695, 703, 714, 726, 735, 745, 754, 
    762, 772, 785, 794, 806, 814, 822, 833, 845, 852, 859, 866, 873, 880, 
    887, 898, 906, 914, 922, 930, 938, 950, 958, 970, 978, 990, 998, 1010, 
    1021, 1032, 1043, 1054, 1063, 1072, 1082, 1092, 1103, 1113, 1122, 1132, 1141, 1151, 
    1163, 1172, 1184, 1196, 1209, 1222, 1235, 1248, 1261, 1274, 1284, 1303, 1322, 1339, 
    1356, 1369, 1382, 1391, 1400, 1413, 1426, 1435, 1444, 1453, 1462, 1483, 1504, 1513, 
    1521, 1530, 1538, 1546, 1555, 1563, 1571, 1583, 1592, 1600, 1609, 1617, 1625, 1634, 
    1642, 1650, 1662, 1671, 1681, 1690, 1698, 1708, 1717, 1725, 1733, 1745, 1752, 1759, 
    1766, 1773, 1780, 1787, 1798, 1807, 1816, 1825, 1834, 1842, 1850, 1858, 1866, 1875, 
    1884, 1896, 1906, 1916, 1926, 1938, 1947, 1957, 1967, 1977, 1987, 1997, 2007, 2018, 
    2029, 2040, 2053, 2063, 2072, 2081, 2090, 2101, 2109, 2121, 2134, 2145, 2156, 2167, 
    2178, 2189, 2200, 2210, 2220, 2230, 2242, 2251, 2262, 2274, 2285, 2296, 2308, 2319, 
    2330, 2341, 2352, 2364, 2376, 2388, 2400, 2411, 2422, 2430, 2438, 2446, 2454, 2462, 
    2470, 2478, 2486, 2494, 2502, 2510, 2518, 2527, 2536, 2544, 2551, 2559, 2566, 2574, 
    2581, 2589, 2596, 2604, 2611, 2619, 2626, 2635, 2643, 2652, 2660, 2669, 2677, 2686, 
    2694, 2703, 2711, 2720, 2728, 2737, 2745, 2754, 2762, 2771, 2779, 2788, 2796, 2805, 
    2813, 2822, 2830, 2839, 2847, 2856, 2864, 2873, 2881, 2890, 2898, 2907, 2915, 2924, 
    2932, 2940, 2948, 2956, 2970, 2978, 2990, 3002, 3006, 3010, 3015, 3021, 3030, 3039, 
    3048, 3052, 3056, 3064, 3068, 3073, 3077, 3087, 3097, 3107, 3117, 3127, 3137, 3148, 
    3159, 3170, 3181, 3192, 3203, 3213, 3223, 3233, 3243, 3253, 3263, 3274, 3285, 3296, 
    3307, 3318, 3329, 3338, 3350, 3362, 3374, 3382, 3393, 3404, 3415, 3425, 3435, 3445, 
    3455, 3465, 3475, 3483, 3494, 3505, 3516, 3526, 3536, 3546, 3556, 3566, 3576, 3587, 
    3598, 3609, 3620, 3631, 3642, 3652, 3662, 3672, 3682, 3692, 3702, 3713, 3724, 3735, 
    3746, 3757, 3768, 3778, 3791, 3804, 3817, 3826, 3838, 3850, 3862, 3873, 3884, 3895, 
    3906, 3917, 3928, 3937, 3949, 3961, 3973, 3984, 3995, 4006, 4017, 4028, 4039, 4050, 
    4061, 4072, 4083, 4094, 4105, 4114, 4126, 4138, 4150, 4161, 4172, 4183, 4194, 4205, 
    4216, 4226, 4236, 4246, 4256, 4266, 4276, 4286, 4296, 4306, 4316, 4326, 4336, 4344, 
    4355, 4366, 4377, 4387, 4397, 4407, 4417, 4427, 4437, 4447, 4457, 4467, 4477, 4486, 
    4497, 4508, 4519, 4530, 4541, 4552, 4561, 4569, 4578, 4586, 4594, 4603, 4611, 4619, 
    4631, 4640, 4648, 4657, 4665, 4673, 4682, 4690, 4698, 4710, 4719, 4729, 4738, 4746, 
    4756, 4765, 4773, 4781, 4793, 4800, 4807, 4814, 4821, 4828, 4835, 4846, 4855, 4868, 
    4877, 4890, 4899, 4912, 4921, 4934, 4941, 4948, 4955, 4961, 4969, 4981, 4989, 5001, 
    5009, 5021, 5029, 5041, 5052, 5064, 5076, 5088, 5100, 5112, 5124, 5134, 5145, 5156, 
    5165, 5174, 5183, 5192, 5203, 5212, 5220, 5230, 5236, 5245, 5254, 5263, 5269, 5273, 
    5282, 5291, 5299, 5308, 5317, 5325, 5334, 5342, 5351, 5359, 5369, 5380, 5391, 5402, 
    5413, 5424, 5435, 5446, 5457, 5468, 5479, 5490, 5501, 5514, 5527, 5538, 5549, 5560, 
    5571, 5584, 5597, 5608, 5619, 5632, 5645, 5656, 5667, 5678, 5689, 5702, 5715, 5726, 
    5737, 5749, 5761, 5773, 5785, 5799, 5813, 5825, 5837, 5851, 5865, 5877, 5889, 5893, 
    5898, 5902, 5906, 5920, 5927, 5934, 5941, 5948, 5958, 5968, 5978, 5988, 5995, 6002, 
    6008, 6014, 6021, 6028, 6035, 6042, 6049, 6056, 6062, 6068, 6076, 6084, 6092, 6100, 
    6110, 6120, 6131, 6142, 6154, 6165, 6176, 6187, 6200, 6213, 6226, 6240, 6254, 6268, 
    6282, 6296, 6310, 6321, 6329, 6341, 6349, 6361, 6369, 6381, 6389, 6401, 6410, 6419, 
    6429, 6439, 6450, 6460, 6469, 6479, 6488, 6498, 6510, 6519, 6531, 6543, 6556, 6569, 
    6582, 6595, 6608, 6621, 6631, 6639, 6647, 6655, 6663, 6673, 6683, 6695, 6701, 6711, 
    6723, 6735, 6741, 6752, 6763, 6774, 6785, 6795, 6805, 6815, 6825, 6835, 6844, 6850, 
    6857, 6865, 6873, 6882, 6891, 6898, 6906, 6912, 6918, 6927, 6936, 6946, 6956, 6964, 
    6973, 6981, 6988, 6995, 7002, 7009, 7015, 7022, 7029, 7034, 7044, 7053, 7061, 7082, 
    7103, 7124, 7145, 7166, 7187, 7208, 7229, 7250, 7257, 7263, 7270, 7276, 7284, 7292, 
    7299, 7306, 7314, 7322, 7332, 7337, 7345, 7355, 7362, 7371, 7379, 7385, 7393, 7406, 
    7419, 7432, 7445, 7458, 7471, 7484, 7497, 7510, 7523, 7536, 7549, 7560, 7571, 7582, 
    7593, 7603, 7613, 7623, 7633, 7642, 7651, 7662, 7673, 7684, 7695, 7704, 7713, 7722, 
    7731, 7741, 7751, 7761, 7771, 7781, 7790, 7799, 7808, 7817, 7821, 7830, 7839, 7848, 
    7857, 7865, 7873, 7881, 7889, 7897, 7905, 7912, 7919, 7928, 7937, 7946, 7958, 7970, 
    7982, 7994, 8006, 8018, 8030, 8042, 8054, 8062, 8070, 8079, 8089, 8100, 8109, 8119, 
    8130, 8138, 8146, 8155, 8165, 8176, 8185, 8195, 8206, 8214, 8222, 8231, 8243, 8254, 
    8263, 8275, 8286, 8293, 8300, 8305, 8312, 8319, 8324, 8331, 8338, 8342, 8348, 8354, 
    8361, 8368, 8375, 8382, 8392, 8402, 8412, 8422, 8429, 8436, 8442, 8448, 8459, 8470, 
    8474, 8479, 8484, 8489, 8496, 8503, 8511, 8518, 8525, 8532, 8543, 8554, 8565, 8578, 
    8591, 8604, 8617, 8630, 8643, 8656, 8669, 8682, 8691, 8700, 8710, 8720, 8730, 8742, 
    8754, 8766, 8778, 8790, 8802, 8814, 8826, 8838, 8850, 8862, 8874, 8886, 8899, 8912, 
    8925, 8938, 8953, 8968, 8983, 8998, 9013, 9028, 9043, 9058, 9073, 9088, 9103, 9118, 
    9133, 9148, 9165, 9182, 9197, 9212, 9229, 9246, 9261, 9276, 9291, 9306, 9323, 9340, 
    9355, 9370, 9388, 9406, 9422, 9438, 9456, 9474, 9490, 9506, 9521, 9543, 9557, 9571, 
    9585, 9599, 9612, 9625, 9638, 9651, 9665, 9679, 9693, 9707, 9723, 9739, 9755, 9771, 
    9787, 9803, 9819, 9835, 9851, 9867, 9883, 9899, 9917, 9935, 9951, 9967, 9983, 9999, 
    10017, 10035, 10051, 10067, 10085, 10103, 10119, 10135, 10151, 10167, 10185, 10203, 10219, 10235, 
    10252, 10269, 10286, 10303, 10322, 10341, 10358, 10375, 10394, 10413, 10430, 10447, 10462, 10477, 
    10492, 10507, 10513, 10519, 10524, 10529, 10535, 10541, 10546, 10551, 10556, 10565, 10574, 10579, 
    10584, 10590, 10596, 10601, 10606, 10612, 10618, 10623, 10628, 10635, 10642, 10649, 10662, 10669, 
    10675, 10681, 10687, 10693, 10699, 10705, 10711, 10717, 10723, 10729, 10734, 10739, 10744, 10749, 
    10755, 10760, 10765, 10770, 10778, 10786, 10794, 10802, 10810, 10818, 10829, 10840, 10851, 10861, 
    10872, 10880, 10888, 10896, 10904, 10910, 10916, 10924, 10932, 10940, 10949, 10958, 10967, 10976, 
    10985, 10994, 11003, 11014, 11025, 11034, 11045, 11054, 11061, 11068, 11075, 11085, 11092, 11098, 
    11106, 11114, 11122, 11129, 11137, 11145, 11153, 11161, 11167, 11175, 11183, 11191, 11199, 11205, 
    11213, 11221, 11229, 11237, 11250, 11264, 11277, 11290, 11304, 11317, 11332, 11346, 11359, 11371, 
    11383, 11395, 11407, 11419, 11430, 11442, 11454, 11466, 11477, 11489, 11502, 11516, 11529, 11542, 
    11556, 11569, 11584, 11598, 11611, 11623, 11635, 11641, 11647, 11653, 11659, 11664, 11670, 11677, 
    11683, 11690, 11696, 11702, 11710, 11718, 11726, 11734, 11742, 11750, 11758, 11766, 11774, 11779, 
    11784, 11792, 11800, 11808, 11815, 11826, 11839, 11847, 11859, 11867, 11879, 11887, 11899, 11907, 
    11919, 11927, 11939, 11947, 11959, 11967, 11979, 11987, 11999, 12006, 12014, 12026, 12034, 12046, 
    12054, 12066, 12074, 12086, 12094, 12106, 12114, 12126, 12134, 12146, 12154, 12166, 12182, 12198, 
    12214, 12230, 12246, 12262, 12278, 12294, 12311, 12328, 12345, 12362, 12371, 12384, 12399, 12418, 
    12432, 12445, 12458, 12471, 12488, 12505, 12519, 12535, 12548, 12562, 12578, 12591, 12604, 12617, 
    12634, 12651, 12665, 12679, 12693, 12707, 12721, 12735, 12751, 12767, 12783, 12799, 12815, 12831, 
    12844, 12857, 12870, 12883, 12896, 12909, 12923, 12937, 12951, 12965, 12980, 12995, 13010, 13025, 
    13038, 13051, 13068, 13085, 13098, 13111, 13123, 13135, 13148, 13161, 13174, 13187, 13202, 13217, 
    13232, 13247, 13262, 13277, 13292, 13307, 13322, 13337, 13352, 13367, 13382, 13398, 13414, 13429, 
    13444, 13458, 13472, 13487, 13502, 13518, 13534, 13549, 13564, 13579, 13594, 13612, 13630, 13645, 
    13660, 13674, 13688, 13702, 13716, 13730, 13744, 13758, 13772, 13787, 13804, 13821, 13836, 13851, 
    13865, 13879, 13893, 13907, 13922, 13937, 13948, 13959, 13973, 13987, 14002, 14017, 14030, 14043, 
    14058, 14073, 14088, 14103, 14118, 14133, 14145, 14157, 14169, 14181, 14193, 14205, 14217, 14229, 
    14241, 14253, 14265, 14277, 14289, 14301, 14313, 14325, 14337, 14349, 14361, 14373, 14385, 14397, 
    14409, 14421, 14434, 14447, 14460, 14473, 14486, 14499, 14513, 14527, 14541, 14555, 14570, 14585, 
    14600, 14615, 14628, 14641, 14658, 14675, 14692, 14709, 14726, 14743, 14760, 14777, 14794, 14811, 
    14828, 14845, 14857, 14869, 14877, 14888, 14898, 14906, 14914, 14922, 14932, 14940, 14948, 14956, 
    14964, 14976, 14984, 14992, 15000, 15010, 15018, 15026, 15034, 15042, 15050, 15060, 15068, 15076, 
    15084, 15092, 15100, 15108, 15120, 15128, 15136, 15144, 15152, 15160, 15170, 15178, 15186, 15194, 
    15202, 15210, 15218, 15228, 15241, 15249, 15257, 15269, 15277, 15285, 15293, 15306, 15318, 15330, 
    15338, 15345, 15352, 15365, 15373, 15380, 15387, 15394, 15407, 15414, 15427, 15438, 15447, 15456, 
    15465, 15474, 15483, 15492, 15502, 15512, 15524, 15536, 15547, 15558, 15567, 15576, 15585, 15594, 
    15607, 15616, 15629, 15638, 15648, 15657, 15666, 15675, 15684, 15694, 15703, 15712, 15721, 15730, 
    15741, 15754, 15767, 15780, 15793, 15804, 15817, 15827, 15841, 15853, 15862, 15875, 15885, 15899, 
    15909, 15923, 15932, 15944, 15956, 15968, 15981, 15993, 16002, 16008, 16014, 16022, 16030, 16038, 
    16050, 16062, 16073, 16084, 16095, 16106, 16112, 16123, 16134, 16142, 16150, 16158, 16164, 16175, 
    16187, 16198, 16210, 16222, 16233, 16245, 16256, 16268, 16280, 16291, 16303, 16315, 16326, 16335, 
    16348, 16357, 16370, 16379, 16388, 16401, 16410, 16423, 16432, 16445, 16458, 16474, 16490, 16503, 
    16516, 16527, 16539, 16550, 16562, 16579, 16596, 16608, 16619, 16631, 16642, 16654, 16668, 16680, 
    16691, 16704, 16716, 16730, 16742, 16753, 16766, 16777, 16788, 16799, 16810, 16821, 16832, 16843, 
    16854, 16865, 16876, 16887, 16894, 16901, 16908, 16915, 16922, 16929, 16935, 16941, 16949, 16957, 
    16965, 16973, 16981, 16993, 17001, 17013, 17021, 17033, 17041, 17053, 17062, 17071, 17081, 17091, 
    17102, 17112, 17121, 17131, 17140, 17150, 17162, 17171, 17183, 17195, 17208, 17221, 17234, 17247, 
    17260, 17273, 17283, 17289, 17297, 17304, 17311, 17318, 17325, 17332, 17339, 17345, 17351, 17356, 
    17362, 17368, 17375, 17382, 17389, 17396, 17403, 17410, 17416, 17422, 17430, 17437, 17445, 17452, 
    17459, 17467, 17474, 17481, 17492, 17500, 17507, 17515, 17522, 17535, 17542, 17550, 17557, 17564, 
    17575, 17583, 17592, 17600, 17607, 17616, 17624, 17631, 17638, 17649, 17655, 17661, 17667, 17673, 
    17679, 17685, 17695, 17702, 17709, 17716, 17723, 17731, 17739, 17747, 17755, 17762, 17769, 17775, 
    17781, 17787, 17798, 17809, 17820, 17831, 17842, 17853, 17864, 17875, 17886, 17897, 17908, 17919, 
    17930, 17941, 17949, 17957, 17965, 17973, 17981, 17989, 17998, 18007, 18016, 18025, 18035, 18045, 
    18055, 18065, 18073, 18081, 18094, 18107, 18115, 18123, 18130, 18137, 18143, 18151, 18159, 18169, 
    18179, 18187, 18195, 18207, 18219, 18230, 18241, 18251, 18261, 18271, 18281, 18291, 18301, 18311, 
    18321, 18334, 18347, 18360, 18373, 18386, 18399, 18412, 18425, 18438, 18451, 18463, 18475, 18491, 
    18507, 18522, 18537, 18547, 18557, 18567, 18577, 18587, 18597, 18607, 18617, 18630, 18643, 18656, 
    18669, 18682, 18695, 18708, 18721, 18734, 18747, 18759, 18771, 18787, 18803, 18818, 18833, 18842, 
    18851, 18860, 18869, 18878, 18887, 18896, 18905, 18913, 18921, 18929, 18937, 18945, 18953, 18961, 
    18969, 18979, 18989, 18999, 19009, 19019, 19029, 19037, 19045, 19053, 19061, 19069, 19077, 19086, 
    19095, 19105, 19115, 19126, 19137, 19148, 19159, 19167, 19175, 19186, 19197, 19207, 19217, 19226, 
    19235, 19243, 19251, 19263, 19275, 19288, 19301, 19313, 19325, 19341, 19357, 19369, 19381, 19394, 
    19407, 19419, 19431, 19439, 19447, 19455, 19463, 19472, 19481, 19490, 19499, 19508, 19517, 19527, 
    19537, 19552, 19567, 19577, 19587, 19596, 19605, 19614, 19623, 19632, 19641, 19650, 19659, 19668, 
    19677, 19686, 19695, 19704, 19713, 19722, 19731, 19740, 19749, 19758, 19767, 19776, 19785, 19794, 
    19803, 19814, 19825, 19836, 19847, 19858, 19869, 19880, 19891, 19902, 19913, 19924, 19935, 19946, 
    19957, 19968, 19979, 19990, 20001, 20012, 20023, 20034, 20045, 20056, 20067, 20078, 20087, 20096, 
    20110, 20124, 20134, 20144, 20154, 20164, 20173, 20182, 20191, 20200, 20209, 20218, 20228, 20238, 
    20245, 20254, 20263, 20270, 20279, 20288, 20295, 20304, 20313, 20320, 20331, 20342, 20353, 20364, 
    20375, 20386, 20394, 20402, 20410, 20418, 20425, 20432, 20439, 20447, 20455, 20463, 20471, 20479, 
    20487, 20495, 20503, 20509, 20515, 20524, 20536, 20547, 20558, 20569, 20579, 20588, 20597, 20609, 
    20621, 20630, 20639, 20649, 20659, 20669, 20679, 20691, 20703, 20715, 20727, 20739, 20751, 20760, 
    20768, 20776, 20784, 20792, 20800, 20808, 20816, 20824, 20832, 20840, 20848, 20856, 20864, 20872, 
    20880, 20889, 20897, 20905, 20913, 20921, 20929, 20937, 20945, 20953, 20961, 20969, 20977, 20985, 
    20993, 21001, 21009, 21018, 21027, 21036, 21045, 21055, 21065, 21075, 21085, 21093, 21101, 21110, 
    21119, 21127, 21135, 21147, 21159, 21171, 21183, 21196, 21209, 21221, 21233, 21245, 21257, 21269, 
    21281, 21294, 21307, 21319, 21331, 21339, 21349, 21359, 21367, 21377, 21387, 21397, 21407, 21416, 
    21424, 21434, 21444, 21452, 21461, 21470, 21479, 21488, 21497, 21506, 21514, 21522, 21530, 21539, 
    21548, 21557, 21566, 21575, 21584, 21593, 21602, 21610, 21618, 21625, 21632, 21639, 21647, 21656, 
    21664, 21672, 21681, 21689, 21697, 21706, 21714, 21722, 21731, 21739, 21747, 21756, 21764, 21772, 
    21781, 21789, 21796, 21804, 21811, 21818, 21826, 21833, 21840, 21851, 21858, 21869, 21876, 21887, 
    21894, 21905, 21913, 21922, 21930, 21938, 21947, 21955, 21963, 21972, 21980, 21988, 21997, 22005, 
    22013, 22022, 22030, 22038, 22047, 22055, 22062, 22070, 22077, 22084, 22092, 22099, 22105, 22111, 
    22117, 22124, 22137, 22147, 22157, 22167, 22177, 22188, 22198, 22208, 22218, 22228, 22232, 22237, 
    22243, 22256, 22264, 22273, 22281, 22289, 22298, 22306, 22314, 22323, 22331, 22339, 22348, 22356, 
    22364, 22373, 22381, 22389, 22398, 22406, 22413, 22421, 22428, 22435, 22443, 22450, 22458, 22467, 
    22475, 22483, 22492, 22500, 22508, 22517, 22525, 22533, 22542, 22550, 22558, 22567, 22575, 22583, 
    22592, 22600, 22607, 22615, 22622, 22629, 22637, 22644, 22653, 22662, 22671, 22680, 22689, 22698, 
    22707, 22716, 22720, 22729, 22742, 22751, 22764, 22773, 22786, 22795, 22808, 22813, 22821, 22830, 
    22838, 22846, 22855, 22863, 22871, 22880, 22888, 22896, 22905, 22913, 22921, 22930, 22938, 22946, 
    22955, 22963, 22970, 22978, 22985, 22992, 23000, 23007, 23016, 23024, 23033, 23041, 23049, 23058, 
    23066, 23074, 23086, 23095, 23103, 23112, 23120, 23128, 23137, 23145, 23153, 23165, 23174, 23184, 
    23193, 23201, 23211, 23220, 23228, 23236, 23248, 23255, 23262, 23269, 23276, 23283, 23290, 23301, 
    23308, 23315, 23322, 23328, 23335, 23342, 23348, 23354, 23361, 23368, 23378, 23388, 23398, 23407, 
    23413, 23419, 23425, 23431, 23438, 23445, 23451, 23457, 23464, 23471, 23477, 23483, 23490, 23497, 
    23504, 23511, 23518, 23525, 23532, 23539, 23545, 23551, 23557, 23563, 23569, 23575, 23582, 23590, 
    23596, 23604, 23613, 23621, 23629, 23638, 23646, 23654, 23663, 23671, 23679, 23688, 23696, 23704, 
    23713, 23721, 23729, 23738, 23746, 23753, 23761, 23768, 23775, 23783, 23790, 23801, 23812, 23823, 
    23834, 23845, 23856, 23867, 23878, 23889, 23900, 23911, 23922, 23930, 23939, 23947, 23955, 23964, 
    23972, 23980, 23989, 23997, 24005, 24014, 24022, 24030, 24039, 24047, 24055, 24064, 24072, 24079, 
    24087, 24094, 24101, 24109, 24116, 24127, 24138, 24149, 24160, 24171, 24182, 24193, 24204, 24215, 
    24226, 24237, 24248, 24258, 24268, 24278, 24288, 24296, 24302, 24308, 24317, 24326, 24335, 24343, 
    24351, 24359, 24367, 24375, 24383, 24391, 24399, 24407, 24415, 24427, 24435, 24447, 24455, 24467, 
    24475, 24487, 24495, 24507, 24515, 24527, 24535, 24547, 24555, 24567, 24574, 24584, 24594, 24604, 
    24614, 24618, 24622, 24626, 24634, 24640, 24646, 24652, 24658, 24665, 24672, 24679, 24684, 24692, 
    24700, 24709, 24718, 24727, 24735, 24744, 24753, 24764, 24775, 24786, 24796, 24806, 24818, 24828, 
    24840, 24852, 24859, 24868, 24876, 24885, 24893, 24901, 24910, 24918, 24926, 24938, 24947, 24955, 
    24964, 24972, 24980, 24989, 24997, 25005, 25017, 25026, 25036, 25045, 25053, 25063, 25072, 25080, 
    25088, 25100, 25107, 25114, 25121, 25128, 25135, 25142, 25153, 25161, 25169, 25177, 25185, 25195, 
    25205, 25216, 25227, 25239, 25250, 25261, 25272, 25285, 25298, 25311, 25325, 25339, 25353, 25367, 
    25381, 25395, 25406, 25414, 25426, 25434, 25446, 25454, 25466, 25474, 25486, 25495, 25504, 25514, 
    25524, 25535, 25545, 25554, 25564, 25573, 25583, 25595, 25604, 25616, 25628, 25641, 25654, 25667, 
    25680, 25693, 25706, 25716, 25723, 25731, 25740, 25748, 25758, 25766, 25774, 25783, 25794, 25803, 
    25814, 25823, 25834, 25845, 25858, 25869, 25882, 25893, 25906, 25916, 25925, 25934, 25943, 25952, 
    25962, 25971, 25980, 25989, 25998, 26008, 26019, 26030, 26039, 26048, 26056, 26064, 26072, 26080, 
    26088, 26099, 26110, 26121, 26132, 26137, 26143, 26152, 26161, 26170, 26180, 26190, 26200, 26210, 
    26220, 26229, 26239, 26248, 26260, 26272, 26284, 26295, 26306, 26317, 26325, 26330, 26341, 26352, 
    26363, 26374, 26385, 26396, 26407, 26418, 26427, 26437, 26447, 26456, 26465, 26475, 26485, 26494, 
    26503, 26512, 26525, 26534, 26547, 26556, 26569, 26578, 26591, 26604, 26617, 26629, 26641, 26654, 
    26667, 26679, 26691, 26705, 26719, 26729, 26739, 26753, 26767, 26777, 26787, 26797, 26807, 26829, 
    26851, 26862, 26873, 26883, 26893, 26904, 26915, 26925, 26935, 26945, 26955, 26964, 26973, 26983, 
    26993, 27002, 27011, 27033, 27046, 27059, 27071, 27083, 27096, 27109, 27121, 27133, 27146, 27159, 
    27171, 27183, 27196, 27209, 27221, 27233, 27248, 27261, 27274, 27288, 27299, 27314, 27325, 27340, 
    27350, 27364, 27374, 27388, 27399, 27414, 27425, 27440, 27450, 27464, 27474, 27488, 27497, 27510, 
    27519, 27532, 27541, 27554, 27563, 27576, 27586, 27596, 27606, 27616, 27629, 27642, 27654, 27666, 
    27679, 27692, 27704, 27716, 27730, 27743, 27756, 27769, 27782, 27794, 27808, 27821, 27834, 27847, 
    27860, 27872, 27885, 27898, 27910, 27922, 27935, 27948, 27960, 27972, 27986, 28000, 28016, 28032, 
    28044, 28056, 28070, 28084, 28097, 28110, 28122, 28134, 28148, 28162, 28174, 28186, 28198, 28210, 
    28224, 28238, 28250, 28262, 28277, 28291, 28305, 28319, 28333, 28346, 28360, 28374, 28387, 28400, 
    28415, 28430, 28443, 28456, 28471, 28486, 28499, 28512, 28522, 28532, 28541, 28550, 28560, 28570, 
    28579, 28588, 28597, 28610, 28619, 28632, 28641, 28654, 28663, 28676, 28685, 28694, 28704, 28714, 
    28723, 28732, 28738, 28744, 28750, 28756, 28771, 28786, 28799, 28812, 28827, 28841, 28856, 28870, 
    28885, 28899, 28914, 28928, 28943, 28957, 28972, 28986, 29001, 29015, 29030, 29044, 29059, 29073, 
    29088, 29102, 29117, 29131, 29146, 29160, 29175, 29192, 29210, 29227, 29245, 29262, 29280, 29297, 
    29315, 29332, 29350, 29367, 29385, 29402, 29420, 29437, 29455, 29472, 29490, 29507, 29525, 29542, 
    29560, 29577, 29595, 29612, 29630, 29647, 29665, 29682, 29700, 29717, 29735, 29752, 29770, 29787, 
    29805, 29822, 29840, 29857, 29875, 29892, 29910, 29927, 29945, 29962, 29980, 29997, 30015, 30029, 
    30044, 30058, 30073, 30087, 30102, 30116, 30131, 30145, 30160, 30174, 30189, 30203, 30218, 30232, 
    30247, 30261, 30276, 30290, 30305, 30319, 30334, 30348, 30363, 30378, 30394, 30409, 30425, 30440, 
    30456, 30471, 30487, 30502, 30518, 30533, 30549, 30564, 30580, 30595, 30611, 30626, 30642, 30657, 
    30673, 30688, 30704, 30719, 30735, 30750, 30766, 30781, 30797, 30812, 30828, 30843, 30859, 30874, 
    30890, 30905, 30921, 30936, 30952, 30967, 30983, 30998, 31014, 31029, 31045, 31060, 31076, 31091, 
    31107, 31119, 31131, 31143, 31155, 31166, 31177, 31188, 31199, 31209, 31219, 31229, 31239, 31249, 
    31259, 31270, 31281, 31292, 31303, 31314, 31325, 31335, 31345, 31356, 31367, 31377, 31387, 31398, 
    31409, 31419, 31429, 31440, 31451, 31461, 31471, 31485, 31499, 31511, 31523, 31533, 31542, 31551, 
    31563, 31577, 31591, 31605, 31618, 31631, 31645, 31659, 31672, 31685, 31695, 31709, 31719, 31733, 
    31742, 31755, 31764, 31777, 31787, 31801, 31811, 31825, 31834, 31847, 31856, 31869, 31878, 31891, 
    31900, 31913, 31922, 31935, 31944, 31957, 31964, 31973, 31983, 31997, 32007, 32021, 32030, 32043, 
    32052, 32065, 32075, 32089, 32099, 32113, 32122, 32135, 32144, 32157, 32166, 32179, 32188, 32201, 
    32210, 32223, 32232, 32245, 32254, 32265, 32276, 32287, 32297, 32307, 32317, 32328, 32339, 32350, 
    32360, 32370, 32380, 32392, 32404, 32415, 32426, 32439, 32452, 32464, 32476, 32487, 32498, 32509, 
    32519, 32529, 32539, 32550, 32561, 32572, 32582, 32596, 32606, 32620, 32630, 32641, 32651, 32661, 
    32671, 32681, 32692, 32702, 32712, 32722, 32732, 32744, 32759, 32774, 32789, 32803, 32817, 32831, 
    32846, 32861, 32876, 32890, 32904, 32918, 32930, 32945, 32957, 32971, 32982, 32997, 33009, 33020, 
    33035, 33047, 33058, 33073, 33086, 33099, 33112, 33125, 33136, 33151, 33162, 33172, 33181, 33190, 
    33199, 33212, 33225, 33237, 33249, 33262, 33275, 33287, 33299, 33311, 33323, 33332, 33341, 33350, 
    33361, 33372, 33383, 33393, 33407, 33417, 33431, 33441, 33452, 33463, 33474, 33484, 33498, 33508, 
    33522, 33532, 33546, 33560, 33577, 33594, 33608, 33622, 33634, 33646, 33655, 33664, 33675, 33686, 
    33697, 33708, 33717, 33727, 33737, 33746, 33755, 33765, 33775, 33784, 33793, 33802, 33815, 33824, 
    33837, 33846, 33859, 33868, 33881, 33893, 33905, 33917, 33929, 33936, 33942, 33951, 33960, 33968, 
    33976, 33985, 33994, 34002, 34010, 34022, 34034, 34046, 34058, 34070, 34082, 34094, 34106, 34118, 
    34130, 34142, 34154, 34166, 34178, 34187, 34196, 34205, 34214, 34223, 34232, 34242, 34252, 34262, 
    34272, 34283, 34294, 34305, 34316, 34325, 34334, 34348, 34362, 34371, 34380, 34388, 34396, 34405, 
    34414, 34423, 34432, 34444, 34456, 34468, 34480, 34496, 34512, 34528, 34544, 34560, 34576, 34592, 
    34608, 34621, 34634, 34645, 34656, 34667, 34678, 34689, 34700, 34711, 34722, 34736, 34750, 34764, 
    34778, 34792, 34806, 34820, 34834, 34848, 34862, 34875, 34888, 34905, 34922, 34938, 34954, 34965, 
    34976, 34987, 34998, 35009, 35020, 35031, 35042, 35056, 35070, 35084, 35098, 35112, 35126, 35140, 
    35154, 35168, 35182, 35195, 35208, 35225, 35242, 35258, 35274, 35287, 35300, 35313, 35326, 35339, 
    35352, 35364, 35376, 35388, 35400, 35413, 35426, 35439, 35452, 35464, 35476, 35488, 35500, 35510, 
    35520, 35532, 35542, 35552, 35562, 35572, 35582, 35592, 35605, 35618, 35632, 35646, 35659, 35672, 
    35689, 35706, 35719, 35732, 35746, 35760, 35773, 35786, 35796, 35806, 35816, 35826, 35836, 35846, 
    35857, 35870, 35881, 35897, 35913, 35924, 35935, 35945, 35955, 35965, 35975, 35985, 35995, 36005, 
    36015, 36025, 36035, 36045, 36055, 36065, 36075, 36085, 36095, 36105, 36115, 36125, 36135, 36145, 
    36155, 36165, 36175, 36189, 36201, 36213, 36225, 36237, 36249, 36261, 36273, 36285, 36297, 36309, 
    36321, 36333, 36345, 36357, 36369, 36381, 36393, 36405, 36417, 36429, 36441, 36453, 36465, 36477, 
    36489, 36499, 36509, 36524, 36539, 36550, 36561, 36571, 36581, 36591, 36601, 36611, 36621, 36632, 
    36643, 36650, 36657, 36667, 36677, 36690, 36703, 36713, 36723, 36734, 36745, 36756, 36767, 36780, 
    36793, 36806, 36819, 36832, 36845, 36855, 36864, 36873, 36882, 36891, 36900, 36909, 36918, 36927, 
    36936, 36945, 36954, 36963, 36972, 36981, 36990, 37000, 37009, 37018, 37027, 37036, 37045, 37054, 
    37063, 37072, 37081, 37090, 37099, 37108, 37117, 37126, 37135, 37145, 37155, 37165, 37175, 37186, 
    37197, 37208, 37219, 37228, 37237, 37247, 37257, 37266, 37275, 37288, 37301, 37314, 37327, 37341, 
    37355, 37368, 37381, 37394, 37407, 37420, 37433, 37447, 37461, 37474, 37487, 37495, 37503, 37512, 
    37525, 37534, 37547, 37555, 37567, 37575, 37587, 37595, 37607, 37615, 37627, 37637, 37651, 37661, 
    37675, 37685, 37699, 37709, 37723, 37733, 37747, 37757, 37771, 37781, 37795, 37805, 37819, 37830, 
    37845, 37856, 37871, 37882, 37897, 37908, 37923, 37934, 37949, 37960, 37975, 37985, 37999, 38009, 
    38023, 38033, 38047, 38057, 38071, 38083, 38095, 38106, 38117, 38129, 38141, 38152, 38163, 38173, 
    38187, 38197, 38211, 38220, 38233, 38242, 38255, 38265, 38279, 38289, 38303, 38312, 38325, 38334, 
    38347, 38356, 38369, 38378, 38391, 38400, 38413, 38422, 38435, 38444, 38454, 38464, 38473, 38482, 
    38492, 38502, 38511, 38520, 38529, 38542, 38551, 38564, 38573, 38586, 38595, 38608, 38619, 38630, 
    38640, 38650, 38661, 38672, 38682, 38692, 38703, 38714, 38725, 38736, 38749, 38762, 38774, 38786, 
    38799, 38812, 38824, 38836, 38849, 38862, 38874, 38886, 38899, 38912, 38924, 38936, 38946, 38956, 
    38965, 38974, 38984, 38994, 39003, 39012, 39021, 39032, 39041, 39050, 39059, 39072, 39077, 39084, 
    39095, 39112, 39123, 39134, 39140, 39149, 39158, 39167, 39176, 39185, 39194, 39202, 39210, 39219, 
    39228, 39237, 39246, 39255, 39264, 39273, 39282, 39291, 39299, 39307, 39313, 39320, 39325, 39334, 
    39342, 39351, 39359, 39367, 39376, 39384, 39392, 39404, 39413, 39421, 39430, 39438, 39446, 39455, 
    39463, 39471, 39483, 39492, 39502, 39511, 39519, 39529, 39538, 39546, 39554, 39566, 39573, 39580, 
    39587, 39594, 39601, 39608, 39619, 39627, 39635, 39643, 39651, 0
  };

  const char *Strs =
    "PHI\000INLINEASM\000PROLOG_LABEL\000EH_LABEL\000GC_LABEL\000KILL\000EXT"
    "RACT_SUBREG\000INSERT_SUBREG\000IMPLICIT_DEF\000SUBREG_TO_REG\000COPY_T"
    "O_REGCLASS\000DBG_VALUE\000REG_SEQUENCE\000COPY\000AAA\000AAD8i8\000AAM"
    "8i8\000AAS\000ABS_F\000ABS_Fp32\000ABS_Fp64\000ABS_Fp80\000ADC16i16\000"
    "ADC16mi\000ADC16mi8\000ADC16mr\000ADC16ri\000ADC16ri8\000ADC16rm\000ADC"
    "16rr\000ADC16rr_REV\000ADC32i32\000ADC32mi\000ADC32mi8\000ADC32mr\000AD"
    "C32ri\000ADC32ri8\000ADC32rm\000ADC32rr\000ADC32rr_REV\000ADC64i32\000A"
    "DC64mi32\000ADC64mi8\000ADC64mr\000ADC64ri32\000ADC64ri8\000ADC64rm\000"
    "ADC64rr\000ADC64rr_REV\000ADC8i8\000ADC8mi\000ADC8mr\000ADC8ri\000ADC8r"
    "m\000ADC8rr\000ADC8rr_REV\000ADD16i16\000ADD16mi\000ADD16mi8\000ADD16mr"
    "\000ADD16ri\000ADD16ri8\000ADD16ri8_DB\000ADD16ri_DB\000ADD16rm\000ADD1"
    "6rr\000ADD16rr_DB\000ADD16rr_REV\000ADD32i32\000ADD32mi\000ADD32mi8\000"
    "ADD32mr\000ADD32ri\000ADD32ri8\000ADD32ri8_DB\000ADD32ri_DB\000ADD32rm\000"
    "ADD32rr\000ADD32rr_DB\000ADD32rr_REV\000ADD64i32\000ADD64mi32\000ADD64m"
    "i8\000ADD64mr\000ADD64ri32\000ADD64ri32_DB\000ADD64ri8\000ADD64ri8_DB\000"
    "ADD64rm\000ADD64rr\000ADD64rr_DB\000ADD64rr_REV\000ADD8i8\000ADD8mi\000"
    "ADD8mr\000ADD8ri\000ADD8rm\000ADD8rr\000ADD8rr_REV\000ADDPDrm\000ADDPDr"
    "r\000ADDPSrm\000ADDPSrr\000ADDSDrm\000ADDSDrm_Int\000ADDSDrr\000ADDSDrr"
    "_Int\000ADDSSrm\000ADDSSrm_Int\000ADDSSrr\000ADDSSrr_Int\000ADDSUBPDrm\000"
    "ADDSUBPDrr\000ADDSUBPSrm\000ADDSUBPSrr\000ADD_F32m\000ADD_F64m\000ADD_F"
    "I16m\000ADD_FI32m\000ADD_FPrST0\000ADD_FST0r\000ADD_Fp32\000ADD_Fp32m\000"
    "ADD_Fp64\000ADD_Fp64m\000ADD_Fp64m32\000ADD_Fp80\000ADD_Fp80m32\000ADD_"
    "Fp80m64\000ADD_FpI16m32\000ADD_FpI16m64\000ADD_FpI16m80\000ADD_FpI32m32"
    "\000ADD_FpI32m64\000ADD_FpI32m80\000ADD_FrST0\000ADJCALLSTACKDOWN32\000"
    "ADJCALLSTACKDOWN64\000ADJCALLSTACKUP32\000ADJCALLSTACKUP64\000AESDECLAS"
    "Trm\000AESDECLASTrr\000AESDECrm\000AESDECrr\000AESENCLASTrm\000AESENCLA"
    "STrr\000AESENCrm\000AESENCrr\000AESIMCrm\000AESIMCrr\000AESKEYGENASSIST"
    "128rm\000AESKEYGENASSIST128rr\000AND16i16\000AND16mi\000AND16mi8\000AND"
    "16mr\000AND16ri\000AND16ri8\000AND16rm\000AND16rr\000AND16rr_REV\000AND"
    "32i32\000AND32mi\000AND32mi8\000AND32mr\000AND32ri\000AND32ri8\000AND32"
    "rm\000AND32rr\000AND32rr_REV\000AND64i32\000AND64mi32\000AND64mi8\000AN"
    "D64mr\000AND64ri32\000AND64ri8\000AND64rm\000AND64rr\000AND64rr_REV\000"
    "AND8i8\000AND8mi\000AND8mr\000AND8ri\000AND8rm\000AND8rr\000AND8rr_REV\000"
    "ANDNPDrm\000ANDNPDrr\000ANDNPSrm\000ANDNPSrr\000ANDPDrm\000ANDPDrr\000A"
    "NDPSrm\000ANDPSrr\000ARPL16mr\000ARPL16rr\000ATOMADD6432\000ATOMAND16\000"
    "ATOMAND32\000ATOMAND64\000ATOMAND6432\000ATOMAND8\000ATOMMAX16\000ATOMM"
    "AX32\000ATOMMAX64\000ATOMMIN16\000ATOMMIN32\000ATOMMIN64\000ATOMNAND16\000"
    "ATOMNAND32\000ATOMNAND64\000ATOMNAND6432\000ATOMNAND8\000ATOMOR16\000AT"
    "OMOR32\000ATOMOR64\000ATOMOR6432\000ATOMOR8\000ATOMSUB6432\000ATOMSWAP6"
    "432\000ATOMUMAX16\000ATOMUMAX32\000ATOMUMAX64\000ATOMUMIN16\000ATOMUMIN"
    "32\000ATOMUMIN64\000ATOMXOR16\000ATOMXOR32\000ATOMXOR64\000ATOMXOR6432\000"
    "ATOMXOR8\000AVX_SET0PD\000AVX_SET0PDY\000AVX_SET0PI\000AVX_SET0PS\000AV"
    "X_SET0PSY\000BLENDPDrmi\000BLENDPDrri\000BLENDPSrmi\000BLENDPSrri\000BL"
    "ENDVPDrm0\000BLENDVPDrr0\000BLENDVPSrm0\000BLENDVPSrr0\000BOUNDS16rm\000"
    "BOUNDS32rm\000BSF16rm\000BSF16rr\000BSF32rm\000BSF32rr\000BSF64rm\000BS"
    "F64rr\000BSR16rm\000BSR16rr\000BSR32rm\000BSR32rr\000BSR64rm\000BSR64rr"
    "\000BSWAP32r\000BSWAP64r\000BT16mi8\000BT16mr\000BT16ri8\000BT16rr\000B"
    "T32mi8\000BT32mr\000BT32ri8\000BT32rr\000BT64mi8\000BT64mr\000BT64ri8\000"
    "BT64rr\000BTC16mi8\000BTC16mr\000BTC16ri8\000BTC16rr\000BTC32mi8\000BTC"
    "32mr\000BTC32ri8\000BTC32rr\000BTC64mi8\000BTC64mr\000BTC64ri8\000BTC64"
    "rr\000BTR16mi8\000BTR16mr\000BTR16ri8\000BTR16rr\000BTR32mi8\000BTR32mr"
    "\000BTR32ri8\000BTR32rr\000BTR64mi8\000BTR64mr\000BTR64ri8\000BTR64rr\000"
    "BTS16mi8\000BTS16mr\000BTS16ri8\000BTS16rr\000BTS32mi8\000BTS32mr\000BT"
    "S32ri8\000BTS32rr\000BTS64mi8\000BTS64mr\000BTS64ri8\000BTS64rr\000CALL"
    "32m\000CALL32r\000CALL64m\000CALL64pcrel32\000CALL64r\000CALLpcrel16\000"
    "CALLpcrel32\000CBW\000CDQ\000CDQE\000CHS_F\000CHS_Fp32\000CHS_Fp64\000C"
    "HS_Fp80\000CLC\000CLD\000CLFLUSH\000CLI\000CLTS\000CMC\000CMOVA16rm\000"
    "CMOVA16rr\000CMOVA32rm\000CMOVA32rr\000CMOVA64rm\000CMOVA64rr\000CMOVAE"
    "16rm\000CMOVAE16rr\000CMOVAE32rm\000CMOVAE32rr\000CMOVAE64rm\000CMOVAE6"
    "4rr\000CMOVB16rm\000CMOVB16rr\000CMOVB32rm\000CMOVB32rr\000CMOVB64rm\000"
    "CMOVB64rr\000CMOVBE16rm\000CMOVBE16rr\000CMOVBE32rm\000CMOVBE32rr\000CM"
    "OVBE64rm\000CMOVBE64rr\000CMOVBE_F\000CMOVBE_Fp32\000CMOVBE_Fp64\000CMO"
    "VBE_Fp80\000CMOVB_F\000CMOVB_Fp32\000CMOVB_Fp64\000CMOVB_Fp80\000CMOVE1"
    "6rm\000CMOVE16rr\000CMOVE32rm\000CMOVE32rr\000CMOVE64rm\000CMOVE64rr\000"
    "CMOVE_F\000CMOVE_Fp32\000CMOVE_Fp64\000CMOVE_Fp80\000CMOVG16rm\000CMOVG"
    "16rr\000CMOVG32rm\000CMOVG32rr\000CMOVG64rm\000CMOVG64rr\000CMOVGE16rm\000"
    "CMOVGE16rr\000CMOVGE32rm\000CMOVGE32rr\000CMOVGE64rm\000CMOVGE64rr\000C"
    "MOVL16rm\000CMOVL16rr\000CMOVL32rm\000CMOVL32rr\000CMOVL64rm\000CMOVL64"
    "rr\000CMOVLE16rm\000CMOVLE16rr\000CMOVLE32rm\000CMOVLE32rr\000CMOVLE64r"
    "m\000CMOVLE64rr\000CMOVNBE_F\000CMOVNBE_Fp32\000CMOVNBE_Fp64\000CMOVNBE"
    "_Fp80\000CMOVNB_F\000CMOVNB_Fp32\000CMOVNB_Fp64\000CMOVNB_Fp80\000CMOVN"
    "E16rm\000CMOVNE16rr\000CMOVNE32rm\000CMOVNE32rr\000CMOVNE64rm\000CMOVNE"
    "64rr\000CMOVNE_F\000CMOVNE_Fp32\000CMOVNE_Fp64\000CMOVNE_Fp80\000CMOVNO"
    "16rm\000CMOVNO16rr\000CMOVNO32rm\000CMOVNO32rr\000CMOVNO64rm\000CMOVNO6"
    "4rr\000CMOVNP16rm\000CMOVNP16rr\000CMOVNP32rm\000CMOVNP32rr\000CMOVNP64"
    "rm\000CMOVNP64rr\000CMOVNP_F\000CMOVNP_Fp32\000CMOVNP_Fp64\000CMOVNP_Fp"
    "80\000CMOVNS16rm\000CMOVNS16rr\000CMOVNS32rm\000CMOVNS32rr\000CMOVNS64r"
    "m\000CMOVNS64rr\000CMOVO16rm\000CMOVO16rr\000CMOVO32rm\000CMOVO32rr\000"
    "CMOVO64rm\000CMOVO64rr\000CMOVP16rm\000CMOVP16rr\000CMOVP32rm\000CMOVP3"
    "2rr\000CMOVP64rm\000CMOVP64rr\000CMOVP_F\000CMOVP_Fp32\000CMOVP_Fp64\000"
    "CMOVP_Fp80\000CMOVS16rm\000CMOVS16rr\000CMOVS32rm\000CMOVS32rr\000CMOVS"
    "64rm\000CMOVS64rr\000CMOV_FR32\000CMOV_FR64\000CMOV_GR16\000CMOV_GR32\000"
    "CMOV_GR8\000CMOV_RFP32\000CMOV_RFP64\000CMOV_RFP80\000CMOV_V2F64\000CMO"
    "V_V2I64\000CMOV_V4F32\000CMP16i16\000CMP16mi\000CMP16mi8\000CMP16mr\000"
    "CMP16ri\000CMP16ri8\000CMP16rm\000CMP16rr\000CMP16rr_REV\000CMP32i32\000"
    "CMP32mi\000CMP32mi8\000CMP32mr\000CMP32ri\000CMP32ri8\000CMP32rm\000CMP"
    "32rr\000CMP32rr_REV\000CMP64i32\000CMP64mi32\000CMP64mi8\000CMP64mr\000"
    "CMP64ri32\000CMP64ri8\000CMP64rm\000CMP64rr\000CMP64rr_REV\000CMP8i8\000"
    "CMP8mi\000CMP8mr\000CMP8ri\000CMP8rm\000CMP8rr\000CMP8rr_REV\000CMPPDrm"
    "i\000CMPPDrmi_alt\000CMPPDrri\000CMPPDrri_alt\000CMPPSrmi\000CMPPSrmi_a"
    "lt\000CMPPSrri\000CMPPSrri_alt\000CMPS16\000CMPS32\000CMPS64\000CMPS8\000"
    "CMPSDrm\000CMPSDrm_alt\000CMPSDrr\000CMPSDrr_alt\000CMPSSrm\000CMPSSrm_"
    "alt\000CMPSSrr\000CMPSSrr_alt\000CMPXCHG16B\000CMPXCHG16rm\000CMPXCHG16"
    "rr\000CMPXCHG32rm\000CMPXCHG32rr\000CMPXCHG64rm\000CMPXCHG64rr\000CMPXC"
    "HG8B\000CMPXCHG8rm\000CMPXCHG8rr\000COMISDrm\000COMISDrr\000COMISSrm\000"
    "COMISSrr\000COMP_FST0r\000COM_FIPr\000COM_FIr\000COM_FST0r\000COS_F\000"
    "COS_Fp32\000COS_Fp64\000COS_Fp80\000CPUID\000CQO\000CRC32m16\000CRC32m3"
    "2\000CRC32m8\000CRC32r16\000CRC32r32\000CRC32r8\000CRC64m64\000CRC64m8\000"
    "CRC64r64\000CRC64r8\000CS_PREFIX\000CVTDQ2PDrm\000CVTDQ2PDrr\000CVTDQ2P"
    "Srm\000CVTDQ2PSrr\000CVTPD2DQrm\000CVTPD2DQrr\000CVTPD2PSrm\000CVTPD2PS"
    "rr\000CVTPS2DQrm\000CVTPS2DQrr\000CVTPS2PDrm\000CVTPS2PDrr\000CVTSD2SI6"
    "4rm\000CVTSD2SI64rr\000CVTSD2SIrm\000CVTSD2SIrr\000CVTSD2SSrm\000CVTSD2"
    "SSrr\000CVTSI2SD64rm\000CVTSI2SD64rr\000CVTSI2SDrm\000CVTSI2SDrr\000CVT"
    "SI2SS64rm\000CVTSI2SS64rr\000CVTSI2SSrm\000CVTSI2SSrr\000CVTSS2SDrm\000"
    "CVTSS2SDrr\000CVTSS2SI64rm\000CVTSS2SI64rr\000CVTSS2SIrm\000CVTSS2SIrr\000"
    "CVTTPD2DQrm\000CVTTPD2DQrr\000CVTTPS2DQrm\000CVTTPS2DQrr\000CVTTSD2SI64"
    "rm\000CVTTSD2SI64rr\000CVTTSD2SIrm\000CVTTSD2SIrr\000CVTTSS2SI64rm\000C"
    "VTTSS2SI64rr\000CVTTSS2SIrm\000CVTTSS2SIrr\000CWD\000CWDE\000DAA\000DAS"
    "\000DATA16_PREFIX\000DEC16m\000DEC16r\000DEC32m\000DEC32r\000DEC64_16m\000"
    "DEC64_16r\000DEC64_32m\000DEC64_32r\000DEC64m\000DEC64r\000DEC8m\000DEC"
    "8r\000DIV16m\000DIV16r\000DIV32m\000DIV32r\000DIV64m\000DIV64r\000DIV8m"
    "\000DIV8r\000DIVPDrm\000DIVPDrr\000DIVPSrm\000DIVPSrr\000DIVR_F32m\000D"
    "IVR_F64m\000DIVR_FI16m\000DIVR_FI32m\000DIVR_FPrST0\000DIVR_FST0r\000DI"
    "VR_Fp32m\000DIVR_Fp64m\000DIVR_Fp64m32\000DIVR_Fp80m32\000DIVR_Fp80m64\000"
    "DIVR_FpI16m32\000DIVR_FpI16m64\000DIVR_FpI16m80\000DIVR_FpI32m32\000DIV"
    "R_FpI32m64\000DIVR_FpI32m80\000DIVR_FrST0\000DIVSDrm\000DIVSDrm_Int\000"
    "DIVSDrr\000DIVSDrr_Int\000DIVSSrm\000DIVSSrm_Int\000DIVSSrr\000DIVSSrr_"
    "Int\000DIV_F32m\000DIV_F64m\000DIV_FI16m\000DIV_FI32m\000DIV_FPrST0\000"
    "DIV_FST0r\000DIV_Fp32\000DIV_Fp32m\000DIV_Fp64\000DIV_Fp64m\000DIV_Fp64"
    "m32\000DIV_Fp80\000DIV_Fp80m32\000DIV_Fp80m64\000DIV_FpI16m32\000DIV_Fp"
    "I16m64\000DIV_FpI16m80\000DIV_FpI32m32\000DIV_FpI32m64\000DIV_FpI32m80\000"
    "DIV_FrST0\000DPPDrmi\000DPPDrri\000DPPSrmi\000DPPSrri\000DS_PREFIX\000E"
    "H_RETURN\000EH_RETURN64\000ENTER\000ES_PREFIX\000EXTRACTPSmr\000EXTRACT"
    "PSrr\000F2XM1\000FARCALL16i\000FARCALL16m\000FARCALL32i\000FARCALL32m\000"
    "FARCALL64\000FARJMP16i\000FARJMP16m\000FARJMP32i\000FARJMP32m\000FARJMP"
    "64\000FBLDm\000FBSTPm\000FCOM32m\000FCOM64m\000FCOMP32m\000FCOMP64m\000"
    "FCOMPP\000FDECSTP\000FEMMS\000FFREE\000FICOM16m\000FICOM32m\000FICOMP16"
    "m\000FICOMP32m\000FINCSTP\000FLDCW16m\000FLDENVm\000FLDL2E\000FLDL2T\000"
    "FLDLG2\000FLDLN2\000FLDPI\000FNCLEX\000FNINIT\000FNOP\000FNSTCW16m\000F"
    "NSTSW8r\000FNSTSWm\000FP32_TO_INT16_IN_MEM\000FP32_TO_INT32_IN_MEM\000F"
    "P32_TO_INT64_IN_MEM\000FP64_TO_INT16_IN_MEM\000FP64_TO_INT32_IN_MEM\000"
    "FP64_TO_INT64_IN_MEM\000FP80_TO_INT16_IN_MEM\000FP80_TO_INT32_IN_MEM\000"
    "FP80_TO_INT64_IN_MEM\000FPATAN\000FPREM\000FPREM1\000FPTAN\000FRNDINT\000"
    "FRSTORm\000FSAVEm\000FSCALE\000FSINCOS\000FSTENVm\000FS_PREFIX\000FXAM\000"
    "FXRSTOR\000FXRSTOR64\000FXSAVE\000FXSAVE64\000FXTRACT\000FYL2X\000FYL2X"
    "P1\000FpGET_ST0_32\000FpGET_ST0_64\000FpGET_ST0_80\000FpGET_ST1_32\000F"
    "pGET_ST1_64\000FpGET_ST1_80\000FpSET_ST0_32\000FpSET_ST0_64\000FpSET_ST"
    "0_80\000FpSET_ST1_32\000FpSET_ST1_64\000FpSET_ST1_80\000FsANDNPDrm\000F"
    "sANDNPDrr\000FsANDNPSrm\000FsANDNPSrr\000FsANDPDrm\000FsANDPDrr\000FsAN"
    "DPSrm\000FsANDPSrr\000FsFLD0SD\000FsFLD0SS\000FsMOVAPDrm\000FsMOVAPDrr\000"
    "FsMOVAPSrm\000FsMOVAPSrr\000FsORPDrm\000FsORPDrr\000FsORPSrm\000FsORPSr"
    "r\000FsXORPDrm\000FsXORPDrr\000FsXORPSrm\000FsXORPSrr\000GS_PREFIX\000H"
    "ADDPDrm\000HADDPDrr\000HADDPSrm\000HADDPSrr\000HLT\000HSUBPDrm\000HSUBP"
    "Drr\000HSUBPSrm\000HSUBPSrr\000IDIV16m\000IDIV16r\000IDIV32m\000IDIV32r"
    "\000IDIV64m\000IDIV64r\000IDIV8m\000IDIV8r\000ILD_F16m\000ILD_F32m\000I"
    "LD_F64m\000ILD_Fp16m32\000ILD_Fp16m64\000ILD_Fp16m80\000ILD_Fp32m32\000"
    "ILD_Fp32m64\000ILD_Fp32m80\000ILD_Fp64m32\000ILD_Fp64m64\000ILD_Fp64m80"
    "\000IMUL16m\000IMUL16r\000IMUL16rm\000IMUL16rmi\000IMUL16rmi8\000IMUL16"
    "rr\000IMUL16rri\000IMUL16rri8\000IMUL32m\000IMUL32r\000IMUL32rm\000IMUL"
    "32rmi\000IMUL32rmi8\000IMUL32rr\000IMUL32rri\000IMUL32rri8\000IMUL64m\000"
    "IMUL64r\000IMUL64rm\000IMUL64rmi32\000IMUL64rmi8\000IMUL64rr\000IMUL64r"
    "ri32\000IMUL64rri8\000IMUL8m\000IMUL8r\000IN16\000IN16ri\000IN16rr\000I"
    "N32\000IN32ri\000IN32rr\000IN8\000IN8ri\000IN8rr\000INC16m\000INC16r\000"
    "INC32m\000INC32r\000INC64_16m\000INC64_16r\000INC64_32m\000INC64_32r\000"
    "INC64m\000INC64r\000INC8m\000INC8r\000INSERTPSrm\000INSERTPSrr\000INT\000"
    "INT3\000INTO\000INVD\000INVEPT\000INVLPG\000INVVPID\000IRET16\000IRET32"
    "\000IRET64\000ISTT_FP16m\000ISTT_FP32m\000ISTT_FP64m\000ISTT_Fp16m32\000"
    "ISTT_Fp16m64\000ISTT_Fp16m80\000ISTT_Fp32m32\000ISTT_Fp32m64\000ISTT_Fp"
    "32m80\000ISTT_Fp64m32\000ISTT_Fp64m64\000ISTT_Fp64m80\000IST_F16m\000IS"
    "T_F32m\000IST_FP16m\000IST_FP32m\000IST_FP64m\000IST_Fp16m32\000IST_Fp1"
    "6m64\000IST_Fp16m80\000IST_Fp32m32\000IST_Fp32m64\000IST_Fp32m80\000IST"
    "_Fp64m32\000IST_Fp64m64\000IST_Fp64m80\000Int_CMPSDrm\000Int_CMPSDrr\000"
    "Int_CMPSSrm\000Int_CMPSSrr\000Int_COMISDrm\000Int_COMISDrr\000Int_COMIS"
    "Srm\000Int_COMISSrr\000Int_CVTDQ2PDrm\000Int_CVTDQ2PDrr\000Int_CVTDQ2PS"
    "rm\000Int_CVTDQ2PSrr\000Int_CVTPD2DQrm\000Int_CVTPD2DQrr\000Int_CVTPD2P"
    "Srm\000Int_CVTPD2PSrr\000Int_CVTPS2DQrm\000Int_CVTPS2DQrr\000Int_CVTPS2"
    "PDrm\000Int_CVTPS2PDrr\000Int_CVTSD2SSrm\000Int_CVTSD2SSrr\000Int_CVTSI"
    "2SD64rm\000Int_CVTSI2SD64rr\000Int_CVTSI2SDrm\000Int_CVTSI2SDrr\000Int_"
    "CVTSI2SS64rm\000Int_CVTSI2SS64rr\000Int_CVTSI2SSrm\000Int_CVTSI2SSrr\000"
    "Int_CVTSS2SDrm\000Int_CVTSS2SDrr\000Int_CVTSS2SI64rm\000Int_CVTSS2SI64r"
    "r\000Int_CVTSS2SIrm\000Int_CVTSS2SIrr\000Int_CVTTSD2SI64rm\000Int_CVTTS"
    "D2SI64rr\000Int_CVTTSD2SIrm\000Int_CVTTSD2SIrr\000Int_CVTTSS2SI64rm\000"
    "Int_CVTTSS2SI64rr\000Int_CVTTSS2SIrm\000Int_CVTTSS2SIrr\000Int_MemBarri"
    "er\000Int_MemBarrierNoSSE64\000Int_UCOMISDrm\000Int_UCOMISDrr\000Int_UC"
    "OMISSrm\000Int_UCOMISSrr\000Int_VCMPSDrm\000Int_VCMPSDrr\000Int_VCMPSSr"
    "m\000Int_VCMPSSrr\000Int_VCOMISDrm\000Int_VCOMISDrr\000Int_VCOMISSrm\000"
    "Int_VCOMISSrr\000Int_VCVTDQ2PDrm\000Int_VCVTDQ2PDrr\000Int_VCVTDQ2PSrm\000"
    "Int_VCVTDQ2PSrr\000Int_VCVTPD2DQrm\000Int_VCVTPD2DQrr\000Int_VCVTPD2PSr"
    "m\000Int_VCVTPD2PSrr\000Int_VCVTPS2DQrm\000Int_VCVTPS2DQrr\000Int_VCVTP"
    "S2PDrm\000Int_VCVTPS2PDrr\000Int_VCVTSD2SI64rm\000Int_VCVTSD2SI64rr\000"
    "Int_VCVTSD2SIrm\000Int_VCVTSD2SIrr\000Int_VCVTSD2SSrm\000Int_VCVTSD2SSr"
    "r\000Int_VCVTSI2SD64rm\000Int_VCVTSI2SD64rr\000Int_VCVTSI2SDrm\000Int_V"
    "CVTSI2SDrr\000Int_VCVTSI2SS64rm\000Int_VCVTSI2SS64rr\000Int_VCVTSI2SSrm"
    "\000Int_VCVTSI2SSrr\000Int_VCVTSS2SDrm\000Int_VCVTSS2SDrr\000Int_VCVTSS"
    "2SI64rm\000Int_VCVTSS2SI64rr\000Int_VCVTSS2SIrm\000Int_VCVTSS2SIrr\000I"
    "nt_VCVTTPD2DQrm\000Int_VCVTTPD2DQrr\000Int_VCVTTPS2DQrm\000Int_VCVTTPS2"
    "DQrr\000Int_VCVTTSD2SI64rm\000Int_VCVTTSD2SI64rr\000Int_VCVTTSD2SIrm\000"
    "Int_VCVTTSD2SIrr\000Int_VCVTTSS2SI64rm\000Int_VCVTTSS2SI64rr\000Int_VCV"
    "TTSS2SIrm\000Int_VCVTTSS2SIrr\000Int_VUCOMISDrm\000Int_VUCOMISDrr\000In"
    "t_VUCOMISSrm\000Int_VUCOMISSrr\000JAE_1\000JAE_4\000JA_1\000JA_4\000JBE"
    "_1\000JBE_4\000JB_1\000JB_4\000JCXZ\000JECXZ_32\000JECXZ_64\000JE_1\000"
    "JE_4\000JGE_1\000JGE_4\000JG_1\000JG_4\000JLE_1\000JLE_4\000JL_1\000JL_"
    "4\000JMP32m\000JMP32r\000JMP64m\000JMP64pcrel32\000JMP64r\000JMP_1\000J"
    "MP_4\000JNE_1\000JNE_4\000JNO_1\000JNO_4\000JNP_1\000JNP_4\000JNS_1\000"
    "JNS_4\000JO_1\000JO_4\000JP_1\000JP_4\000JRCXZ\000JS_1\000JS_4\000LAHF\000"
    "LAR16rm\000LAR16rr\000LAR32rm\000LAR32rr\000LAR64rm\000LAR64rr\000LCMPX"
    "CHG16\000LCMPXCHG32\000LCMPXCHG64\000LCMPXCHG8\000LCMPXCHG8B\000LDDQUrm"
    "\000LDMXCSR\000LDS16rm\000LDS32rm\000LD_F0\000LD_F1\000LD_F32m\000LD_F6"
    "4m\000LD_F80m\000LD_Fp032\000LD_Fp064\000LD_Fp080\000LD_Fp132\000LD_Fp1"
    "64\000LD_Fp180\000LD_Fp32m\000LD_Fp32m64\000LD_Fp32m80\000LD_Fp64m\000L"
    "D_Fp64m80\000LD_Fp80m\000LD_Frr\000LEA16r\000LEA32r\000LEA64_32r\000LEA"
    "64r\000LEAVE\000LEAVE64\000LES16rm\000LES32rm\000LFENCE\000LFS16rm\000L"
    "FS32rm\000LFS64rm\000LGDT16m\000LGDTm\000LGS16rm\000LGS32rm\000LGS64rm\000"
    "LIDT16m\000LIDTm\000LLDT16m\000LLDT16r\000LMSW16m\000LMSW16r\000LOCK_AD"
    "D16mi\000LOCK_ADD16mi8\000LOCK_ADD16mr\000LOCK_ADD32mi\000LOCK_ADD32mi8"
    "\000LOCK_ADD32mr\000LOCK_ADD64mi32\000LOCK_ADD64mi8\000LOCK_ADD64mr\000"
    "LOCK_ADD8mi\000LOCK_ADD8mr\000LOCK_DEC16m\000LOCK_DEC32m\000LOCK_DEC64m"
    "\000LOCK_DEC8m\000LOCK_INC16m\000LOCK_INC32m\000LOCK_INC64m\000LOCK_INC"
    "8m\000LOCK_PREFIX\000LOCK_SUB16mi\000LOCK_SUB16mi8\000LOCK_SUB16mr\000L"
    "OCK_SUB32mi\000LOCK_SUB32mi8\000LOCK_SUB32mr\000LOCK_SUB64mi32\000LOCK_"
    "SUB64mi8\000LOCK_SUB64mr\000LOCK_SUB8mi\000LOCK_SUB8mr\000LODSB\000LODS"
    "D\000LODSQ\000LODSW\000LOOP\000LOOPE\000LOOPNE\000LRETI\000LRETIW\000LR"
    "ETL\000LRETQ\000LSL16rm\000LSL16rr\000LSL32rm\000LSL32rr\000LSL64rm\000"
    "LSL64rr\000LSS16rm\000LSS32rm\000LSS64rm\000LTRm\000LTRr\000LXADD16\000"
    "LXADD32\000LXADD64\000LXADD8\000MASKMOVDQU\000MASKMOVDQU64\000MAXPDrm\000"
    "MAXPDrm_Int\000MAXPDrr\000MAXPDrr_Int\000MAXPSrm\000MAXPSrm_Int\000MAXP"
    "Srr\000MAXPSrr_Int\000MAXSDrm\000MAXSDrm_Int\000MAXSDrr\000MAXSDrr_Int\000"
    "MAXSSrm\000MAXSSrm_Int\000MAXSSrr\000MAXSSrr_Int\000MFENCE\000MINPDrm\000"
    "MINPDrm_Int\000MINPDrr\000MINPDrr_Int\000MINPSrm\000MINPSrm_Int\000MINP"
    "Srr\000MINPSrr_Int\000MINSDrm\000MINSDrm_Int\000MINSDrr\000MINSDrr_Int\000"
    "MINSSrm\000MINSSrm_Int\000MINSSrr\000MINSSrr_Int\000MMX_CVTPD2PIirm\000"
    "MMX_CVTPD2PIirr\000MMX_CVTPI2PDirm\000MMX_CVTPI2PDirr\000MMX_CVTPI2PSir"
    "m\000MMX_CVTPI2PSirr\000MMX_CVTPS2PIirm\000MMX_CVTPS2PIirr\000MMX_CVTTP"
    "D2PIirm\000MMX_CVTTPD2PIirr\000MMX_CVTTPS2PIirm\000MMX_CVTTPS2PIirr\000"
    "MMX_EMMS\000MMX_MASKMOVQ\000MMX_MASKMOVQ64\000MMX_MOVD64from64rr\000MMX"
    "_MOVD64grr\000MMX_MOVD64mr\000MMX_MOVD64rm\000MMX_MOVD64rr\000MMX_MOVD6"
    "4rrv164\000MMX_MOVD64to64rr\000MMX_MOVDQ2Qrr\000MMX_MOVFR642Qrr\000MMX_"
    "MOVNTQmr\000MMX_MOVQ2DQrr\000MMX_MOVQ2FR64rr\000MMX_MOVQ64mr\000MMX_MOV"
    "Q64rm\000MMX_MOVQ64rr\000MMX_MOVZDI2PDIrm\000MMX_MOVZDI2PDIrr\000MMX_PA"
    "BSBrm64\000MMX_PABSBrr64\000MMX_PABSDrm64\000MMX_PABSDrr64\000MMX_PABSW"
    "rm64\000MMX_PABSWrr64\000MMX_PACKSSDWirm\000MMX_PACKSSDWirr\000MMX_PACK"
    "SSWBirm\000MMX_PACKSSWBirr\000MMX_PACKUSWBirm\000MMX_PACKUSWBirr\000MMX"
    "_PADDBirm\000MMX_PADDBirr\000MMX_PADDDirm\000MMX_PADDDirr\000MMX_PADDQi"
    "rm\000MMX_PADDQirr\000MMX_PADDSBirm\000MMX_PADDSBirr\000MMX_PADDSWirm\000"
    "MMX_PADDSWirr\000MMX_PADDUSBirm\000MMX_PADDUSBirr\000MMX_PADDUSWirm\000"
    "MMX_PADDUSWirr\000MMX_PADDWirm\000MMX_PADDWirr\000MMX_PALIGNR64irm\000M"
    "MX_PALIGNR64irr\000MMX_PANDNirm\000MMX_PANDNirr\000MMX_PANDirm\000MMX_P"
    "ANDirr\000MMX_PAVGBirm\000MMX_PAVGBirr\000MMX_PAVGWirm\000MMX_PAVGWirr\000"
    "MMX_PCMPEQBirm\000MMX_PCMPEQBirr\000MMX_PCMPEQDirm\000MMX_PCMPEQDirr\000"
    "MMX_PCMPEQWirm\000MMX_PCMPEQWirr\000MMX_PCMPGTBirm\000MMX_PCMPGTBirr\000"
    "MMX_PCMPGTDirm\000MMX_PCMPGTDirr\000MMX_PCMPGTWirm\000MMX_PCMPGTWirr\000"
    "MMX_PEXTRWirri\000MMX_PHADDSWrm64\000MMX_PHADDSWrr64\000MMX_PHADDWrm64\000"
    "MMX_PHADDWrr64\000MMX_PHADDrm64\000MMX_PHADDrr64\000MMX_PHSUBDrm64\000M"
    "MX_PHSUBDrr64\000MMX_PHSUBSWrm64\000MMX_PHSUBSWrr64\000MMX_PHSUBWrm64\000"
    "MMX_PHSUBWrr64\000MMX_PINSRWirmi\000MMX_PINSRWirri\000MMX_PMADDUBSWrm64"
    "\000MMX_PMADDUBSWrr64\000MMX_PMADDWDirm\000MMX_PMADDWDirr\000MMX_PMAXSW"
    "irm\000MMX_PMAXSWirr\000MMX_PMAXUBirm\000MMX_PMAXUBirr\000MMX_PMINSWirm"
    "\000MMX_PMINSWirr\000MMX_PMINUBirm\000MMX_PMINUBirr\000MMX_PMOVMSKBrr\000"
    "MMX_PMULHRSWrm64\000MMX_PMULHRSWrr64\000MMX_PMULHUWirm\000MMX_PMULHUWir"
    "r\000MMX_PMULHWirm\000MMX_PMULHWirr\000MMX_PMULLWirm\000MMX_PMULLWirr\000"
    "MMX_PMULUDQirm\000MMX_PMULUDQirr\000MMX_PORirm\000MMX_PORirr\000MMX_PSA"
    "DBWirm\000MMX_PSADBWirr\000MMX_PSHUFBrm64\000MMX_PSHUFBrr64\000MMX_PSHU"
    "FWmi\000MMX_PSHUFWri\000MMX_PSIGNBrm64\000MMX_PSIGNBrr64\000MMX_PSIGNDr"
    "m64\000MMX_PSIGNDrr64\000MMX_PSIGNWrm64\000MMX_PSIGNWrr64\000MMX_PSLLDr"
    "i\000MMX_PSLLDrm\000MMX_PSLLDrr\000MMX_PSLLQri\000MMX_PSLLQrm\000MMX_PS"
    "LLQrr\000MMX_PSLLWri\000MMX_PSLLWrm\000MMX_PSLLWrr\000MMX_PSRADri\000MM"
    "X_PSRADrm\000MMX_PSRADrr\000MMX_PSRAWri\000MMX_PSRAWrm\000MMX_PSRAWrr\000"
    "MMX_PSRLDri\000MMX_PSRLDrm\000MMX_PSRLDrr\000MMX_PSRLQri\000MMX_PSRLQrm"
    "\000MMX_PSRLQrr\000MMX_PSRLWri\000MMX_PSRLWrm\000MMX_PSRLWrr\000MMX_PSU"
    "BBirm\000MMX_PSUBBirr\000MMX_PSUBDirm\000MMX_PSUBDirr\000MMX_PSUBQirm\000"
    "MMX_PSUBQirr\000MMX_PSUBSBirm\000MMX_PSUBSBirr\000MMX_PSUBSWirm\000MMX_"
    "PSUBSWirr\000MMX_PSUBUSBirm\000MMX_PSUBUSBirr\000MMX_PSUBUSWirm\000MMX_"
    "PSUBUSWirr\000MMX_PSUBWirm\000MMX_PSUBWirr\000MMX_PUNPCKHBWirm\000MMX_P"
    "UNPCKHBWirr\000MMX_PUNPCKHDQirm\000MMX_PUNPCKHDQirr\000MMX_PUNPCKHWDirm"
    "\000MMX_PUNPCKHWDirr\000MMX_PUNPCKLBWirm\000MMX_PUNPCKLBWirr\000MMX_PUN"
    "PCKLDQirm\000MMX_PUNPCKLDQirr\000MMX_PUNPCKLWDirm\000MMX_PUNPCKLWDirr\000"
    "MMX_PXORirm\000MMX_PXORirr\000MONITOR\000MONITORrrr\000MOV16ao16\000MOV"
    "16mi\000MOV16mr\000MOV16ms\000MOV16o16a\000MOV16r0\000MOV16ri\000MOV16r"
    "m\000MOV16rr\000MOV16rr_REV\000MOV16rs\000MOV16sm\000MOV16sr\000MOV32ao"
    "32\000MOV32cr\000MOV32dr\000MOV32mi\000MOV32mr\000MOV32ms\000MOV32o32a\000"
    "MOV32r0\000MOV32rc\000MOV32rd\000MOV32ri\000MOV32rm\000MOV32rr\000MOV32"
    "rr_REV\000MOV32rs\000MOV32sm\000MOV32sr\000MOV64cr\000MOV64dr\000MOV64m"
    "i32\000MOV64mr\000MOV64ms\000MOV64r0\000MOV64rc\000MOV64rd\000MOV64ri\000"
    "MOV64ri32\000MOV64ri64i32\000MOV64rm\000MOV64rr\000MOV64rr_REV\000MOV64"
    "rs\000MOV64sm\000MOV64sr\000MOV64toPQIrr\000MOV64toSDrm\000MOV64toSDrr\000"
    "MOV8ao8\000MOV8mi\000MOV8mr\000MOV8mr_NOREX\000MOV8o8a\000MOV8r0\000MOV"
    "8ri\000MOV8rm\000MOV8rm_NOREX\000MOV8rr\000MOV8rr_NOREX\000MOV8rr_REV\000"
    "MOVAPDmr\000MOVAPDrm\000MOVAPDrr\000MOVAPSmr\000MOVAPSrm\000MOVAPSrr\000"
    "MOVDDUPrm\000MOVDDUPrr\000MOVDI2PDIrm\000MOVDI2PDIrr\000MOVDI2SSrm\000M"
    "OVDI2SSrr\000MOVDQAmr\000MOVDQArm\000MOVDQArr\000MOVDQUmr\000MOVDQUmr_I"
    "nt\000MOVDQUrm\000MOVDQUrm_Int\000MOVDQUrr\000MOVHLPSrr\000MOVHPDmr\000"
    "MOVHPDrm\000MOVHPSmr\000MOVHPSrm\000MOVLHPSrr\000MOVLPDmr\000MOVLPDrm\000"
    "MOVLPSmr\000MOVLPSrm\000MOVLQ128mr\000MOVMSKPDrr32\000MOVMSKPDrr64\000M"
    "OVMSKPSrr32\000MOVMSKPSrr64\000MOVNTDQArm\000MOVNTDQ_64mr\000MOVNTDQmr\000"
    "MOVNTDQmr_Int\000MOVNTI_64mr\000MOVNTImr\000MOVNTImr_Int\000MOVNTPDmr\000"
    "MOVNTPDmr_Int\000MOVNTPSmr\000MOVNTPSmr_Int\000MOVPC32r\000MOVPDI2DImr\000"
    "MOVPDI2DIrr\000MOVPQI2QImr\000MOVPQIto64rr\000MOVQI2PQIrm\000MOVQxrxr\000"
    "MOVSB\000MOVSD\000MOVSDmr\000MOVSDrm\000MOVSDrr\000MOVSDto64mr\000MOVSD"
    "to64rr\000MOVSHDUPrm\000MOVSHDUPrr\000MOVSLDUPrm\000MOVSLDUPrr\000MOVSQ"
    "\000MOVSS2DImr\000MOVSS2DIrr\000MOVSSmr\000MOVSSrm\000MOVSSrr\000MOVSW\000"
    "MOVSX16rm8\000MOVSX16rm8W\000MOVSX16rr8\000MOVSX16rr8W\000MOVSX32rm16\000"
    "MOVSX32rm8\000MOVSX32rr16\000MOVSX32rr8\000MOVSX64rm16\000MOVSX64rm32\000"
    "MOVSX64rm8\000MOVSX64rr16\000MOVSX64rr32\000MOVSX64rr8\000MOVUPDmr\000M"
    "OVUPDmr_Int\000MOVUPDrm\000MOVUPDrm_Int\000MOVUPDrr\000MOVUPSmr\000MOVU"
    "PSmr_Int\000MOVUPSrm\000MOVUPSrm_Int\000MOVUPSrr\000MOVZDI2PDIrm\000MOV"
    "ZDI2PDIrr\000MOVZPQILo2PQIrm\000MOVZPQILo2PQIrr\000MOVZQI2PQIrm\000MOVZ"
    "QI2PQIrr\000MOVZX16rm8\000MOVZX16rm8W\000MOVZX16rr8\000MOVZX16rr8W\000M"
    "OVZX32_NOREXrm8\000MOVZX32_NOREXrr8\000MOVZX32rm16\000MOVZX32rm8\000MOV"
    "ZX32rr16\000MOVZX32rr8\000MOVZX64rm16\000MOVZX64rm16_Q\000MOVZX64rm32\000"
    "MOVZX64rm8\000MOVZX64rm8_Q\000MOVZX64rr16\000MOVZX64rr16_Q\000MOVZX64rr"
    "32\000MOVZX64rr8\000MOVZX64rr8_Q\000MOV_Fp3232\000MOV_Fp3264\000MOV_Fp3"
    "280\000MOV_Fp6432\000MOV_Fp6464\000MOV_Fp6480\000MOV_Fp8032\000MOV_Fp80"
    "64\000MOV_Fp8080\000MPSADBWrmi\000MPSADBWrri\000MUL16m\000MUL16r\000MUL"
    "32m\000MUL32r\000MUL64m\000MUL64r\000MUL8m\000MUL8r\000MULPDrm\000MULPD"
    "rr\000MULPSrm\000MULPSrr\000MULSDrm\000MULSDrm_Int\000MULSDrr\000MULSDr"
    "r_Int\000MULSSrm\000MULSSrm_Int\000MULSSrr\000MULSSrr_Int\000MUL_F32m\000"
    "MUL_F64m\000MUL_FI16m\000MUL_FI32m\000MUL_FPrST0\000MUL_FST0r\000MUL_Fp"
    "32\000MUL_Fp32m\000MUL_Fp64\000MUL_Fp64m\000MUL_Fp64m32\000MUL_Fp80\000"
    "MUL_Fp80m32\000MUL_Fp80m64\000MUL_FpI16m32\000MUL_FpI16m64\000MUL_FpI16"
    "m80\000MUL_FpI32m32\000MUL_FpI32m64\000MUL_FpI32m80\000MUL_FrST0\000MWA"
    "IT\000MWAITrr\000NEG16m\000NEG16r\000NEG32m\000NEG32r\000NEG64m\000NEG6"
    "4r\000NEG8m\000NEG8r\000NOOP\000NOOPL\000NOOPW\000NOT16m\000NOT16r\000N"
    "OT32m\000NOT32r\000NOT64m\000NOT64r\000NOT8m\000NOT8r\000OR16i16\000OR1"
    "6mi\000OR16mi8\000OR16mr\000OR16ri\000OR16ri8\000OR16rm\000OR16rr\000OR"
    "16rr_REV\000OR32i32\000OR32mi\000OR32mi8\000OR32mr\000OR32mrLocked\000O"
    "R32ri\000OR32ri8\000OR32rm\000OR32rr\000OR32rr_REV\000OR64i32\000OR64mi"
    "32\000OR64mi8\000OR64mr\000OR64ri32\000OR64ri8\000OR64rm\000OR64rr\000O"
    "R64rr_REV\000OR8i8\000OR8mi\000OR8mr\000OR8ri\000OR8rm\000OR8rr\000OR8r"
    "r_REV\000ORPDrm\000ORPDrr\000ORPSrm\000ORPSrr\000OUT16ir\000OUT16rr\000"
    "OUT32ir\000OUT32rr\000OUT8ir\000OUT8rr\000OUTSB\000OUTSD\000OUTSW\000PA"
    "BSBrm128\000PABSBrr128\000PABSDrm128\000PABSDrr128\000PABSWrm128\000PAB"
    "SWrr128\000PACKSSDWrm\000PACKSSDWrr\000PACKSSWBrm\000PACKSSWBrr\000PACK"
    "USDWrm\000PACKUSDWrr\000PACKUSWBrm\000PACKUSWBrr\000PADDBrm\000PADDBrr\000"
    "PADDDrm\000PADDDrr\000PADDQrm\000PADDQrr\000PADDSBrm\000PADDSBrr\000PAD"
    "DSWrm\000PADDSWrr\000PADDUSBrm\000PADDUSBrr\000PADDUSWrm\000PADDUSWrr\000"
    "PADDWrm\000PADDWrr\000PALIGNR128rm\000PALIGNR128rr\000PANDNrm\000PANDNr"
    "r\000PANDrm\000PANDrr\000PAUSE\000PAVGBrm\000PAVGBrr\000PAVGUSBrm\000PA"
    "VGUSBrr\000PAVGWrm\000PAVGWrr\000PBLENDVBrm0\000PBLENDVBrr0\000PBLENDWr"
    "mi\000PBLENDWrri\000PCMPEQBrm\000PCMPEQBrr\000PCMPEQDrm\000PCMPEQDrr\000"
    "PCMPEQQrm\000PCMPEQQrr\000PCMPEQWrm\000PCMPEQWrr\000PCMPESTRIArm\000PCM"
    "PESTRIArr\000PCMPESTRICrm\000PCMPESTRICrr\000PCMPESTRIOrm\000PCMPESTRIO"
    "rr\000PCMPESTRISrm\000PCMPESTRISrr\000PCMPESTRIZrm\000PCMPESTRIZrr\000P"
    "CMPESTRIrm\000PCMPESTRIrr\000PCMPESTRM128MEM\000PCMPESTRM128REG\000PCMP"
    "ESTRM128rm\000PCMPESTRM128rr\000PCMPGTBrm\000PCMPGTBrr\000PCMPGTDrm\000"
    "PCMPGTDrr\000PCMPGTQrm\000PCMPGTQrr\000PCMPGTWrm\000PCMPGTWrr\000PCMPIS"
    "TRIArm\000PCMPISTRIArr\000PCMPISTRICrm\000PCMPISTRICrr\000PCMPISTRIOrm\000"
    "PCMPISTRIOrr\000PCMPISTRISrm\000PCMPISTRISrr\000PCMPISTRIZrm\000PCMPIST"
    "RIZrr\000PCMPISTRIrm\000PCMPISTRIrr\000PCMPISTRM128MEM\000PCMPISTRM128R"
    "EG\000PCMPISTRM128rm\000PCMPISTRM128rr\000PEXTRBmr\000PEXTRBrr\000PEXTR"
    "Dmr\000PEXTRDrr\000PEXTRQmr\000PEXTRQrr\000PEXTRWmr\000PEXTRWri\000PF2I"
    "Drm\000PF2IDrr\000PF2IWrm\000PF2IWrr\000PFACCrm\000PFACCrr\000PFADDrm\000"
    "PFADDrr\000PFCMPEQrm\000PFCMPEQrr\000PFCMPGErm\000PFCMPGErr\000PFCMPGTr"
    "m\000PFCMPGTrr\000PFMAXrm\000PFMAXrr\000PFMINrm\000PFMINrr\000PFMULrm\000"
    "PFMULrr\000PFNACCrm\000PFNACCrr\000PFPNACCrm\000PFPNACCrr\000PFRCPIT1rm"
    "\000PFRCPIT1rr\000PFRCPIT2rm\000PFRCPIT2rr\000PFRCPrm\000PFRCPrr\000PFR"
    "SQIT1rm\000PFRSQIT1rr\000PFRSQRTrm\000PFRSQRTrr\000PFSUBRrm\000PFSUBRrr"
    "\000PFSUBrm\000PFSUBrr\000PHADDDrm128\000PHADDDrr128\000PHADDSWrm128\000"
    "PHADDSWrr128\000PHADDWrm128\000PHADDWrr128\000PHMINPOSUWrm128\000PHMINP"
    "OSUWrr128\000PHSUBDrm128\000PHSUBDrr128\000PHSUBSWrm128\000PHSUBSWrr128"
    "\000PHSUBWrm128\000PHSUBWrr128\000PI2FDrm\000PI2FDrr\000PI2FWrm\000PI2F"
    "Wrr\000PINSRBrm\000PINSRBrr\000PINSRDrm\000PINSRDrr\000PINSRQrm\000PINS"
    "RQrr\000PINSRWrmi\000PINSRWrri\000PMADDUBSWrm128\000PMADDUBSWrr128\000P"
    "MADDWDrm\000PMADDWDrr\000PMAXSBrm\000PMAXSBrr\000PMAXSDrm\000PMAXSDrr\000"
    "PMAXSWrm\000PMAXSWrr\000PMAXUBrm\000PMAXUBrr\000PMAXUDrm\000PMAXUDrr\000"
    "PMAXUWrm\000PMAXUWrr\000PMINSBrm\000PMINSBrr\000PMINSDrm\000PMINSDrr\000"
    "PMINSWrm\000PMINSWrr\000PMINUBrm\000PMINUBrr\000PMINUDrm\000PMINUDrr\000"
    "PMINUWrm\000PMINUWrr\000PMOVMSKBrr\000PMOVSXBDrm\000PMOVSXBDrr\000PMOVS"
    "XBQrm\000PMOVSXBQrr\000PMOVSXBWrm\000PMOVSXBWrr\000PMOVSXDQrm\000PMOVSX"
    "DQrr\000PMOVSXWDrm\000PMOVSXWDrr\000PMOVSXWQrm\000PMOVSXWQrr\000PMOVZXB"
    "Drm\000PMOVZXBDrr\000PMOVZXBQrm\000PMOVZXBQrr\000PMOVZXBWrm\000PMOVZXBW"
    "rr\000PMOVZXDQrm\000PMOVZXDQrr\000PMOVZXWDrm\000PMOVZXWDrr\000PMOVZXWQr"
    "m\000PMOVZXWQrr\000PMULDQrm\000PMULDQrr\000PMULHRSWrm128\000PMULHRSWrr1"
    "28\000PMULHRWrm\000PMULHRWrr\000PMULHUWrm\000PMULHUWrr\000PMULHWrm\000P"
    "MULHWrr\000PMULLDrm\000PMULLDrr\000PMULLWrm\000PMULLWrr\000PMULUDQrm\000"
    "PMULUDQrr\000POP16r\000POP16rmm\000POP16rmr\000POP32r\000POP32rmm\000PO"
    "P32rmr\000POP64r\000POP64rmm\000POP64rmr\000POPA32\000POPCNT16rm\000POP"
    "CNT16rr\000POPCNT32rm\000POPCNT32rr\000POPCNT64rm\000POPCNT64rr\000POPD"
    "S16\000POPDS32\000POPES16\000POPES32\000POPF16\000POPF32\000POPF64\000P"
    "OPFS16\000POPFS32\000POPFS64\000POPGS16\000POPGS32\000POPGS64\000POPSS1"
    "6\000POPSS32\000PORrm\000PORrr\000PREFETCH\000PREFETCHNTA\000PREFETCHT0"
    "\000PREFETCHT1\000PREFETCHT2\000PREFETCHW\000PSADBWrm\000PSADBWrr\000PS"
    "HUFBrm128\000PSHUFBrr128\000PSHUFDmi\000PSHUFDri\000PSHUFHWmi\000PSHUFH"
    "Wri\000PSHUFLWmi\000PSHUFLWri\000PSIGNBrm128\000PSIGNBrr128\000PSIGNDrm"
    "128\000PSIGNDrr128\000PSIGNWrm128\000PSIGNWrr128\000PSLLDQri\000PSLLDri"
    "\000PSLLDrm\000PSLLDrr\000PSLLQri\000PSLLQrm\000PSLLQrr\000PSLLWri\000P"
    "SLLWrm\000PSLLWrr\000PSRADri\000PSRADrm\000PSRADrr\000PSRAWri\000PSRAWr"
    "m\000PSRAWrr\000PSRLDQri\000PSRLDri\000PSRLDrm\000PSRLDrr\000PSRLQri\000"
    "PSRLQrm\000PSRLQrr\000PSRLWri\000PSRLWrm\000PSRLWrr\000PSUBBrm\000PSUBB"
    "rr\000PSUBDrm\000PSUBDrr\000PSUBQrm\000PSUBQrr\000PSUBSBrm\000PSUBSBrr\000"
    "PSUBSWrm\000PSUBSWrr\000PSUBUSBrm\000PSUBUSBrr\000PSUBUSWrm\000PSUBUSWr"
    "r\000PSUBWrm\000PSUBWrr\000PSWAPDrm\000PSWAPDrr\000PTESTrm\000PTESTrr\000"
    "PUNPCKHBWrm\000PUNPCKHBWrr\000PUNPCKHDQrm\000PUNPCKHDQrr\000PUNPCKHQDQr"
    "m\000PUNPCKHQDQrr\000PUNPCKHWDrm\000PUNPCKHWDrr\000PUNPCKLBWrm\000PUNPC"
    "KLBWrr\000PUNPCKLDQrm\000PUNPCKLDQrr\000PUNPCKLQDQrm\000PUNPCKLQDQrr\000"
    "PUNPCKLWDrm\000PUNPCKLWDrr\000PUSH16r\000PUSH16rmm\000PUSH16rmr\000PUSH"
    "32r\000PUSH32rmm\000PUSH32rmr\000PUSH64i16\000PUSH64i32\000PUSH64i8\000"
    "PUSH64r\000PUSH64rmm\000PUSH64rmr\000PUSHA32\000PUSHCS16\000PUSHCS32\000"
    "PUSHDS16\000PUSHDS32\000PUSHES16\000PUSHES32\000PUSHF16\000PUSHF32\000P"
    "USHF64\000PUSHFS16\000PUSHFS32\000PUSHFS64\000PUSHGS16\000PUSHGS32\000P"
    "USHGS64\000PUSHSS16\000PUSHSS32\000PUSHi16\000PUSHi32\000PUSHi8\000PXOR"
    "rm\000PXORrr\000RCL16m1\000RCL16mCL\000RCL16mi\000RCL16r1\000RCL16rCL\000"
    "RCL16ri\000RCL32m1\000RCL32mCL\000RCL32mi\000RCL32r1\000RCL32rCL\000RCL"
    "32ri\000RCL64m1\000RCL64mCL\000RCL64mi\000RCL64r1\000RCL64rCL\000RCL64r"
    "i\000RCL8m1\000RCL8mCL\000RCL8mi\000RCL8r1\000RCL8rCL\000RCL8ri\000RCPP"
    "Sm\000RCPPSm_Int\000RCPPSr\000RCPPSr_Int\000RCPSSm\000RCPSSm_Int\000RCP"
    "SSr\000RCPSSr_Int\000RCR16m1\000RCR16mCL\000RCR16mi\000RCR16r1\000RCR16"
    "rCL\000RCR16ri\000RCR32m1\000RCR32mCL\000RCR32mi\000RCR32r1\000RCR32rCL"
    "\000RCR32ri\000RCR64m1\000RCR64mCL\000RCR64mi\000RCR64r1\000RCR64rCL\000"
    "RCR64ri\000RCR8m1\000RCR8mCL\000RCR8mi\000RCR8r1\000RCR8rCL\000RCR8ri\000"
    "RDMSR\000RDPMC\000RDTSC\000RDTSCP\000REPNE_PREFIX\000REP_MOVSB\000REP_M"
    "OVSD\000REP_MOVSQ\000REP_MOVSW\000REP_PREFIX\000REP_STOSB\000REP_STOSD\000"
    "REP_STOSQ\000REP_STOSW\000RET\000RETI\000RETIW\000REX64_PREFIX\000ROL16"
    "m1\000ROL16mCL\000ROL16mi\000ROL16r1\000ROL16rCL\000ROL16ri\000ROL32m1\000"
    "ROL32mCL\000ROL32mi\000ROL32r1\000ROL32rCL\000ROL32ri\000ROL64m1\000ROL"
    "64mCL\000ROL64mi\000ROL64r1\000ROL64rCL\000ROL64ri\000ROL8m1\000ROL8mCL"
    "\000ROL8mi\000ROL8r1\000ROL8rCL\000ROL8ri\000ROR16m1\000ROR16mCL\000ROR"
    "16mi\000ROR16r1\000ROR16rCL\000ROR16ri\000ROR32m1\000ROR32mCL\000ROR32m"
    "i\000ROR32r1\000ROR32rCL\000ROR32ri\000ROR64m1\000ROR64mCL\000ROR64mi\000"
    "ROR64r1\000ROR64rCL\000ROR64ri\000ROR8m1\000ROR8mCL\000ROR8mi\000ROR8r1"
    "\000ROR8rCL\000ROR8ri\000ROUNDPDm\000ROUNDPDr\000ROUNDPSm\000ROUNDPSr\000"
    "ROUNDSDm\000ROUNDSDr\000ROUNDSSm\000ROUNDSSr\000RSM\000RSQRTPSm\000RSQR"
    "TPSm_Int\000RSQRTPSr\000RSQRTPSr_Int\000RSQRTSSm\000RSQRTSSm_Int\000RSQ"
    "RTSSr\000RSQRTSSr_Int\000SAHF\000SAR16m1\000SAR16mCL\000SAR16mi\000SAR1"
    "6r1\000SAR16rCL\000SAR16ri\000SAR32m1\000SAR32mCL\000SAR32mi\000SAR32r1"
    "\000SAR32rCL\000SAR32ri\000SAR64m1\000SAR64mCL\000SAR64mi\000SAR64r1\000"
    "SAR64rCL\000SAR64ri\000SAR8m1\000SAR8mCL\000SAR8mi\000SAR8r1\000SAR8rCL"
    "\000SAR8ri\000SBB16i16\000SBB16mi\000SBB16mi8\000SBB16mr\000SBB16ri\000"
    "SBB16ri8\000SBB16rm\000SBB16rr\000SBB16rr_REV\000SBB32i32\000SBB32mi\000"
    "SBB32mi8\000SBB32mr\000SBB32ri\000SBB32ri8\000SBB32rm\000SBB32rr\000SBB"
    "32rr_REV\000SBB64i32\000SBB64mi32\000SBB64mi8\000SBB64mr\000SBB64ri32\000"
    "SBB64ri8\000SBB64rm\000SBB64rr\000SBB64rr_REV\000SBB8i8\000SBB8mi\000SB"
    "B8mr\000SBB8ri\000SBB8rm\000SBB8rr\000SBB8rr_REV\000SCAS16\000SCAS32\000"
    "SCAS64\000SCAS8\000SETAEm\000SETAEr\000SETAm\000SETAr\000SETBEm\000SETB"
    "Er\000SETB_C16r\000SETB_C32r\000SETB_C64r\000SETB_C8r\000SETBm\000SETBr"
    "\000SETEm\000SETEr\000SETGEm\000SETGEr\000SETGm\000SETGr\000SETLEm\000S"
    "ETLEr\000SETLm\000SETLr\000SETNEm\000SETNEr\000SETNOm\000SETNOr\000SETN"
    "Pm\000SETNPr\000SETNSm\000SETNSr\000SETOm\000SETOr\000SETPm\000SETPr\000"
    "SETSm\000SETSr\000SFENCE\000SGDT16m\000SGDTm\000SHL16m1\000SHL16mCL\000"
    "SHL16mi\000SHL16r1\000SHL16rCL\000SHL16ri\000SHL32m1\000SHL32mCL\000SHL"
    "32mi\000SHL32r1\000SHL32rCL\000SHL32ri\000SHL64m1\000SHL64mCL\000SHL64m"
    "i\000SHL64r1\000SHL64rCL\000SHL64ri\000SHL8m1\000SHL8mCL\000SHL8mi\000S"
    "HL8r1\000SHL8rCL\000SHL8ri\000SHLD16mrCL\000SHLD16mri8\000SHLD16rrCL\000"
    "SHLD16rri8\000SHLD32mrCL\000SHLD32mri8\000SHLD32rrCL\000SHLD32rri8\000S"
    "HLD64mrCL\000SHLD64mri8\000SHLD64rrCL\000SHLD64rri8\000SHR16m1\000SHR16"
    "mCL\000SHR16mi\000SHR16r1\000SHR16rCL\000SHR16ri\000SHR32m1\000SHR32mCL"
    "\000SHR32mi\000SHR32r1\000SHR32rCL\000SHR32ri\000SHR64m1\000SHR64mCL\000"
    "SHR64mi\000SHR64r1\000SHR64rCL\000SHR64ri\000SHR8m1\000SHR8mCL\000SHR8m"
    "i\000SHR8r1\000SHR8rCL\000SHR8ri\000SHRD16mrCL\000SHRD16mri8\000SHRD16r"
    "rCL\000SHRD16rri8\000SHRD32mrCL\000SHRD32mri8\000SHRD32rrCL\000SHRD32rr"
    "i8\000SHRD64mrCL\000SHRD64mri8\000SHRD64rrCL\000SHRD64rri8\000SHUFPDrmi"
    "\000SHUFPDrri\000SHUFPSrmi\000SHUFPSrri\000SIDT16m\000SIDTm\000SIN_F\000"
    "SIN_Fp32\000SIN_Fp64\000SIN_Fp80\000SLDT16m\000SLDT16r\000SLDT32r\000SL"
    "DT64m\000SLDT64r\000SMSW16m\000SMSW16r\000SMSW32r\000SMSW64r\000SQRTPDm"
    "\000SQRTPDm_Int\000SQRTPDr\000SQRTPDr_Int\000SQRTPSm\000SQRTPSm_Int\000"
    "SQRTPSr\000SQRTPSr_Int\000SQRTSDm\000SQRTSDm_Int\000SQRTSDr\000SQRTSDr_"
    "Int\000SQRTSSm\000SQRTSSm_Int\000SQRTSSr\000SQRTSSr_Int\000SQRT_F\000SQ"
    "RT_Fp32\000SQRT_Fp64\000SQRT_Fp80\000SS_PREFIX\000STC\000STD\000STI\000"
    "STMXCSR\000STOSB\000STOSD\000STOSQ\000STOSW\000STR16r\000STR32r\000STR6"
    "4r\000STRm\000ST_F32m\000ST_F64m\000ST_FP32m\000ST_FP64m\000ST_FP80m\000"
    "ST_FPrr\000ST_Fp32m\000ST_Fp64m\000ST_Fp64m32\000ST_Fp80m32\000ST_Fp80m"
    "64\000ST_FpP32m\000ST_FpP64m\000ST_FpP64m32\000ST_FpP80m\000ST_FpP80m32"
    "\000ST_FpP80m64\000ST_Frr\000SUB16i16\000SUB16mi\000SUB16mi8\000SUB16mr"
    "\000SUB16ri\000SUB16ri8\000SUB16rm\000SUB16rr\000SUB16rr_REV\000SUB32i3"
    "2\000SUB32mi\000SUB32mi8\000SUB32mr\000SUB32ri\000SUB32ri8\000SUB32rm\000"
    "SUB32rr\000SUB32rr_REV\000SUB64i32\000SUB64mi32\000SUB64mi8\000SUB64mr\000"
    "SUB64ri32\000SUB64ri8\000SUB64rm\000SUB64rr\000SUB64rr_REV\000SUB8i8\000"
    "SUB8mi\000SUB8mr\000SUB8ri\000SUB8rm\000SUB8rr\000SUB8rr_REV\000SUBPDrm"
    "\000SUBPDrr\000SUBPSrm\000SUBPSrr\000SUBR_F32m\000SUBR_F64m\000SUBR_FI1"
    "6m\000SUBR_FI32m\000SUBR_FPrST0\000SUBR_FST0r\000SUBR_Fp32m\000SUBR_Fp6"
    "4m\000SUBR_Fp64m32\000SUBR_Fp80m32\000SUBR_Fp80m64\000SUBR_FpI16m32\000"
    "SUBR_FpI16m64\000SUBR_FpI16m80\000SUBR_FpI32m32\000SUBR_FpI32m64\000SUB"
    "R_FpI32m80\000SUBR_FrST0\000SUBSDrm\000SUBSDrm_Int\000SUBSDrr\000SUBSDr"
    "r_Int\000SUBSSrm\000SUBSSrm_Int\000SUBSSrr\000SUBSSrr_Int\000SUB_F32m\000"
    "SUB_F64m\000SUB_FI16m\000SUB_FI32m\000SUB_FPrST0\000SUB_FST0r\000SUB_Fp"
    "32\000SUB_Fp32m\000SUB_Fp64\000SUB_Fp64m\000SUB_Fp64m32\000SUB_Fp80\000"
    "SUB_Fp80m32\000SUB_Fp80m64\000SUB_FpI16m32\000SUB_FpI16m64\000SUB_FpI16"
    "m80\000SUB_FpI32m32\000SUB_FpI32m64\000SUB_FpI32m80\000SUB_FrST0\000SWA"
    "PGS\000SYSCALL\000SYSENTER\000SYSEXIT\000SYSEXIT64\000SYSRETL\000SYSRET"
    "Q\000TAILJMPd\000TAILJMPd64\000TAILJMPm\000TAILJMPm64\000TAILJMPr\000TA"
    "ILJMPr64\000TCRETURNdi\000TCRETURNdi64\000TCRETURNmi\000TCRETURNmi64\000"
    "TCRETURNri\000TCRETURNri64\000TEST16i16\000TEST16mi\000TEST16ri\000TEST"
    "16rm\000TEST16rr\000TEST32i32\000TEST32mi\000TEST32ri\000TEST32rm\000TE"
    "ST32rr\000TEST64i32\000TEST64mi32\000TEST64ri32\000TEST64rm\000TEST64rr"
    "\000TEST8i8\000TEST8mi\000TEST8ri\000TEST8rm\000TEST8rr\000TLSCall_32\000"
    "TLSCall_64\000TLS_addr32\000TLS_addr64\000TRAP\000TST_F\000TST_Fp32\000"
    "TST_Fp64\000TST_Fp80\000UCOMISDrm\000UCOMISDrr\000UCOMISSrm\000UCOMISSr"
    "r\000UCOM_FIPr\000UCOM_FIr\000UCOM_FPPr\000UCOM_FPr\000UCOM_FpIr32\000U"
    "COM_FpIr64\000UCOM_FpIr80\000UCOM_Fpr32\000UCOM_Fpr64\000UCOM_Fpr80\000"
    "UCOM_Fr\000UD2B\000UNPCKHPDrm\000UNPCKHPDrr\000UNPCKHPSrm\000UNPCKHPSrr"
    "\000UNPCKLPDrm\000UNPCKLPDrr\000UNPCKLPSrm\000UNPCKLPSrr\000VAARG_64\000"
    "VADDPDYrm\000VADDPDYrr\000VADDPDrm\000VADDPDrr\000VADDPSYrm\000VADDPSYr"
    "r\000VADDPSrm\000VADDPSrr\000VADDSDrm\000VADDSDrm_Int\000VADDSDrr\000VA"
    "DDSDrr_Int\000VADDSSrm\000VADDSSrm_Int\000VADDSSrr\000VADDSSrr_Int\000V"
    "ADDSUBPDYrm\000VADDSUBPDYrr\000VADDSUBPDrm\000VADDSUBPDrr\000VADDSUBPSY"
    "rm\000VADDSUBPSYrr\000VADDSUBPSrm\000VADDSUBPSrr\000VAESDECLASTrm\000VA"
    "ESDECLASTrr\000VAESDECrm\000VAESDECrr\000VAESENCLASTrm\000VAESENCLASTrr"
    "\000VAESENCrm\000VAESENCrr\000VAESIMCrm\000VAESIMCrr\000VAESKEYGENASSIS"
    "T128rm\000VAESKEYGENASSIST128rr\000VANDNPDYrm\000VANDNPDYrr\000VANDNPDr"
    "m\000VANDNPDrr\000VANDNPSYrm\000VANDNPSYrr\000VANDNPSrm\000VANDNPSrr\000"
    "VANDPDYrm\000VANDPDYrr\000VANDPDrm\000VANDPDrr\000VANDPSYrm\000VANDPSYr"
    "r\000VANDPSrm\000VANDPSrr\000VASTART_SAVE_XMM_REGS\000VBLENDPDYrmi\000V"
    "BLENDPDYrri\000VBLENDPDrmi\000VBLENDPDrri\000VBLENDPSYrmi\000VBLENDPSYr"
    "ri\000VBLENDPSrmi\000VBLENDPSrri\000VBLENDVPDYrm\000VBLENDVPDYrr\000VBL"
    "ENDVPDrm\000VBLENDVPDrr\000VBLENDVPSYrm\000VBLENDVPSYrr\000VBLENDVPSrm\000"
    "VBLENDVPSrr\000VBROADCASTF128\000VBROADCASTSD\000VBROADCASTSS\000VBROAD"
    "CASTSSY\000VCMPPDYrmi\000VCMPPDYrmi_alt\000VCMPPDYrri\000VCMPPDYrri_alt"
    "\000VCMPPDrmi\000VCMPPDrmi_alt\000VCMPPDrri\000VCMPPDrri_alt\000VCMPPSY"
    "rmi\000VCMPPSYrmi_alt\000VCMPPSYrri\000VCMPPSYrri_alt\000VCMPPSrmi\000V"
    "CMPPSrmi_alt\000VCMPPSrri\000VCMPPSrri_alt\000VCMPSDrm\000VCMPSDrm_alt\000"
    "VCMPSDrr\000VCMPSDrr_alt\000VCMPSSrm\000VCMPSSrm_alt\000VCMPSSrr\000VCM"
    "PSSrr_alt\000VCOMISDrm\000VCOMISDrr\000VCOMISSrm\000VCOMISSrr\000VCVTDQ"
    "2PDYrm\000VCVTDQ2PDYrr\000VCVTDQ2PDrm\000VCVTDQ2PDrr\000VCVTDQ2PSYrm\000"
    "VCVTDQ2PSYrr\000VCVTDQ2PSrm\000VCVTDQ2PSrr\000VCVTPD2DQXrYr\000VCVTPD2D"
    "QXrm\000VCVTPD2DQXrr\000VCVTPD2DQYrm\000VCVTPD2DQYrr\000VCVTPD2DQrr\000"
    "VCVTPD2PSXrYr\000VCVTPD2PSXrm\000VCVTPD2PSXrr\000VCVTPD2PSYrm\000VCVTPD"
    "2PSYrr\000VCVTPD2PSrr\000VCVTPS2DQYrm\000VCVTPS2DQYrr\000VCVTPS2DQrm\000"
    "VCVTPS2DQrr\000VCVTPS2PDYrm\000VCVTPS2PDYrr\000VCVTPS2PDrm\000VCVTPS2PD"
    "rr\000VCVTSD2SI64rm\000VCVTSD2SI64rr\000VCVTSD2SI_altrm\000VCVTSD2SI_al"
    "trr\000VCVTSD2SSrm\000VCVTSD2SSrr\000VCVTSI2SD64rm\000VCVTSI2SD64rr\000"
    "VCVTSI2SDLrm\000VCVTSI2SDLrr\000VCVTSI2SDrm\000VCVTSI2SDrr\000VCVTSI2SS"
    "64rm\000VCVTSI2SS64rr\000VCVTSI2SSrm\000VCVTSI2SSrr\000VCVTSS2SDrm\000V"
    "CVTSS2SDrr\000VCVTSS2SI64rm\000VCVTSS2SI64rr\000VCVTSS2SIrm\000VCVTSS2S"
    "Irr\000VCVTTPD2DQXrYr\000VCVTTPD2DQXrm\000VCVTTPD2DQXrr\000VCVTTPD2DQYr"
    "m\000VCVTTPD2DQYrr\000VCVTTPD2DQrr\000VCVTTPS2DQYrm\000VCVTTPS2DQYrr\000"
    "VCVTTPS2DQrm\000VCVTTPS2DQrr\000VCVTTSD2SI64rm\000VCVTTSD2SI64rr\000VCV"
    "TTSD2SIrm\000VCVTTSD2SIrr\000VCVTTSS2SI64rm\000VCVTTSS2SI64rr\000VCVTTS"
    "S2SIrm\000VCVTTSS2SIrr\000VDIVPDYrm\000VDIVPDYrr\000VDIVPDrm\000VDIVPDr"
    "r\000VDIVPSYrm\000VDIVPSYrr\000VDIVPSrm\000VDIVPSrr\000VDIVSDrm\000VDIV"
    "SDrm_Int\000VDIVSDrr\000VDIVSDrr_Int\000VDIVSSrm\000VDIVSSrm_Int\000VDI"
    "VSSrr\000VDIVSSrr_Int\000VDPPDrmi\000VDPPDrri\000VDPPSYrmi\000VDPPSYrri"
    "\000VDPPSrmi\000VDPPSrri\000VERRm\000VERRr\000VERWm\000VERWr\000VEXTRAC"
    "TF128mr\000VEXTRACTF128rr\000VEXTRACTPSmr\000VEXTRACTPSrr\000VEXTRACTPS"
    "rr64\000VFMADDPDr132m\000VFMADDPDr132mY\000VFMADDPDr132r\000VFMADDPDr13"
    "2rY\000VFMADDPDr213m\000VFMADDPDr213mY\000VFMADDPDr213r\000VFMADDPDr213"
    "rY\000VFMADDPDr231m\000VFMADDPDr231mY\000VFMADDPDr231r\000VFMADDPDr231r"
    "Y\000VFMADDPSr132m\000VFMADDPSr132mY\000VFMADDPSr132r\000VFMADDPSr132rY"
    "\000VFMADDPSr213m\000VFMADDPSr213mY\000VFMADDPSr213r\000VFMADDPSr213rY\000"
    "VFMADDPSr231m\000VFMADDPSr231mY\000VFMADDPSr231r\000VFMADDPSr231rY\000V"
    "FMADDSUBPDr132m\000VFMADDSUBPDr132mY\000VFMADDSUBPDr132r\000VFMADDSUBPD"
    "r132rY\000VFMADDSUBPDr213m\000VFMADDSUBPDr213mY\000VFMADDSUBPDr213r\000"
    "VFMADDSUBPDr213rY\000VFMADDSUBPDr231m\000VFMADDSUBPDr231mY\000VFMADDSUB"
    "PDr231r\000VFMADDSUBPDr231rY\000VFMADDSUBPSr132m\000VFMADDSUBPSr132mY\000"
    "VFMADDSUBPSr132r\000VFMADDSUBPSr132rY\000VFMADDSUBPSr213m\000VFMADDSUBP"
    "Sr213mY\000VFMADDSUBPSr213r\000VFMADDSUBPSr213rY\000VFMADDSUBPSr231m\000"
    "VFMADDSUBPSr231mY\000VFMADDSUBPSr231r\000VFMADDSUBPSr231rY\000VFMSUBADD"
    "PDr132m\000VFMSUBADDPDr132mY\000VFMSUBADDPDr132r\000VFMSUBADDPDr132rY\000"
    "VFMSUBADDPDr213m\000VFMSUBADDPDr213mY\000VFMSUBADDPDr213r\000VFMSUBADDP"
    "Dr213rY\000VFMSUBADDPDr231m\000VFMSUBADDPDr231mY\000VFMSUBADDPDr231r\000"
    "VFMSUBADDPDr231rY\000VFMSUBADDPSr132m\000VFMSUBADDPSr132mY\000VFMSUBADD"
    "PSr132r\000VFMSUBADDPSr132rY\000VFMSUBADDPSr213m\000VFMSUBADDPSr213mY\000"
    "VFMSUBADDPSr213r\000VFMSUBADDPSr213rY\000VFMSUBADDPSr231m\000VFMSUBADDP"
    "Sr231mY\000VFMSUBADDPSr231r\000VFMSUBADDPSr231rY\000VFMSUBPDr132m\000VF"
    "MSUBPDr132mY\000VFMSUBPDr132r\000VFMSUBPDr132rY\000VFMSUBPDr213m\000VFM"
    "SUBPDr213mY\000VFMSUBPDr213r\000VFMSUBPDr213rY\000VFMSUBPDr231m\000VFMS"
    "UBPDr231mY\000VFMSUBPDr231r\000VFMSUBPDr231rY\000VFMSUBPSr132m\000VFMSU"
    "BPSr132mY\000VFMSUBPSr132r\000VFMSUBPSr132rY\000VFMSUBPSr213m\000VFMSUB"
    "PSr213mY\000VFMSUBPSr213r\000VFMSUBPSr213rY\000VFMSUBPSr231m\000VFMSUBP"
    "Sr231mY\000VFMSUBPSr231r\000VFMSUBPSr231rY\000VFNMADDPDr132m\000VFNMADD"
    "PDr132mY\000VFNMADDPDr132r\000VFNMADDPDr132rY\000VFNMADDPDr213m\000VFNM"
    "ADDPDr213mY\000VFNMADDPDr213r\000VFNMADDPDr213rY\000VFNMADDPDr231m\000V"
    "FNMADDPDr231mY\000VFNMADDPDr231r\000VFNMADDPDr231rY\000VFNMADDPSr132m\000"
    "VFNMADDPSr132mY\000VFNMADDPSr132r\000VFNMADDPSr132rY\000VFNMADDPSr213m\000"
    "VFNMADDPSr213mY\000VFNMADDPSr213r\000VFNMADDPSr213rY\000VFNMADDPSr231m\000"
    "VFNMADDPSr231mY\000VFNMADDPSr231r\000VFNMADDPSr231rY\000VFNMSUBPDr132m\000"
    "VFNMSUBPDr132mY\000VFNMSUBPDr132r\000VFNMSUBPDr132rY\000VFNMSUBPDr213m\000"
    "VFNMSUBPDr213mY\000VFNMSUBPDr213r\000VFNMSUBPDr213rY\000VFNMSUBPDr231m\000"
    "VFNMSUBPDr231mY\000VFNMSUBPDr231r\000VFNMSUBPDr231rY\000VFNMSUBPSr132m\000"
    "VFNMSUBPSr132mY\000VFNMSUBPSr132r\000VFNMSUBPSr132rY\000VFNMSUBPSr213m\000"
    "VFNMSUBPSr213mY\000VFNMSUBPSr213r\000VFNMSUBPSr213rY\000VFNMSUBPSr231m\000"
    "VFNMSUBPSr231mY\000VFNMSUBPSr231r\000VFNMSUBPSr231rY\000VFsANDNPDrm\000"
    "VFsANDNPDrr\000VFsANDNPSrm\000VFsANDNPSrr\000VFsANDPDrm\000VFsANDPDrr\000"
    "VFsANDPSrm\000VFsANDPSrr\000VFsFLD0SD\000VFsFLD0SS\000VFsORPDrm\000VFsO"
    "RPDrr\000VFsORPSrm\000VFsORPSrr\000VFsXORPDrm\000VFsXORPDrr\000VFsXORPS"
    "rm\000VFsXORPSrr\000VHADDPDYrm\000VHADDPDYrr\000VHADDPDrm\000VHADDPDrr\000"
    "VHADDPSYrm\000VHADDPSYrr\000VHADDPSrm\000VHADDPSrr\000VHSUBPDYrm\000VHS"
    "UBPDYrr\000VHSUBPDrm\000VHSUBPDrr\000VHSUBPSYrm\000VHSUBPSYrr\000VHSUBP"
    "Srm\000VHSUBPSrr\000VINSERTF128rm\000VINSERTF128rr\000VINSERTPSrm\000VI"
    "NSERTPSrr\000VLDDQUYrm\000VLDDQUrm\000VLDMXCSR\000VMASKMOVDQU\000VMASKM"
    "OVDQU64\000VMASKMOVPDYmr\000VMASKMOVPDYrm\000VMASKMOVPDmr\000VMASKMOVPD"
    "rm\000VMASKMOVPSYmr\000VMASKMOVPSYrm\000VMASKMOVPSmr\000VMASKMOVPSrm\000"
    "VMAXPDYrm\000VMAXPDYrm_Int\000VMAXPDYrr\000VMAXPDYrr_Int\000VMAXPDrm\000"
    "VMAXPDrm_Int\000VMAXPDrr\000VMAXPDrr_Int\000VMAXPSYrm\000VMAXPSYrm_Int\000"
    "VMAXPSYrr\000VMAXPSYrr_Int\000VMAXPSrm\000VMAXPSrm_Int\000VMAXPSrr\000V"
    "MAXPSrr_Int\000VMAXSDrm\000VMAXSDrm_Int\000VMAXSDrr\000VMAXSDrr_Int\000"
    "VMAXSSrm\000VMAXSSrm_Int\000VMAXSSrr\000VMAXSSrr_Int\000VMCALL\000VMCLE"
    "ARm\000VMINPDYrm\000VMINPDYrm_Int\000VMINPDYrr\000VMINPDYrr_Int\000VMIN"
    "PDrm\000VMINPDrm_Int\000VMINPDrr\000VMINPDrr_Int\000VMINPSYrm\000VMINPS"
    "Yrm_Int\000VMINPSYrr\000VMINPSYrr_Int\000VMINPSrm\000VMINPSrm_Int\000VM"
    "INPSrr\000VMINPSrr_Int\000VMINSDrm\000VMINSDrm_Int\000VMINSDrr\000VMINS"
    "Drr_Int\000VMINSSrm\000VMINSSrm_Int\000VMINSSrr\000VMINSSrr_Int\000VMLA"
    "UNCH\000VMOVAPDYmr\000VMOVAPDYrm\000VMOVAPDYrr\000VMOVAPDmr\000VMOVAPDr"
    "m\000VMOVAPDrr\000VMOVAPSYmr\000VMOVAPSYrm\000VMOVAPSYrr\000VMOVAPSmr\000"
    "VMOVAPSrm\000VMOVAPSrr\000VMOVDDUPYrm\000VMOVDDUPYrr\000VMOVDDUPrm\000V"
    "MOVDDUPrr\000VMOVDI2PDIrm\000VMOVDI2PDIrr\000VMOVDI2SSrm\000VMOVDI2SSrr"
    "\000VMOVDQAYmr\000VMOVDQAYrm\000VMOVDQAYrr\000VMOVDQAmr\000VMOVDQArm\000"
    "VMOVDQArr\000VMOVDQUYmr\000VMOVDQUYrm\000VMOVDQUYrr\000VMOVDQUmr\000VMO"
    "VDQUmr_Int\000VMOVDQUrm\000VMOVDQUrm_Int\000VMOVDQUrr\000VMOVHLPSrr\000"
    "VMOVHPDmr\000VMOVHPDrm\000VMOVHPSmr\000VMOVHPSrm\000VMOVLHPSrr\000VMOVL"
    "PDmr\000VMOVLPDrm\000VMOVLPSmr\000VMOVLPSrm\000VMOVLQ128mr\000VMOVMSKPD"
    "Yr64r\000VMOVMSKPDYrr32\000VMOVMSKPDYrr64\000VMOVMSKPDr64r\000VMOVMSKPD"
    "rr32\000VMOVMSKPDrr64\000VMOVMSKPSYr64r\000VMOVMSKPSYrr32\000VMOVMSKPSY"
    "rr64\000VMOVMSKPSr64r\000VMOVMSKPSrr32\000VMOVMSKPSrr64\000VMOVNTDQArm\000"
    "VMOVNTDQY_64mr\000VMOVNTDQYmr\000VMOVNTDQ_64mr\000VMOVNTDQmr\000VMOVNTD"
    "Qmr_Int\000VMOVNTPDYmr\000VMOVNTPDmr\000VMOVNTPDmr_Int\000VMOVNTPSYmr\000"
    "VMOVNTPSmr\000VMOVNTPSmr_Int\000VMOVPDI2DImr\000VMOVPDI2DIrr\000VMOVPQI"
    "2QImr\000VMOVQI2PQIrm\000VMOVQd64rr\000VMOVQd64rr_alt\000VMOVQs64rr\000"
    "VMOVQxrxr\000VMOVSDmr\000VMOVSDrm\000VMOVSDrr\000VMOVSHDUPYrm\000VMOVSH"
    "DUPYrr\000VMOVSHDUPrm\000VMOVSHDUPrr\000VMOVSLDUPYrm\000VMOVSLDUPYrr\000"
    "VMOVSLDUPrm\000VMOVSLDUPrr\000VMOVSS2DImr\000VMOVSS2DIrr\000VMOVSSmr\000"
    "VMOVSSrm\000VMOVSSrr\000VMOVUPDYmr\000VMOVUPDYrm\000VMOVUPDYrr\000VMOVU"
    "PDmr\000VMOVUPDmr_Int\000VMOVUPDrm\000VMOVUPDrm_Int\000VMOVUPDrr\000VMO"
    "VUPSYmr\000VMOVUPSYrm\000VMOVUPSYrr\000VMOVUPSmr\000VMOVUPSmr_Int\000VM"
    "OVUPSrm\000VMOVUPSrm_Int\000VMOVUPSrr\000VMOVZDI2PDIrm\000VMOVZDI2PDIrr"
    "\000VMOVZPQILo2PQIrm\000VMOVZPQILo2PQIrr\000VMOVZQI2PQIrm\000VMOVZQI2PQ"
    "Irr\000VMPSADBWrmi\000VMPSADBWrri\000VMPTRLDm\000VMPTRSTm\000VMREAD32rm"
    "\000VMREAD32rr\000VMREAD64rm\000VMREAD64rr\000VMRESUME\000VMULPDYrm\000"
    "VMULPDYrr\000VMULPDrm\000VMULPDrr\000VMULPSYrm\000VMULPSYrr\000VMULPSrm"
    "\000VMULPSrr\000VMULSDrm\000VMULSDrm_Int\000VMULSDrr\000VMULSDrr_Int\000"
    "VMULSSrm\000VMULSSrm_Int\000VMULSSrr\000VMULSSrr_Int\000VMWRITE32rm\000"
    "VMWRITE32rr\000VMWRITE64rm\000VMWRITE64rr\000VMXOFF\000VMXON\000VORPDYr"
    "m\000VORPDYrr\000VORPDrm\000VORPDrr\000VORPSYrm\000VORPSYrr\000VORPSrm\000"
    "VORPSrr\000VPABSBrm128\000VPABSBrr128\000VPABSDrm128\000VPABSDrr128\000"
    "VPABSWrm128\000VPABSWrr128\000VPACKSSDWrm\000VPACKSSDWrr\000VPACKSSWBrm"
    "\000VPACKSSWBrr\000VPACKUSDWrm\000VPACKUSDWrr\000VPACKUSWBrm\000VPACKUS"
    "WBrr\000VPADDBrm\000VPADDBrr\000VPADDDrm\000VPADDDrr\000VPADDQrm\000VPA"
    "DDQrr\000VPADDSBrm\000VPADDSBrr\000VPADDSWrm\000VPADDSWrr\000VPADDUSBrm"
    "\000VPADDUSBrr\000VPADDUSWrm\000VPADDUSWrr\000VPADDWrm\000VPADDWrr\000V"
    "PALIGNR128rm\000VPALIGNR128rr\000VPANDNrm\000VPANDNrr\000VPANDrm\000VPA"
    "NDrr\000VPAVGBrm\000VPAVGBrr\000VPAVGWrm\000VPAVGWrr\000VPBLENDVBrm\000"
    "VPBLENDVBrr\000VPBLENDWrmi\000VPBLENDWrri\000VPCLMULHQHQDQrm\000VPCLMUL"
    "HQHQDQrr\000VPCLMULHQLQDQrm\000VPCLMULHQLQDQrr\000VPCLMULLQHQDQrm\000VP"
    "CLMULLQHQDQrr\000VPCLMULLQLQDQrm\000VPCLMULLQLQDQrr\000VPCLMULQDQrm\000"
    "VPCLMULQDQrr\000VPCMPEQBrm\000VPCMPEQBrr\000VPCMPEQDrm\000VPCMPEQDrr\000"
    "VPCMPEQQrm\000VPCMPEQQrr\000VPCMPEQWrm\000VPCMPEQWrr\000VPCMPESTRIArm\000"
    "VPCMPESTRIArr\000VPCMPESTRICrm\000VPCMPESTRICrr\000VPCMPESTRIOrm\000VPC"
    "MPESTRIOrr\000VPCMPESTRISrm\000VPCMPESTRISrr\000VPCMPESTRIZrm\000VPCMPE"
    "STRIZrr\000VPCMPESTRIrm\000VPCMPESTRIrr\000VPCMPESTRM128MEM\000VPCMPEST"
    "RM128REG\000VPCMPESTRM128rm\000VPCMPESTRM128rr\000VPCMPGTBrm\000VPCMPGT"
    "Brr\000VPCMPGTDrm\000VPCMPGTDrr\000VPCMPGTQrm\000VPCMPGTQrr\000VPCMPGTW"
    "rm\000VPCMPGTWrr\000VPCMPISTRIArm\000VPCMPISTRIArr\000VPCMPISTRICrm\000"
    "VPCMPISTRICrr\000VPCMPISTRIOrm\000VPCMPISTRIOrr\000VPCMPISTRISrm\000VPC"
    "MPISTRISrr\000VPCMPISTRIZrm\000VPCMPISTRIZrr\000VPCMPISTRIrm\000VPCMPIS"
    "TRIrr\000VPCMPISTRM128MEM\000VPCMPISTRM128REG\000VPCMPISTRM128rm\000VPC"
    "MPISTRM128rr\000VPERM2F128rm\000VPERM2F128rr\000VPERMILPDYmi\000VPERMIL"
    "PDYri\000VPERMILPDYrm\000VPERMILPDYrr\000VPERMILPDmi\000VPERMILPDri\000"
    "VPERMILPDrm\000VPERMILPDrr\000VPERMILPSYmi\000VPERMILPSYri\000VPERMILPS"
    "Yrm\000VPERMILPSYrr\000VPERMILPSmi\000VPERMILPSri\000VPERMILPSrm\000VPE"
    "RMILPSrr\000VPEXTRBmr\000VPEXTRBrr\000VPEXTRBrr64\000VPEXTRDmr\000VPEXT"
    "RDrr\000VPEXTRQmr\000VPEXTRQrr\000VPEXTRWmr\000VPEXTRWri\000VPHADDDrm12"
    "8\000VPHADDDrr128\000VPHADDSWrm128\000VPHADDSWrr128\000VPHADDWrm128\000"
    "VPHADDWrr128\000VPHMINPOSUWrm128\000VPHMINPOSUWrr128\000VPHSUBDrm128\000"
    "VPHSUBDrr128\000VPHSUBSWrm128\000VPHSUBSWrr128\000VPHSUBWrm128\000VPHSU"
    "BWrr128\000VPINSRBrm\000VPINSRBrr\000VPINSRDrm\000VPINSRDrr\000VPINSRQr"
    "m\000VPINSRQrr\000VPINSRWrmi\000VPINSRWrr64i\000VPINSRWrri\000VPMADDUBS"
    "Wrm128\000VPMADDUBSWrr128\000VPMADDWDrm\000VPMADDWDrr\000VPMAXSBrm\000V"
    "PMAXSBrr\000VPMAXSDrm\000VPMAXSDrr\000VPMAXSWrm\000VPMAXSWrr\000VPMAXUB"
    "rm\000VPMAXUBrr\000VPMAXUDrm\000VPMAXUDrr\000VPMAXUWrm\000VPMAXUWrr\000"
    "VPMINSBrm\000VPMINSBrr\000VPMINSDrm\000VPMINSDrr\000VPMINSWrm\000VPMINS"
    "Wrr\000VPMINUBrm\000VPMINUBrr\000VPMINUDrm\000VPMINUDrr\000VPMINUWrm\000"
    "VPMINUWrr\000VPMOVMSKBr64r\000VPMOVMSKBrr\000VPMOVSXBDrm\000VPMOVSXBDrr"
    "\000VPMOVSXBQrm\000VPMOVSXBQrr\000VPMOVSXBWrm\000VPMOVSXBWrr\000VPMOVSX"
    "DQrm\000VPMOVSXDQrr\000VPMOVSXWDrm\000VPMOVSXWDrr\000VPMOVSXWQrm\000VPM"
    "OVSXWQrr\000VPMOVZXBDrm\000VPMOVZXBDrr\000VPMOVZXBQrm\000VPMOVZXBQrr\000"
    "VPMOVZXBWrm\000VPMOVZXBWrr\000VPMOVZXDQrm\000VPMOVZXDQrr\000VPMOVZXWDrm"
    "\000VPMOVZXWDrr\000VPMOVZXWQrm\000VPMOVZXWQrr\000VPMULDQrm\000VPMULDQrr"
    "\000VPMULHRSWrm128\000VPMULHRSWrr128\000VPMULHUWrm\000VPMULHUWrr\000VPM"
    "ULHWrm\000VPMULHWrr\000VPMULLDrm\000VPMULLDrr\000VPMULLWrm\000VPMULLWrr"
    "\000VPMULUDQrm\000VPMULUDQrr\000VPORrm\000VPORrr\000VPSADBWrm\000VPSADB"
    "Wrr\000VPSHUFBrm128\000VPSHUFBrr128\000VPSHUFDmi\000VPSHUFDri\000VPSHUF"
    "HWmi\000VPSHUFHWri\000VPSHUFLWmi\000VPSHUFLWri\000VPSIGNBrm128\000VPSIG"
    "NBrr128\000VPSIGNDrm128\000VPSIGNDrr128\000VPSIGNWrm128\000VPSIGNWrr128"
    "\000VPSLLDQri\000VPSLLDri\000VPSLLDrm\000VPSLLDrr\000VPSLLQri\000VPSLLQ"
    "rm\000VPSLLQrr\000VPSLLWri\000VPSLLWrm\000VPSLLWrr\000VPSRADri\000VPSRA"
    "Drm\000VPSRADrr\000VPSRAWri\000VPSRAWrm\000VPSRAWrr\000VPSRLDQri\000VPS"
    "RLDri\000VPSRLDrm\000VPSRLDrr\000VPSRLQri\000VPSRLQrm\000VPSRLQrr\000VP"
    "SRLWri\000VPSRLWrm\000VPSRLWrr\000VPSUBBrm\000VPSUBBrr\000VPSUBDrm\000V"
    "PSUBDrr\000VPSUBQrm\000VPSUBQrr\000VPSUBSBrm\000VPSUBSBrr\000VPSUBSWrm\000"
    "VPSUBSWrr\000VPSUBUSBrm\000VPSUBUSBrr\000VPSUBUSWrm\000VPSUBUSWrr\000VP"
    "SUBWrm\000VPSUBWrr\000VPTESTYrm\000VPTESTYrr\000VPTESTrm\000VPTESTrr\000"
    "VPUNPCKHBWrm\000VPUNPCKHBWrr\000VPUNPCKHDQrm\000VPUNPCKHDQrr\000VPUNPCK"
    "HQDQrm\000VPUNPCKHQDQrr\000VPUNPCKHWDrm\000VPUNPCKHWDrr\000VPUNPCKLBWrm"
    "\000VPUNPCKLBWrr\000VPUNPCKLDQrm\000VPUNPCKLDQrr\000VPUNPCKLQDQrm\000VP"
    "UNPCKLQDQrr\000VPUNPCKLWDrm\000VPUNPCKLWDrr\000VPXORrm\000VPXORrr\000VR"
    "CPPSYm\000VRCPPSYm_Int\000VRCPPSYr\000VRCPPSYr_Int\000VRCPPSm\000VRCPPS"
    "m_Int\000VRCPPSr\000VRCPPSr_Int\000VRCPSSm\000VRCPSSm_Int\000VRCPSSr\000"
    "VRCPSSr_Int\000VROUNDPDm\000VROUNDPDm_AVX\000VROUNDPDr\000VROUNDPDr_AVX"
    "\000VROUNDPSm\000VROUNDPSm_AVX\000VROUNDPSr\000VROUNDPSr_AVX\000VROUNDS"
    "Dm\000VROUNDSDm_AVX\000VROUNDSDr\000VROUNDSDr_AVX\000VROUNDSSm\000VROUN"
    "DSSm_AVX\000VROUNDSSr\000VROUNDSSr_AVX\000VROUNDYPDm\000VROUNDYPDm_AVX\000"
    "VROUNDYPDr\000VROUNDYPDr_AVX\000VROUNDYPSm\000VROUNDYPSm_AVX\000VROUNDY"
    "PSr\000VROUNDYPSr_AVX\000VRSQRTPSYm\000VRSQRTPSYm_Int\000VRSQRTPSYr\000"
    "VRSQRTPSYr_Int\000VRSQRTPSm\000VRSQRTPSm_Int\000VRSQRTPSr\000VRSQRTPSr_"
    "Int\000VRSQRTSSm\000VRSQRTSSm_Int\000VRSQRTSSr\000VRSQRTSSr_Int\000VSHU"
    "FPDYrmi\000VSHUFPDYrri\000VSHUFPDrmi\000VSHUFPDrri\000VSHUFPSYrmi\000VS"
    "HUFPSYrri\000VSHUFPSrmi\000VSHUFPSrri\000VSQRTPDYm\000VSQRTPDYm_Int\000"
    "VSQRTPDYr\000VSQRTPDYr_Int\000VSQRTPDm\000VSQRTPDm_Int\000VSQRTPDr\000V"
    "SQRTPDr_Int\000VSQRTPSYm\000VSQRTPSYm_Int\000VSQRTPSYr\000VSQRTPSYr_Int"
    "\000VSQRTPSm\000VSQRTPSm_Int\000VSQRTPSr\000VSQRTPSr_Int\000VSQRTSDm\000"
    "VSQRTSDm_Int\000VSQRTSDr\000VSQRTSDr_Int\000VSQRTSSm\000VSQRTSSm_Int\000"
    "VSQRTSSr\000VSQRTSSr_Int\000VSTMXCSR\000VSUBPDYrm\000VSUBPDYrr\000VSUBP"
    "Drm\000VSUBPDrr\000VSUBPSYrm\000VSUBPSYrr\000VSUBPSrm\000VSUBPSrr\000VS"
    "UBSDrm\000VSUBSDrm_Int\000VSUBSDrr\000VSUBSDrr_Int\000VSUBSSrm\000VSUBS"
    "Srm_Int\000VSUBSSrr\000VSUBSSrr_Int\000VTESTPDYrm\000VTESTPDYrr\000VTES"
    "TPDrm\000VTESTPDrr\000VTESTPSYrm\000VTESTPSYrr\000VTESTPSrm\000VTESTPSr"
    "r\000VUCOMISDrm\000VUCOMISDrr\000VUCOMISSrm\000VUCOMISSrr\000VUNPCKHPDY"
    "rm\000VUNPCKHPDYrr\000VUNPCKHPDrm\000VUNPCKHPDrr\000VUNPCKHPSYrm\000VUN"
    "PCKHPSYrr\000VUNPCKHPSrm\000VUNPCKHPSrr\000VUNPCKLPDYrm\000VUNPCKLPDYrr"
    "\000VUNPCKLPDrm\000VUNPCKLPDrr\000VUNPCKLPSYrm\000VUNPCKLPSYrr\000VUNPC"
    "KLPSrm\000VUNPCKLPSrr\000VXORPDYrm\000VXORPDYrr\000VXORPDrm\000VXORPDrr"
    "\000VXORPSYrm\000VXORPSYrr\000VXORPSrm\000VXORPSrr\000VZEROALL\000VZERO"
    "UPPER\000V_SET0PD\000V_SET0PI\000V_SET0PS\000V_SETALLONES\000WAIT\000WB"
    "INVD\000WINCALL64m\000WINCALL64pcrel32\000WINCALL64r\000WIN_ALLOCA\000W"
    "RMSR\000XADD16rm\000XADD16rr\000XADD32rm\000XADD32rr\000XADD64rm\000XAD"
    "D64rr\000XADD8rm\000XADD8rr\000XCHG16ar\000XCHG16rm\000XCHG16rr\000XCHG"
    "32ar\000XCHG32rm\000XCHG32rr\000XCHG64ar\000XCHG64rm\000XCHG64rr\000XCH"
    "G8rm\000XCHG8rr\000XCH_F\000XGETBV\000XLAT\000XOR16i16\000XOR16mi\000XO"
    "R16mi8\000XOR16mr\000XOR16ri\000XOR16ri8\000XOR16rm\000XOR16rr\000XOR16"
    "rr_REV\000XOR32i32\000XOR32mi\000XOR32mi8\000XOR32mr\000XOR32ri\000XOR3"
    "2ri8\000XOR32rm\000XOR32rr\000XOR32rr_REV\000XOR64i32\000XOR64mi32\000X"
    "OR64mi8\000XOR64mr\000XOR64ri32\000XOR64ri8\000XOR64rm\000XOR64rr\000XO"
    "R64rr_REV\000XOR8i8\000XOR8mi\000XOR8mr\000XOR8ri\000XOR8rm\000XOR8rr\000"
    "XOR8rr_REV\000XORPDrm\000XORPDrr\000XORPSrm\000XORPSrr\000XSETBV\000";
  return Strs+InstAsmOffset[Opcode];
}

#endif

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

namespace { // Register classes
  enum RegClass {
    RC_CCR,
    RC_CONTROL_REG,
    RC_DEBUG_REG,
    RC_FR32,
    RC_FR64,
    RC_GR16,
    RC_GR16_ABCD,
    RC_GR16_NOREX,
    RC_GR32,
    RC_GR32_ABCD,
    RC_GR32_AD,
    RC_GR32_NOREX,
    RC_GR32_NOSP,
    RC_GR32_TC,
    RC_GR64,
    RC_GR64_ABCD,
    RC_GR64_NOREX,
    RC_GR64_NOREX_NOSP,
    RC_GR64_NOSP,
    RC_GR64_TC,
    RC_GR64_TCW64,
    RC_GR8,
    RC_GR8_ABCD_H,
    RC_GR8_ABCD_L,
    RC_GR8_NOREX,
    RC_RFP32,
    RC_RFP64,
    RC_RFP80,
    RC_RST,
    RC_SEGMENT_REG,
    RC_VR128,
    RC_VR256,
    RC_VR64
  };
} // end anonymous namespace

static bool regIsInRegisterClass(unsigned RegClass, unsigned Reg) {
  switch (RegClass) {
  default: break;
  case RC_CCR:
    if (Reg == X86::EFLAGS)
      return true;
    break;
  case RC_CONTROL_REG:
    switch (Reg) {
    default: break;
    case X86::CR0:
    case X86::CR1:
    case X86::CR2:
    case X86::CR3:
    case X86::CR4:
    case X86::CR5:
    case X86::CR6:
    case X86::CR7:
    case X86::CR8:
    case X86::CR9:
    case X86::CR10:
    case X86::CR11:
    case X86::CR12:
    case X86::CR13:
    case X86::CR14:
    case X86::CR15:
      return true;
    }
    break;
  case RC_DEBUG_REG:
    switch (Reg) {
    default: break;
    case X86::DR0:
    case X86::DR1:
    case X86::DR2:
    case X86::DR3:
    case X86::DR4:
    case X86::DR5:
    case X86::DR6:
    case X86::DR7:
      return true;
    }
    break;
  case RC_FR32:
    switch (Reg) {
    default: break;
    case X86::XMM0:
    case X86::XMM1:
    case X86::XMM2:
    case X86::XMM3:
    case X86::XMM4:
    case X86::XMM5:
    case X86::XMM6:
    case X86::XMM7:
    case X86::XMM8:
    case X86::XMM9:
    case X86::XMM10:
    case X86::XMM11:
    case X86::XMM12:
    case X86::XMM13:
    case X86::XMM14:
    case X86::XMM15:
      return true;
    }
    break;
  case RC_FR64:
    switch (Reg) {
    default: break;
    case X86::XMM0:
    case X86::XMM1:
    case X86::XMM2:
    case X86::XMM3:
    case X86::XMM4:
    case X86::XMM5:
    case X86::XMM6:
    case X86::XMM7:
    case X86::XMM8:
    case X86::XMM9:
    case X86::XMM10:
    case X86::XMM11:
    case X86::XMM12:
    case X86::XMM13:
    case X86::XMM14:
    case X86::XMM15:
      return true;
    }
    break;
  case RC_GR16:
    switch (Reg) {
    default: break;
    case X86::AX:
    case X86::CX:
    case X86::DX:
    case X86::SI:
    case X86::DI:
    case X86::BX:
    case X86::BP:
    case X86::SP:
    case X86::R8W:
    case X86::R9W:
    case X86::R10W:
    case X86::R11W:
    case X86::R14W:
    case X86::R15W:
    case X86::R12W:
    case X86::R13W:
      return true;
    }
    break;
  case RC_GR16_ABCD:
    switch (Reg) {
    default: break;
    case X86::AX:
    case X86::CX:
    case X86::DX:
    case X86::BX:
      return true;
    }
    break;
  case RC_GR16_NOREX:
    switch (Reg) {
    default: break;
    case X86::AX:
    case X86::CX:
    case X86::DX:
    case X86::SI:
    case X86::DI:
    case X86::BX:
    case X86::BP:
    case X86::SP:
      return true;
    }
    break;
  case RC_GR32:
    switch (Reg) {
    default: break;
    case X86::EAX:
    case X86::ECX:
    case X86::EDX:
    case X86::ESI:
    case X86::EDI:
    case X86::EBX:
    case X86::EBP:
    case X86::ESP:
    case X86::R8D:
    case X86::R9D:
    case X86::R10D:
    case X86::R11D:
    case X86::R14D:
    case X86::R15D:
    case X86::R12D:
    case X86::R13D:
      return true;
    }
    break;
  case RC_GR32_ABCD:
    switch (Reg) {
    default: break;
    case X86::EAX:
    case X86::ECX:
    case X86::EDX:
    case X86::EBX:
      return true;
    }
    break;
  case RC_GR32_AD:
    switch (Reg) {
    default: break;
    case X86::EAX:
    case X86::EDX:
      return true;
    }
    break;
  case RC_GR32_NOREX:
    switch (Reg) {
    default: break;
    case X86::EAX:
    case X86::ECX:
    case X86::EDX:
    case X86::ESI:
    case X86::EDI:
    case X86::EBX:
    case X86::EBP:
    case X86::ESP:
      return true;
    }
    break;
  case RC_GR32_NOSP:
    switch (Reg) {
    default: break;
    case X86::EAX:
    case X86::ECX:
    case X86::EDX:
    case X86::ESI:
    case X86::EDI:
    case X86::EBX:
    case X86::EBP:
    case X86::R8D:
    case X86::R9D:
    case X86::R10D:
    case X86::R11D:
    case X86::R14D:
    case X86::R15D:
    case X86::R12D:
    case X86::R13D:
      return true;
    }
    break;
  case RC_GR32_TC:
    switch (Reg) {
    default: break;
    case X86::EAX:
    case X86::ECX:
    case X86::EDX:
      return true;
    }
    break;
  case RC_GR64:
    switch (Reg) {
    default: break;
    case X86::RAX:
    case X86::RCX:
    case X86::RDX:
    case X86::RSI:
    case X86::RDI:
    case X86::R8:
    case X86::R9:
    case X86::R10:
    case X86::R11:
    case X86::RBX:
    case X86::R14:
    case X86::R15:
    case X86::R12:
    case X86::R13:
    case X86::RBP:
    case X86::RSP:
    case X86::RIP:
      return true;
    }
    break;
  case RC_GR64_ABCD:
    switch (Reg) {
    default: break;
    case X86::RAX:
    case X86::RCX:
    case X86::RDX:
    case X86::RBX:
      return true;
    }
    break;
  case RC_GR64_NOREX:
    switch (Reg) {
    default: break;
    case X86::RAX:
    case X86::RCX:
    case X86::RDX:
    case X86::RSI:
    case X86::RDI:
    case X86::RBX:
    case X86::RBP:
    case X86::RSP:
    case X86::RIP:
      return true;
    }
    break;
  case RC_GR64_NOREX_NOSP:
    switch (Reg) {
    default: break;
    case X86::RAX:
    case X86::RCX:
    case X86::RDX:
    case X86::RSI:
    case X86::RDI:
    case X86::RBX:
    case X86::RBP:
      return true;
    }
    break;
  case RC_GR64_NOSP:
    switch (Reg) {
    default: break;
    case X86::RAX:
    case X86::RCX:
    case X86::RDX:
    case X86::RSI:
    case X86::RDI:
    case X86::R8:
    case X86::R9:
    case X86::R10:
    case X86::R11:
    case X86::RBX:
    case X86::R14:
    case X86::R15:
    case X86::R12:
    case X86::R13:
    case X86::RBP:
      return true;
    }
    break;
  case RC_GR64_TC:
    switch (Reg) {
    default: break;
    case X86::RAX:
    case X86::RCX:
    case X86::RDX:
    case X86::RSI:
    case X86::RDI:
    case X86::R8:
    case X86::R9:
    case X86::R11:
      return true;
    }
    break;
  case RC_GR64_TCW64:
    switch (Reg) {
    default: break;
    case X86::RAX:
    case X86::RCX:
    case X86::RDX:
    case X86::R8:
    case X86::R9:
    case X86::R11:
      return true;
    }
    break;
  case RC_GR8:
    switch (Reg) {
    default: break;
    case X86::AL:
    case X86::CL:
    case X86::DL:
    case X86::AH:
    case X86::CH:
    case X86::DH:
    case X86::BL:
    case X86::BH:
    case X86::SIL:
    case X86::DIL:
    case X86::BPL:
    case X86::SPL:
    case X86::R8B:
    case X86::R9B:
    case X86::R10B:
    case X86::R11B:
    case X86::R14B:
    case X86::R15B:
    case X86::R12B:
    case X86::R13B:
      return true;
    }
    break;
  case RC_GR8_ABCD_H:
    switch (Reg) {
    default: break;
    case X86::AH:
    case X86::CH:
    case X86::DH:
    case X86::BH:
      return true;
    }
    break;
  case RC_GR8_ABCD_L:
    switch (Reg) {
    default: break;
    case X86::AL:
    case X86::CL:
    case X86::DL:
    case X86::BL:
      return true;
    }
    break;
  case RC_GR8_NOREX:
    switch (Reg) {
    default: break;
    case X86::AL:
    case X86::CL:
    case X86::DL:
    case X86::AH:
    case X86::CH:
    case X86::DH:
    case X86::BL:
    case X86::BH:
      return true;
    }
    break;
  case RC_RFP32:
    switch (Reg) {
    default: break;
    case X86::FP0:
    case X86::FP1:
    case X86::FP2:
    case X86::FP3:
    case X86::FP4:
    case X86::FP5:
    case X86::FP6:
      return true;
    }
    break;
  case RC_RFP64:
    switch (Reg) {
    default: break;
    case X86::FP0:
    case X86::FP1:
    case X86::FP2:
    case X86::FP3:
    case X86::FP4:
    case X86::FP5:
    case X86::FP6:
      return true;
    }
    break;
  case RC_RFP80:
    switch (Reg) {
    default: break;
    case X86::FP0:
    case X86::FP1:
    case X86::FP2:
    case X86::FP3:
    case X86::FP4:
    case X86::FP5:
    case X86::FP6:
      return true;
    }
    break;
  case RC_RST:
    switch (Reg) {
    default: break;
    case X86::ST0:
    case X86::ST1:
    case X86::ST2:
    case X86::ST3:
    case X86::ST4:
    case X86::ST5:
    case X86::ST6:
    case X86::ST7:
      return true;
    }
    break;
  case RC_SEGMENT_REG:
    switch (Reg) {
    default: break;
    case X86::CS:
    case X86::DS:
    case X86::SS:
    case X86::ES:
    case X86::FS:
    case X86::GS:
      return true;
    }
    break;
  case RC_VR128:
    switch (Reg) {
    default: break;
    case X86::XMM0:
    case X86::XMM1:
    case X86::XMM2:
    case X86::XMM3:
    case X86::XMM4:
    case X86::XMM5:
    case X86::XMM6:
    case X86::XMM7:
    case X86::XMM8:
    case X86::XMM9:
    case X86::XMM10:
    case X86::XMM11:
    case X86::XMM12:
    case X86::XMM13:
    case X86::XMM14:
    case X86::XMM15:
      return true;
    }
    break;
  case RC_VR256:
    switch (Reg) {
    default: break;
    case X86::YMM0:
    case X86::YMM1:
    case X86::YMM2:
    case X86::YMM3:
    case X86::YMM4:
    case X86::YMM5:
    case X86::YMM6:
    case X86::YMM7:
    case X86::YMM8:
    case X86::YMM9:
    case X86::YMM10:
    case X86::YMM11:
    case X86::YMM12:
    case X86::YMM13:
    case X86::YMM14:
    case X86::YMM15:
      return true;
    }
    break;
  case RC_VR64:
    switch (Reg) {
    default: break;
    case X86::MM0:
    case X86::MM1:
    case X86::MM2:
    case X86::MM3:
    case X86::MM4:
    case X86::MM5:
    case X86::MM6:
    case X86::MM7:
      return true;
    }
    break;
  }

  return false;
}

bool X86IntelInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  StringRef AsmString;
  std::map<StringRef, unsigned> OpMap;
  switch (MI->getOpcode()) {
  default: return true;
  case X86::AAD8i8:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getImm() == 10) {
      // (AAD8i8 10)
      AsmString = "aad";
    }
    break;
  case X86::AAM8i8:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getImm() == 10) {
      // (AAM8i8 10)
      AsmString = "aam";
    }
    break;
  case X86::ADD_FPrST0:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST0) {
      // (ADD_FPrST0 ST0)
      AsmString = "faddp %st(0), %st(0)";
    } else if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (ADD_FPrST0 ST1)
      AsmString = "faddp";
    }
    break;
  case X86::ADD_FST0r:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST0) {
      // (ADD_FST0r ST0)
      AsmString = "fadd %st(0), %st(0)";
    } else if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_RST, MI->getOperand(0).getReg())) {
      // (ADD_FST0r RST:$op)
      AsmString = "fadd $op, %st(0)";
      OpMap["op"] = 0;
    }
    break;
  case X86::COM_FIPr:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST0) {
      // (COM_FIPr ST0)
      AsmString = "fcompi %st(0), %st(0)";
    } else if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (COM_FIPr ST1)
      AsmString = "fcompi";
    } else if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_RST, MI->getOperand(0).getReg())) {
      // (COM_FIPr RST:$op)
      AsmString = "fcompi $op, %st(0)";
      OpMap["op"] = 0;
    }
    break;
  case X86::COM_FIr:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST0) {
      // (COM_FIr ST0)
      AsmString = "fcomi %st(0), %st(0)";
    } else if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (COM_FIr ST1)
      AsmString = "fcomi";
    } else if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_RST, MI->getOperand(0).getReg())) {
      // (COM_FIr RST:$op)
      AsmString = "fcomi $op, %st(0)";
      OpMap["op"] = 0;
    }
    break;
  case X86::DIV16r:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR16, MI->getOperand(0).getReg())) {
      // (DIV16r GR16:$src)
      AsmString = "divw $src, %ax";
      OpMap["src"] = 0;
    }
    break;
  case X86::DIV32r:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR32, MI->getOperand(0).getReg())) {
      // (DIV32r GR32:$src)
      AsmString = "divl $src, %eax";
      OpMap["src"] = 0;
    }
    break;
  case X86::DIV64r:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR64, MI->getOperand(0).getReg())) {
      // (DIV64r GR64:$src)
      AsmString = "divq $src, %rax";
      OpMap["src"] = 0;
    }
    break;
  case X86::DIV8r:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR8, MI->getOperand(0).getReg())) {
      // (DIV8r GR8:$src)
      AsmString = "divb $src, %al";
      OpMap["src"] = 0;
    }
    break;
  case X86::DIVR_FPrST0:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST0) {
      // (DIVR_FPrST0 ST0)
      AsmString = "fdivp %st(0), %st(0)";
    } else if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (DIVR_FPrST0 ST1)
      AsmString = "fdivp";
    }
    break;
  case X86::DIVR_FST0r:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST0) {
      // (DIVR_FST0r ST0)
      AsmString = "fdivr %st(0), %st(0)";
    } else if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_RST, MI->getOperand(0).getReg())) {
      // (DIVR_FST0r RST:$op)
      AsmString = "fdivr $op, %st(0)";
      OpMap["op"] = 0;
    }
    break;
  case X86::DIV_FPrST0:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST0) {
      // (DIV_FPrST0 ST0)
      AsmString = "fdivrp %st(0), %st(0)";
    } else if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (DIV_FPrST0 ST1)
      AsmString = "fdivrp";
    }
    break;
  case X86::DIV_FST0r:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST0) {
      // (DIV_FST0r ST0)
      AsmString = "fdiv %st(0), %st(0)";
    } else if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_RST, MI->getOperand(0).getReg())) {
      // (DIV_FST0r RST:$op)
      AsmString = "fdiv $op, %st(0)";
      OpMap["op"] = 0;
    }
    break;
  case X86::IDIV16r:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR16, MI->getOperand(0).getReg())) {
      // (IDIV16r GR16:$src)
      AsmString = "idivw $src, %ax";
      OpMap["src"] = 0;
    }
    break;
  case X86::IDIV32r:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR32, MI->getOperand(0).getReg())) {
      // (IDIV32r GR32:$src)
      AsmString = "idivl $src, %eax";
      OpMap["src"] = 0;
    }
    break;
  case X86::IDIV64r:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR64, MI->getOperand(0).getReg())) {
      // (IDIV64r GR64:$src)
      AsmString = "idivq $src, %rax";
      OpMap["src"] = 0;
    }
    break;
  case X86::IDIV8r:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR8, MI->getOperand(0).getReg())) {
      // (IDIV8r GR8:$src)
      AsmString = "idivb $src, %al";
      OpMap["src"] = 0;
    }
    break;
  case X86::IN16rr:
    if (MI->getNumOperands() == 0) {
      // (IN16rr)
      AsmString = "inw %dx";
    }
    break;
  case X86::IN32rr:
    if (MI->getNumOperands() == 0) {
      // (IN32rr)
      AsmString = "inl %dx";
    }
    break;
  case X86::IN8rr:
    if (MI->getNumOperands() == 0) {
      // (IN8rr)
      AsmString = "inb %dx";
    }
    break;
  case X86::MMX_MOVD64from64rr:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR64, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_VR64, MI->getOperand(1).getReg())) {
      // (MMX_MOVD64from64rr GR64:$dst, VR64:$src)
      AsmString = "movq $src, $dst";
      OpMap["dst"] = 0;
      OpMap["src"] = 1;
    }
    break;
  case X86::MMX_MOVD64to64rr:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_VR64, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR64, MI->getOperand(1).getReg())) {
      // (MMX_MOVD64to64rr VR64:$dst, GR64:$src)
      AsmString = "movq $src, $dst";
      OpMap["dst"] = 0;
      OpMap["src"] = 1;
    }
    break;
  case X86::MOVSD:
    if (MI->getNumOperands() == 0) {
      // (MOVSD)
      AsmString = "movsd";
    }
    break;
  case X86::MOVSX16rr8W:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR16, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR8, MI->getOperand(1).getReg())) {
      // (MOVSX16rr8W GR16:$dst, GR8:$src)
      AsmString = "movsx $src, $dst";
      OpMap["dst"] = 0;
      OpMap["src"] = 1;
    }
    break;
  case X86::MOVSX32rr16:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR32, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR16, MI->getOperand(1).getReg())) {
      // (MOVSX32rr16 GR32:$dst, GR16:$src)
      AsmString = "movsx $src, $dst";
      OpMap["dst"] = 0;
      OpMap["src"] = 1;
    }
    break;
  case X86::MOVSX32rr8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR32, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR8, MI->getOperand(1).getReg())) {
      // (MOVSX32rr8 GR32:$dst, GR8:$src)
      AsmString = "movsx $src, $dst";
      OpMap["dst"] = 0;
      OpMap["src"] = 1;
    }
    break;
  case X86::MOVSX64rr16:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR64, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR16, MI->getOperand(1).getReg())) {
      // (MOVSX64rr16 GR64:$dst, GR16:$src)
      AsmString = "movsx $src, $dst";
      OpMap["dst"] = 0;
      OpMap["src"] = 1;
    }
    break;
  case X86::MOVSX64rr32:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR64, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR32, MI->getOperand(1).getReg())) {
      // (MOVSX64rr32 GR64:$dst, GR32:$src)
      AsmString = "movsx $src, $dst";
      OpMap["dst"] = 0;
      OpMap["src"] = 1;
    }
    break;
  case X86::MOVSX64rr8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR64, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR8, MI->getOperand(1).getReg())) {
      // (MOVSX64rr8 GR64:$dst, GR8:$src)
      AsmString = "movsx $src, $dst";
      OpMap["dst"] = 0;
      OpMap["src"] = 1;
    }
    break;
  case X86::MOVZX16rr8W:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR16, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR8, MI->getOperand(1).getReg())) {
      // (MOVZX16rr8W GR16:$dst, GR8:$src)
      AsmString = "movzx $src, $dst";
      OpMap["dst"] = 0;
      OpMap["src"] = 1;
    }
    break;
  case X86::MOVZX32rr16:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR32, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR16, MI->getOperand(1).getReg())) {
      // (MOVZX32rr16 GR32:$dst, GR16:$src)
      AsmString = "movzx $src, $dst";
      OpMap["dst"] = 0;
      OpMap["src"] = 1;
    }
    break;
  case X86::MOVZX32rr8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR32, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR8, MI->getOperand(1).getReg())) {
      // (MOVZX32rr8 GR32:$dst, GR8:$src)
      AsmString = "movzx $src, $dst";
      OpMap["dst"] = 0;
      OpMap["src"] = 1;
    }
    break;
  case X86::MOVZX64rr16_Q:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR64, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR16, MI->getOperand(1).getReg())) {
      // (MOVZX64rr16_Q GR64:$dst, GR16:$src)
      AsmString = "movzx $src, $dst";
      OpMap["dst"] = 0;
      OpMap["src"] = 1;
    }
    break;
  case X86::MOVZX64rr8_Q:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR64, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR8, MI->getOperand(1).getReg())) {
      // (MOVZX64rr8_Q GR64:$dst, GR8:$src)
      AsmString = "movzx $src, $dst";
      OpMap["dst"] = 0;
      OpMap["src"] = 1;
    }
    break;
  case X86::MUL_FPrST0:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST0) {
      // (MUL_FPrST0 ST0)
      AsmString = "fmulp %st(0), %st(0)";
    } else if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (MUL_FPrST0 ST1)
      AsmString = "fmulp";
    }
    break;
  case X86::MUL_FST0r:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST0) {
      // (MUL_FST0r ST0)
      AsmString = "fmul %st(0), %st(0)";
    } else if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_RST, MI->getOperand(0).getReg())) {
      // (MUL_FST0r RST:$op)
      AsmString = "fmul $op, %st(0)";
      OpMap["op"] = 0;
    }
    break;
  case X86::OUT16rr:
    if (MI->getNumOperands() == 0) {
      // (OUT16rr)
      AsmString = "outw %dx";
    }
    break;
  case X86::OUT32rr:
    if (MI->getNumOperands() == 0) {
      // (OUT32rr)
      AsmString = "outl %dx";
    }
    break;
  case X86::OUT8rr:
    if (MI->getNumOperands() == 0) {
      // (OUT8rr)
      AsmString = "outb %dx";
    }
    break;
  case X86::SHLD16rri8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR16, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR16, MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getImm() == 1) {
      // (SHLD16rri8 GR16:$r1, GR16:$r2, 1)
      AsmString = "shldw $r1, $r2";
      OpMap["r1"] = 0;
      OpMap["r2"] = 1;
    }
    break;
  case X86::SHLD32rri8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR32, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR32, MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getImm() == 1) {
      // (SHLD32rri8 GR32:$r1, GR32:$r2, 1)
      AsmString = "shldl $r1, $r2";
      OpMap["r1"] = 0;
      OpMap["r2"] = 1;
    }
    break;
  case X86::SHLD64rri8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR64, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR64, MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getImm() == 1) {
      // (SHLD64rri8 GR64:$r1, GR64:$r2, 1)
      AsmString = "shldq $r1, $r2";
      OpMap["r1"] = 0;
      OpMap["r2"] = 1;
    }
    break;
  case X86::SHRD16rri8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR16, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR16, MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getImm() == 1) {
      // (SHRD16rri8 GR16:$r1, GR16:$r2, 1)
      AsmString = "shrdw $r1, $r2";
      OpMap["r1"] = 0;
      OpMap["r2"] = 1;
    }
    break;
  case X86::SHRD32rri8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR32, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR32, MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getImm() == 1) {
      // (SHRD32rri8 GR32:$r1, GR32:$r2, 1)
      AsmString = "shrdl $r1, $r2";
      OpMap["r1"] = 0;
      OpMap["r2"] = 1;
    }
    break;
  case X86::SHRD64rri8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR64, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR64, MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getImm() == 1) {
      // (SHRD64rri8 GR64:$r1, GR64:$r2, 1)
      AsmString = "shrdq $r1, $r2";
      OpMap["r1"] = 0;
      OpMap["r2"] = 1;
    }
    break;
  case X86::SUBR_FPrST0:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST0) {
      // (SUBR_FPrST0 ST0)
      AsmString = "fsubp %st(0), %st(0)";
    } else if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (SUBR_FPrST0 ST1)
      AsmString = "fsubp";
    } else if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_RST, MI->getOperand(0).getReg())) {
      // (SUBR_FPrST0 RST:$op)
      AsmString = "fsubp $op, %st(0)";
      OpMap["op"] = 0;
    }
    break;
  case X86::SUBR_FST0r:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST0) {
      // (SUBR_FST0r ST0)
      AsmString = "fsubr %st(0), %st(0)";
    } else if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_RST, MI->getOperand(0).getReg())) {
      // (SUBR_FST0r RST:$op)
      AsmString = "fsubr $op, %st(0)";
      OpMap["op"] = 0;
    }
    break;
  case X86::SUB_FPrST0:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST0) {
      // (SUB_FPrST0 ST0)
      AsmString = "fsubrp %st(0), %st(0)";
    } else if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (SUB_FPrST0 ST1)
      AsmString = "fsubrp";
    }
    break;
  case X86::SUB_FST0r:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST0) {
      // (SUB_FST0r ST0)
      AsmString = "fsub %st(0), %st(0)";
    } else if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_RST, MI->getOperand(0).getReg())) {
      // (SUB_FST0r RST:$op)
      AsmString = "fsub $op, %st(0)";
      OpMap["op"] = 0;
    }
    break;
  case X86::UCOM_FIPr:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST0) {
      // (UCOM_FIPr ST0)
      AsmString = "fucompi %st(0), %st(0)";
    } else if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (UCOM_FIPr ST1)
      AsmString = "fucompi";
    } else if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_RST, MI->getOperand(0).getReg())) {
      // (UCOM_FIPr RST:$op)
      AsmString = "fucompi $op, %st(0)";
      OpMap["op"] = 0;
    }
    break;
  case X86::UCOM_FIr:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST0) {
      // (UCOM_FIr ST0)
      AsmString = "fucomi %st(0), %st(0)";
    } else if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (UCOM_FIr ST1)
      AsmString = "fucomi";
    } else if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_RST, MI->getOperand(0).getReg())) {
      // (UCOM_FIr RST:$op)
      AsmString = "fucomi $op, %st(0)";
      OpMap["op"] = 0;
    }
    break;
  case X86::UCOM_FPr:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (UCOM_FPr ST1)
      AsmString = "fucomp";
    }
    break;
  case X86::UCOM_Fr:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (UCOM_Fr ST1)
      AsmString = "fucom";
    }
    break;
  case X86::XCH_F:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (XCH_F ST1)
      AsmString = "fxch";
    }
    break;
  case X86::XOR16rr:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR16, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (XOR16rr GR16:$reg, GR16:$reg)
      AsmString = "clrw $reg";
      OpMap["reg"] = 0;
    }
    break;
  case X86::XOR32rr:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR32, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (XOR32rr GR32:$reg, GR32:$reg)
      AsmString = "clrl $reg";
      OpMap["reg"] = 0;
    }
    break;
  case X86::XOR64rr:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR64, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (XOR64rr GR64:$reg, GR64:$reg)
      AsmString = "clrq $reg";
      OpMap["reg"] = 0;
    }
    break;
  case X86::XOR8rr:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR8, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (XOR8rr GR8:$reg, GR8:$reg)
      AsmString = "clrb $reg";
      OpMap["reg"] = 0;
    }
    break;
  }

  if (AsmString.empty()) return true;
  std::pair<StringRef, StringRef> ASM = AsmString.split(' ');
  OS << '\t' << ASM.first;
  if (!ASM.second.empty()) {
    OS << '\t';
    for (StringRef::iterator
         I = ASM.second.begin(), E = ASM.second.end(); I != E; ) {
      if (*I == '$') {
        StringRef::iterator Start = ++I;
        while (I != E &&
               ((*I >= 'a' && *I <= 'z') ||
                (*I >= 'A' && *I <= 'Z') ||
                (*I >= '0' && *I <= '9') ||
                *I == '_'))
          ++I;
        StringRef Name(Start, I - Start);
        printOperand(MI, OpMap[Name], OS);
      } else {
        OS << *I++;
      }
    }
  }

  return false;
}

#endif // PRINT_ALIAS_INSTR
