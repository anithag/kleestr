//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Matcher Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_ASSEMBLER_HEADER
#undef GET_ASSEMBLER_HEADER
  // This should be included into the middle of the declaration of
  // your subclasses implementation of TargetAsmParser.
  unsigned ComputeAvailableFeatures(const ARMSubtarget *Subtarget) const;
  enum MatchResultTy {
    Match_ConversionFail,
    Match_InvalidOperand,
    Match_MissingFeature,
    Match_MnemonicFail,
    Match_Success
  };
  bool ConvertToMCInst(unsigned Kind, MCInst &Inst, unsigned Opcode,
                       const SmallVectorImpl<MCParsedAsmOperand*> &Operands);
  bool MnemonicIsValid(StringRef Mnemonic);
  MatchResultTy MatchInstructionImpl(
    const SmallVectorImpl<MCParsedAsmOperand*> &Operands,
    MCInst &Inst, unsigned &ErrorInfo);

  enum OperandMatchResultTy {
    MatchOperand_Success,    // operand matched successfully
    MatchOperand_NoMatch,    // operand did not match
    MatchOperand_ParseFail   // operand matched but had errors
  };
  OperandMatchResultTy MatchOperandParserImpl(
    SmallVectorImpl<MCParsedAsmOperand*> &Operands,
    StringRef Mnemonic);
  OperandMatchResultTy TryCustomParseOperand(
    SmallVectorImpl<MCParsedAsmOperand*> &Operands,
    unsigned MCK);

#endif // GET_ASSEMBLER_HEADER_INFO


#ifdef GET_REGISTER_MATCHER
#undef GET_REGISTER_MATCHER

// Flags for subtarget features that participate in instruction matching.
enum SubtargetFeatureFlag {
  Feature_HasV4T = (1 << 6),
  Feature_HasV5TE = (1 << 7),
  Feature_HasV6 = (1 << 8),
  Feature_HasV6T2 = (1 << 9),
  Feature_HasV7 = (1 << 10),
  Feature_HasVFP2 = (1 << 11),
  Feature_HasVFP3 = (1 << 12),
  Feature_HasNEON = (1 << 4),
  Feature_HasFP16 = (1 << 2),
  Feature_HasDivide = (1 << 1),
  Feature_HasT2ExtractPack = (1 << 5),
  Feature_HasDB = (1 << 0),
  Feature_HasMP = (1 << 3),
  Feature_IsThumb = (1 << 14),
  Feature_IsThumb2 = (1 << 15),
  Feature_IsARM = (1 << 13),
  Feature_None = 0
};

static unsigned MatchRegisterName(StringRef Name) {
  switch (Name.size()) {
  default: break;
  case 2:	 // 43 strings to match.
    switch (Name[0]) {
    default: break;
    case 'd':	 // 10 strings to match.
      switch (Name[1]) {
      default: break;
      case '0':	 // 1 string to match.
        return 2;	 // "d0"
      case '1':	 // 1 string to match.
        return 3;	 // "d1"
      case '2':	 // 1 string to match.
        return 4;	 // "d2"
      case '3':	 // 1 string to match.
        return 5;	 // "d3"
      case '4':	 // 1 string to match.
        return 6;	 // "d4"
      case '5':	 // 1 string to match.
        return 7;	 // "d5"
      case '6':	 // 1 string to match.
        return 8;	 // "d6"
      case '7':	 // 1 string to match.
        return 9;	 // "d7"
      case '8':	 // 1 string to match.
        return 10;	 // "d8"
      case '9':	 // 1 string to match.
        return 11;	 // "d9"
      }
      break;
    case 'l':	 // 1 string to match.
      if (Name[1] != 'r')
        break;
      return 38;	 // "lr"
    case 'p':	 // 1 string to match.
      if (Name[1] != 'c')
        break;
      return 39;	 // "pc"
    case 'q':	 // 10 strings to match.
      switch (Name[1]) {
      default: break;
      case '0':	 // 1 string to match.
        return 40;	 // "q0"
      case '1':	 // 1 string to match.
        return 41;	 // "q1"
      case '2':	 // 1 string to match.
        return 42;	 // "q2"
      case '3':	 // 1 string to match.
        return 43;	 // "q3"
      case '4':	 // 1 string to match.
        return 44;	 // "q4"
      case '5':	 // 1 string to match.
        return 45;	 // "q5"
      case '6':	 // 1 string to match.
        return 46;	 // "q6"
      case '7':	 // 1 string to match.
        return 47;	 // "q7"
      case '8':	 // 1 string to match.
        return 48;	 // "q8"
      case '9':	 // 1 string to match.
        return 49;	 // "q9"
      }
      break;
    case 'r':	 // 10 strings to match.
      switch (Name[1]) {
      default: break;
      case '0':	 // 1 string to match.
        return 68;	 // "r0"
      case '1':	 // 1 string to match.
        return 69;	 // "r1"
      case '2':	 // 1 string to match.
        return 70;	 // "r2"
      case '3':	 // 1 string to match.
        return 71;	 // "r3"
      case '4':	 // 1 string to match.
        return 72;	 // "r4"
      case '5':	 // 1 string to match.
        return 73;	 // "r5"
      case '6':	 // 1 string to match.
        return 74;	 // "r6"
      case '7':	 // 1 string to match.
        return 75;	 // "r7"
      case '8':	 // 1 string to match.
        return 76;	 // "r8"
      case '9':	 // 1 string to match.
        return 77;	 // "r9"
      }
      break;
    case 's':	 // 11 strings to match.
      switch (Name[1]) {
      default: break;
      case '0':	 // 1 string to match.
        return 81;	 // "s0"
      case '1':	 // 1 string to match.
        return 82;	 // "s1"
      case '2':	 // 1 string to match.
        return 83;	 // "s2"
      case '3':	 // 1 string to match.
        return 84;	 // "s3"
      case '4':	 // 1 string to match.
        return 85;	 // "s4"
      case '5':	 // 1 string to match.
        return 86;	 // "s5"
      case '6':	 // 1 string to match.
        return 87;	 // "s6"
      case '7':	 // 1 string to match.
        return 88;	 // "s7"
      case '8':	 // 1 string to match.
        return 89;	 // "s8"
      case '9':	 // 1 string to match.
        return 90;	 // "s9"
      case 'p':	 // 1 string to match.
        return 113;	 // "sp"
      }
      break;
    }
    break;
  case 3:	 // 61 strings to match.
    switch (Name[0]) {
    default: break;
    case 'd':	 // 22 strings to match.
      switch (Name[1]) {
      default: break;
      case '1':	 // 10 strings to match.
        switch (Name[2]) {
        default: break;
        case '0':	 // 1 string to match.
          return 12;	 // "d10"
        case '1':	 // 1 string to match.
          return 13;	 // "d11"
        case '2':	 // 1 string to match.
          return 14;	 // "d12"
        case '3':	 // 1 string to match.
          return 15;	 // "d13"
        case '4':	 // 1 string to match.
          return 16;	 // "d14"
        case '5':	 // 1 string to match.
          return 17;	 // "d15"
        case '6':	 // 1 string to match.
          return 18;	 // "d16"
        case '7':	 // 1 string to match.
          return 19;	 // "d17"
        case '8':	 // 1 string to match.
          return 20;	 // "d18"
        case '9':	 // 1 string to match.
          return 21;	 // "d19"
        }
        break;
      case '2':	 // 10 strings to match.
        switch (Name[2]) {
        default: break;
        case '0':	 // 1 string to match.
          return 22;	 // "d20"
        case '1':	 // 1 string to match.
          return 23;	 // "d21"
        case '2':	 // 1 string to match.
          return 24;	 // "d22"
        case '3':	 // 1 string to match.
          return 25;	 // "d23"
        case '4':	 // 1 string to match.
          return 26;	 // "d24"
        case '5':	 // 1 string to match.
          return 27;	 // "d25"
        case '6':	 // 1 string to match.
          return 28;	 // "d26"
        case '7':	 // 1 string to match.
          return 29;	 // "d27"
        case '8':	 // 1 string to match.
          return 30;	 // "d28"
        case '9':	 // 1 string to match.
          return 31;	 // "d29"
        }
        break;
      case '3':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case '0':	 // 1 string to match.
          return 32;	 // "d30"
        case '1':	 // 1 string to match.
          return 33;	 // "d31"
        }
        break;
      }
      break;
    case 'q':	 // 14 strings to match.
      switch (Name[1]) {
      default: break;
      case '1':	 // 6 strings to match.
        switch (Name[2]) {
        default: break;
        case '0':	 // 1 string to match.
          return 50;	 // "q10"
        case '1':	 // 1 string to match.
          return 51;	 // "q11"
        case '2':	 // 1 string to match.
          return 52;	 // "q12"
        case '3':	 // 1 string to match.
          return 53;	 // "q13"
        case '4':	 // 1 string to match.
          return 54;	 // "q14"
        case '5':	 // 1 string to match.
          return 55;	 // "q15"
        }
        break;
      case 'q':	 // 8 strings to match.
        switch (Name[2]) {
        default: break;
        case '0':	 // 1 string to match.
          return 56;	 // "qq0"
        case '1':	 // 1 string to match.
          return 57;	 // "qq1"
        case '2':	 // 1 string to match.
          return 58;	 // "qq2"
        case '3':	 // 1 string to match.
          return 59;	 // "qq3"
        case '4':	 // 1 string to match.
          return 60;	 // "qq4"
        case '5':	 // 1 string to match.
          return 61;	 // "qq5"
        case '6':	 // 1 string to match.
          return 62;	 // "qq6"
        case '7':	 // 1 string to match.
          return 63;	 // "qq7"
        }
        break;
      }
      break;
    case 'r':	 // 3 strings to match.
      if (Name[1] != '1')
        break;
      switch (Name[2]) {
      default: break;
      case '0':	 // 1 string to match.
        return 78;	 // "r10"
      case '1':	 // 1 string to match.
        return 79;	 // "r11"
      case '2':	 // 1 string to match.
        return 80;	 // "r12"
      }
      break;
    case 's':	 // 22 strings to match.
      switch (Name[1]) {
      default: break;
      case '1':	 // 10 strings to match.
        switch (Name[2]) {
        default: break;
        case '0':	 // 1 string to match.
          return 91;	 // "s10"
        case '1':	 // 1 string to match.
          return 92;	 // "s11"
        case '2':	 // 1 string to match.
          return 93;	 // "s12"
        case '3':	 // 1 string to match.
          return 94;	 // "s13"
        case '4':	 // 1 string to match.
          return 95;	 // "s14"
        case '5':	 // 1 string to match.
          return 96;	 // "s15"
        case '6':	 // 1 string to match.
          return 97;	 // "s16"
        case '7':	 // 1 string to match.
          return 98;	 // "s17"
        case '8':	 // 1 string to match.
          return 99;	 // "s18"
        case '9':	 // 1 string to match.
          return 100;	 // "s19"
        }
        break;
      case '2':	 // 10 strings to match.
        switch (Name[2]) {
        default: break;
        case '0':	 // 1 string to match.
          return 101;	 // "s20"
        case '1':	 // 1 string to match.
          return 102;	 // "s21"
        case '2':	 // 1 string to match.
          return 103;	 // "s22"
        case '3':	 // 1 string to match.
          return 104;	 // "s23"
        case '4':	 // 1 string to match.
          return 105;	 // "s24"
        case '5':	 // 1 string to match.
          return 106;	 // "s25"
        case '6':	 // 1 string to match.
          return 107;	 // "s26"
        case '7':	 // 1 string to match.
          return 108;	 // "s27"
        case '8':	 // 1 string to match.
          return 109;	 // "s28"
        case '9':	 // 1 string to match.
          return 110;	 // "s29"
        }
        break;
      case '3':	 // 2 strings to match.
        switch (Name[2]) {
        default: break;
        case '0':	 // 1 string to match.
          return 111;	 // "s30"
        case '1':	 // 1 string to match.
          return 112;	 // "s31"
        }
        break;
      }
      break;
    }
    break;
  case 4:	 // 1 string to match.
    if (Name.substr(0, 4) != "cpsr")
      break;
    return 1;	 // "cpsr"
  case 5:	 // 7 strings to match.
    switch (Name[0]) {
    default: break;
    case 'f':	 // 3 strings to match.
      if (Name[1] != 'p')
        break;
      switch (Name[2]) {
      default: break;
      case 'e':	 // 1 string to match.
        if (Name.substr(3, 2) != "xc")
          break;
        return 34;	 // "fpexc"
      case 's':	 // 2 strings to match.
        switch (Name[3]) {
        default: break;
        case 'c':	 // 1 string to match.
          if (Name[4] != 'r')
            break;
          return 35;	 // "fpscr"
        case 'i':	 // 1 string to match.
          if (Name[4] != 'd')
            break;
          return 36;	 // "fpsid"
        }
        break;
      }
      break;
    case 'q':	 // 4 strings to match.
      if (Name.substr(1, 3) != "qqq")
        break;
      switch (Name[4]) {
      default: break;
      case '0':	 // 1 string to match.
        return 64;	 // "qqqq0"
      case '1':	 // 1 string to match.
        return 65;	 // "qqqq1"
      case '2':	 // 1 string to match.
        return 66;	 // "qqqq2"
      case '3':	 // 1 string to match.
        return 67;	 // "qqqq3"
      }
      break;
    }
    break;
  case 7:	 // 1 string to match.
    if (Name.substr(0, 7) != "itstate")
      break;
    return 37;	 // "itstate"
  }
  return 0;
}

#endif // GET_REGISTER_MATCHER


#ifdef GET_MATCHER_IMPLEMENTATION
#undef GET_MATCHER_IMPLEMENTATION

static void ApplyMnemonicAliases(StringRef &Mnemonic, unsigned Features) {
  switch (Mnemonic.size()) {
  default: break;
  case 3:	 // 2 strings to match.
    switch (Mnemonic[0]) {
    default: break;
    case 'l':	 // 1 string to match.
      if (Mnemonic.substr(1, 2) != "dm")
        break;
      Mnemonic = "ldmia";	 // "ldm"
      return;
    case 's':	 // 1 string to match.
      if (Mnemonic.substr(1, 2) != "tm")
        break;
      Mnemonic = "stmia";	 // "stm"
      return;
    }
    break;
  case 4:	 // 2 strings to match.
    if (Mnemonic[0] != 'v')
      break;
    switch (Mnemonic[1]) {
    default: break;
    case 'l':	 // 1 string to match.
      if (Mnemonic.substr(2, 2) != "dm")
        break;
      Mnemonic = "vldmia";	 // "vldm"
      return;
    case 's':	 // 1 string to match.
      if (Mnemonic.substr(2, 2) != "tm")
        break;
      Mnemonic = "vstmia";	 // "vstm"
      return;
    }
    break;
  }
}

// Unified function for converting operands to MCInst instances.

enum ConversionKind {
  Convert__Reg1_2__CCOut1_0__Tie0__Reg1_3__CondCode2_1,
  Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1__CCOut1_0,
  Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1__CCOut1_0,
  Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__CCOut1_0,
  Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1__CCOut1_0,
  Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1__CCOut1_0,
  Convert__Reg1_0__Tie0__Reg1_1,
  Convert__Reg1_0__Tie0__Imm1_1,
  Convert__Reg1_0__Imm1_2,
  Convert__Reg1_0__Reg1_1__Imm1_2,
  Convert__Reg1_1__Tie0__Reg1_2__CondCode2_0,
  Convert__Reg1_2__CCOut1_0__Tie0__Imm1_3__CondCode2_1,
  Convert__Reg1_2__CCOut1_0__Reg1_3__Reg1_4__CondCode2_1,
  Convert__Reg1_2__CCOut1_0__Reg1_3__Imm1_4__CondCode2_1,
  Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__CCOut1_0,
  Convert__Reg1_1__Reg1_2__Imm1_3__CondCode2_0,
  Convert__Reg1_1__Imm1_3__CondCode2_0,
  Convert__Reg1_2__Imm1_4__CondCode2_0,
  Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0,
  Convert__Imm1_0,
  Convert__Imm1_1,
  Convert__Imm1_1__CondCode2_0,
  Convert__Imm1_2__CondCode2_0,
  Convert__Reg1_1__Tie0__Imm1_2__CondCode2_0,
  Convert__Reg1_1__Tie0__Reg1_2__Imm1_3__CondCode2_0,
  Convert__Reg1_1__Tie0__Reg1_2__Imm1_3__Imm1_4__CondCode2_0,
  Convert,
  Convert__CondCode2_0__Imm1_1,
  Convert__Reg1_0,
  Convert__Reg1_1__CondCode2_0,
  Convert__CondCode2_0__Reg1_1,
  Convert__CondCode2_0,
  Convert__Reg1_0__Imm1_1,
  Convert__CoprocNum1_0__Imm1_1__CoprocReg1_2__CoprocReg1_3__CoprocReg1_4__Imm1_5,
  Convert__CoprocNum1_1__Imm1_2__CoprocReg1_3__CoprocReg1_4__CoprocReg1_5__Imm1_6__CondCode2_0,
  Convert__Reg1_1__Reg1_2__CondCode2_0,
  Convert__Reg1_1__Imm1_2__CondCode2_0,
  Convert__Reg1_2__Reg1_3__CondCode2_0,
  Convert__Reg1_2__Imm1_3__CondCode2_0,
  Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0,
  Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_4__CondCode2_0,
  Convert__Imm1_0__ProcIFlags1_1,
  Convert__Imm1_0__ProcIFlags1_2,
  Convert__Imm1_0__ProcIFlags1_1__Imm1_2,
  Convert__Imm1_0__ProcIFlags1_2__Imm1_3,
  Convert__MemBarrierOpt1_0,
  Convert__Imm1_1__Imm1_0,
  Convert__Imm1_2__Imm1_4__Reg1_5__Reg1_6__Imm1_7__CondCode2_0,
  Convert__Imm1_2__Imm1_4__Reg1_6__Imm1_8__CondCode2_0,
  Convert__Imm1_2__Imm1_4__Reg1_6__Reg1_8__Imm1_9__CondCode2_0,
  Convert__Reg1_1__CondCode2_0__RegList1_2,
  Convert__Reg1_1__Tie0__CondCode2_0__RegList1_3,
  Convert__Reg1_2__CondCode2_0__RegList1_3,
  Convert__Reg1_2__Tie0__CondCode2_0__RegList1_3,
  Convert__Reg1_2__Tie0__CondCode2_0__RegList1_4,
  Convert__Reg1_1__MemModeImmThumb2_2__CondCode2_0,
  Convert__Reg1_1__MemModeRegThumb2_2__CondCode2_0,
  Convert__Reg1_1__MemMode52_2__CondCode2_0,
  Convert__Reg1_2__MemModeImmThumb1_3__CondCode2_0,
  Convert__Reg1_2__MemMode52_3__CondCode2_0,
  Convert__Reg1_2__MemMode53_3__CondCode2_0,
  Convert__Reg1_1__MemMode51_2__Tie1__CondCode2_0,
  Convert__Reg1_1__Reg1_3__Tie1__MemMode51_5__CondCode2_0,
  Convert__Reg1_1__Reg1_2__Tie1__CondCode2_0,
  Convert__Reg1_1__Reg1_3__Tie1__Reg1_5__Imm1_6__CondCode2_0,
  Convert__Reg1_1__Reg1_2__MemMode52_3__CondCode2_0,
  Convert__Reg1_1__Reg1_2__Reg1_4__Imm1_6__CondCode2_0,
  Convert__Reg1_1__Reg1_2__Reg1_4__Imm1_5__CondCode2_0,
  Convert__Reg1_1__Reg1_3__CondCode2_0,
  Convert__Reg1_1__Reg1_2__Reg1_4__CondCode2_0,
  Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0,
  Convert__Reg1_2,
  Convert__CoprocNum1_0__Imm1_1__Reg1_2__CoprocReg1_3__CoprocReg1_4__Imm1_5,
  Convert__CoprocNum1_1__Imm1_2__Reg1_3__CoprocReg1_4__CoprocReg1_5__Imm1_6__CondCode2_0,
  Convert__CoprocNum1_0__Imm1_1__Reg1_2__Reg1_3__CoprocReg1_4,
  Convert__CoprocNum1_1__Imm1_2__Reg1_3__Reg1_4__CoprocReg1_5__CondCode2_0,
  Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0,
  Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__CCOut1_0,
  Convert__Reg1_0__Reg1_1,
  Convert__Reg1_1,
  Convert__Reg1_2__CCOut1_0__Imm1_3__CondCode2_1,
  Convert__Reg1_2__Reg1_3__CondCode2_1__CCOut1_0,
  Convert__Reg1_2__Imm1_3__CondCode2_1__CCOut1_0,
  Convert__Reg1_2__Tie0__Reg1_3__CondCode2_0,
  Convert__Reg1_2__Tie0__Imm1_3__CondCode2_0,
  Convert__Reg1_3__Imm1_4__CondCode2_1__CCOut1_0,
  Convert__Reg1_3__Reg1_4__CondCode2_1__CCOut1_0,
  Convert__Reg1_1__Tie0__Reg1_2__Reg1_3__Imm1_4__CondCode2_0,
  Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__CCOut1_0,
  Convert__MSRMask1_1__Reg1_2__CondCode2_0,
  Convert__MSRMask1_1__Imm1_2__CondCode2_0,
  Convert__Reg1_2__CCOut1_0__Reg1_3__CondCode2_1,
  Convert__MemMode52_1__CondCode2_0,
  Convert__MemMode53_1__CondCode2_0,
  Convert__CondCode2_0__RegList1_1,
  Convert__Reg1_1__Reg1_2__Imm1_3__Imm1_4__CondCode2_0,
  Convert__Imm1_3__CondCode2_0,
  Convert__Reg1_1__Imm1_2__Reg1_3__Imm1_4__CondCode2_0,
  Convert__Reg1_1__Imm1_2__Reg1_3__CondCode2_0,
  Convert__Reg1_3__Reg1_1__Tie0__MemMode51_5__CondCode2_0,
  Convert__Reg1_3__Reg1_1__Tie0__Reg1_5__Imm1_6__CondCode2_0,
  Convert__Reg1_3__Reg1_1__Tie0__MemMode51_4__CondCode2_0,
  Convert__Reg1_3__Reg1_1__Tie0__Reg1_4__Imm1_5__CondCode2_0,
  Convert__Reg1_4__Reg1_1__Reg1_2__Tie0__Reg1_6__Imm1_7__CondCode2_0,
  Convert__Reg1_4__Reg1_1__Reg1_2__Tie0__Reg1_5__Imm1_6__CondCode2_0,
  Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_5__CondCode2_0,
  Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_5__CondCode2_0,
  Convert__Reg1_1__Reg1_2__Imm1_4__CondCode2_0,
  Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_0,
  Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0,
  Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0,
  Convert__Reg1_2__Imm1_3__Tie0__CondCode2_0,
  Convert__Reg1_1__Tie0__Reg1_2__Reg1_3__CondCode2_0,
  Convert__Reg1_2__CondCode2_0,
  Convert__Reg1_3__Reg1_4__CondCode2_0,
  Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_0,
  Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_5__CondCode2_0,
  Convert__Reg1_3__Reg1_5__Imm1_6__CondCode2_0,
  Convert__Reg1_3__Reg1_5__Tie1__Imm1_7__CondCode2_0,
  Convert__Reg1_3__Reg1_4__Reg1_6__Imm1_7__CondCode2_0,
  Convert__Reg1_3__Reg1_7__Imm1_8__CondCode2_0,
  Convert__Reg1_3__Reg1_4__Reg1_6__Tie2__Imm1_8__CondCode2_0,
  Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Imm1_8__CondCode2_0,
  Convert__Reg1_3__Reg1_7__Tie1__Imm1_9__CondCode2_0,
  Convert__Reg1_3__Reg1_8__Imm1_9__Tie0__Imm1_5__CondCode2_0,
  Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Tie3__Imm1_9__CondCode2_0,
  Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Imm1_9__CondCode2_0,
  Convert__Reg1_3__Reg1_8__Tie1__Imm1_10__Tie0__Imm1_5__CondCode2_0,
  Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie4__Imm1_10__CondCode2_0,
  Convert__Reg1_3__Reg1_6__Reg1_10__Imm1_11__CondCode2_0,
  Convert__Reg1_3__Reg1_6__Reg1_10__Tie2__Imm1_12__CondCode2_0,
  Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_13__Imm1_14__CondCode2_0,
  Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_13__Tie3__Imm1_15__CondCode2_0,
  Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_12__Reg1_16__Imm1_17__CondCode2_0,
  Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_12__Reg1_16__Tie4__Imm1_18__CondCode2_0,
  Convert__Reg1_1__CondCode2_0__DPRRegList1_2,
  Convert__Reg1_1__CondCode2_0__SPRRegList1_2,
  Convert__Reg1_1__Tie0__CondCode2_0__DPRRegList1_3,
  Convert__Reg1_1__Tie0__CondCode2_0__SPRRegList1_3,
  Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0,
  Convert__Reg1_2__Tie0__Reg1_6__Imm1_4__CondCode2_0,
  Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_0,
  Convert__Reg1_5__Imm1_6__Reg1_3__CondCode2_0,
  Convert__Reg1_5__Tie0__Imm1_7__Reg1_3__CondCode2_0,
  Convert__Reg1_6__Imm1_7__Reg1_3__Reg1_4__CondCode2_0,
  Convert__Reg1_6__Tie0__Imm1_8__Reg1_3__Reg1_4__CondCode2_0,
  Convert__Reg1_7__Imm1_8__Reg1_3__Reg1_4__Reg1_5__CondCode2_0,
  Convert__Reg1_8__Imm1_9__Reg1_3__Imm1_5__CondCode2_0,
  Convert__Reg1_7__Tie0__Imm1_9__Reg1_3__Reg1_4__Reg1_5__CondCode2_0,
  Convert__Reg1_8__Imm1_9__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0,
  Convert__Reg1_8__Tie0__Imm1_10__Reg1_3__Imm1_5__CondCode2_0,
  Convert__Reg1_8__Tie0__Imm1_10__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0,
  Convert__Reg1_2__Reg1_4__Reg1_6__CondCode2_0,
  Convert__Reg1_2__Reg1_4__Reg1_5__Reg1_7__CondCode2_0,
  Convert__Reg1_2__Reg1_4__Reg1_5__Reg1_6__Reg1_8__CondCode2_0,
  Convert__Reg1_2__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_9__CondCode2_0,
  Convert__Reg1_2__Tie0__Reg1_4__Reg1_6__CondCode2_0,
  Convert__Reg1_2__Tie0__Reg1_4__Reg1_5__Reg1_7__CondCode2_0,
  Convert__Reg1_2__Tie0__Reg1_4__Reg1_5__Reg1_6__Reg1_8__CondCode2_0,
  Convert__Reg1_2__Tie0__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_9__CondCode2_0,
  Convert__Reg1_2__Reg1_3__Tie0__Tie1__CondCode2_0,
  NumConversionVariants
};

bool ARMAsmParser::
ConvertToMCInst(unsigned Kind, MCInst &Inst, unsigned Opcode,
                      const SmallVectorImpl<MCParsedAsmOperand*> &Operands) {
  Inst.setOpcode(Opcode);
  switch (Kind) {
  default:
  case Convert__Reg1_2__CCOut1_0__Tie0__Reg1_3__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCCOutOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1__CCOut1_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCCOutOperands(Inst, 1);
    return true;
  case Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1__CCOut1_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCCOutOperands(Inst, 1);
    return true;
  case Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__CCOut1_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCCOutOperands(Inst, 1);
    return true;
  case Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1__CCOut1_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCCOutOperands(Inst, 1);
    return true;
  case Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1__CCOut1_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCCOutOperands(Inst, 1);
    return true;
  case Convert__Reg1_0__Tie0__Reg1_1:
    ((ARMOperand*)Operands[1])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    return true;
  case Convert__Reg1_0__Tie0__Imm1_1:
    ((ARMOperand*)Operands[1])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    return true;
  case Convert__Reg1_0__Imm1_2:
    ((ARMOperand*)Operands[1])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    return true;
  case Convert__Reg1_0__Reg1_1__Imm1_2:
    ((ARMOperand*)Operands[1])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    return true;
  case Convert__Reg1_1__Tie0__Reg1_2__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__CCOut1_0__Tie0__Imm1_3__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCCOutOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__CCOut1_0__Reg1_3__Reg1_4__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCCOutOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__CCOut1_0__Reg1_3__Imm1_4__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCCOutOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__CCOut1_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCCOutOperands(Inst, 1);
    return true;
  case Convert__Reg1_1__Reg1_2__Imm1_3__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__Imm1_3__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Imm1_4__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Imm1_0:
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    return true;
  case Convert__Imm1_1:
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    return true;
  case Convert__Imm1_1__CondCode2_0:
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Imm1_2__CondCode2_0:
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__Tie0__Imm1_2__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__Tie0__Reg1_2__Imm1_3__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__Tie0__Reg1_2__Imm1_3__Imm1_4__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert:
    return true;
  case Convert__CondCode2_0__Imm1_1:
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    return true;
  case Convert__Reg1_0:
    ((ARMOperand*)Operands[1])->addRegOperands(Inst, 1);
    return true;
  case Convert__Reg1_1__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__CondCode2_0__Reg1_1:
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    return true;
  case Convert__CondCode2_0:
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_0__Imm1_1:
    ((ARMOperand*)Operands[1])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    return true;
  case Convert__CoprocNum1_0__Imm1_1__CoprocReg1_2__CoprocReg1_3__CoprocReg1_4__Imm1_5:
    ((ARMOperand*)Operands[1])->addCoprocNumOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addCoprocRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addCoprocRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addCoprocRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    return true;
  case Convert__CoprocNum1_1__Imm1_2__CoprocReg1_3__CoprocReg1_4__CoprocReg1_5__Imm1_6__CondCode2_0:
    ((ARMOperand*)Operands[2])->addCoprocNumOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addCoprocRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addCoprocRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addCoprocRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__Reg1_2__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__Imm1_2__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Reg1_3__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Imm1_3__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_4__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Imm1_0__ProcIFlags1_1:
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addProcIFlagsOperands(Inst, 1);
    return true;
  case Convert__Imm1_0__ProcIFlags1_2:
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addProcIFlagsOperands(Inst, 1);
    return true;
  case Convert__Imm1_0__ProcIFlags1_1__Imm1_2:
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addProcIFlagsOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    return true;
  case Convert__Imm1_0__ProcIFlags1_2__Imm1_3:
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addProcIFlagsOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    return true;
  case Convert__MemBarrierOpt1_0:
    ((ARMOperand*)Operands[1])->addMemBarrierOptOperands(Inst, 1);
    return true;
  case Convert__Imm1_1__Imm1_0:
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addImmOperands(Inst, 1);
    return true;
  case Convert__Imm1_2__Imm1_4__Reg1_5__Reg1_6__Imm1_7__CondCode2_0:
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[8])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Imm1_2__Imm1_4__Reg1_6__Imm1_8__CondCode2_0:
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[9])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Imm1_2__Imm1_4__Reg1_6__Reg1_8__Imm1_9__CondCode2_0:
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[9])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[10])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__CondCode2_0__RegList1_2:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[3])->addRegListOperands(Inst, 1);
    return true;
  case Convert__Reg1_1__Tie0__CondCode2_0__RegList1_3:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[4])->addRegListOperands(Inst, 1);
    return true;
  case Convert__Reg1_2__CondCode2_0__RegList1_3:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[4])->addRegListOperands(Inst, 1);
    return true;
  case Convert__Reg1_2__Tie0__CondCode2_0__RegList1_3:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[4])->addRegListOperands(Inst, 1);
    return true;
  case Convert__Reg1_2__Tie0__CondCode2_0__RegList1_4:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[5])->addRegListOperands(Inst, 1);
    return true;
  case Convert__Reg1_1__MemModeImmThumb2_2__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addMemModeImmThumbOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__MemModeRegThumb2_2__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addMemModeRegThumbOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__MemMode52_2__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addMemMode5Operands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__MemModeImmThumb1_3__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addMemModeImmThumbOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__MemMode52_3__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addMemMode5Operands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__MemMode53_3__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addMemMode5Operands(Inst, 3);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__MemMode51_2__Tie1__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addMemMode5Operands(Inst, 1);
    Inst.addOperand(Inst.getOperand(1));
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__Reg1_3__Tie1__MemMode51_5__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(1));
    ((ARMOperand*)Operands[6])->addMemMode5Operands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__Reg1_2__Tie1__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(1));
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__Reg1_3__Tie1__Reg1_5__Imm1_6__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(1));
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__Reg1_2__MemMode52_3__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addMemMode5Operands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__Reg1_2__Reg1_4__Imm1_6__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__Reg1_2__Reg1_4__Imm1_5__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__Reg1_3__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__Reg1_2__Reg1_4__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    return true;
  case Convert__CoprocNum1_0__Imm1_1__Reg1_2__CoprocReg1_3__CoprocReg1_4__Imm1_5:
    ((ARMOperand*)Operands[1])->addCoprocNumOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addCoprocRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addCoprocRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    return true;
  case Convert__CoprocNum1_1__Imm1_2__Reg1_3__CoprocReg1_4__CoprocReg1_5__Imm1_6__CondCode2_0:
    ((ARMOperand*)Operands[2])->addCoprocNumOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addCoprocRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addCoprocRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__CoprocNum1_0__Imm1_1__Reg1_2__Reg1_3__CoprocReg1_4:
    ((ARMOperand*)Operands[1])->addCoprocNumOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addCoprocRegOperands(Inst, 1);
    return true;
  case Convert__CoprocNum1_1__Imm1_2__Reg1_3__Reg1_4__CoprocReg1_5__CondCode2_0:
    ((ARMOperand*)Operands[2])->addCoprocNumOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addCoprocRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__CCOut1_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCCOutOperands(Inst, 1);
    return true;
  case Convert__Reg1_0__Reg1_1:
    ((ARMOperand*)Operands[1])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    return true;
  case Convert__Reg1_1:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    return true;
  case Convert__Reg1_2__CCOut1_0__Imm1_3__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCCOutOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Reg1_3__CondCode2_1__CCOut1_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCCOutOperands(Inst, 1);
    return true;
  case Convert__Reg1_2__Imm1_3__CondCode2_1__CCOut1_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCCOutOperands(Inst, 1);
    return true;
  case Convert__Reg1_2__Tie0__Reg1_3__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Tie0__Imm1_3__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Imm1_4__CondCode2_1__CCOut1_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCCOutOperands(Inst, 1);
    return true;
  case Convert__Reg1_3__Reg1_4__CondCode2_1__CCOut1_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCCOutOperands(Inst, 1);
    return true;
  case Convert__Reg1_1__Tie0__Reg1_2__Reg1_3__Imm1_4__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__CCOut1_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCCOutOperands(Inst, 1);
    return true;
  case Convert__MSRMask1_1__Reg1_2__CondCode2_0:
    ((ARMOperand*)Operands[2])->addMSRMaskOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__MSRMask1_1__Imm1_2__CondCode2_0:
    ((ARMOperand*)Operands[2])->addMSRMaskOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__CCOut1_0__Reg1_3__CondCode2_1:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCCOutOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__MemMode52_1__CondCode2_0:
    ((ARMOperand*)Operands[2])->addMemMode5Operands(Inst, 2);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__MemMode53_1__CondCode2_0:
    ((ARMOperand*)Operands[2])->addMemMode5Operands(Inst, 3);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__CondCode2_0__RegList1_1:
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[2])->addRegListOperands(Inst, 1);
    return true;
  case Convert__Reg1_1__Reg1_2__Imm1_3__Imm1_4__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Imm1_3__CondCode2_0:
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__Imm1_2__Reg1_3__Imm1_4__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__Imm1_2__Reg1_3__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_1__Tie0__MemMode51_5__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[6])->addMemMode5Operands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_1__Tie0__Reg1_5__Imm1_6__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_1__Tie0__MemMode51_4__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[5])->addMemMode5Operands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_1__Tie0__Reg1_4__Imm1_5__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_4__Reg1_1__Reg1_2__Tie0__Reg1_6__Imm1_7__CondCode2_0:
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[8])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_4__Reg1_1__Reg1_2__Tie0__Reg1_5__Imm1_6__CondCode2_0:
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_5__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_5__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__Reg1_2__Imm1_4__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Imm1_3__Tie0__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addImmOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__Tie0__Reg1_2__Reg1_3__CondCode2_0:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_4__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_5__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_5__Imm1_6__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_5__Tie1__Imm1_7__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(1));
    ((ARMOperand*)Operands[8])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_4__Reg1_6__Imm1_7__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[8])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_7__Imm1_8__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[8])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[9])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_4__Reg1_6__Tie2__Imm1_8__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(2));
    ((ARMOperand*)Operands[9])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Imm1_8__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[8])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[9])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_7__Tie1__Imm1_9__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[8])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(1));
    ((ARMOperand*)Operands[10])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_8__Imm1_9__Tie0__Imm1_5__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[9])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[10])->addImmOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Tie3__Imm1_9__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[8])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(3));
    ((ARMOperand*)Operands[10])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Imm1_9__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[9])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[10])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_8__Tie1__Imm1_10__Tie0__Imm1_5__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[9])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(1));
    ((ARMOperand*)Operands[11])->addImmOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie4__Imm1_10__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[9])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(4));
    ((ARMOperand*)Operands[11])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_6__Reg1_10__Imm1_11__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[11])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[12])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_6__Reg1_10__Tie2__Imm1_12__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[11])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(2));
    ((ARMOperand*)Operands[13])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_13__Imm1_14__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[10])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[14])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[15])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_13__Tie3__Imm1_15__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[10])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[14])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(3));
    ((ARMOperand*)Operands[16])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_12__Reg1_16__Imm1_17__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[10])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[13])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[17])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[18])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_12__Reg1_16__Tie4__Imm1_18__CondCode2_0:
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[10])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[13])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[17])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(4));
    ((ARMOperand*)Operands[19])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_1__CondCode2_0__DPRRegList1_2:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[3])->addDPRRegListOperands(Inst, 1);
    return true;
  case Convert__Reg1_1__CondCode2_0__SPRRegList1_2:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[3])->addSPRRegListOperands(Inst, 1);
    return true;
  case Convert__Reg1_1__Tie0__CondCode2_0__DPRRegList1_3:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[4])->addDPRRegListOperands(Inst, 1);
    return true;
  case Convert__Reg1_1__Tie0__CondCode2_0__SPRRegList1_3:
    ((ARMOperand*)Operands[2])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    ((ARMOperand*)Operands[4])->addSPRRegListOperands(Inst, 1);
    return true;
  case Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Tie0__Reg1_6__Imm1_4__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_5__Imm1_6__Reg1_3__CondCode2_0:
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_5__Tie0__Imm1_7__Reg1_3__CondCode2_0:
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[8])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_6__Imm1_7__Reg1_3__Reg1_4__CondCode2_0:
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[8])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_6__Tie0__Imm1_8__Reg1_3__Reg1_4__CondCode2_0:
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[9])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_7__Imm1_8__Reg1_3__Reg1_4__Reg1_5__CondCode2_0:
    ((ARMOperand*)Operands[8])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[9])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_8__Imm1_9__Reg1_3__Imm1_5__CondCode2_0:
    ((ARMOperand*)Operands[9])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[10])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_7__Tie0__Imm1_9__Reg1_3__Reg1_4__Reg1_5__CondCode2_0:
    ((ARMOperand*)Operands[8])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[10])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_8__Imm1_9__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0:
    ((ARMOperand*)Operands[9])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[10])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_8__Tie0__Imm1_10__Reg1_3__Imm1_5__CondCode2_0:
    ((ARMOperand*)Operands[9])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[11])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_8__Tie0__Imm1_10__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0:
    ((ARMOperand*)Operands[9])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[11])->addImmOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Reg1_4__Reg1_6__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Reg1_4__Reg1_5__Reg1_7__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[8])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Reg1_4__Reg1_5__Reg1_6__Reg1_8__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[9])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_9__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[8])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[10])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Tie0__Reg1_4__Reg1_6__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Tie0__Reg1_4__Reg1_5__Reg1_7__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[8])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Tie0__Reg1_4__Reg1_5__Reg1_6__Reg1_8__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[9])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Tie0__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_9__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    ((ARMOperand*)Operands[5])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[6])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[7])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[8])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[10])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  case Convert__Reg1_2__Reg1_3__Tie0__Tie1__CondCode2_0:
    ((ARMOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((ARMOperand*)Operands[4])->addRegOperands(Inst, 1);
    Inst.addOperand(Inst.getOperand(0));
    Inst.addOperand(Inst.getOperand(1));
    ((ARMOperand*)Operands[1])->addCondCodeOperands(Inst, 2);
    return true;
  }
  return false;
}

namespace {

/// MatchClassKind - The kinds of classes which participate in
/// instruction matching.
enum MatchClassKind {
  InvalidMatchClass = 0,
  MCK__EXCLAIM_, // '!'
  MCK__35_, // '#'
  MCK__35_0, // '#0'
  MCK__35_1, // '#1'
  MCK__DOT_16, // '.16'
  MCK__DOT_32, // '.32'
  MCK__DOT_64, // '.64'
  MCK__DOT_8, // '.8'
  MCK__DOT_f16, // '.f16'
  MCK__DOT_f32, // '.f32'
  MCK__DOT_f64, // '.f64'
  MCK__DOT_i16, // '.i16'
  MCK__DOT_i32, // '.i32'
  MCK__DOT_i64, // '.i64'
  MCK__DOT_i8, // '.i8'
  MCK__DOT_n, // '.n'
  MCK__DOT_p8, // '.p8'
  MCK__DOT_s16, // '.s16'
  MCK__DOT_s32, // '.s32'
  MCK__DOT_s64, // '.s64'
  MCK__DOT_s8, // '.s8'
  MCK__DOT_u16, // '.u16'
  MCK__DOT_u32, // '.u32'
  MCK__DOT_u64, // '.u64'
  MCK__DOT_u8, // '.u8'
  MCK__DOT_w, // '.w'
  MCK_0, // '0'
  MCK_5, // '5'
  MCK__64_, // '@'
  MCK_TAILCALL, // 'TAILCALL'
  MCK__91_, // '['
  MCK__93_, // ']'
  MCK__95__95_aeabi_95_read_95_tp, // '__aeabi_read_tp'
  MCK_apsr_95_nzcv, // 'apsr_nzcv'
  MCK_be, // 'be'
  MCK_c10, // 'c10'
  MCK_c7, // 'c7'
  MCK_cr, // 'cr'
  MCK_le, // 'le'
  MCK_lsl, // 'lsl'
  MCK_p, // 'p'
  MCK_p15, // 'p15'
  MCK_ror, // 'ror'
  MCK_spsr, // 'spsr'
  MCK__123_, // '{'
  MCK__125_, // '}'
  MCK_Reg0, // derived register class
  MCK_tGPR, // register class 'tGPR'
  MCK_tcGPR, // register class 'tcGPR'
  MCK_LR, // register class 'LR'
  MCK_rGPR, // register class 'rGPR'
  MCK_SP, // register class 'SP'
  MCK_PC, // register class 'PC'
  MCK_GPR, // register class 'GPR'
  MCK_SPR_8, // register class 'SPR_8'
  MCK_SPR, // register class 'SPR'
  MCK_DPR_8, // register class 'DPR_8'
  MCK_DPR_VFP2, // register class 'DPR_VFP2'
  MCK_DPR, // register class 'DPR'
  MCK_QPR_8, // register class 'QPR_8'
  MCK_QPR_VFP2, // register class 'QPR_VFP2'
  MCK_QPR, // register class 'QPR'
  MCK_QQPR_VFP2, // register class 'QQPR_VFP2'
  MCK_QQPR, // register class 'QQPR'
  MCK_QQQQPR, // register class 'QQQQPR'
  MCK_CCR, // register class 'CCR,CPSR'
  MCK_FPSCR, // register class 'FPSCR'
  MCK_FPSID, // register class 'FPSID'
  MCK_FPEXC, // register class 'FPEXC'
  MCK_CCOut, // user defined class 'CCOutOperand'
  MCK_CondCode, // user defined class 'CondCodeOperand'
  MCK_CoprocNum, // user defined class 'CoprocNumAsmOperand'
  MCK_CoprocReg, // user defined class 'CoprocRegAsmOperand'
  MCK_DPRRegList, // user defined class 'DPRRegListAsmOperand'
  MCK_Imm, // user defined class 'ImmAsmOperand'
  MCK_MSRMask, // user defined class 'MSRMaskOperand'
  MCK_MemBarrierOpt, // user defined class 'MemBarrierOptOperand'
  MCK_MemMode5, // user defined class 'MemMode5AsmOperand'
  MCK_MemModeImmThumb, // user defined class 'MemModeImmThumbAsmOperand'
  MCK_MemModeRegThumb, // user defined class 'MemModeRegThumbAsmOperand'
  MCK_ProcIFlags, // user defined class 'ProcIFlagsOperand'
  MCK_RegList, // user defined class 'RegListAsmOperand'
  MCK_SPRRegList, // user defined class 'SPRRegListAsmOperand'
  NumMatchClassKinds
};

}

static MatchClassKind MatchTokenString(StringRef Name) {
  switch (Name.size()) {
  default: break;
  case 1:	 // 10 strings to match.
    switch (Name[0]) {
    default: break;
    case '!':	 // 1 string to match.
      return MCK__EXCLAIM_;	 // "!"
    case '#':	 // 1 string to match.
      return MCK__35_;	 // "#"
    case '0':	 // 1 string to match.
      return MCK_0;	 // "0"
    case '5':	 // 1 string to match.
      return MCK_5;	 // "5"
    case '@':	 // 1 string to match.
      return MCK__64_;	 // "@"
    case '[':	 // 1 string to match.
      return MCK__91_;	 // "["
    case ']':	 // 1 string to match.
      return MCK__93_;	 // "]"
    case 'p':	 // 1 string to match.
      return MCK_p;	 // "p"
    case '{':	 // 1 string to match.
      return MCK__123_;	 // "{"
    case '}':	 // 1 string to match.
      return MCK__125_;	 // "}"
    }
    break;
  case 2:	 // 9 strings to match.
    switch (Name[0]) {
    default: break;
    case '#':	 // 2 strings to match.
      switch (Name[1]) {
      default: break;
      case '0':	 // 1 string to match.
        return MCK__35_0;	 // "#0"
      case '1':	 // 1 string to match.
        return MCK__35_1;	 // "#1"
      }
      break;
    case '.':	 // 3 strings to match.
      switch (Name[1]) {
      default: break;
      case '8':	 // 1 string to match.
        return MCK__DOT_8;	 // ".8"
      case 'n':	 // 1 string to match.
        return MCK__DOT_n;	 // ".n"
      case 'w':	 // 1 string to match.
        return MCK__DOT_w;	 // ".w"
      }
      break;
    case 'b':	 // 1 string to match.
      if (Name[1] != 'e')
        break;
      return MCK_be;	 // "be"
    case 'c':	 // 2 strings to match.
      switch (Name[1]) {
      default: break;
      case '7':	 // 1 string to match.
        return MCK_c7;	 // "c7"
      case 'r':	 // 1 string to match.
        return MCK_cr;	 // "cr"
      }
      break;
    case 'l':	 // 1 string to match.
      if (Name[1] != 'e')
        break;
      return MCK_le;	 // "le"
    }
    break;
  case 3:	 // 11 strings to match.
    switch (Name[0]) {
    default: break;
    case '.':	 // 7 strings to match.
      switch (Name[1]) {
      default: break;
      case '1':	 // 1 string to match.
        if (Name[2] != '6')
          break;
        return MCK__DOT_16;	 // ".16"
      case '3':	 // 1 string to match.
        if (Name[2] != '2')
          break;
        return MCK__DOT_32;	 // ".32"
      case '6':	 // 1 string to match.
        if (Name[2] != '4')
          break;
        return MCK__DOT_64;	 // ".64"
      case 'i':	 // 1 string to match.
        if (Name[2] != '8')
          break;
        return MCK__DOT_i8;	 // ".i8"
      case 'p':	 // 1 string to match.
        if (Name[2] != '8')
          break;
        return MCK__DOT_p8;	 // ".p8"
      case 's':	 // 1 string to match.
        if (Name[2] != '8')
          break;
        return MCK__DOT_s8;	 // ".s8"
      case 'u':	 // 1 string to match.
        if (Name[2] != '8')
          break;
        return MCK__DOT_u8;	 // ".u8"
      }
      break;
    case 'c':	 // 1 string to match.
      if (Name.substr(1, 2) != "10")
        break;
      return MCK_c10;	 // "c10"
    case 'l':	 // 1 string to match.
      if (Name.substr(1, 2) != "sl")
        break;
      return MCK_lsl;	 // "lsl"
    case 'p':	 // 1 string to match.
      if (Name.substr(1, 2) != "15")
        break;
      return MCK_p15;	 // "p15"
    case 'r':	 // 1 string to match.
      if (Name.substr(1, 2) != "or")
        break;
      return MCK_ror;	 // "ror"
    }
    break;
  case 4:	 // 13 strings to match.
    switch (Name[0]) {
    default: break;
    case '.':	 // 12 strings to match.
      switch (Name[1]) {
      default: break;
      case 'f':	 // 3 strings to match.
        switch (Name[2]) {
        default: break;
        case '1':	 // 1 string to match.
          if (Name[3] != '6')
            break;
          return MCK__DOT_f16;	 // ".f16"
        case '3':	 // 1 string to match.
          if (Name[3] != '2')
            break;
          return MCK__DOT_f32;	 // ".f32"
        case '6':	 // 1 string to match.
          if (Name[3] != '4')
            break;
          return MCK__DOT_f64;	 // ".f64"
        }
        break;
      case 'i':	 // 3 strings to match.
        switch (Name[2]) {
        default: break;
        case '1':	 // 1 string to match.
          if (Name[3] != '6')
            break;
          return MCK__DOT_i16;	 // ".i16"
        case '3':	 // 1 string to match.
          if (Name[3] != '2')
            break;
          return MCK__DOT_i32;	 // ".i32"
        case '6':	 // 1 string to match.
          if (Name[3] != '4')
            break;
          return MCK__DOT_i64;	 // ".i64"
        }
        break;
      case 's':	 // 3 strings to match.
        switch (Name[2]) {
        default: break;
        case '1':	 // 1 string to match.
          if (Name[3] != '6')
            break;
          return MCK__DOT_s16;	 // ".s16"
        case '3':	 // 1 string to match.
          if (Name[3] != '2')
            break;
          return MCK__DOT_s32;	 // ".s32"
        case '6':	 // 1 string to match.
          if (Name[3] != '4')
            break;
          return MCK__DOT_s64;	 // ".s64"
        }
        break;
      case 'u':	 // 3 strings to match.
        switch (Name[2]) {
        default: break;
        case '1':	 // 1 string to match.
          if (Name[3] != '6')
            break;
          return MCK__DOT_u16;	 // ".u16"
        case '3':	 // 1 string to match.
          if (Name[3] != '2')
            break;
          return MCK__DOT_u32;	 // ".u32"
        case '6':	 // 1 string to match.
          if (Name[3] != '4')
            break;
          return MCK__DOT_u64;	 // ".u64"
        }
        break;
      }
      break;
    case 's':	 // 1 string to match.
      if (Name.substr(1, 3) != "psr")
        break;
      return MCK_spsr;	 // "spsr"
    }
    break;
  case 8:	 // 1 string to match.
    if (Name.substr(0, 8) != "TAILCALL")
      break;
    return MCK_TAILCALL;	 // "TAILCALL"
  case 9:	 // 1 string to match.
    if (Name.substr(0, 9) != "apsr_nzcv")
      break;
    return MCK_apsr_95_nzcv;	 // "apsr_nzcv"
  case 15:	 // 1 string to match.
    if (Name.substr(0, 15) != "__aeabi_read_tp")
      break;
    return MCK__95__95_aeabi_95_read_95_tp;	 // "__aeabi_read_tp"
  }
  return InvalidMatchClass;
}

/// IsSubclass - Compute whether \arg A is a subclass of \arg B.
static bool IsSubclass(MatchClassKind A, MatchClassKind B) {
  if (A == B)
    return true;

  switch (A) {
  default:
    return false;

  case MCK_Reg0:
    switch (B) {
    default: return false;
    case MCK_tGPR: return true;
    case MCK_tcGPR: return true;
    case MCK_rGPR: return true;
    case MCK_GPR: return true;
    }

  case MCK_tGPR:
    switch (B) {
    default: return false;
    case MCK_rGPR: return true;
    case MCK_GPR: return true;
    }

  case MCK_tcGPR:
    switch (B) {
    default: return false;
    case MCK_rGPR: return true;
    case MCK_GPR: return true;
    }

  case MCK_LR:
    switch (B) {
    default: return false;
    case MCK_rGPR: return true;
    case MCK_GPR: return true;
    }

  case MCK_rGPR:
    return B == MCK_GPR;

  case MCK_SP:
    return B == MCK_GPR;

  case MCK_PC:
    return B == MCK_GPR;

  case MCK_SPR_8:
    return B == MCK_SPR;

  case MCK_DPR_8:
    switch (B) {
    default: return false;
    case MCK_DPR_VFP2: return true;
    case MCK_DPR: return true;
    }

  case MCK_DPR_VFP2:
    return B == MCK_DPR;

  case MCK_QPR_8:
    switch (B) {
    default: return false;
    case MCK_QPR_VFP2: return true;
    case MCK_QPR: return true;
    }

  case MCK_QPR_VFP2:
    return B == MCK_QPR;

  case MCK_QQPR_VFP2:
    return B == MCK_QQPR;
  }
}

static bool ValidateOperandClass(MCParsedAsmOperand *GOp, MatchClassKind Kind) {
  ARMOperand &Operand = *(ARMOperand*)GOp;
  if (Operand.isToken())
    return MatchTokenString(Operand.getToken()) == Kind;

  if (Operand.isReg()) {
    MatchClassKind OpKind;
    switch (Operand.getReg()) {
    default: OpKind = InvalidMatchClass; break;
    case ARM::R0: OpKind = MCK_Reg0; break;
    case ARM::R1: OpKind = MCK_Reg0; break;
    case ARM::R2: OpKind = MCK_Reg0; break;
    case ARM::R3: OpKind = MCK_Reg0; break;
    case ARM::R4: OpKind = MCK_tGPR; break;
    case ARM::R5: OpKind = MCK_tGPR; break;
    case ARM::R6: OpKind = MCK_tGPR; break;
    case ARM::R7: OpKind = MCK_tGPR; break;
    case ARM::R8: OpKind = MCK_rGPR; break;
    case ARM::R9: OpKind = MCK_tcGPR; break;
    case ARM::R10: OpKind = MCK_rGPR; break;
    case ARM::R11: OpKind = MCK_rGPR; break;
    case ARM::R12: OpKind = MCK_tcGPR; break;
    case ARM::SP: OpKind = MCK_SP; break;
    case ARM::LR: OpKind = MCK_LR; break;
    case ARM::PC: OpKind = MCK_PC; break;
    case ARM::S0: OpKind = MCK_SPR_8; break;
    case ARM::S1: OpKind = MCK_SPR_8; break;
    case ARM::S2: OpKind = MCK_SPR_8; break;
    case ARM::S3: OpKind = MCK_SPR_8; break;
    case ARM::S4: OpKind = MCK_SPR_8; break;
    case ARM::S5: OpKind = MCK_SPR_8; break;
    case ARM::S6: OpKind = MCK_SPR_8; break;
    case ARM::S7: OpKind = MCK_SPR_8; break;
    case ARM::S8: OpKind = MCK_SPR_8; break;
    case ARM::S9: OpKind = MCK_SPR_8; break;
    case ARM::S10: OpKind = MCK_SPR_8; break;
    case ARM::S11: OpKind = MCK_SPR_8; break;
    case ARM::S12: OpKind = MCK_SPR_8; break;
    case ARM::S13: OpKind = MCK_SPR_8; break;
    case ARM::S14: OpKind = MCK_SPR_8; break;
    case ARM::S15: OpKind = MCK_SPR_8; break;
    case ARM::S16: OpKind = MCK_SPR; break;
    case ARM::S17: OpKind = MCK_SPR; break;
    case ARM::S18: OpKind = MCK_SPR; break;
    case ARM::S19: OpKind = MCK_SPR; break;
    case ARM::S20: OpKind = MCK_SPR; break;
    case ARM::S21: OpKind = MCK_SPR; break;
    case ARM::S22: OpKind = MCK_SPR; break;
    case ARM::S23: OpKind = MCK_SPR; break;
    case ARM::S24: OpKind = MCK_SPR; break;
    case ARM::S25: OpKind = MCK_SPR; break;
    case ARM::S26: OpKind = MCK_SPR; break;
    case ARM::S27: OpKind = MCK_SPR; break;
    case ARM::S28: OpKind = MCK_SPR; break;
    case ARM::S29: OpKind = MCK_SPR; break;
    case ARM::S30: OpKind = MCK_SPR; break;
    case ARM::S31: OpKind = MCK_SPR; break;
    case ARM::D0: OpKind = MCK_DPR_8; break;
    case ARM::D1: OpKind = MCK_DPR_8; break;
    case ARM::D2: OpKind = MCK_DPR_8; break;
    case ARM::D3: OpKind = MCK_DPR_8; break;
    case ARM::D4: OpKind = MCK_DPR_8; break;
    case ARM::D5: OpKind = MCK_DPR_8; break;
    case ARM::D6: OpKind = MCK_DPR_8; break;
    case ARM::D7: OpKind = MCK_DPR_8; break;
    case ARM::D8: OpKind = MCK_DPR_VFP2; break;
    case ARM::D9: OpKind = MCK_DPR_VFP2; break;
    case ARM::D10: OpKind = MCK_DPR_VFP2; break;
    case ARM::D11: OpKind = MCK_DPR_VFP2; break;
    case ARM::D12: OpKind = MCK_DPR_VFP2; break;
    case ARM::D13: OpKind = MCK_DPR_VFP2; break;
    case ARM::D14: OpKind = MCK_DPR_VFP2; break;
    case ARM::D15: OpKind = MCK_DPR_VFP2; break;
    case ARM::D16: OpKind = MCK_DPR; break;
    case ARM::D17: OpKind = MCK_DPR; break;
    case ARM::D18: OpKind = MCK_DPR; break;
    case ARM::D19: OpKind = MCK_DPR; break;
    case ARM::D20: OpKind = MCK_DPR; break;
    case ARM::D21: OpKind = MCK_DPR; break;
    case ARM::D22: OpKind = MCK_DPR; break;
    case ARM::D23: OpKind = MCK_DPR; break;
    case ARM::D24: OpKind = MCK_DPR; break;
    case ARM::D25: OpKind = MCK_DPR; break;
    case ARM::D26: OpKind = MCK_DPR; break;
    case ARM::D27: OpKind = MCK_DPR; break;
    case ARM::D28: OpKind = MCK_DPR; break;
    case ARM::D29: OpKind = MCK_DPR; break;
    case ARM::D30: OpKind = MCK_DPR; break;
    case ARM::D31: OpKind = MCK_DPR; break;
    case ARM::Q9: OpKind = MCK_QPR; break;
    case ARM::Q8: OpKind = MCK_QPR; break;
    case ARM::Q0: OpKind = MCK_QPR_8; break;
    case ARM::Q1: OpKind = MCK_QPR_8; break;
    case ARM::Q2: OpKind = MCK_QPR_8; break;
    case ARM::Q3: OpKind = MCK_QPR_8; break;
    case ARM::Q4: OpKind = MCK_QPR_VFP2; break;
    case ARM::Q5: OpKind = MCK_QPR_VFP2; break;
    case ARM::Q6: OpKind = MCK_QPR_VFP2; break;
    case ARM::Q7: OpKind = MCK_QPR_VFP2; break;
    case ARM::Q10: OpKind = MCK_QPR; break;
    case ARM::Q11: OpKind = MCK_QPR; break;
    case ARM::Q12: OpKind = MCK_QPR; break;
    case ARM::Q13: OpKind = MCK_QPR; break;
    case ARM::Q14: OpKind = MCK_QPR; break;
    case ARM::Q15: OpKind = MCK_QPR; break;
    case ARM::QQ0: OpKind = MCK_QQPR_VFP2; break;
    case ARM::QQ1: OpKind = MCK_QQPR_VFP2; break;
    case ARM::QQ2: OpKind = MCK_QQPR_VFP2; break;
    case ARM::QQ3: OpKind = MCK_QQPR_VFP2; break;
    case ARM::QQ4: OpKind = MCK_QQPR; break;
    case ARM::QQ5: OpKind = MCK_QQPR; break;
    case ARM::QQ6: OpKind = MCK_QQPR; break;
    case ARM::QQ7: OpKind = MCK_QQPR; break;
    case ARM::QQQQ0: OpKind = MCK_QQQQPR; break;
    case ARM::QQQQ1: OpKind = MCK_QQQQPR; break;
    case ARM::QQQQ2: OpKind = MCK_QQQQPR; break;
    case ARM::QQQQ3: OpKind = MCK_QQQQPR; break;
    case ARM::CPSR: OpKind = MCK_CCR; break;
    case ARM::FPSCR: OpKind = MCK_FPSCR; break;
    case ARM::FPSID: OpKind = MCK_FPSID; break;
    case ARM::FPEXC: OpKind = MCK_FPEXC; break;
    }
    return IsSubclass(OpKind, Kind);
  }

  // 'CCOut' class
  if (Kind == MCK_CCOut && Operand.isCCOut()) {
    return true;
  }

  // 'CondCode' class
  if (Kind == MCK_CondCode && Operand.isCondCode()) {
    return true;
  }

  // 'CoprocNum' class
  if (Kind == MCK_CoprocNum && Operand.isCoprocNum()) {
    return true;
  }

  // 'CoprocReg' class
  if (Kind == MCK_CoprocReg && Operand.isCoprocReg()) {
    return true;
  }

  // 'DPRRegList' class
  if (Kind == MCK_DPRRegList && Operand.isDPRRegList()) {
    return true;
  }

  // 'Imm' class
  if (Kind == MCK_Imm && Operand.isImm()) {
    return true;
  }

  // 'MSRMask' class
  if (Kind == MCK_MSRMask && Operand.isMSRMask()) {
    return true;
  }

  // 'MemBarrierOpt' class
  if (Kind == MCK_MemBarrierOpt && Operand.isMemBarrierOpt()) {
    return true;
  }

  // 'MemMode5' class
  if (Kind == MCK_MemMode5 && Operand.isMemMode5()) {
    return true;
  }

  // 'MemModeImmThumb' class
  if (Kind == MCK_MemModeImmThumb && Operand.isMemModeImmThumb()) {
    return true;
  }

  // 'MemModeRegThumb' class
  if (Kind == MCK_MemModeRegThumb && Operand.isMemModeRegThumb()) {
    return true;
  }

  // 'ProcIFlags' class
  if (Kind == MCK_ProcIFlags && Operand.isProcIFlags()) {
    return true;
  }

  // 'RegList' class
  if (Kind == MCK_RegList && Operand.isRegList()) {
    return true;
  }

  // 'SPRRegList' class
  if (Kind == MCK_SPRRegList && Operand.isSPRRegList()) {
    return true;
  }

  return false;
}

unsigned ARMAsmParser::
ComputeAvailableFeatures(const ARMSubtarget *Subtarget) const {
  unsigned Features = 0;
  if (Subtarget->hasV4TOps())
    Features |= Feature_HasV4T;
  if (Subtarget->hasV5TEOps())
    Features |= Feature_HasV5TE;
  if (Subtarget->hasV6Ops())
    Features |= Feature_HasV6;
  if (Subtarget->hasV6T2Ops())
    Features |= Feature_HasV6T2;
  if (Subtarget->hasV7Ops())
    Features |= Feature_HasV7;
  if (Subtarget->hasVFP2())
    Features |= Feature_HasVFP2;
  if (Subtarget->hasVFP3())
    Features |= Feature_HasVFP3;
  if (Subtarget->hasNEON())
    Features |= Feature_HasNEON;
  if (Subtarget->hasFP16())
    Features |= Feature_HasFP16;
  if (Subtarget->hasDivide())
    Features |= Feature_HasDivide;
  if (Subtarget->hasT2ExtractPack())
    Features |= Feature_HasT2ExtractPack;
  if (Subtarget->hasDataBarrier())
    Features |= Feature_HasDB;
  if (Subtarget->hasMPExtension())
    Features |= Feature_HasMP;
  if (Subtarget->isThumb())
    Features |= Feature_IsThumb;
  if (Subtarget->isThumb2())
    Features |= Feature_IsThumb2;
  if (!Subtarget->isThumb())
    Features |= Feature_IsARM;
  return Features;
}

namespace {
  struct MatchEntry {
    unsigned Opcode;
    const char *Mnemonic;
    ConversionKind ConvertFn;
    MatchClassKind Classes[19];
    unsigned RequiredFeatures;
  };

  // Predicate for searching for an opcode.
  struct LessOpcode {
    bool operator()(const MatchEntry &LHS, StringRef RHS) {
      return StringRef(LHS.Mnemonic) < RHS;
    }
    bool operator()(StringRef LHS, const MatchEntry &RHS) {
      return LHS < StringRef(RHS.Mnemonic);
    }
    bool operator()(const MatchEntry &LHS, const MatchEntry &RHS) {
      return StringRef(LHS.Mnemonic) < StringRef(RHS.Mnemonic);
    }
  };
} // end anonymous namespace.

static const MatchEntry MatchTable[1891] = {
  { ARM::tADC, "adc", Convert__Reg1_2__CCOut1_0__Tie0__Reg1_3__CondCode2_1, { MCK_CCOut, MCK_CondCode, MCK_tGPR, MCK_tGPR }, Feature_IsThumb},
  { ARM::t2ADCri, "adc", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::ADCrr, "adc", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::ADCri, "adc", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2ADCrr, "adc", Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::t2ADCrs, "adc", Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::ADCrs, "adc", Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::tADDrSP, "add", Convert__Reg1_0__Tie0__Reg1_1, { MCK_GPR, MCK_GPR }, Feature_IsThumb},
  { ARM::tADDspr, "add", Convert__Reg1_0__Tie0__Reg1_1, { MCK_GPR, MCK_GPR }, Feature_IsThumb},
  { ARM::tADDspi, "add", Convert__Reg1_0__Tie0__Imm1_1, { MCK_GPR, MCK_Imm }, Feature_IsThumb},
  { ARM::tADDrPCi, "add", Convert__Reg1_0__Imm1_2, { MCK_tGPR, MCK_PC, MCK_Imm }, Feature_IsThumb},
  { ARM::tADDrSPi, "add", Convert__Reg1_0__Reg1_1__Imm1_2, { MCK_tGPR, MCK_GPR, MCK_Imm }, Feature_IsThumb},
  { ARM::tADDhirr, "add", Convert__Reg1_1__Tie0__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR }, Feature_IsThumb},
  { ARM::tADDi8, "add", Convert__Reg1_2__CCOut1_0__Tie0__Imm1_3__CondCode2_1, { MCK_CCOut, MCK_CondCode, MCK_tGPR, MCK_Imm }, Feature_IsThumb},
  { ARM::tADDrr, "add", Convert__Reg1_2__CCOut1_0__Reg1_3__Reg1_4__CondCode2_1, { MCK_CCOut, MCK_CondCode, MCK_tGPR, MCK_tGPR, MCK_tGPR }, Feature_IsThumb},
  { ARM::tADDi3, "add", Convert__Reg1_2__CCOut1_0__Reg1_3__Imm1_4__CondCode2_1, { MCK_CCOut, MCK_CondCode, MCK_tGPR, MCK_tGPR, MCK_Imm }, Feature_IsThumb},
  { ARM::ADDrr, "add", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::ADDri, "add", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2ADDrr, "add", Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_GPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::t2ADDri, "add", Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_GPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2ADDrs, "add", Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_GPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::ADDrs, "add", Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2ADDri12, "addw", Convert__Reg1_1__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_GPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::tADR, "adr", Convert__Reg1_1__Imm1_3__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK__35_, MCK_Imm }, Feature_IsThumb},
  { ARM::ADR, "adr", Convert__Reg1_1__Imm1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__35_, MCK_Imm }, Feature_IsARM},
  { ARM::t2ADR, "adr", Convert__Reg1_2__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK__35_, MCK_Imm }, Feature_IsThumb2},
  { ARM::tAND, "and", Convert__Reg1_2__CCOut1_0__Tie0__Reg1_3__CondCode2_1, { MCK_CCOut, MCK_CondCode, MCK_tGPR, MCK_tGPR }, Feature_IsThumb},
  { ARM::t2ANDri, "and", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::ANDrr, "and", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::ANDri, "and", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2ANDrr, "and", Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::t2ANDrs, "and", Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::ANDrs, "and", Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::tASRrr, "asr", Convert__Reg1_2__CCOut1_0__Tie0__Reg1_3__CondCode2_1, { MCK_CCOut, MCK_CondCode, MCK_tGPR, MCK_tGPR }, Feature_IsThumb},
  { ARM::tASRri, "asr", Convert__Reg1_2__CCOut1_0__Reg1_3__Imm1_4__CondCode2_1, { MCK_CCOut, MCK_CondCode, MCK_tGPR, MCK_tGPR, MCK_Imm }, Feature_IsThumb},
  { ARM::t2MOVCCasr, "asr", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2ASRrr, "asr", Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::t2ASRri, "asr", Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::B, "b", Convert__Imm1_0, { MCK_Imm }, Feature_IsARM},
  { ARM::tB, "b", Convert__Imm1_0, { MCK_Imm }, Feature_IsThumb},
  { ARM::t2B, "b", Convert__Imm1_1, { MCK__DOT_w, MCK_Imm }, Feature_IsThumb2},
  { ARM::Bcc, "b", Convert__Imm1_1__CondCode2_0, { MCK_CondCode, MCK_Imm }, Feature_IsARM},
  { ARM::tBcc, "b", Convert__Imm1_1__CondCode2_0, { MCK_CondCode, MCK_Imm }, Feature_IsThumb},
  { ARM::t2Bcc, "b", Convert__Imm1_2__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_Imm }, Feature_IsThumb2},
  { ARM::TAILJMPd, "b", Convert__Imm1_0, { MCK_Imm, MCK__64_, MCK_TAILCALL }, Feature_IsARM},
  { ARM::TAILJMPdND, "b", Convert__Imm1_0, { MCK_Imm, MCK__64_, MCK_TAILCALL }, Feature_IsARM},
  { ARM::TAILJMPdNDt, "b", Convert__Imm1_1, { MCK__DOT_w, MCK_Imm, MCK__64_, MCK_TAILCALL }, Feature_IsThumb},
  { ARM::TAILJMPdt, "b", Convert__Imm1_1, { MCK__DOT_w, MCK_Imm, MCK__64_, MCK_TAILCALL }, Feature_IsThumb},
  { ARM::t2BFC, "bfc", Convert__Reg1_1__Tie0__Imm1_2__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::BFC, "bfc", Convert__Reg1_1__Tie0__Imm1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_Imm }, Feature_IsARM|Feature_HasV6T2},
  { ARM::t2BFI, "bfi", Convert__Reg1_1__Tie0__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::BFI, "bfi", Convert__Reg1_1__Tie0__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM|Feature_HasV6T2},
  { ARM::t2BFI4p, "bfi", Convert__Reg1_1__Tie0__Reg1_2__Imm1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm, MCK_Imm }, Feature_IsThumb2},
  { ARM::BFI4p, "bfi", Convert__Reg1_1__Tie0__Reg1_2__Imm1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_IsARM|Feature_HasV6T2},
  { ARM::tBIC, "bic", Convert__Reg1_2__CCOut1_0__Tie0__Reg1_3__CondCode2_1, { MCK_CCOut, MCK_CondCode, MCK_tGPR, MCK_tGPR }, Feature_IsThumb},
  { ARM::t2BICri, "bic", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::BICrr, "bic", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::BICri, "bic", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2BICrr, "bic", Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::t2BICrs, "bic", Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::BICrs, "bic", Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::tBKPT, "bkpt", Convert__Imm1_0, { MCK_Imm }, Feature_IsThumb},
  { ARM::BKPT, "bkpt", Convert__Imm1_1__CondCode2_0, { MCK_CondCode, MCK_Imm }, Feature_IsARM},
  { ARM::t2TPsoft, "bl", Convert, { MCK__95__95_aeabi_95_read_95_tp }, Feature_IsThumb2},
  { ARM::tTPsoft, "bl", Convert, { MCK__95__95_aeabi_95_read_95_tp }, Feature_IsThumb},
  { ARM::BL, "bl", Convert__Imm1_0, { MCK_Imm }, Feature_IsARM},
  { ARM::BLr9, "bl", Convert__Imm1_0, { MCK_Imm }, Feature_IsARM},
  { ARM::tBL, "bl", Convert__Imm1_0, { MCK_Imm }, Feature_IsThumb},
  { ARM::BL_pred, "bl", Convert__Imm1_1__CondCode2_0, { MCK_CondCode, MCK_Imm }, Feature_IsARM},
  { ARM::BLr9_pred, "bl", Convert__Imm1_1__CondCode2_0, { MCK_CondCode, MCK_Imm }, Feature_IsARM},
  { ARM::tBLr9, "bl", Convert__CondCode2_0__Imm1_1, { MCK_CondCode, MCK_Imm }, Feature_IsThumb},
  { ARM::BLX, "blx", Convert__Reg1_0, { MCK_GPR }, Feature_IsARM},
  { ARM::BLXr9, "blx", Convert__Reg1_0, { MCK_GPR }, Feature_IsARM},
  { ARM::tBLXr, "blx", Convert__Reg1_0, { MCK_GPR }, Feature_IsThumb},
  { ARM::tBLXi, "blx", Convert__Imm1_0, { MCK_Imm }, Feature_IsThumb},
  { ARM::BLX_pred, "blx", Convert__Reg1_1__CondCode2_0, { MCK_CondCode, MCK_GPR }, Feature_IsARM},
  { ARM::BLXr9_pred, "blx", Convert__Reg1_1__CondCode2_0, { MCK_CondCode, MCK_GPR }, Feature_IsARM},
  { ARM::tBLXr_r9, "blx", Convert__CondCode2_0__Reg1_1, { MCK_CondCode, MCK_GPR }, Feature_IsThumb},
  { ARM::tBLXi_r9, "blx", Convert__CondCode2_0__Imm1_1, { MCK_CondCode, MCK_Imm }, Feature_IsThumb},
  { ARM::tBX_RET_vararg, "bx", Convert__Reg1_0, { MCK_tGPR }, Feature_IsThumb},
  { ARM::tBX_RET, "bx", Convert, { MCK_LR }, Feature_IsThumb},
  { ARM::BX, "bx", Convert__Reg1_0, { MCK_GPR }, Feature_IsARM|Feature_HasV4T},
  { ARM::BX_RET, "bx", Convert__CondCode2_0, { MCK_CondCode, MCK_LR }, Feature_IsARM|Feature_HasV4T},
  { ARM::TAILJMPr, "bx", Convert__Reg1_0, { MCK_tcGPR, MCK__64_, MCK_TAILCALL }, 0},
  { ARM::TAILJMPrND, "bx", Convert__Reg1_0, { MCK_tcGPR, MCK__64_, MCK_TAILCALL }, 0},
  { ARM::t2BXJ, "bxj", Convert__Reg1_1__CondCode2_0, { MCK_CondCode, MCK_rGPR }, Feature_IsThumb2},
  { ARM::BXJ, "bxj", Convert__Reg1_1__CondCode2_0, { MCK_CondCode, MCK_GPR }, Feature_IsARM},
  { ARM::tCBNZ, "cbnz", Convert__Reg1_0__Imm1_1, { MCK_tGPR, MCK_Imm }, Feature_IsThumb},
  { ARM::tCBZ, "cbz", Convert__Reg1_0__Imm1_1, { MCK_tGPR, MCK_Imm }, Feature_IsThumb},
  { ARM::tCDP, "cdp", Convert__CoprocNum1_0__Imm1_1__CoprocReg1_2__CoprocReg1_3__CoprocReg1_4__Imm1_5, { MCK_CoprocNum, MCK_Imm, MCK_CoprocReg, MCK_CoprocReg, MCK_CoprocReg, MCK_Imm }, Feature_IsThumb|Feature_HasV6},
  { ARM::CDP, "cdp", Convert__CoprocNum1_1__Imm1_2__CoprocReg1_3__CoprocReg1_4__CoprocReg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK_CoprocNum, MCK_Imm, MCK_CoprocReg, MCK_CoprocReg, MCK_CoprocReg, MCK_Imm }, Feature_IsARM},
  { ARM::CDP2, "cdp2", Convert__CoprocNum1_0__Imm1_1__CoprocReg1_2__CoprocReg1_3__CoprocReg1_4__Imm1_5, { MCK_CoprocNum, MCK_Imm, MCK_CoprocReg, MCK_CoprocReg, MCK_CoprocReg, MCK_Imm }, Feature_IsARM},
  { ARM::t2CDP2, "cdp2", Convert__CoprocNum1_0__Imm1_1__CoprocReg1_2__CoprocReg1_3__CoprocReg1_4__Imm1_5, { MCK_CoprocNum, MCK_Imm, MCK_CoprocReg, MCK_CoprocReg, MCK_CoprocReg, MCK_Imm }, Feature_IsThumb2|Feature_HasV6},
  { ARM::CLREX, "clrex", Convert, {  }, Feature_IsARM|Feature_HasV7},
  { ARM::t2CLREX, "clrex", Convert, {  }, Feature_IsThumb2|Feature_HasV7},
  { ARM::t2CLZ, "clz", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::CLZ, "clz", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::tCMNz, "cmn", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_tGPR }, Feature_IsThumb},
  { ARM::CMNzrr, "cmn", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::CMNzri, "cmn", Convert__Reg1_1__Imm1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2CMNzrr, "cmn", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::t2CMNzri, "cmn", Convert__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2CMNzrs, "cmn", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::CMNzrs, "cmn", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::tCMPr, "cmp", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_tGPR }, Feature_IsThumb},
  { ARM::tCMPi8, "cmp", Convert__Reg1_1__Imm1_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_Imm }, Feature_IsThumb},
  { ARM::CMPrr, "cmp", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::tCMPhir, "cmp", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR }, Feature_IsThumb},
  { ARM::CMPri, "cmp", Convert__Reg1_1__Imm1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2CMPrr, "cmp", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::t2CMPri, "cmp", Convert__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2CMPrs, "cmp", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::CMPrs, "cmp", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::CPS1p, "cps", Convert__Imm1_0, { MCK_Imm }, Feature_IsARM},
  { ARM::t2CPS1p, "cps", Convert__Imm1_0, { MCK_Imm }, Feature_IsThumb2},
  { ARM::CPS2p, "cps", Convert__Imm1_0__ProcIFlags1_1, { MCK_Imm, MCK_ProcIFlags }, Feature_IsARM},
  { ARM::tCPS, "cps", Convert__Imm1_0__ProcIFlags1_1, { MCK_Imm, MCK_ProcIFlags }, Feature_IsThumb},
  { ARM::t2CPS2p, "cps", Convert__Imm1_0__ProcIFlags1_2, { MCK_Imm, MCK__DOT_w, MCK_ProcIFlags }, Feature_IsThumb2},
  { ARM::CPS3p, "cps", Convert__Imm1_0__ProcIFlags1_1__Imm1_2, { MCK_Imm, MCK_ProcIFlags, MCK_Imm }, Feature_IsARM},
  { ARM::t2CPS3p, "cps", Convert__Imm1_0__ProcIFlags1_2__Imm1_3, { MCK_Imm, MCK__DOT_w, MCK_ProcIFlags, MCK_Imm }, Feature_IsThumb2},
  { ARM::DBG, "dbg", Convert__Imm1_1__CondCode2_0, { MCK_CondCode, MCK_Imm }, Feature_IsARM|Feature_HasV7},
  { ARM::t2DBG, "dbg", Convert__Imm1_1__CondCode2_0, { MCK_CondCode, MCK_Imm }, Feature_IsThumb2},
  { ARM::DMB, "dmb", Convert__MemBarrierOpt1_0, { MCK_MemBarrierOpt }, Feature_IsARM|Feature_HasDB},
  { ARM::t2DMB, "dmb", Convert__MemBarrierOpt1_0, { MCK_MemBarrierOpt }, Feature_IsThumb|Feature_HasDB},
  { ARM::DSB, "dsb", Convert__MemBarrierOpt1_0, { MCK_MemBarrierOpt }, Feature_IsARM|Feature_HasDB},
  { ARM::t2DSB, "dsb", Convert__MemBarrierOpt1_0, { MCK_MemBarrierOpt }, Feature_IsThumb|Feature_HasDB},
  { ARM::tEOR, "eor", Convert__Reg1_2__CCOut1_0__Tie0__Reg1_3__CondCode2_1, { MCK_CCOut, MCK_CondCode, MCK_tGPR, MCK_tGPR }, Feature_IsThumb},
  { ARM::t2EORri, "eor", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::EORrr, "eor", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::EORri, "eor", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2EORrr, "eor", Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::t2EORrs, "eor", Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::EORrs, "eor", Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::ISB, "isb", Convert, {  }, Feature_IsARM|Feature_HasDB},
  { ARM::t2ISB, "isb", Convert, {  }, Feature_IsThumb2|Feature_HasV7},
  { ARM::t2IT, "it", Convert__Imm1_1__Imm1_0, { MCK_Imm, MCK_Imm }, Feature_IsThumb2},
  { ARM::LDC_OFFSET, "ldc", Convert__Imm1_2__Imm1_4__Reg1_5__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::LDC_OPTION, "ldc", Convert__Imm1_2__Imm1_4__Reg1_6__Imm1_8__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, Feature_IsARM},
  { ARM::LDC_PRE, "ldc", Convert__Imm1_2__Imm1_4__Reg1_5__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm, MCK__EXCLAIM_ }, Feature_IsARM},
  { ARM::LDC_POST, "ldc", Convert__Imm1_2__Imm1_4__Reg1_6__Reg1_8__Imm1_9__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::LDC2_OFFSET, "ldc2", Convert__Imm1_2__Imm1_4__Reg1_5__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::LDC2_OPTION, "ldc2", Convert__Imm1_2__Imm1_4__Reg1_6__Imm1_8__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, Feature_IsARM},
  { ARM::LDC2_PRE, "ldc2", Convert__Imm1_2__Imm1_4__Reg1_5__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm, MCK__EXCLAIM_ }, Feature_IsARM},
  { ARM::LDC2_POST, "ldc2", Convert__Imm1_2__Imm1_4__Reg1_6__Reg1_8__Imm1_9__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::LDC2L_OFFSET, "ldc2l", Convert__Imm1_2__Imm1_4__Reg1_5__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::LDC2L_OPTION, "ldc2l", Convert__Imm1_2__Imm1_4__Reg1_6__Imm1_8__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, Feature_IsARM},
  { ARM::LDC2L_PRE, "ldc2l", Convert__Imm1_2__Imm1_4__Reg1_5__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm, MCK__EXCLAIM_ }, Feature_IsARM},
  { ARM::LDC2L_POST, "ldc2l", Convert__Imm1_2__Imm1_4__Reg1_6__Reg1_8__Imm1_9__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::LDCL_OFFSET, "ldcl", Convert__Imm1_2__Imm1_4__Reg1_5__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::LDCL_OPTION, "ldcl", Convert__Imm1_2__Imm1_4__Reg1_6__Imm1_8__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, Feature_IsARM},
  { ARM::LDCL_PRE, "ldcl", Convert__Imm1_2__Imm1_4__Reg1_5__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm, MCK__EXCLAIM_ }, Feature_IsARM},
  { ARM::LDCL_POST, "ldcl", Convert__Imm1_2__Imm1_4__Reg1_6__Reg1_8__Imm1_9__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::LDMDA, "ldmda", Convert__Reg1_1__CondCode2_0__RegList1_2, { MCK_CondCode, MCK_GPR, MCK_RegList }, Feature_IsARM},
  { ARM::LDMDA_UPD, "ldmda", Convert__Reg1_1__Tie0__CondCode2_0__RegList1_3, { MCK_CondCode, MCK_GPR, MCK__EXCLAIM_, MCK_RegList }, Feature_IsARM},
  { ARM::LDMDB, "ldmdb", Convert__Reg1_1__CondCode2_0__RegList1_2, { MCK_CondCode, MCK_GPR, MCK_RegList }, Feature_IsARM},
  { ARM::t2LDMDB, "ldmdb", Convert__Reg1_2__CondCode2_0__RegList1_3, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_RegList }, Feature_IsThumb2},
  { ARM::t2LDMDB_UPD, "ldmdb", Convert__Reg1_2__Tie0__CondCode2_0__RegList1_3, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_RegList }, Feature_IsThumb2},
  { ARM::LDMDB_UPD, "ldmdb", Convert__Reg1_1__Tie0__CondCode2_0__RegList1_3, { MCK_CondCode, MCK_GPR, MCK__EXCLAIM_, MCK_RegList }, Feature_IsARM},
  { ARM::LDMIA, "ldmia", Convert__Reg1_1__CondCode2_0__RegList1_2, { MCK_CondCode, MCK_GPR, MCK_RegList }, Feature_IsARM},
  { ARM::tLDMIA, "ldmia", Convert__Reg1_1__CondCode2_0__RegList1_2, { MCK_CondCode, MCK_GPR, MCK_RegList }, Feature_IsThumb},
  { ARM::t2LDMIA, "ldmia", Convert__Reg1_2__CondCode2_0__RegList1_3, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_RegList }, Feature_IsThumb2},
  { ARM::LDMIA_UPD, "ldmia", Convert__Reg1_1__Tie0__CondCode2_0__RegList1_3, { MCK_CondCode, MCK_GPR, MCK__EXCLAIM_, MCK_RegList }, Feature_IsARM},
  { ARM::tLDMIA_UPD, "ldmia", Convert__Reg1_1__Tie0__CondCode2_0__RegList1_3, { MCK_CondCode, MCK_GPR, MCK__EXCLAIM_, MCK_RegList }, Feature_IsThumb},
  { ARM::t2LDMIA_UPD, "ldmia", Convert__Reg1_2__Tie0__CondCode2_0__RegList1_4, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK__EXCLAIM_, MCK_RegList }, Feature_IsThumb2},
  { ARM::LDMIB, "ldmib", Convert__Reg1_1__CondCode2_0__RegList1_2, { MCK_CondCode, MCK_GPR, MCK_RegList }, Feature_IsARM},
  { ARM::LDMIB_UPD, "ldmib", Convert__Reg1_1__Tie0__CondCode2_0__RegList1_3, { MCK_CondCode, MCK_GPR, MCK__EXCLAIM_, MCK_RegList }, Feature_IsARM},
  { ARM::tLDRi, "ldr", Convert__Reg1_1__MemModeImmThumb2_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_MemModeImmThumb }, Feature_IsThumb},
  { ARM::tLDRspi, "ldr", Convert__Reg1_1__MemModeImmThumb2_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_MemModeImmThumb }, Feature_IsThumb},
  { ARM::tRestore, "ldr", Convert__Reg1_1__MemModeImmThumb2_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_MemModeImmThumb }, Feature_IsThumb},
  { ARM::tLDRr, "ldr", Convert__Reg1_1__MemModeRegThumb2_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_MemModeRegThumb }, Feature_IsThumb},
  { ARM::t2LDRi8, "ldr", Convert__Reg1_1__MemMode52_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::tLDRpci, "ldr", Convert__Reg1_2__MemModeImmThumb1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_n, MCK_tGPR, MCK_MemModeImmThumb }, Feature_IsThumb},
  { ARM::t2LDRpci, "ldr", Convert__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2LDRi12, "ldr", Convert__Reg1_2__MemMode52_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::t2LDRs, "ldr", Convert__Reg1_2__MemMode53_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::LDRcp, "ldr", Convert__Reg1_1__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::LDRi12, "ldr", Convert__Reg1_1__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2LDR_PRE, "ldr", Convert__Reg1_1__MemMode51_2__Tie1__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_MemMode5, MCK__EXCLAIM_ }, Feature_IsThumb2},
  { ARM::LDRrs, "ldr", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2LDR_POST, "ldr", Convert__Reg1_1__Reg1_3__Tie1__MemMode51_5__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::LDR_PRE, "ldr", Convert__Reg1_1__Reg1_2__Tie1__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm, MCK__EXCLAIM_ }, Feature_IsARM},
  { ARM::LDR_POST, "ldr", Convert__Reg1_1__Reg1_3__Tie1__Reg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::tLDRBi, "ldrb", Convert__Reg1_1__MemModeImmThumb2_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_MemModeImmThumb }, Feature_IsThumb},
  { ARM::tLDRBr, "ldrb", Convert__Reg1_1__MemModeRegThumb2_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_MemModeRegThumb }, Feature_IsThumb},
  { ARM::t2LDRBi8, "ldrb", Convert__Reg1_1__MemMode52_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::t2LDRBpci, "ldrb", Convert__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2LDRBi12, "ldrb", Convert__Reg1_2__MemMode52_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::t2LDRBs, "ldrb", Convert__Reg1_2__MemMode53_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::LDRBi12, "ldrb", Convert__Reg1_1__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2LDRB_PRE, "ldrb", Convert__Reg1_1__MemMode51_2__Tie1__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_MemMode5, MCK__EXCLAIM_ }, Feature_IsThumb2},
  { ARM::LDRBrs, "ldrb", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2LDRB_POST, "ldrb", Convert__Reg1_1__Reg1_3__Tie1__MemMode51_5__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::LDRB_PRE, "ldrb", Convert__Reg1_1__Reg1_2__Tie1__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm, MCK__EXCLAIM_ }, Feature_IsARM},
  { ARM::LDRB_POST, "ldrb", Convert__Reg1_1__Reg1_3__Tie1__Reg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2LDRBT, "ldrbt", Convert__Reg1_1__MemMode52_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::LDRBT, "ldrbt", Convert__Reg1_1__Reg1_3__Tie1__Reg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2LDRDi8, "ldrd", Convert__Reg1_1__Reg1_2__MemMode52_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::t2LDRD_POST, "ldrd", Convert__Reg1_1__Reg1_2__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2LDRD_PRE, "ldrd", Convert__Reg1_1__Reg1_2__Reg1_4__Imm1_5__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK_Imm, MCK__93_, MCK__EXCLAIM_ }, Feature_IsThumb2},
  { ARM::t2LDREX, "ldrex", Convert__Reg1_1__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK__91_, MCK_rGPR, MCK__93_ }, Feature_IsThumb2},
  { ARM::LDREX, "ldrex", Convert__Reg1_1__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_ }, Feature_IsARM},
  { ARM::t2LDREXB, "ldrexb", Convert__Reg1_1__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK__91_, MCK_rGPR, MCK__93_ }, Feature_IsThumb2},
  { ARM::LDREXB, "ldrexb", Convert__Reg1_1__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_ }, Feature_IsARM},
  { ARM::t2LDREXD, "ldrexd", Convert__Reg1_1__Reg1_2__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK__91_, MCK_rGPR, MCK__93_ }, Feature_IsThumb2},
  { ARM::LDREXD, "ldrexd", Convert__Reg1_1__Reg1_2__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_ }, Feature_IsARM},
  { ARM::t2LDREXH, "ldrexh", Convert__Reg1_1__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK__91_, MCK_rGPR, MCK__93_ }, Feature_IsThumb2},
  { ARM::LDREXH, "ldrexh", Convert__Reg1_1__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_ }, Feature_IsARM},
  { ARM::tLDRHi, "ldrh", Convert__Reg1_1__MemModeImmThumb2_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_MemModeImmThumb }, Feature_IsThumb},
  { ARM::tLDRHr, "ldrh", Convert__Reg1_1__MemModeRegThumb2_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_MemModeRegThumb }, Feature_IsThumb},
  { ARM::t2LDRHi8, "ldrh", Convert__Reg1_1__MemMode52_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::t2LDRHpci, "ldrh", Convert__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2LDRHi12, "ldrh", Convert__Reg1_2__MemMode52_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::t2LDRHs, "ldrh", Convert__Reg1_2__MemMode53_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::t2LDRH_PRE, "ldrh", Convert__Reg1_1__MemMode51_2__Tie1__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_MemMode5, MCK__EXCLAIM_ }, Feature_IsThumb2},
  { ARM::LDRH, "ldrh", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2LDRH_POST, "ldrh", Convert__Reg1_1__Reg1_3__Tie1__MemMode51_5__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::LDRH_PRE, "ldrh", Convert__Reg1_1__Reg1_2__Tie1__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm, MCK__EXCLAIM_ }, Feature_IsARM},
  { ARM::LDRH_POST, "ldrh", Convert__Reg1_1__Reg1_3__Tie1__Reg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2LDRHT, "ldrht", Convert__Reg1_1__MemMode52_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::LDRHT, "ldrht", Convert__Reg1_1__Reg1_3__Tie1__Reg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2LDRSBi8, "ldrsb", Convert__Reg1_1__MemMode52_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::t2LDRSBpci, "ldrsb", Convert__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2LDRSBi12, "ldrsb", Convert__Reg1_2__MemMode52_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::t2LDRSBs, "ldrsb", Convert__Reg1_2__MemMode53_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::tLDRSB, "ldrsb", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_tGPR, MCK_tGPR }, Feature_IsThumb},
  { ARM::t2LDRSB_PRE, "ldrsb", Convert__Reg1_1__MemMode51_2__Tie1__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_MemMode5, MCK__EXCLAIM_ }, Feature_IsThumb2},
  { ARM::LDRSB, "ldrsb", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2LDRSB_POST, "ldrsb", Convert__Reg1_1__Reg1_3__Tie1__MemMode51_5__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::LDRSB_PRE, "ldrsb", Convert__Reg1_1__Reg1_2__Tie1__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm, MCK__EXCLAIM_ }, Feature_IsARM},
  { ARM::LDRSB_POST, "ldrsb", Convert__Reg1_1__Reg1_3__Tie1__Reg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2LDRSBT, "ldrsbt", Convert__Reg1_1__MemMode52_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::LDRSBT, "ldrsbt", Convert__Reg1_1__Reg1_3__Tie1__Reg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2LDRSHi8, "ldrsh", Convert__Reg1_1__MemMode52_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::t2LDRSHpci, "ldrsh", Convert__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2LDRSHi12, "ldrsh", Convert__Reg1_2__MemMode52_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::t2LDRSHs, "ldrsh", Convert__Reg1_2__MemMode53_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::tLDRSH, "ldrsh", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_tGPR, MCK_tGPR }, Feature_IsThumb},
  { ARM::t2LDRSH_PRE, "ldrsh", Convert__Reg1_1__MemMode51_2__Tie1__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_MemMode5, MCK__EXCLAIM_ }, Feature_IsThumb2},
  { ARM::LDRSH, "ldrsh", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2LDRSH_POST, "ldrsh", Convert__Reg1_1__Reg1_3__Tie1__MemMode51_5__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::LDRSH_PRE, "ldrsh", Convert__Reg1_1__Reg1_2__Tie1__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm, MCK__EXCLAIM_ }, Feature_IsARM},
  { ARM::LDRSH_POST, "ldrsh", Convert__Reg1_1__Reg1_3__Tie1__Reg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2LDRSHT, "ldrsht", Convert__Reg1_1__MemMode52_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::LDRSHT, "ldrsht", Convert__Reg1_1__Reg1_3__Tie1__Reg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2LDRT, "ldrt", Convert__Reg1_1__MemMode52_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::LDRT, "ldrt", Convert__Reg1_1__Reg1_3__Tie1__Reg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::tLSLrr, "lsl", Convert__Reg1_2__CCOut1_0__Tie0__Reg1_3__CondCode2_1, { MCK_CCOut, MCK_CondCode, MCK_tGPR, MCK_tGPR }, Feature_IsThumb},
  { ARM::tLSLri, "lsl", Convert__Reg1_2__CCOut1_0__Reg1_3__Imm1_4__CondCode2_1, { MCK_CCOut, MCK_CondCode, MCK_tGPR, MCK_tGPR, MCK_Imm }, Feature_IsThumb},
  { ARM::t2MOVCClsl, "lsl", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2LSLrr, "lsl", Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::t2LSLri, "lsl", Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::tLSRrr, "lsr", Convert__Reg1_2__CCOut1_0__Tie0__Reg1_3__CondCode2_1, { MCK_CCOut, MCK_CondCode, MCK_tGPR, MCK_tGPR }, Feature_IsThumb},
  { ARM::tLSRri, "lsr", Convert__Reg1_2__CCOut1_0__Reg1_3__Imm1_4__CondCode2_1, { MCK_CCOut, MCK_CondCode, MCK_tGPR, MCK_tGPR, MCK_Imm }, Feature_IsThumb},
  { ARM::t2MOVCClsr, "lsr", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2LSRrr, "lsr", Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::t2LSRri, "lsr", Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::DMB_MCR, "mcr", Convert__Reg1_2, { MCK_p15, MCK_0, MCK_GPR, MCK_c7, MCK_c10, MCK_5 }, Feature_IsARM|Feature_HasV6},
  { ARM::tMCR, "mcr", Convert__CoprocNum1_0__Imm1_1__Reg1_2__CoprocReg1_3__CoprocReg1_4__Imm1_5, { MCK_CoprocNum, MCK_Imm, MCK_GPR, MCK_CoprocReg, MCK_CoprocReg, MCK_Imm }, Feature_IsThumb|Feature_HasV6},
  { ARM::MCR, "mcr", Convert__CoprocNum1_1__Imm1_2__Reg1_3__CoprocReg1_4__CoprocReg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK_CoprocNum, MCK_Imm, MCK_GPR, MCK_CoprocReg, MCK_CoprocReg, MCK_Imm }, Feature_IsARM},
  { ARM::MCR2, "mcr2", Convert__CoprocNum1_0__Imm1_1__Reg1_2__CoprocReg1_3__CoprocReg1_4__Imm1_5, { MCK_CoprocNum, MCK_Imm, MCK_GPR, MCK_CoprocReg, MCK_CoprocReg, MCK_Imm }, Feature_IsARM},
  { ARM::t2MCR2, "mcr2", Convert__CoprocNum1_0__Imm1_1__Reg1_2__CoprocReg1_3__CoprocReg1_4__Imm1_5, { MCK_CoprocNum, MCK_Imm, MCK_GPR, MCK_CoprocReg, MCK_CoprocReg, MCK_Imm }, Feature_IsThumb2|Feature_HasV6},
  { ARM::tMCRR, "mcrr", Convert__CoprocNum1_0__Imm1_1__Reg1_2__Reg1_3__CoprocReg1_4, { MCK_CoprocNum, MCK_Imm, MCK_GPR, MCK_GPR, MCK_CoprocReg }, Feature_IsThumb|Feature_HasV6},
  { ARM::MCRR, "mcrr", Convert__CoprocNum1_1__Imm1_2__Reg1_3__Reg1_4__CoprocReg1_5__CondCode2_0, { MCK_CondCode, MCK_CoprocNum, MCK_Imm, MCK_GPR, MCK_GPR, MCK_CoprocReg }, Feature_IsARM},
  { ARM::MCRR2, "mcrr2", Convert__CoprocNum1_0__Imm1_1__Reg1_2__Reg1_3__CoprocReg1_4, { MCK_CoprocNum, MCK_Imm, MCK_GPR, MCK_GPR, MCK_CoprocReg }, Feature_IsARM},
  { ARM::t2MCRR2, "mcrr2", Convert__CoprocNum1_0__Imm1_1__Reg1_2__Reg1_3__CoprocReg1_4, { MCK_CoprocNum, MCK_Imm, MCK_GPR, MCK_GPR, MCK_CoprocReg }, Feature_IsThumb2|Feature_HasV6},
  { ARM::t2MLA, "mla", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::MLA, "mla", Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2MLS, "mls", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::MLS, "mls", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6T2},
  { ARM::tMOVr, "mov", Convert__Reg1_0__Reg1_1, { MCK_tGPR, MCK_tGPR }, Feature_IsThumb},
  { ARM::tMOVgpr2tgpr, "mov", Convert__Reg1_0__Reg1_1, { MCK_tGPR, MCK_GPR }, Feature_IsThumb},
  { ARM::tBRIND, "mov", Convert__Reg1_1, { MCK_PC, MCK_GPR }, Feature_IsThumb},
  { ARM::tMOVtgpr2gpr, "mov", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_tGPR }, Feature_IsThumb},
  { ARM::tMOVgpr2gpr, "mov", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, Feature_IsThumb},
  { ARM::tMOVCCi, "mov", Convert__Reg1_1__Tie0__Imm1_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_Imm }, Feature_IsThumb},
  { ARM::MOVPCLR, "mov", Convert__CondCode2_0, { MCK_CondCode, MCK_PC, MCK_LR }, Feature_IsARM},
  { ARM::MOVCCr, "mov", Convert__Reg1_1__Tie0__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::tMOVCCr, "mov", Convert__Reg1_1__Tie0__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR }, Feature_IsThumb},
  { ARM::MOVCCi, "mov", Convert__Reg1_1__Tie0__Imm1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::tMOVi8, "mov", Convert__Reg1_2__CCOut1_0__Imm1_3__CondCode2_1, { MCK_CCOut, MCK_CondCode, MCK_tGPR, MCK_Imm }, Feature_IsThumb},
  { ARM::MOVr_TC, "mov", Convert__Reg1_2__Reg1_3__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_tcGPR, MCK_tcGPR }, Feature_IsARM},
  { ARM::MOVr, "mov", Convert__Reg1_2__Reg1_3__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::MOVi, "mov", Convert__Reg1_2__Imm1_3__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2MOVCCr, "mov", Convert__Reg1_2__Tie0__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::t2MOVCCi, "mov", Convert__Reg1_2__Tie0__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2MOVi, "mov", Convert__Reg1_3__Imm1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2MOVr, "mov", Convert__Reg1_3__Reg1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_GPR }, Feature_IsThumb2},
  { ARM::MOVCCs, "mov", Convert__Reg1_1__Tie0__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::MOVs, "mov", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::tMOVSr, "movs", Convert__Reg1_0__Reg1_1, { MCK_tGPR, MCK_tGPR }, Feature_IsThumb},
  { ARM::t2MOVTi16, "movt", Convert__Reg1_1__Tie0__Imm1_2__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::MOVTi16, "movt", Convert__Reg1_1__Tie0__Imm1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_Imm }, Feature_IsARM|Feature_HasV6T2},
  { ARM::t2MOVCCi16, "movw", Convert__Reg1_1__Tie0__Imm1_2__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2MOVi16, "movw", Convert__Reg1_1__Imm1_2__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::MOVCCi16, "movw", Convert__Reg1_1__Tie0__Imm1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_Imm }, Feature_IsARM|Feature_HasV6T2},
  { ARM::MOVi16, "movw", Convert__Reg1_1__Imm1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_Imm }, Feature_IsARM|Feature_HasV6T2},
  { ARM::tMRC, "mrc", Convert__CoprocNum1_0__Imm1_1__Reg1_2__CoprocReg1_3__CoprocReg1_4__Imm1_5, { MCK_CoprocNum, MCK_Imm, MCK_GPR, MCK_CoprocReg, MCK_CoprocReg, MCK_Imm }, Feature_IsThumb|Feature_HasV6},
  { ARM::MRC, "mrc", Convert__CoprocNum1_1__Imm1_2__Reg1_3__CoprocReg1_4__CoprocReg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK_CoprocNum, MCK_Imm, MCK_GPR, MCK_CoprocReg, MCK_CoprocReg, MCK_Imm }, Feature_IsARM},
  { ARM::MRC2, "mrc2", Convert__CoprocNum1_0__Imm1_1__Reg1_2__CoprocReg1_3__CoprocReg1_4__Imm1_5, { MCK_CoprocNum, MCK_Imm, MCK_GPR, MCK_CoprocReg, MCK_CoprocReg, MCK_Imm }, Feature_IsARM},
  { ARM::t2MRC2, "mrc2", Convert__CoprocNum1_0__Imm1_1__Reg1_2__CoprocReg1_3__CoprocReg1_4__Imm1_5, { MCK_CoprocNum, MCK_Imm, MCK_GPR, MCK_CoprocReg, MCK_CoprocReg, MCK_Imm }, Feature_IsThumb2|Feature_HasV6},
  { ARM::tMRRC, "mrrc", Convert__CoprocNum1_0__Imm1_1__Reg1_2__Reg1_3__CoprocReg1_4, { MCK_CoprocNum, MCK_Imm, MCK_GPR, MCK_GPR, MCK_CoprocReg }, Feature_IsThumb|Feature_HasV6},
  { ARM::MRRC, "mrrc", Convert__CoprocNum1_1__Imm1_2__Reg1_3__Reg1_4__CoprocReg1_5__CondCode2_0, { MCK_CondCode, MCK_CoprocNum, MCK_Imm, MCK_GPR, MCK_GPR, MCK_CoprocReg }, Feature_IsARM},
  { ARM::MRRC2, "mrrc2", Convert__CoprocNum1_0__Imm1_1__Reg1_2__Reg1_3__CoprocReg1_4, { MCK_CoprocNum, MCK_Imm, MCK_GPR, MCK_GPR, MCK_CoprocReg }, Feature_IsARM},
  { ARM::t2MRRC2, "mrrc2", Convert__CoprocNum1_0__Imm1_1__Reg1_2__Reg1_3__CoprocReg1_4, { MCK_CoprocNum, MCK_Imm, MCK_GPR, MCK_GPR, MCK_CoprocReg }, Feature_IsThumb2|Feature_HasV6},
  { ARM::t2MRSsys, "mrs", Convert__Reg1_1__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_spsr }, Feature_IsThumb2},
  { ARM::t2MRS, "mrs", Convert__Reg1_1__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_CCR }, Feature_IsThumb2},
  { ARM::MRSsys, "mrs", Convert__Reg1_1__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_spsr }, Feature_IsARM},
  { ARM::MRS, "mrs", Convert__Reg1_1__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_CCR }, Feature_IsARM},
  { ARM::t2MSR, "msr", Convert__MSRMask1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_MSRMask, MCK_rGPR }, Feature_IsThumb2},
  { ARM::MSR, "msr", Convert__MSRMask1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_MSRMask, MCK_GPR }, Feature_IsARM},
  { ARM::MSRi, "msr", Convert__MSRMask1_1__Imm1_2__CondCode2_0, { MCK_CondCode, MCK_MSRMask, MCK_Imm }, Feature_IsARM},
  { ARM::t2MUL, "mul", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::MUL, "mul", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::MVNCCi, "mvn", Convert__Reg1_1__Tie0__Imm1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::tMVN, "mvn", Convert__Reg1_2__CCOut1_0__Reg1_3__CondCode2_1, { MCK_CCOut, MCK_CondCode, MCK_tGPR, MCK_tGPR }, Feature_IsThumb},
  { ARM::t2MVNi, "mvn", Convert__Reg1_2__Imm1_3__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::MVNr, "mvn", Convert__Reg1_2__Reg1_3__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::MVNi, "mvn", Convert__Reg1_2__Imm1_3__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2MVNCCi, "mvn", Convert__Reg1_2__Tie0__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2MVNr, "mvn", Convert__Reg1_3__Reg1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::t2MVNs, "mvn", Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::MVNs, "mvn", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::NOP, "nop", Convert__CondCode2_0, { MCK_CondCode }, Feature_IsARM|Feature_HasV6T2},
  { ARM::tNOP, "nop", Convert__CondCode2_0, { MCK_CondCode }, Feature_IsThumb},
  { ARM::t2NOP, "nop", Convert__CondCode2_0, { MCK_CondCode, MCK__DOT_w }, Feature_IsThumb2},
  { ARM::t2ORNrr, "orn", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::t2ORNri, "orn", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2ORNrs, "orn", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::tORR, "orr", Convert__Reg1_2__CCOut1_0__Tie0__Reg1_3__CondCode2_1, { MCK_CCOut, MCK_CondCode, MCK_tGPR, MCK_tGPR }, Feature_IsThumb},
  { ARM::t2ORRri, "orr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::ORRrr, "orr", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::ORRri, "orr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2ORRrr, "orr", Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::t2ORRrs, "orr", Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::ORRrs, "orr", Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2PKHBT, "pkhbt", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_HasT2ExtractPack|Feature_IsThumb2},
  { ARM::PKHBT, "pkhbt", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM|Feature_HasV6},
  { ARM::t2PKHTB, "pkhtb", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_HasT2ExtractPack|Feature_IsThumb2},
  { ARM::PKHTB, "pkhtb", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM|Feature_HasV6},
  { ARM::PLDi12, "pld", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2PLDi12, "pld", Convert__MemMode52_1__CondCode2_0, { MCK_CondCode, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::t2PLDi8, "pld", Convert__MemMode52_1__CondCode2_0, { MCK_CondCode, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::t2PLDs, "pld", Convert__MemMode53_1__CondCode2_0, { MCK_CondCode, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::PLDrs, "pld", Convert__Reg1_0__Reg1_1__Imm1_2, { MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::PLDWi12, "pldw", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, Feature_IsARM|Feature_HasV7|Feature_HasMP},
  { ARM::t2PLDWi12, "pldw", Convert__MemMode52_1__CondCode2_0, { MCK_CondCode, MCK_MemMode5 }, Feature_IsThumb2|Feature_HasV7|Feature_HasMP},
  { ARM::t2PLDWi8, "pldw", Convert__MemMode52_1__CondCode2_0, { MCK_CondCode, MCK_MemMode5 }, Feature_IsThumb2|Feature_HasV7|Feature_HasMP},
  { ARM::t2PLDWs, "pldw", Convert__MemMode53_1__CondCode2_0, { MCK_CondCode, MCK_MemMode5 }, Feature_IsThumb2|Feature_HasV7|Feature_HasMP},
  { ARM::PLDWrs, "pldw", Convert__Reg1_0__Reg1_1__Imm1_2, { MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM|Feature_HasV7|Feature_HasMP},
  { ARM::PLIi12, "pli", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, Feature_IsARM|Feature_HasV7},
  { ARM::t2PLIi12, "pli", Convert__MemMode52_1__CondCode2_0, { MCK_CondCode, MCK_MemMode5 }, Feature_IsThumb2|Feature_HasV7},
  { ARM::t2PLIi8, "pli", Convert__MemMode52_1__CondCode2_0, { MCK_CondCode, MCK_MemMode5 }, Feature_IsThumb2|Feature_HasV7},
  { ARM::t2PLIs, "pli", Convert__MemMode53_1__CondCode2_0, { MCK_CondCode, MCK_MemMode5 }, Feature_IsThumb2|Feature_HasV7},
  { ARM::PLIrs, "pli", Convert__Reg1_0__Reg1_1__Imm1_2, { MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM|Feature_HasV7},
  { ARM::tPOP, "pop", Convert__CondCode2_0__RegList1_1, { MCK_CondCode, MCK_RegList }, Feature_IsThumb},
  { ARM::tPOP_RET, "pop", Convert__CondCode2_0__RegList1_1, { MCK_CondCode, MCK_RegList }, Feature_IsThumb},
  { ARM::tPUSH, "push", Convert__CondCode2_0__RegList1_1, { MCK_CondCode, MCK_RegList }, Feature_IsThumb},
  { ARM::t2QADD, "qadd", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::QADD, "qadd", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2QADD16, "qadd16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::QADD16, "qadd16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2QADD8, "qadd8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::QADD8, "qadd8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2QASX, "qasx", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::QASX, "qasx", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2QDADD, "qdadd", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::QDADD, "qdadd", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2QDSUB, "qdsub", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::QDSUB, "qdsub", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2QSAX, "qsax", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::QSAX, "qsax", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2QSUB, "qsub", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::QSUB, "qsub", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2QSUB16, "qsub16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::QSUB16, "qsub16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2QSUB8, "qsub8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::QSUB8, "qsub8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2RBIT, "rbit", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::RBIT, "rbit", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6T2},
  { ARM::tREV, "rev", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_tGPR }, Feature_IsThumb|Feature_HasV6},
  { ARM::REV, "rev", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2REV, "rev", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::tREV16, "rev16", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_tGPR }, Feature_IsThumb|Feature_HasV6},
  { ARM::REV16, "rev16", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2REV16, "rev16", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::tREVSH, "revsh", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_tGPR }, Feature_IsThumb|Feature_HasV6},
  { ARM::REVSH, "revsh", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2REVSH, "revsh", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::t2RFEDB, "rfeab", Convert__Reg1_1__CondCode2_0, { MCK_CondCode, MCK_rGPR }, Feature_IsThumb2},
  { ARM::t2RFEDBW, "rfedb", Convert__Reg1_1__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK__EXCLAIM_ }, Feature_IsThumb2},
  { ARM::t2RFEIA, "rfeia", Convert__Reg1_1__CondCode2_0, { MCK_CondCode, MCK_rGPR }, Feature_IsThumb2},
  { ARM::t2RFEIAW, "rfeia", Convert__Reg1_1__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK__EXCLAIM_ }, Feature_IsThumb2},
  { ARM::tROR, "ror", Convert__Reg1_2__CCOut1_0__Tie0__Reg1_3__CondCode2_1, { MCK_CCOut, MCK_CondCode, MCK_tGPR, MCK_tGPR }, Feature_IsThumb},
  { ARM::t2MOVCCror, "ror", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2RORrr, "ror", Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::t2RORri, "ror", Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2RRX, "rrx", Convert__Reg1_2__Reg1_3__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::tRSB, "rsb", Convert__Reg1_2__CCOut1_0__Reg1_3__CondCode2_1, { MCK_CCOut, MCK_CondCode, MCK_tGPR, MCK_tGPR, MCK__35_0 }, Feature_IsThumb},
  { ARM::t2RSBrr, "rsb", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::RSBrr, "rsb", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::RSBri, "rsb", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2RSBri, "rsb", Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2RSBrs, "rsb", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::RSBrs, "rsb", Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::RSCrr, "rsc", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::RSCri, "rsc", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::RSCrs, "rsc", Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2SADD16, "sadd16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SADD16, "sadd16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2SADD8, "sadd8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SADD8, "sadd8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2SASX, "sasx", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SASX, "sasx", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::tSBC, "sbc", Convert__Reg1_2__CCOut1_0__Tie0__Reg1_3__CondCode2_1, { MCK_CCOut, MCK_CondCode, MCK_tGPR, MCK_tGPR }, Feature_IsThumb},
  { ARM::t2SBCri, "sbc", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::SBCrr, "sbc", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::SBCri, "sbc", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2SBCrr, "sbc", Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::t2SBCrs, "sbc", Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::SBCrs, "sbc", Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2SBFX, "sbfx", Convert__Reg1_1__Reg1_2__Imm1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm, MCK_Imm }, Feature_IsThumb2},
  { ARM::SBFX, "sbfx", Convert__Reg1_1__Reg1_2__Imm1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_IsARM|Feature_HasV6T2},
  { ARM::t2SDIV, "sdiv", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_HasDivide|Feature_IsThumb2},
  { ARM::SEL, "sel", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SEL, "sel", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsThumb2},
  { ARM::tSETENDBE, "setend", Convert, { MCK_be }, Feature_IsThumb},
  { ARM::tSETENDLE, "setend", Convert, { MCK_le }, Feature_IsThumb},
  { ARM::SETEND, "setend", Convert__Imm1_0, { MCK_Imm }, Feature_IsARM},
  { ARM::SEV, "sev", Convert__CondCode2_0, { MCK_CondCode }, Feature_IsARM|Feature_HasV6T2},
  { ARM::tSEV, "sev", Convert__CondCode2_0, { MCK_CondCode }, Feature_IsThumb},
  { ARM::t2SEV, "sev", Convert__CondCode2_0, { MCK_CondCode, MCK__DOT_w }, Feature_IsThumb2},
  { ARM::t2SHADD16, "shadd16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SHADD16, "shadd16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2SHADD8, "shadd8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SHADD8, "shadd8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2SHASX, "shasx", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SHASX, "shasx", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2SHSAX, "shsax", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SHSAX, "shsax", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2SHSUB16, "shsub16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SHSUB16, "shsub16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2SHSUB8, "shsub8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SHSUB8, "shsub8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::SMC, "smc", Convert__Imm1_1__CondCode2_0, { MCK_CondCode, MCK_Imm }, Feature_IsARM},
  { ARM::t2SMC, "smc", Convert__Imm1_1__CondCode2_0, { MCK_CondCode, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2SMLABB, "smlabb", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMLABB, "smlabb", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV5TE},
  { ARM::t2SMLABT, "smlabt", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMLABT, "smlabt", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV5TE},
  { ARM::t2SMLAD, "smlad", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMLAD, "smlad", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SMLADX, "smladx", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMLADX, "smladx", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SMLAL, "smlal", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMLAL, "smlal", Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SMLALBB, "smlalbb", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMLALBB, "smlalbb", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV5TE},
  { ARM::t2SMLALBT, "smlalbt", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMLALBT, "smlalbt", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV5TE},
  { ARM::t2SMLALD, "smlald", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMLALD, "smlald", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SMLALDX, "smlaldx", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMLALDX, "smlaldx", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SMLALTB, "smlaltb", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMLALTB, "smlaltb", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV5TE},
  { ARM::t2SMLALTT, "smlaltt", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMLALTT, "smlaltt", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV5TE},
  { ARM::t2SMLATB, "smlatb", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMLATB, "smlatb", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV5TE},
  { ARM::t2SMLATT, "smlatt", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMLATT, "smlatt", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV5TE},
  { ARM::t2SMLAWB, "smlawb", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMLAWB, "smlawb", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV5TE},
  { ARM::t2SMLAWT, "smlawt", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMLAWT, "smlawt", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV5TE},
  { ARM::t2SMLSD, "smlsd", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMLSD, "smlsd", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SMLSDX, "smlsdx", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMLSDX, "smlsdx", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SMLSLD, "smlsld", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMLSLD, "smlsld", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SMLSLDX, "smlsldx", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMLSLDX, "smlsldx", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SMMLA, "smmla", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMMLA, "smmla", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SMMLAR, "smmlar", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMMLAR, "smmlar", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SMMLS, "smmls", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMMLS, "smmls", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SMMLSR, "smmlsr", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMMLSR, "smmlsr", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SMMUL, "smmul", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMMUL, "smmul", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SMMULR, "smmulr", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMMULR, "smmulr", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SMUAD, "smuad", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMUAD, "smuad", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SMUADX, "smuadx", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMUADX, "smuadx", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SMULBB, "smulbb", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMULBB, "smulbb", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV5TE},
  { ARM::t2SMULBT, "smulbt", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMULBT, "smulbt", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV5TE},
  { ARM::t2SMULL, "smull", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMULL, "smull", Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SMULTB, "smultb", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMULTB, "smultb", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV5TE},
  { ARM::t2SMULTT, "smultt", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMULTT, "smultt", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV5TE},
  { ARM::t2SMULWB, "smulwb", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMULWB, "smulwb", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV5TE},
  { ARM::t2SMULWT, "smulwt", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMULWT, "smulwt", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV5TE},
  { ARM::t2SMUSD, "smusd", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMUSD, "smusd", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SMUSDX, "smusdx", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SMUSDX, "smusdx", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SRSDB, "srsdb", Convert__Imm1_2__CondCode2_0, { MCK_CondCode, MCK_SP, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2SRSDBW, "srsdb", Convert__Imm1_3__CondCode2_0, { MCK_CondCode, MCK_SP, MCK__EXCLAIM_, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2SRSIA, "srsia", Convert__Imm1_2__CondCode2_0, { MCK_CondCode, MCK_SP, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2SRSIAW, "srsia", Convert__Imm1_3__CondCode2_0, { MCK_CondCode, MCK_SP, MCK__EXCLAIM_, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2SSAT, "ssat", Convert__Reg1_1__Imm1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_Imm, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::SSAT, "ssat", Convert__Reg1_1__Imm1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_Imm, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2SSAT16, "ssat16", Convert__Reg1_1__Imm1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_Imm, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SSAT16, "ssat16", Convert__Reg1_1__Imm1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_Imm, MCK_GPR }, Feature_IsARM},
  { ARM::t2SSAX, "ssax", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SSAX, "ssax", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2SSUB16, "ssub16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SSUB16, "ssub16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2SSUB8, "ssub8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SSUB8, "ssub8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::STC_OFFSET, "stc", Convert__Imm1_2__Imm1_4__Reg1_5__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::STC_OPTION, "stc", Convert__Imm1_2__Imm1_4__Reg1_6__Imm1_8__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, Feature_IsARM},
  { ARM::STC_PRE, "stc", Convert__Imm1_2__Imm1_4__Reg1_5__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm, MCK__EXCLAIM_ }, Feature_IsARM},
  { ARM::STC_POST, "stc", Convert__Imm1_2__Imm1_4__Reg1_6__Reg1_8__Imm1_9__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::STC2_OFFSET, "stc2", Convert__Imm1_2__Imm1_4__Reg1_5__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::STC2_OPTION, "stc2", Convert__Imm1_2__Imm1_4__Reg1_6__Imm1_8__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, Feature_IsARM},
  { ARM::STC2_PRE, "stc2", Convert__Imm1_2__Imm1_4__Reg1_5__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm, MCK__EXCLAIM_ }, Feature_IsARM},
  { ARM::STC2_POST, "stc2", Convert__Imm1_2__Imm1_4__Reg1_6__Reg1_8__Imm1_9__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::STC2L_OFFSET, "stc2l", Convert__Imm1_2__Imm1_4__Reg1_5__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::STC2L_OPTION, "stc2l", Convert__Imm1_2__Imm1_4__Reg1_6__Imm1_8__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, Feature_IsARM},
  { ARM::STC2L_PRE, "stc2l", Convert__Imm1_2__Imm1_4__Reg1_5__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm, MCK__EXCLAIM_ }, Feature_IsARM},
  { ARM::STC2L_POST, "stc2l", Convert__Imm1_2__Imm1_4__Reg1_6__Reg1_8__Imm1_9__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::STCL_OFFSET, "stcl", Convert__Imm1_2__Imm1_4__Reg1_5__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::STCL_OPTION, "stcl", Convert__Imm1_2__Imm1_4__Reg1_6__Imm1_8__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, Feature_IsARM},
  { ARM::STCL_PRE, "stcl", Convert__Imm1_2__Imm1_4__Reg1_5__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK_GPR, MCK_GPR, MCK_Imm, MCK__EXCLAIM_ }, Feature_IsARM},
  { ARM::STCL_POST, "stcl", Convert__Imm1_2__Imm1_4__Reg1_6__Reg1_8__Imm1_9__CondCode2_0, { MCK_CondCode, MCK_p, MCK_Imm, MCK_cr, MCK_Imm, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::STMDA, "stmda", Convert__Reg1_1__CondCode2_0__RegList1_2, { MCK_CondCode, MCK_GPR, MCK_RegList }, Feature_IsARM},
  { ARM::STMDA_UPD, "stmda", Convert__Reg1_1__Tie0__CondCode2_0__RegList1_3, { MCK_CondCode, MCK_GPR, MCK__EXCLAIM_, MCK_RegList }, Feature_IsARM},
  { ARM::STMDB, "stmdb", Convert__Reg1_1__CondCode2_0__RegList1_2, { MCK_CondCode, MCK_GPR, MCK_RegList }, Feature_IsARM},
  { ARM::t2STMDB, "stmdb", Convert__Reg1_2__CondCode2_0__RegList1_3, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_RegList }, Feature_IsThumb2},
  { ARM::t2STMDB_UPD, "stmdb", Convert__Reg1_2__Tie0__CondCode2_0__RegList1_3, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_RegList }, Feature_IsThumb2},
  { ARM::STMDB_UPD, "stmdb", Convert__Reg1_1__Tie0__CondCode2_0__RegList1_3, { MCK_CondCode, MCK_GPR, MCK__EXCLAIM_, MCK_RegList }, Feature_IsARM},
  { ARM::STMIA, "stmia", Convert__Reg1_1__CondCode2_0__RegList1_2, { MCK_CondCode, MCK_GPR, MCK_RegList }, Feature_IsARM},
  { ARM::tSTMIA, "stmia", Convert__Reg1_1__CondCode2_0__RegList1_2, { MCK_CondCode, MCK_GPR, MCK_RegList }, Feature_IsThumb},
  { ARM::t2STMIA, "stmia", Convert__Reg1_2__CondCode2_0__RegList1_3, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_RegList }, Feature_IsThumb2},
  { ARM::STMIA_UPD, "stmia", Convert__Reg1_1__Tie0__CondCode2_0__RegList1_3, { MCK_CondCode, MCK_GPR, MCK__EXCLAIM_, MCK_RegList }, Feature_IsARM},
  { ARM::tSTMIA_UPD, "stmia", Convert__Reg1_1__Tie0__CondCode2_0__RegList1_3, { MCK_CondCode, MCK_GPR, MCK__EXCLAIM_, MCK_RegList }, Feature_IsThumb},
  { ARM::t2STMIA_UPD, "stmia", Convert__Reg1_2__Tie0__CondCode2_0__RegList1_4, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK__EXCLAIM_, MCK_RegList }, Feature_IsThumb2},
  { ARM::STMIB, "stmib", Convert__Reg1_1__CondCode2_0__RegList1_2, { MCK_CondCode, MCK_GPR, MCK_RegList }, Feature_IsARM},
  { ARM::STMIB_UPD, "stmib", Convert__Reg1_1__Tie0__CondCode2_0__RegList1_3, { MCK_CondCode, MCK_GPR, MCK__EXCLAIM_, MCK_RegList }, Feature_IsARM},
  { ARM::tSTRi, "str", Convert__Reg1_1__MemModeImmThumb2_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_MemModeImmThumb }, Feature_IsThumb},
  { ARM::tSTRspi, "str", Convert__Reg1_1__MemModeImmThumb2_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_MemModeImmThumb }, Feature_IsThumb},
  { ARM::tSpill, "str", Convert__Reg1_1__MemModeImmThumb2_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_MemModeImmThumb }, Feature_IsThumb},
  { ARM::tSTRr, "str", Convert__Reg1_1__MemModeRegThumb2_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_MemModeRegThumb }, Feature_IsThumb},
  { ARM::t2STRi8, "str", Convert__Reg1_1__MemMode52_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::t2STRi12, "str", Convert__Reg1_2__MemMode52_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::t2STRs, "str", Convert__Reg1_2__MemMode53_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::STRi12, "str", Convert__Reg1_1__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::STRrs, "str", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2STR_POST, "str", Convert__Reg1_3__Reg1_1__Tie0__MemMode51_5__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::STR_POST, "str", Convert__Reg1_3__Reg1_1__Tie0__Reg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2STR_PRE, "str", Convert__Reg1_3__Reg1_1__Tie0__MemMode51_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK_MemMode5, MCK__93_, MCK__EXCLAIM_ }, Feature_IsThumb2},
  { ARM::STR_PRE, "str", Convert__Reg1_3__Reg1_1__Tie0__Reg1_4__Imm1_5__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK_GPR, MCK_Imm, MCK__93_, MCK__EXCLAIM_ }, Feature_IsARM},
  { ARM::tSTRBi, "strb", Convert__Reg1_1__MemModeImmThumb2_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_MemModeImmThumb }, Feature_IsThumb},
  { ARM::tSTRBr, "strb", Convert__Reg1_1__MemModeRegThumb2_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_MemModeRegThumb }, Feature_IsThumb},
  { ARM::t2STRBi8, "strb", Convert__Reg1_1__MemMode52_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::t2STRBi12, "strb", Convert__Reg1_2__MemMode52_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::t2STRBs, "strb", Convert__Reg1_2__MemMode53_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::STRBi12, "strb", Convert__Reg1_1__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::STRBrs, "strb", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2STRB_POST, "strb", Convert__Reg1_3__Reg1_1__Tie0__MemMode51_5__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::STRB_POST, "strb", Convert__Reg1_3__Reg1_1__Tie0__Reg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2STRB_PRE, "strb", Convert__Reg1_3__Reg1_1__Tie0__MemMode51_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK_MemMode5, MCK__93_, MCK__EXCLAIM_ }, Feature_IsThumb2},
  { ARM::STRB_PRE, "strb", Convert__Reg1_3__Reg1_1__Tie0__Reg1_4__Imm1_5__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK_GPR, MCK_Imm, MCK__93_, MCK__EXCLAIM_ }, Feature_IsARM},
  { ARM::t2STRBT, "strbt", Convert__Reg1_1__MemMode52_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::STRBT, "strbt", Convert__Reg1_3__Reg1_1__Tie0__Reg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2STRDi8, "strd", Convert__Reg1_1__Reg1_2__MemMode52_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::t2STRD_POST, "strd", Convert__Reg1_1__Reg1_2__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_Imm }, Feature_IsThumb2},
  { ARM::STRD_POST, "strd", Convert__Reg1_4__Reg1_1__Reg1_2__Tie0__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2STRD_PRE, "strd", Convert__Reg1_1__Reg1_2__Reg1_4__Imm1_5__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK_Imm, MCK__93_, MCK__EXCLAIM_ }, Feature_IsThumb2},
  { ARM::STRD_PRE, "strd", Convert__Reg1_4__Reg1_1__Reg1_2__Tie0__Reg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK_GPR, MCK_Imm, MCK__93_, MCK__EXCLAIM_ }, Feature_IsARM},
  { ARM::t2STREX, "strex", Convert__Reg1_1__Reg1_2__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK__91_, MCK_rGPR, MCK__93_ }, Feature_IsThumb2},
  { ARM::STREX, "strex", Convert__Reg1_1__Reg1_2__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_ }, Feature_IsARM},
  { ARM::t2STREXB, "strexb", Convert__Reg1_1__Reg1_2__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK__91_, MCK_rGPR, MCK__93_ }, Feature_IsThumb2},
  { ARM::STREXB, "strexb", Convert__Reg1_1__Reg1_2__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_ }, Feature_IsARM},
  { ARM::t2STREXD, "strexd", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_5__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK__91_, MCK_rGPR, MCK__93_ }, Feature_IsThumb2},
  { ARM::STREXD, "strexd", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_5__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_ }, Feature_IsARM},
  { ARM::t2STREXH, "strexh", Convert__Reg1_1__Reg1_2__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK__91_, MCK_rGPR, MCK__93_ }, Feature_IsThumb2},
  { ARM::STREXH, "strexh", Convert__Reg1_1__Reg1_2__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_ }, Feature_IsARM},
  { ARM::tSTRHi, "strh", Convert__Reg1_1__MemModeImmThumb2_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_MemModeImmThumb }, Feature_IsThumb},
  { ARM::tSTRHr, "strh", Convert__Reg1_1__MemModeRegThumb2_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_MemModeRegThumb }, Feature_IsThumb},
  { ARM::t2STRHi8, "strh", Convert__Reg1_1__MemMode52_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::t2STRHi12, "strh", Convert__Reg1_2__MemMode52_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::t2STRHs, "strh", Convert__Reg1_2__MemMode53_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::STRH, "strh", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2STRH_POST, "strh", Convert__Reg1_3__Reg1_1__Tie0__MemMode51_5__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::STRH_POST, "strh", Convert__Reg1_3__Reg1_1__Tie0__Reg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2STRH_PRE, "strh", Convert__Reg1_3__Reg1_1__Tie0__MemMode51_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK_MemMode5, MCK__93_, MCK__EXCLAIM_ }, Feature_IsThumb2},
  { ARM::STRH_PRE, "strh", Convert__Reg1_3__Reg1_1__Tie0__Reg1_4__Imm1_5__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK_GPR, MCK_Imm, MCK__93_, MCK__EXCLAIM_ }, Feature_IsARM},
  { ARM::t2STRHT, "strht", Convert__Reg1_1__MemMode52_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::STRHT, "strht", Convert__Reg1_3__Reg1_1__Tie0__Reg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2STRT, "strt", Convert__Reg1_1__MemMode52_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_MemMode5 }, Feature_IsThumb2},
  { ARM::STRT, "strt", Convert__Reg1_3__Reg1_1__Tie0__Reg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::tSUBspi, "sub", Convert__Reg1_0__Tie0__Imm1_1, { MCK_GPR, MCK_Imm }, Feature_IsThumb},
  { ARM::tSUBi8, "sub", Convert__Reg1_2__CCOut1_0__Tie0__Imm1_3__CondCode2_1, { MCK_CCOut, MCK_CondCode, MCK_tGPR, MCK_Imm }, Feature_IsThumb},
  { ARM::tSUBrr, "sub", Convert__Reg1_2__CCOut1_0__Reg1_3__Reg1_4__CondCode2_1, { MCK_CCOut, MCK_CondCode, MCK_tGPR, MCK_tGPR, MCK_tGPR }, Feature_IsThumb},
  { ARM::tSUBi3, "sub", Convert__Reg1_2__CCOut1_0__Reg1_3__Imm1_4__CondCode2_1, { MCK_CCOut, MCK_CondCode, MCK_tGPR, MCK_tGPR, MCK_Imm }, Feature_IsThumb},
  { ARM::SUBrr, "sub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::SUBri, "sub", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2SUBrr, "sub", Convert__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_GPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::t2SUBri, "sub", Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_GPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2SUBrs, "sub", Convert__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_GPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::SUBrs, "sub", Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__Imm1_6__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2SUBri12, "subw", Convert__Reg1_1__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_GPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::SVC, "svc", Convert__Imm1_1__CondCode2_0, { MCK_CondCode, MCK_Imm }, Feature_IsARM},
  { ARM::tSVC, "svc", Convert__Imm1_1__CondCode2_0, { MCK_CondCode, MCK_Imm }, Feature_IsThumb},
  { ARM::SWP, "swp", Convert__Reg1_1__Reg1_2__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_ }, Feature_IsARM},
  { ARM::SWPB, "swpb", Convert__Reg1_1__Reg1_2__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK__91_, MCK_GPR, MCK__93_ }, Feature_IsARM},
  { ARM::t2SXTABrr, "sxtab", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_HasT2ExtractPack|Feature_IsThumb2},
  { ARM::SXTABrr, "sxtab", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SXTABrr_rot, "sxtab", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, Feature_HasT2ExtractPack|Feature_IsThumb2},
  { ARM::SXTABrr_rot, "sxtab", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SXTAB16rr, "sxtab16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SXTAB16rr, "sxtab16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SXTAB16rr_rot, "sxtab16", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, Feature_IsThumb2},
  { ARM::SXTAB16rr_rot, "sxtab16", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SXTAHrr, "sxtah", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_HasT2ExtractPack|Feature_IsThumb2},
  { ARM::SXTAHrr, "sxtah", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SXTAHrr_rot, "sxtah", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, Feature_HasT2ExtractPack|Feature_IsThumb2},
  { ARM::SXTAHrr_rot, "sxtah", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, Feature_IsARM|Feature_HasV6},
  { ARM::tSXTB, "sxtb", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_tGPR }, Feature_IsThumb|Feature_HasV6},
  { ARM::SXTBr, "sxtb", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SXTBr, "sxtb", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SXTBr_rot, "sxtb", Convert__Reg1_1__Reg1_2__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SXTBr_rot, "sxtb", Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2SXTB16r, "sxtb16", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SXTB16r, "sxtb16", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SXTB16r_rot, "sxtb16", Convert__Reg1_1__Reg1_2__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, Feature_IsThumb2},
  { ARM::SXTB16r_rot, "sxtb16", Convert__Reg1_1__Reg1_2__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, Feature_IsARM|Feature_HasV6},
  { ARM::tSXTH, "sxth", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_tGPR }, Feature_IsThumb|Feature_HasV6},
  { ARM::SXTHr, "sxth", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SXTHr, "sxth", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::SXTHr_rot, "sxth", Convert__Reg1_1__Reg1_2__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, Feature_IsARM|Feature_HasV6},
  { ARM::t2SXTHr_rot, "sxth", Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2TBB, "tbb", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__91_, MCK_GPR, MCK_GPR, MCK__93_ }, Feature_IsThumb2},
  { ARM::t2TBH, "tbh", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__91_, MCK_GPR, MCK_GPR, MCK_lsl, MCK__35_1, MCK__93_ }, Feature_IsThumb2},
  { ARM::TEQrr, "teq", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::TEQri, "teq", Convert__Reg1_1__Imm1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2TEQrr, "teq", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::t2TEQri, "teq", Convert__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2TEQrs, "teq", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::TEQrs, "teq", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::TRAP, "trap", Convert, {  }, Feature_IsARM},
  { ARM::tTRAP, "trap", Convert, {  }, Feature_IsThumb},
  { ARM::tTST, "tst", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_tGPR }, Feature_IsThumb},
  { ARM::TSTrr, "tst", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::TSTri, "tst", Convert__Reg1_1__Imm1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2TSTrr, "tst", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::t2TSTri, "tst", Convert__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2TSTrs, "tst", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_GPR, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::TSTrs, "tst", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2UADD16, "uadd16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::UADD16, "uadd16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2UADD8, "uadd8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::UADD8, "uadd8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2UASX, "uasx", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::UASX, "uasx", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2UBFX, "ubfx", Convert__Reg1_1__Reg1_2__Imm1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_Imm, MCK_Imm }, Feature_IsThumb2},
  { ARM::UBFX, "ubfx", Convert__Reg1_1__Reg1_2__Imm1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_IsARM|Feature_HasV6T2},
  { ARM::t2UDIV, "udiv", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_HasDivide|Feature_IsThumb2},
  { ARM::t2UHADD16, "uhadd16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::UHADD16, "uhadd16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2UHADD8, "uhadd8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::UHADD8, "uhadd8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2UHASX, "uhasx", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::UHASX, "uhasx", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2UHSAX, "uhsax", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::UHSAX, "uhsax", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2UHSUB16, "uhsub16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::UHSUB16, "uhsub16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2UHSUB8, "uhsub8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::UHSUB8, "uhsub8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2UMAAL, "umaal", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::UMAAL, "umaal", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2UMLAL, "umlal", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::UMLAL, "umlal", Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2UMULL, "umull", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::UMULL, "umull", Convert__Reg1_2__Reg1_3__Reg1_4__Reg1_5__CondCode2_1__CCOut1_0, { MCK_CCOut, MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2UQADD16, "uqadd16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::UQADD16, "uqadd16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2UQADD8, "uqadd8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::UQADD8, "uqadd8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2UQASX, "uqasx", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::UQASX, "uqasx", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2UQSAX, "uqsax", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::UQSAX, "uqsax", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2UQSUB16, "uqsub16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::UQSUB16, "uqsub16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2UQSUB8, "uqsub8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::UQSUB8, "uqsub8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2USAD8, "usad8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::USAD8, "usad8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2USADA8, "usada8", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::USADA8, "usada8", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2USAT, "usat", Convert__Reg1_1__Imm1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_Imm, MCK_rGPR, MCK_Imm }, Feature_IsThumb2},
  { ARM::USAT, "usat", Convert__Reg1_1__Imm1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_Imm, MCK_GPR, MCK_Imm }, Feature_IsARM},
  { ARM::t2USAT16, "usat16", Convert__Reg1_1__Imm1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_Imm, MCK_rGPR }, Feature_IsThumb2},
  { ARM::USAT16, "usat16", Convert__Reg1_1__Imm1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_Imm, MCK_GPR }, Feature_IsARM},
  { ARM::t2USAX, "usax", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::USAX, "usax", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2USUB16, "usub16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::USUB16, "usub16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2USUB8, "usub8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::USUB8, "usub8", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM},
  { ARM::t2UXTABrr, "uxtab", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_HasT2ExtractPack|Feature_IsThumb2},
  { ARM::UXTABrr, "uxtab", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2UXTABrr_rot, "uxtab", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, Feature_HasT2ExtractPack|Feature_IsThumb2},
  { ARM::UXTABrr_rot, "uxtab", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, Feature_IsARM|Feature_HasV6},
  { ARM::t2UXTAB16rr, "uxtab16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::UXTAB16rr, "uxtab16", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2UXTAB16rr_rot, "uxtab16", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, Feature_IsThumb2},
  { ARM::UXTAB16rr_rot, "uxtab16", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, Feature_IsARM|Feature_HasV6},
  { ARM::t2UXTAHrr, "uxtah", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR }, Feature_HasT2ExtractPack|Feature_IsThumb2},
  { ARM::UXTAHrr, "uxtah", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2UXTAHrr_rot, "uxtah", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, Feature_HasT2ExtractPack|Feature_IsThumb2},
  { ARM::UXTAHrr_rot, "uxtah", Convert__Reg1_1__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, Feature_IsARM|Feature_HasV6},
  { ARM::tUXTB, "uxtb", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_tGPR }, Feature_IsThumb|Feature_HasV6},
  { ARM::UXTBr, "uxtb", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2UXTBr, "uxtb", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::UXTBr_rot, "uxtb", Convert__Reg1_1__Reg1_2__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, Feature_IsARM|Feature_HasV6},
  { ARM::t2UXTBr_rot, "uxtb", Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, Feature_IsThumb2},
  { ARM::t2UXTB16r, "uxtb16", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR }, Feature_HasT2ExtractPack|Feature_IsThumb2},
  { ARM::UXTB16r, "uxtb16", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2UXTB16r_rot, "uxtb16", Convert__Reg1_1__Reg1_2__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, Feature_HasT2ExtractPack|Feature_IsThumb2},
  { ARM::UXTB16r_rot, "uxtb16", Convert__Reg1_1__Reg1_2__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, Feature_IsARM|Feature_HasV6},
  { ARM::tUXTH, "uxth", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_tGPR, MCK_tGPR }, Feature_IsThumb|Feature_HasV6},
  { ARM::UXTHr, "uxth", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR }, Feature_IsARM|Feature_HasV6},
  { ARM::t2UXTHr, "uxth", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR }, Feature_IsThumb2},
  { ARM::UXTHr_rot, "uxth", Convert__Reg1_1__Reg1_2__Imm1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_ror, MCK_Imm }, Feature_IsARM|Feature_HasV6},
  { ARM::t2UXTHr_rot, "uxth", Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_w, MCK_rGPR, MCK_rGPR, MCK_ror, MCK_Imm }, Feature_IsThumb2},
  { ARM::VABAsv4i16, "vaba", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABAsv8i16, "vaba", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VABAsv2i32, "vaba", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABAsv4i32, "vaba", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VABAsv8i8, "vaba", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABAsv16i8, "vaba", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VABAuv4i16, "vaba", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABAuv8i16, "vaba", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VABAuv2i32, "vaba", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABAuv4i32, "vaba", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VABAuv8i8, "vaba", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABAuv16i8, "vaba", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VABALsv4i32, "vabal", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABALsv2i64, "vabal", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABALsv8i16, "vabal", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABALuv4i32, "vabal", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABALuv2i64, "vabal", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABALuv8i16, "vabal", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABDfd, "vabd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABDfq, "vabd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VABDsv4i16, "vabd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABDsv8i16, "vabd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VABDsv2i32, "vabd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABDsv4i32, "vabd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VABDsv8i8, "vabd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABDsv16i8, "vabd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VABDuv4i16, "vabd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABDuv8i16, "vabd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VABDuv2i32, "vabd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABDuv4i32, "vabd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VABDuv8i8, "vabd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABDuv16i8, "vabd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VABDLsv4i32, "vabdl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABDLsv2i64, "vabdl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABDLsv8i16, "vabdl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABDLuv4i32, "vabdl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABDLuv2i64, "vabdl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABDLuv8i16, "vabdl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABSS, "vabs", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VABSfd, "vabs", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABSfq, "vabs", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VABSD, "vabs", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f64, MCK_DPR, MCK_DPR }, Feature_HasVFP2},
  { ARM::VABSv4i16, "vabs", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABSv8i16, "vabs", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VABSv2i32, "vabs", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABSv4i32, "vabs", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VABSv8i8, "vabs", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VABSv16i8, "vabs", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VACGEd, "vacge", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VACGEq, "vacge", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VACGTd, "vacgt", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VACGTq, "vacgt", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VADDS, "vadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_SPR, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VADDfd, "vadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VADDfq, "vadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VADDD, "vadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f64, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasVFP2},
  { ARM::VADDv4i16, "vadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VADDv8i16, "vadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VADDv2i32, "vadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VADDv4i32, "vadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VADDv1i64, "vadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i64, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VADDv2i64, "vadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i64, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VADDv8i8, "vadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VADDv16i8, "vadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VADDHNv8i8, "vaddhn", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VADDHNv4i16, "vaddhn", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VADDHNv2i32, "vaddhn", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i64, MCK_DPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VADDLsv4i32, "vaddl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VADDLsv2i64, "vaddl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VADDLsv8i16, "vaddl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VADDLuv4i32, "vaddl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VADDLuv2i64, "vaddl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VADDLuv8i16, "vaddl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VADDWsv4i32, "vaddw", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VADDWsv2i64, "vaddw", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VADDWsv8i16, "vaddw", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VADDWuv4i32, "vaddw", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VADDWuv2i64, "vaddw", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VADDWuv8i16, "vaddw", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VANDd, "vand", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VANDq, "vand", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VBICiv4i16, "vbic", Convert__Reg1_2__Imm1_3__Tie0__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VBICiv8i16, "vbic", Convert__Reg1_2__Imm1_3__Tie0__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VBICiv2i32, "vbic", Convert__Reg1_2__Imm1_3__Tie0__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VBICiv4i32, "vbic", Convert__Reg1_2__Imm1_3__Tie0__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VBICd, "vbic", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VBICq, "vbic", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VBIFd, "vbif", Convert__Reg1_1__Tie0__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VBIFq, "vbif", Convert__Reg1_1__Tie0__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VBITd, "vbit", Convert__Reg1_1__Tie0__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VBITq, "vbit", Convert__Reg1_1__Tie0__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VBSLd, "vbsl", Convert__Reg1_1__Tie0__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VBSLq, "vbsl", Convert__Reg1_1__Tie0__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCEQzv2f32, "vceq", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCEQfd, "vceq", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCEQzv4f32, "vceq", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCEQfq, "vceq", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCEQzv4i16, "vceq", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_DPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCEQv4i16, "vceq", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCEQzv8i16, "vceq", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_QPR, MCK_QPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCEQv8i16, "vceq", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCEQzv2i32, "vceq", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_DPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCEQv2i32, "vceq", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCEQzv4i32, "vceq", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_QPR, MCK_QPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCEQv4i32, "vceq", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCEQzv8i8, "vceq", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i8, MCK_DPR, MCK_DPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCEQv8i8, "vceq", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCEQzv16i8, "vceq", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i8, MCK_QPR, MCK_QPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCEQv16i8, "vceq", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCGEzv2f32, "vcge", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCGEfd, "vcge", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCGEzv4f32, "vcge", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCGEfq, "vcge", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCGEzv4i16, "vcge", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCGEsv4i16, "vcge", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCGEzv8i16, "vcge", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCGEsv8i16, "vcge", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCGEzv2i32, "vcge", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCGEsv2i32, "vcge", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCGEzv4i32, "vcge", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCGEsv4i32, "vcge", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCGEzv8i8, "vcge", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCGEsv8i8, "vcge", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCGEzv16i8, "vcge", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCGEsv16i8, "vcge", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCGEuv4i16, "vcge", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCGEuv8i16, "vcge", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCGEuv2i32, "vcge", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCGEuv4i32, "vcge", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCGEuv8i8, "vcge", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCGEuv16i8, "vcge", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCGTzv2f32, "vcgt", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCGTfd, "vcgt", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCGTzv4f32, "vcgt", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCGTfq, "vcgt", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCGTzv4i16, "vcgt", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCGTsv4i16, "vcgt", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCGTzv8i16, "vcgt", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCGTsv8i16, "vcgt", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCGTzv2i32, "vcgt", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCGTsv2i32, "vcgt", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCGTzv4i32, "vcgt", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCGTsv4i32, "vcgt", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCGTzv8i8, "vcgt", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCGTsv8i8, "vcgt", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCGTzv16i8, "vcgt", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCGTsv16i8, "vcgt", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCGTuv4i16, "vcgt", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCGTuv8i16, "vcgt", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCGTuv2i32, "vcgt", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCGTuv4i32, "vcgt", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCGTuv8i8, "vcgt", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCGTuv16i8, "vcgt", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCLEzv2f32, "vcle", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCLEzv4f32, "vcle", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCLEzv4i16, "vcle", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCLEzv8i16, "vcle", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCLEzv2i32, "vcle", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCLEzv4i32, "vcle", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCLEzv8i8, "vcle", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCLEzv16i8, "vcle", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCLSv4i16, "vcls", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCLSv8i16, "vcls", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCLSv2i32, "vcls", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCLSv4i32, "vcls", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCLSv8i8, "vcls", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCLSv16i8, "vcls", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCLTzv2f32, "vclt", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCLTzv4f32, "vclt", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCLTzv4i16, "vclt", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCLTzv8i16, "vclt", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCLTzv2i32, "vclt", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCLTzv4i32, "vclt", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCLTzv8i8, "vclt", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCLTzv16i8, "vclt", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK__35_0 }, Feature_HasNEON},
  { ARM::VCLZv4i16, "vclz", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCLZv8i16, "vclz", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCLZv2i32, "vclz", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCLZv4i32, "vclz", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCLZv8i8, "vclz", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i8, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCLZv16i8, "vclz", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i8, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCMPZS, "vcmp", Convert__Reg1_2__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_SPR, MCK__35_0 }, Feature_HasVFP2},
  { ARM::VCMPS, "vcmp", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VCMPZD, "vcmp", Convert__Reg1_2__CondCode2_0, { MCK_CondCode, MCK__DOT_f64, MCK_DPR, MCK__35_0 }, Feature_HasVFP2},
  { ARM::VCMPD, "vcmp", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f64, MCK_DPR, MCK_DPR }, Feature_HasVFP2},
  { ARM::VCMPEZS, "vcmpe", Convert__Reg1_2__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_SPR, MCK__35_0 }, Feature_HasVFP2},
  { ARM::VCMPES, "vcmpe", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VCMPEZD, "vcmpe", Convert__Reg1_2__CondCode2_0, { MCK_CondCode, MCK__DOT_f64, MCK_DPR, MCK__35_0 }, Feature_HasVFP2},
  { ARM::VCMPED, "vcmpe", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f64, MCK_DPR, MCK_DPR }, Feature_HasVFP2},
  { ARM::VCNTd, "vcnt", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCNTq, "vcnt", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCVTf2h, "vcvt", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f16, MCK__DOT_f32, MCK_DPR, MCK_QPR }, Feature_HasNEON|Feature_HasFP16},
  { ARM::VCVTh2f, "vcvt", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK__DOT_f16, MCK_QPR, MCK_DPR }, Feature_HasNEON|Feature_HasFP16},
  { ARM::VCVTSD, "vcvt", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK__DOT_f64, MCK_SPR, MCK_DPR }, Feature_HasVFP2},
  { ARM::VSITOS, "vcvt", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK__DOT_s32, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VCVTs2fd, "vcvt", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK__DOT_s32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCVTs2fq, "vcvt", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK__DOT_s32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VUITOS, "vcvt", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK__DOT_u32, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VCVTu2fd, "vcvt", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK__DOT_u32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCVTu2fq, "vcvt", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK__DOT_u32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VCVTDS, "vcvt", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f64, MCK__DOT_f32, MCK_DPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VSITOD, "vcvt", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f64, MCK__DOT_s32, MCK_DPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VUITOD, "vcvt", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f64, MCK__DOT_u32, MCK_DPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VTOSIZS, "vcvt", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK__DOT_f32, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VCVTf2sd, "vcvt", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK__DOT_f32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCVTf2sq, "vcvt", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK__DOT_f32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VTOSIZD, "vcvt", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK__DOT_f64, MCK_SPR, MCK_DPR }, Feature_HasVFP2},
  { ARM::VTOUIZS, "vcvt", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK__DOT_f32, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VCVTf2ud, "vcvt", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK__DOT_f32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VCVTf2uq, "vcvt", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK__DOT_f32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VTOUIZD, "vcvt", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK__DOT_f64, MCK_SPR, MCK_DPR }, Feature_HasVFP2},
  { ARM::VCVTxs2fd, "vcvt", Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VCVTxs2fq, "vcvt", Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VCVTxu2fd, "vcvt", Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK__DOT_u32, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VCVTxu2fq, "vcvt", Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK__DOT_u32, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VCVTf2xsd, "vcvt", Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VCVTf2xsq, "vcvt", Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VCVTf2xud, "vcvt", Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VCVTf2xuq, "vcvt", Convert__Reg1_3__Reg1_4__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VCVTBHS, "vcvtb", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f16, MCK__DOT_f32, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VCVTBSH, "vcvtb", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK__DOT_f16, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VTOSIRS, "vcvtr", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK__DOT_f32, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VTOSIRD, "vcvtr", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK__DOT_f64, MCK_SPR, MCK_DPR }, Feature_HasVFP2},
  { ARM::VTOUIRS, "vcvtr", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK__DOT_f32, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VTOUIRD, "vcvtr", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK__DOT_f64, MCK_SPR, MCK_DPR }, Feature_HasVFP2},
  { ARM::VCVTTHS, "vcvtt", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f16, MCK__DOT_f32, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VCVTTSH, "vcvtt", Convert__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK__DOT_f16, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VDIVS, "vdiv", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_SPR, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VDIVD, "vdiv", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f64, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasVFP2},
  { ARM::VDUP16d, "vdup", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK_DPR, MCK_GPR }, Feature_HasNEON},
  { ARM::VDUP16q, "vdup", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK_QPR, MCK_GPR }, Feature_HasNEON},
  { ARM::VDUP32d, "vdup", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_DPR, MCK_GPR }, Feature_HasNEON},
  { ARM::VDUPfd, "vdup", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_DPR, MCK_GPR }, Feature_HasNEON},
  { ARM::VDUP32q, "vdup", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_QPR, MCK_GPR }, Feature_HasNEON},
  { ARM::VDUPfq, "vdup", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_QPR, MCK_GPR }, Feature_HasNEON},
  { ARM::VDUP8d, "vdup", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_DPR, MCK_GPR }, Feature_HasNEON},
  { ARM::VDUP8q, "vdup", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_QPR, MCK_GPR }, Feature_HasNEON},
  { ARM::VDUPLN16d, "vdup", Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK_DPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VDUPLN16q, "vdup", Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK_QPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VDUPLN32d, "vdup", Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_DPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VDUPLNfd, "vdup", Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_DPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VDUPLN32q, "vdup", Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_QPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VDUPLNfq, "vdup", Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_QPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VDUPLN8d, "vdup", Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_DPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VDUPLN8q, "vdup", Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_QPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VEORd, "veor", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VEORq, "veor", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VEXTd16, "vext", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK_DPR, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VEXTq16, "vext", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK_QPR, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VEXTd32, "vext", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_DPR, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VEXTdf, "vext", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_DPR, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VEXTq32, "vext", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_QPR, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VEXTqf, "vext", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_QPR, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VEXTd8, "vext", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_DPR, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VEXTq8, "vext", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_QPR, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VHADDsv4i16, "vhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VHADDsv8i16, "vhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VHADDsv2i32, "vhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VHADDsv4i32, "vhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VHADDsv8i8, "vhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VHADDsv16i8, "vhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VHADDuv4i16, "vhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VHADDuv8i16, "vhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VHADDuv2i32, "vhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VHADDuv4i32, "vhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VHADDuv8i8, "vhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VHADDuv16i8, "vhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VHSUBsv4i16, "vhsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VHSUBsv8i16, "vhsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VHSUBsv2i32, "vhsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VHSUBsv4i32, "vhsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VHSUBsv8i8, "vhsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VHSUBsv16i8, "vhsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VHSUBuv4i16, "vhsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VHSUBuv8i16, "vhsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VHSUBuv2i32, "vhsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VHSUBuv4i32, "vhsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VHSUBuv8i8, "vhsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VHSUBuv16i8, "vhsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VLD1d16, "vld1", Convert__Reg1_3__Reg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1d32, "vld1", Convert__Reg1_3__Reg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1d64, "vld1", Convert__Reg1_3__Reg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_64, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1d8, "vld1", Convert__Reg1_3__Reg1_5__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1d16_UPD, "vld1", Convert__Reg1_3__Reg1_5__Tie1__Imm1_7__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1q16, "vld1", Convert__Reg1_3__Reg1_4__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1d32_UPD, "vld1", Convert__Reg1_3__Reg1_5__Tie1__Imm1_7__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1q32, "vld1", Convert__Reg1_3__Reg1_4__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1d64_UPD, "vld1", Convert__Reg1_3__Reg1_5__Tie1__Imm1_7__CondCode2_0, { MCK_CondCode, MCK__DOT_64, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1q64, "vld1", Convert__Reg1_3__Reg1_4__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK__DOT_64, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1d8_UPD, "vld1", Convert__Reg1_3__Reg1_5__Tie1__Imm1_7__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1q8, "vld1", Convert__Reg1_3__Reg1_4__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1DUPd16, "vld1", Convert__Reg1_3__Reg1_7__Imm1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1q16_UPD, "vld1", Convert__Reg1_3__Reg1_4__Reg1_6__Tie2__Imm1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1d16T, "vld1", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Imm1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1DUPd32, "vld1", Convert__Reg1_3__Reg1_7__Imm1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1q32_UPD, "vld1", Convert__Reg1_3__Reg1_4__Reg1_6__Tie2__Imm1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1d32T, "vld1", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Imm1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1q64_UPD, "vld1", Convert__Reg1_3__Reg1_4__Reg1_6__Tie2__Imm1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_64, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1d64T, "vld1", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Imm1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_64, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1DUPd8, "vld1", Convert__Reg1_3__Reg1_7__Imm1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1q8_UPD, "vld1", Convert__Reg1_3__Reg1_4__Reg1_6__Tie2__Imm1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1d8T, "vld1", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Imm1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1DUPd16_UPD, "vld1", Convert__Reg1_3__Reg1_7__Tie1__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1LNd16, "vld1", Convert__Reg1_3__Reg1_8__Imm1_9__Tie0__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1d16T_UPD, "vld1", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Tie3__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1d16Q, "vld1", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1DUPd32_UPD, "vld1", Convert__Reg1_3__Reg1_7__Tie1__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1LNd32, "vld1", Convert__Reg1_3__Reg1_8__Imm1_9__Tie0__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1d32T_UPD, "vld1", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Tie3__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1d32Q, "vld1", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1d64T_UPD, "vld1", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Tie3__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_64, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1d64Q, "vld1", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_64, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1DUPd8_UPD, "vld1", Convert__Reg1_3__Reg1_7__Tie1__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1LNd8, "vld1", Convert__Reg1_3__Reg1_8__Imm1_9__Tie0__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1d8T_UPD, "vld1", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Tie3__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1d8Q, "vld1", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1LNd16_UPD, "vld1", Convert__Reg1_3__Reg1_8__Tie1__Imm1_10__Tie0__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1d16Q_UPD, "vld1", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie4__Imm1_10__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1LNd32_UPD, "vld1", Convert__Reg1_3__Reg1_8__Tie1__Imm1_10__Tie0__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1d32Q_UPD, "vld1", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie4__Imm1_10__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1d64Q_UPD, "vld1", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie4__Imm1_10__CondCode2_0, { MCK_CondCode, MCK__DOT_64, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1LNd8_UPD, "vld1", Convert__Reg1_3__Reg1_8__Tie1__Imm1_10__Tie0__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1d8Q_UPD, "vld1", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie4__Imm1_10__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1DUPq16, "vld1", Convert__Reg1_3__Reg1_6__Reg1_10__Imm1_11__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1DUPq32, "vld1", Convert__Reg1_3__Reg1_6__Reg1_10__Imm1_11__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1DUPq8, "vld1", Convert__Reg1_3__Reg1_6__Reg1_10__Imm1_11__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1DUPq16_UPD, "vld1", Convert__Reg1_3__Reg1_6__Reg1_10__Tie2__Imm1_12__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1DUPq32_UPD, "vld1", Convert__Reg1_3__Reg1_6__Reg1_10__Tie2__Imm1_12__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD1DUPq8_UPD, "vld1", Convert__Reg1_3__Reg1_6__Reg1_10__Tie2__Imm1_12__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2b16, "vld2", Convert__Reg1_3__Reg1_4__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2d16, "vld2", Convert__Reg1_3__Reg1_4__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2b32, "vld2", Convert__Reg1_3__Reg1_4__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2d32, "vld2", Convert__Reg1_3__Reg1_4__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2b8, "vld2", Convert__Reg1_3__Reg1_4__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2d8, "vld2", Convert__Reg1_3__Reg1_4__Reg1_6__Imm1_7__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2b16_UPD, "vld2", Convert__Reg1_3__Reg1_4__Reg1_6__Tie2__Imm1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2d16_UPD, "vld2", Convert__Reg1_3__Reg1_4__Reg1_6__Tie2__Imm1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2b32_UPD, "vld2", Convert__Reg1_3__Reg1_4__Reg1_6__Tie2__Imm1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2d32_UPD, "vld2", Convert__Reg1_3__Reg1_4__Reg1_6__Tie2__Imm1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2b8_UPD, "vld2", Convert__Reg1_3__Reg1_4__Reg1_6__Tie2__Imm1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2d8_UPD, "vld2", Convert__Reg1_3__Reg1_4__Reg1_6__Tie2__Imm1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2q16, "vld2", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2q32, "vld2", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2q8, "vld2", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2q16_UPD, "vld2", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie4__Imm1_10__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2q32_UPD, "vld2", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie4__Imm1_10__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2q8_UPD, "vld2", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie4__Imm1_10__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2DUPd16, "vld2", Convert__Reg1_3__Reg1_6__Reg1_10__Imm1_11__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2DUPd16x2, "vld2", Convert__Reg1_3__Reg1_6__Reg1_10__Imm1_11__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2DUPd32, "vld2", Convert__Reg1_3__Reg1_6__Reg1_10__Imm1_11__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2DUPd32x2, "vld2", Convert__Reg1_3__Reg1_6__Reg1_10__Imm1_11__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2DUPd8, "vld2", Convert__Reg1_3__Reg1_6__Reg1_10__Imm1_11__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2DUPd8x2, "vld2", Convert__Reg1_3__Reg1_6__Reg1_10__Imm1_11__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2DUPd16_UPD, "vld2", Convert__Reg1_3__Reg1_6__Reg1_10__Tie2__Imm1_12__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2DUPd16x2_UPD, "vld2", Convert__Reg1_3__Reg1_6__Reg1_10__Tie2__Imm1_12__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2DUPd32_UPD, "vld2", Convert__Reg1_3__Reg1_6__Reg1_10__Tie2__Imm1_12__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2DUPd32x2_UPD, "vld2", Convert__Reg1_3__Reg1_6__Reg1_10__Tie2__Imm1_12__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2DUPd8_UPD, "vld2", Convert__Reg1_3__Reg1_6__Reg1_10__Tie2__Imm1_12__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD2DUPd8x2_UPD, "vld2", Convert__Reg1_3__Reg1_6__Reg1_10__Tie2__Imm1_12__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3d16, "vld3", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Imm1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3q16, "vld3", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Imm1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3d32, "vld3", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Imm1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3q32, "vld3", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Imm1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3d8, "vld3", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Imm1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3q8, "vld3", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Imm1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3d16_UPD, "vld3", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Tie3__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3q16_UPD, "vld3", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Tie3__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3d32_UPD, "vld3", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Tie3__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3q32_UPD, "vld3", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Tie3__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3d8_UPD, "vld3", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Tie3__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3q8_UPD, "vld3", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_7__Tie3__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3DUPd16, "vld3", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_13__Imm1_14__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3DUPd16x2, "vld3", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_13__Imm1_14__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3DUPd32, "vld3", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_13__Imm1_14__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3DUPd32x2, "vld3", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_13__Imm1_14__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3DUPd8, "vld3", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_13__Imm1_14__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3DUPd8x2, "vld3", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_13__Imm1_14__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3DUPd16_UPD, "vld3", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_13__Tie3__Imm1_15__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3DUPd16x2_UPD, "vld3", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_13__Tie3__Imm1_15__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3DUPd32_UPD, "vld3", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_13__Tie3__Imm1_15__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3DUPd32x2_UPD, "vld3", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_13__Tie3__Imm1_15__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3DUPd8_UPD, "vld3", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_13__Tie3__Imm1_15__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD3DUPd8x2_UPD, "vld3", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_13__Tie3__Imm1_15__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4d16, "vld4", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4q16, "vld4", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4d32, "vld4", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4q32, "vld4", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4d8, "vld4", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4q8, "vld4", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Imm1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4d16_UPD, "vld4", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie4__Imm1_10__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4q16_UPD, "vld4", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie4__Imm1_10__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4d32_UPD, "vld4", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie4__Imm1_10__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4q32_UPD, "vld4", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie4__Imm1_10__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4d8_UPD, "vld4", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie4__Imm1_10__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4q8_UPD, "vld4", Convert__Reg1_3__Reg1_4__Reg1_5__Reg1_6__Reg1_8__Tie4__Imm1_10__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4DUPd16, "vld4", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_12__Reg1_16__Imm1_17__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4DUPd16x2, "vld4", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_12__Reg1_16__Imm1_17__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4DUPd32, "vld4", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_12__Reg1_16__Imm1_17__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4DUPd32x2, "vld4", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_12__Reg1_16__Imm1_17__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4DUPd8, "vld4", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_12__Reg1_16__Imm1_17__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4DUPd8x2, "vld4", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_12__Reg1_16__Imm1_17__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4DUPd16_UPD, "vld4", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_12__Reg1_16__Tie4__Imm1_18__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4DUPd16x2_UPD, "vld4", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_12__Reg1_16__Tie4__Imm1_18__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4DUPd32_UPD, "vld4", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_12__Reg1_16__Tie4__Imm1_18__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4DUPd32x2_UPD, "vld4", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_12__Reg1_16__Tie4__Imm1_18__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4DUPd8_UPD, "vld4", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_12__Reg1_16__Tie4__Imm1_18__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLD4DUPd8x2_UPD, "vld4", Convert__Reg1_3__Reg1_6__Reg1_9__Reg1_12__Reg1_16__Tie4__Imm1_18__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK_DPR, MCK__91_, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VLDMDDB, "vldmdb", Convert__Reg1_1__CondCode2_0__DPRRegList1_2, { MCK_CondCode, MCK_GPR, MCK_DPRRegList }, Feature_HasVFP2},
  { ARM::VLDMSDB, "vldmdb", Convert__Reg1_1__CondCode2_0__SPRRegList1_2, { MCK_CondCode, MCK_GPR, MCK_SPRRegList }, Feature_HasVFP2},
  { ARM::VLDMDDB_UPD, "vldmdb", Convert__Reg1_1__Tie0__CondCode2_0__DPRRegList1_3, { MCK_CondCode, MCK_GPR, MCK__EXCLAIM_, MCK_DPRRegList }, Feature_HasVFP2},
  { ARM::VLDMSDB_UPD, "vldmdb", Convert__Reg1_1__Tie0__CondCode2_0__SPRRegList1_3, { MCK_CondCode, MCK_GPR, MCK__EXCLAIM_, MCK_SPRRegList }, Feature_HasVFP2},
  { ARM::VLDMDIA, "vldmia", Convert__Reg1_1__CondCode2_0__DPRRegList1_2, { MCK_CondCode, MCK_GPR, MCK_DPRRegList }, Feature_HasVFP2},
  { ARM::VLDMSIA, "vldmia", Convert__Reg1_1__CondCode2_0__SPRRegList1_2, { MCK_CondCode, MCK_GPR, MCK_SPRRegList }, Feature_HasVFP2},
  { ARM::VLDMDIA_UPD, "vldmia", Convert__Reg1_1__Tie0__CondCode2_0__DPRRegList1_3, { MCK_CondCode, MCK_GPR, MCK__EXCLAIM_, MCK_DPRRegList }, Feature_HasVFP2},
  { ARM::VLDMSIA_UPD, "vldmia", Convert__Reg1_1__Tie0__CondCode2_0__SPRRegList1_3, { MCK_CondCode, MCK_GPR, MCK__EXCLAIM_, MCK_SPRRegList }, Feature_HasVFP2},
  { ARM::VLDRS, "vldr", Convert__Reg1_2__MemMode52_3__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_SPR, MCK_MemMode5 }, Feature_HasVFP2},
  { ARM::VLDRD, "vldr", Convert__Reg1_2__MemMode52_3__CondCode2_0, { MCK_CondCode, MCK__DOT_64, MCK_DPR, MCK_MemMode5 }, Feature_HasVFP2},
  { ARM::VMAXfd, "vmax", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMAXfq, "vmax", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMAXsv4i16, "vmax", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMAXsv8i16, "vmax", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMAXsv2i32, "vmax", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMAXsv4i32, "vmax", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMAXsv8i8, "vmax", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMAXsv16i8, "vmax", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMAXuv4i16, "vmax", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMAXuv8i16, "vmax", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMAXuv2i32, "vmax", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMAXuv4i32, "vmax", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMAXuv8i8, "vmax", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMAXuv16i8, "vmax", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMINfd, "vmin", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMINfq, "vmin", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMINsv4i16, "vmin", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMINsv8i16, "vmin", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMINsv2i32, "vmin", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMINsv4i32, "vmin", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMINsv8i8, "vmin", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMINsv16i8, "vmin", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMINuv4i16, "vmin", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMINuv8i16, "vmin", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMINuv2i32, "vmin", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMINuv4i32, "vmin", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMINuv8i8, "vmin", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMINuv16i8, "vmin", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMLAS, "vmla", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_SPR, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VMLAfd, "vmla", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMLAfq, "vmla", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMLAD, "vmla", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f64, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasVFP2},
  { ARM::VMLAv4i16, "vmla", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMLAv8i16, "vmla", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMLAv2i32, "vmla", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMLAv4i32, "vmla", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMLAv8i8, "vmla", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMLAv16i8, "vmla", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMLAslfd, "vmla", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMLAslfq, "vmla", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMLAslv4i16, "vmla", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMLAslv8i16, "vmla", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_QPR, MCK_QPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMLAslv2i32, "vmla", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMLAslv4i32, "vmla", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_QPR, MCK_QPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMLALsv4i32, "vmlal", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMLALsv2i64, "vmlal", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMLALsv8i16, "vmlal", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMLALuv4i32, "vmlal", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMLALuv2i64, "vmlal", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMLALuv8i16, "vmlal", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMLALslsv4i16, "vmlal", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMLALslsv2i32, "vmlal", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMLALsluv4i16, "vmlal", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMLALsluv2i32, "vmlal", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMLSS, "vmls", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_SPR, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VMLSfd, "vmls", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMLSfq, "vmls", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMLSD, "vmls", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f64, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasVFP2},
  { ARM::VMLSv4i16, "vmls", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMLSv8i16, "vmls", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMLSv2i32, "vmls", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMLSv4i32, "vmls", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMLSv8i8, "vmls", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMLSv16i8, "vmls", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMLSslfd, "vmls", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMLSslfq, "vmls", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMLSslv4i16, "vmls", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMLSslv8i16, "vmls", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_QPR, MCK_QPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMLSslv2i32, "vmls", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMLSslv4i32, "vmls", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_QPR, MCK_QPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMLSLsv4i32, "vmlsl", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMLSLsv2i64, "vmlsl", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMLSLsv8i16, "vmlsl", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMLSLuv4i32, "vmlsl", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMLSLuv2i64, "vmlsl", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMLSLuv8i16, "vmlsl", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMLSLslsv4i16, "vmlsl", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMLSLslsv2i32, "vmlsl", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMLSLsluv4i16, "vmlsl", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMLSLsluv2i32, "vmlsl", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMOVRS, "vmov", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VMOVSR, "vmov", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_SPR, MCK_GPR }, Feature_HasVFP2},
  { ARM::VMOVDneon, "vmov", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMOVQ, "vmov", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMOVS, "vmov", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VMOVScc, "vmov", Convert__Reg1_2__Tie0__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::FCONSTS, "vmov", Convert__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_SPR, MCK_Imm }, Feature_HasVFP3},
  { ARM::VMOVD, "vmov", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f64, MCK_DPR, MCK_DPR }, Feature_HasVFP2},
  { ARM::VMOVDcc, "vmov", Convert__Reg1_2__Tie0__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f64, MCK_DPR, MCK_DPR }, Feature_HasVFP2},
  { ARM::FCONSTD, "vmov", Convert__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f64, MCK_DPR, MCK_Imm }, Feature_HasVFP3},
  { ARM::VMOVv4i16, "vmov", Convert__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VMOVv8i16, "vmov", Convert__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VMOVv2i32, "vmov", Convert__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VMOVv4i32, "vmov", Convert__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VMOVv1i64, "vmov", Convert__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i64, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VMOVv2i64, "vmov", Convert__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i64, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VMOVv8i8, "vmov", Convert__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i8, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VMOVv16i8, "vmov", Convert__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i8, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VMOVRRD, "vmov", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_DPR }, Feature_HasVFP2},
  { ARM::VMOVDRR, "vmov", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_DPR, MCK_GPR, MCK_GPR }, Feature_HasVFP2},
  { ARM::VMOVRRS, "vmov", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_GPR, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VMOVSRR, "vmov", Convert__Reg1_1__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK_SPR, MCK_SPR, MCK_GPR, MCK_GPR }, Feature_HasVFP2},
  { ARM::VSETLNi16, "vmov", Convert__Reg1_2__Tie0__Reg1_6__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_, MCK_GPR }, Feature_HasNEON},
  { ARM::VGETLNi32, "vmov", Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_GPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VSETLNi32, "vmov", Convert__Reg1_2__Tie0__Reg1_6__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_, MCK_GPR }, Feature_HasNEON},
  { ARM::VSETLNi8, "vmov", Convert__Reg1_2__Tie0__Reg1_6__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_, MCK_GPR }, Feature_HasNEON},
  { ARM::VGETLNs16, "vmov", Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_GPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VGETLNs8, "vmov", Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_GPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VGETLNu16, "vmov", Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_GPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VGETLNu8, "vmov", Convert__Reg1_2__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_GPR, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMOVLsv4i32, "vmovl", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMOVLsv2i64, "vmovl", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMOVLsv8i16, "vmovl", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMOVLuv4i32, "vmovl", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMOVLuv2i64, "vmovl", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMOVLuv8i16, "vmovl", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMOVNv8i8, "vmovn", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMOVNv4i16, "vmovn", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMOVNv2i32, "vmovn", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i64, MCK_DPR, MCK_QPR }, Feature_HasNEON},
  { ARM::FMSTAT, "vmrs", Convert__CondCode2_0, { MCK_CondCode, MCK_apsr_95_nzcv, MCK_FPSCR }, Feature_HasVFP2},
  { ARM::VMRS, "vmrs", Convert__Reg1_1__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_FPSCR }, Feature_HasVFP2},
  { ARM::VMRS_FPSID, "vmrs", Convert__Reg1_1__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_FPSID }, Feature_HasVFP2},
  { ARM::VMRS_FPEXC, "vmrs", Convert__Reg1_1__CondCode2_0, { MCK_CondCode, MCK_GPR, MCK_FPEXC }, Feature_HasVFP2},
  { ARM::VMSR, "vmsr", Convert__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_FPSCR, MCK_GPR }, Feature_HasVFP2},
  { ARM::VMSR_FPSID, "vmsr", Convert__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_FPSID, MCK_GPR }, Feature_HasVFP2},
  { ARM::VMSR_FPEXC, "vmsr", Convert__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_FPEXC, MCK_GPR }, Feature_HasVFP2},
  { ARM::VMULS, "vmul", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_SPR, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VMULfd, "vmul", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMULfq, "vmul", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMULD, "vmul", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f64, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasVFP2},
  { ARM::VMULv4i16, "vmul", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMULv8i16, "vmul", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMULv2i32, "vmul", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMULv4i32, "vmul", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMULv8i8, "vmul", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMULv16i8, "vmul", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMULpd, "vmul", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_p8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMULpq, "vmul", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_p8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMULslfd, "vmul", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMULslfq, "vmul", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMULslv4i16, "vmul", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMULslv8i16, "vmul", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_QPR, MCK_QPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMULslv2i32, "vmul", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMULslv4i32, "vmul", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_QPR, MCK_QPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMULLp, "vmull", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_p8, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMULLsv4i32, "vmull", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMULLsv2i64, "vmull", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMULLsv8i16, "vmull", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMULLuv4i32, "vmull", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMULLuv2i64, "vmull", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMULLuv8i16, "vmull", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMULLslsv4i16, "vmull", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMULLslsv2i32, "vmull", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMULLsluv4i16, "vmull", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMULLsluv2i32, "vmull", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VMVNd, "vmvn", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VMVNq, "vmvn", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VMVNv4i16, "vmvn", Convert__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VMVNv8i16, "vmvn", Convert__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VMVNv2i32, "vmvn", Convert__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VMVNv4i32, "vmvn", Convert__Reg1_2__Imm1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VNEGS, "vneg", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VNEGfd, "vneg", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VNEGf32q, "vneg", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VNEGD, "vneg", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f64, MCK_DPR, MCK_DPR }, Feature_HasVFP2},
  { ARM::VNEGs16d, "vneg", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VNEGs16q, "vneg", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VNEGs32d, "vneg", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VNEGs32q, "vneg", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VNEGs8d, "vneg", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VNEGs8q, "vneg", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VNMLAS, "vnmla", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_SPR, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VNMLAD, "vnmla", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f64, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasVFP2},
  { ARM::VNMLSS, "vnmls", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_SPR, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VNMLSD, "vnmls", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f64, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasVFP2},
  { ARM::VNMULS, "vnmul", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_SPR, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VNMULD, "vnmul", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f64, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasVFP2},
  { ARM::VORNd, "vorn", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VORNq, "vorn", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VORRiv4i16, "vorr", Convert__Reg1_2__Imm1_3__Tie0__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VORRiv8i16, "vorr", Convert__Reg1_2__Imm1_3__Tie0__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VORRiv2i32, "vorr", Convert__Reg1_2__Imm1_3__Tie0__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VORRiv4i32, "vorr", Convert__Reg1_2__Imm1_3__Tie0__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VORRd, "vorr", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VORRq, "vorr", Convert__Reg1_1__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VPADALsv4i16, "vpadal", Convert__Reg1_2__Tie0__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPADALsv8i16, "vpadal", Convert__Reg1_2__Tie0__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VPADALsv2i32, "vpadal", Convert__Reg1_2__Tie0__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPADALsv4i32, "vpadal", Convert__Reg1_2__Tie0__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VPADALsv8i8, "vpadal", Convert__Reg1_2__Tie0__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPADALsv16i8, "vpadal", Convert__Reg1_2__Tie0__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VPADALuv4i16, "vpadal", Convert__Reg1_2__Tie0__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPADALuv8i16, "vpadal", Convert__Reg1_2__Tie0__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VPADALuv2i32, "vpadal", Convert__Reg1_2__Tie0__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPADALuv4i32, "vpadal", Convert__Reg1_2__Tie0__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VPADALuv8i8, "vpadal", Convert__Reg1_2__Tie0__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPADALuv16i8, "vpadal", Convert__Reg1_2__Tie0__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VPADDf, "vpadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPADDi16, "vpadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPADDi32, "vpadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPADDi8, "vpadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPADDLsv4i16, "vpaddl", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPADDLsv8i16, "vpaddl", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VPADDLsv2i32, "vpaddl", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPADDLsv4i32, "vpaddl", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VPADDLsv8i8, "vpaddl", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPADDLsv16i8, "vpaddl", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VPADDLuv4i16, "vpaddl", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPADDLuv8i16, "vpaddl", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VPADDLuv2i32, "vpaddl", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPADDLuv4i32, "vpaddl", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VPADDLuv8i8, "vpaddl", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPADDLuv16i8, "vpaddl", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VPMAXf, "vpmax", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPMAXs16, "vpmax", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPMAXs32, "vpmax", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPMAXs8, "vpmax", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPMAXu16, "vpmax", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPMAXu32, "vpmax", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPMAXu8, "vpmax", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPMINf, "vpmin", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPMINs16, "vpmin", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPMINs32, "vpmin", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPMINs8, "vpmin", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPMINu16, "vpmin", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPMINu32, "vpmin", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VPMINu8, "vpmin", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQABSv4i16, "vqabs", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQABSv8i16, "vqabs", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQABSv2i32, "vqabs", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQABSv4i32, "vqabs", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQABSv8i8, "vqabs", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQABSv16i8, "vqabs", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQADDsv4i16, "vqadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQADDsv8i16, "vqadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQADDsv2i32, "vqadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQADDsv4i32, "vqadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQADDsv1i64, "vqadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQADDsv2i64, "vqadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQADDsv8i8, "vqadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQADDsv16i8, "vqadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQADDuv4i16, "vqadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQADDuv8i16, "vqadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQADDuv2i32, "vqadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQADDuv4i32, "vqadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQADDuv1i64, "vqadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQADDuv2i64, "vqadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQADDuv8i8, "vqadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQADDuv16i8, "vqadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQDMLALv4i32, "vqdmlal", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQDMLALv2i64, "vqdmlal", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQDMLALslv4i16, "vqdmlal", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VQDMLALslv2i32, "vqdmlal", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VQDMLSLv4i32, "vqdmlsl", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQDMLSLv2i64, "vqdmlsl", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQDMLSLslv4i16, "vqdmlsl", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VQDMLSLslv2i32, "vqdmlsl", Convert__Reg1_2__Tie0__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VQDMULHv4i16, "vqdmulh", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQDMULHv8i16, "vqdmulh", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQDMULHv2i32, "vqdmulh", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQDMULHv4i32, "vqdmulh", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQDMULHslv4i16, "vqdmulh", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VQDMULHslv8i16, "vqdmulh", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VQDMULHslv2i32, "vqdmulh", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VQDMULHslv4i32, "vqdmulh", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VQDMULLv4i32, "vqdmull", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQDMULLv2i64, "vqdmull", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQDMULLslv4i16, "vqdmull", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VQDMULLslv2i32, "vqdmull", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VQMOVNsv8i8, "vqmovn", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQMOVNsv4i16, "vqmovn", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQMOVNsv2i32, "vqmovn", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_DPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQMOVNuv8i8, "vqmovn", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQMOVNuv4i16, "vqmovn", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQMOVNuv2i32, "vqmovn", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_DPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQMOVNsuv8i8, "vqmovun", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQMOVNsuv4i16, "vqmovun", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQMOVNsuv2i32, "vqmovun", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_DPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQNEGv4i16, "vqneg", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQNEGv8i16, "vqneg", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQNEGv2i32, "vqneg", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQNEGv4i32, "vqneg", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQNEGv8i8, "vqneg", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQNEGv16i8, "vqneg", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQRDMULHv4i16, "vqrdmulh", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQRDMULHv8i16, "vqrdmulh", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQRDMULHv2i32, "vqrdmulh", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQRDMULHv4i32, "vqrdmulh", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQRDMULHslv4i16, "vqrdmulh", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VQRDMULHslv8i16, "vqrdmulh", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_DPR_8, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VQRDMULHslv2i32, "vqrdmulh", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VQRDMULHslv4i32, "vqrdmulh", Convert__Reg1_2__Reg1_3__Reg1_4__Imm1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_DPR_VFP2, MCK__91_, MCK_Imm, MCK__93_ }, Feature_HasNEON},
  { ARM::VQRSHLsv4i16, "vqrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQRSHLsv8i16, "vqrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQRSHLsv2i32, "vqrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQRSHLsv4i32, "vqrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQRSHLsv1i64, "vqrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQRSHLsv2i64, "vqrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQRSHLsv8i8, "vqrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQRSHLsv16i8, "vqrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQRSHLuv4i16, "vqrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQRSHLuv8i16, "vqrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQRSHLuv2i32, "vqrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQRSHLuv4i32, "vqrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQRSHLuv1i64, "vqrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQRSHLuv2i64, "vqrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQRSHLuv8i8, "vqrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQRSHLuv16i8, "vqrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQRSHRNsv8i8, "vqrshrn", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQRSHRNsv4i16, "vqrshrn", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQRSHRNsv2i32, "vqrshrn", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQRSHRNuv8i8, "vqrshrn", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQRSHRNuv4i16, "vqrshrn", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQRSHRNuv2i32, "vqrshrn", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQRSHRUNv8i8, "vqrshrun", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQRSHRUNv4i16, "vqrshrun", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQRSHRUNv2i32, "vqrshrun", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLsv4i16, "vqshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQSHLsiv4i16, "vqshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLsv8i16, "vqshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQSHLsiv8i16, "vqshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLsv2i32, "vqshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQSHLsiv2i32, "vqshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLsv4i32, "vqshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQSHLsiv4i32, "vqshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLsv1i64, "vqshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQSHLsiv1i64, "vqshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLsv2i64, "vqshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQSHLsiv2i64, "vqshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLsv8i8, "vqshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQSHLsiv8i8, "vqshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLsv16i8, "vqshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQSHLsiv16i8, "vqshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLuv4i16, "vqshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQSHLuiv4i16, "vqshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLuv8i16, "vqshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQSHLuiv8i16, "vqshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLuv2i32, "vqshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQSHLuiv2i32, "vqshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLuv4i32, "vqshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQSHLuiv4i32, "vqshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLuv1i64, "vqshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQSHLuiv1i64, "vqshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLuv2i64, "vqshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQSHLuiv2i64, "vqshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLuv8i8, "vqshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQSHLuiv8i8, "vqshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLuv16i8, "vqshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQSHLuiv16i8, "vqshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLsuv4i16, "vqshlu", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLsuv8i16, "vqshlu", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLsuv2i32, "vqshlu", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLsuv4i32, "vqshlu", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLsuv1i64, "vqshlu", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLsuv2i64, "vqshlu", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLsuv8i8, "vqshlu", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHLsuv16i8, "vqshlu", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHRNsv8i8, "vqshrn", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHRNsv4i16, "vqshrn", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHRNsv2i32, "vqshrn", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHRNuv8i8, "vqshrn", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHRNuv4i16, "vqshrn", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHRNuv2i32, "vqshrn", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHRUNv8i8, "vqshrun", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHRUNv4i16, "vqshrun", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSHRUNv2i32, "vqshrun", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VQSUBsv4i16, "vqsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQSUBsv8i16, "vqsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQSUBsv2i32, "vqsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQSUBsv4i32, "vqsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQSUBsv1i64, "vqsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQSUBsv2i64, "vqsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQSUBsv8i8, "vqsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQSUBsv16i8, "vqsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQSUBuv4i16, "vqsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQSUBuv8i16, "vqsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQSUBuv2i32, "vqsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQSUBuv4i32, "vqsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQSUBuv1i64, "vqsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQSUBuv2i64, "vqsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VQSUBuv8i8, "vqsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VQSUBuv16i8, "vqsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRADDHNv8i8, "vraddhn", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRADDHNv4i16, "vraddhn", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRADDHNv2i32, "vraddhn", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i64, MCK_DPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRECPEfd, "vrecpe", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VRECPEfq, "vrecpe", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRECPEd, "vrecpe", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VRECPEq, "vrecpe", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRECPSfd, "vrecps", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VRECPSfq, "vrecps", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VREV16d8, "vrev16", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VREV16q8, "vrev16", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VREV32d16, "vrev32", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VREV32q16, "vrev32", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VREV32d8, "vrev32", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VREV32q8, "vrev32", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VREV64d16, "vrev64", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VREV64q16, "vrev64", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VREV64d32, "vrev64", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VREV64df, "vrev64", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VREV64q32, "vrev64", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VREV64qf, "vrev64", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VREV64d8, "vrev64", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VREV64q8, "vrev64", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRHADDsv4i16, "vrhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VRHADDsv8i16, "vrhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRHADDsv2i32, "vrhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VRHADDsv4i32, "vrhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRHADDsv8i8, "vrhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VRHADDsv16i8, "vrhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRHADDuv4i16, "vrhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VRHADDuv8i16, "vrhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRHADDuv2i32, "vrhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VRHADDuv4i32, "vrhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRHADDuv8i8, "vrhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VRHADDuv16i8, "vrhadd", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRSHLsv4i16, "vrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VRSHLsv8i16, "vrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRSHLsv2i32, "vrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VRSHLsv4i32, "vrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRSHLsv1i64, "vrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VRSHLsv2i64, "vrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRSHLsv8i8, "vrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VRSHLsv16i8, "vrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRSHLuv4i16, "vrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VRSHLuv8i16, "vrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRSHLuv2i32, "vrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VRSHLuv4i32, "vrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRSHLuv1i64, "vrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VRSHLuv2i64, "vrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRSHLuv8i8, "vrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VRSHLuv16i8, "vrshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRSHRsv4i16, "vrshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSHRsv8i16, "vrshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSHRsv2i32, "vrshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSHRsv4i32, "vrshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSHRsv1i64, "vrshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSHRsv2i64, "vrshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSHRsv8i8, "vrshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSHRsv16i8, "vrshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSHRuv4i16, "vrshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSHRuv8i16, "vrshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSHRuv2i32, "vrshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSHRuv4i32, "vrshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSHRuv1i64, "vrshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSHRuv2i64, "vrshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSHRuv8i8, "vrshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSHRuv16i8, "vrshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSHRNv8i8, "vrshrn", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSHRNv4i16, "vrshrn", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSHRNv2i32, "vrshrn", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i64, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSQRTEfd, "vrsqrte", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VRSQRTEfq, "vrsqrte", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRSQRTEd, "vrsqrte", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VRSQRTEq, "vrsqrte", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRSQRTSfd, "vrsqrts", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VRSQRTSfq, "vrsqrts", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRSRAsv4i16, "vrsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSRAsv8i16, "vrsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSRAsv2i32, "vrsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSRAsv4i32, "vrsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSRAsv1i64, "vrsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSRAsv2i64, "vrsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSRAsv8i8, "vrsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSRAsv16i8, "vrsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSRAuv4i16, "vrsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSRAuv8i16, "vrsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSRAuv2i32, "vrsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSRAuv4i32, "vrsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSRAuv1i64, "vrsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSRAuv2i64, "vrsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSRAuv8i8, "vrsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSRAuv16i8, "vrsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VRSUBHNv8i8, "vrsubhn", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRSUBHNv4i16, "vrsubhn", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VRSUBHNv2i32, "vrsubhn", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i64, MCK_DPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VSHLiv4i16, "vshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHLiv8i16, "vshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHLiv2i32, "vshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHLiv4i32, "vshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHLiv1i64, "vshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i64, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHLiv2i64, "vshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i64, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHLiv8i8, "vshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i8, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHLiv16i8, "vshl", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i8, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHLsv4i16, "vshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSHLsv8i16, "vshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VSHLsv2i32, "vshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSHLsv4i32, "vshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VSHLsv1i64, "vshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSHLsv2i64, "vshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VSHLsv8i8, "vshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSHLsv16i8, "vshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VSHLuv4i16, "vshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSHLuv8i16, "vshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VSHLuv2i32, "vshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSHLuv4i32, "vshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VSHLuv1i64, "vshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSHLuv2i64, "vshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VSHLuv8i8, "vshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSHLuv16i8, "vshl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VSHLLi16, "vshll", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_QPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHLLi32, "vshll", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_QPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHLLi8, "vshll", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i8, MCK_QPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHLLsv4i32, "vshll", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHLLsv2i64, "vshll", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHLLsv8i16, "vshll", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHLLuv4i32, "vshll", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHLLuv2i64, "vshll", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHLLuv8i16, "vshll", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHRsv4i16, "vshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHRsv8i16, "vshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHRsv2i32, "vshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHRsv4i32, "vshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHRsv1i64, "vshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHRsv2i64, "vshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHRsv8i8, "vshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHRsv16i8, "vshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHRuv4i16, "vshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHRuv8i16, "vshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHRuv2i32, "vshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHRuv4i32, "vshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHRuv1i64, "vshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHRuv2i64, "vshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHRuv8i8, "vshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHRuv16i8, "vshr", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHRNv8i8, "vshrn", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHRNv4i16, "vshrn", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSHRNv2i32, "vshrn", Convert__Reg1_2__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i64, MCK_DPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSLIv4i16, "vsli", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSLIv8i16, "vsli", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSLIv2i32, "vsli", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSLIv4i32, "vsli", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSLIv1i64, "vsli", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_64, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSLIv2i64, "vsli", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_64, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSLIv8i8, "vsli", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSLIv16i8, "vsli", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSQRTS, "vsqrt", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VSQRTD, "vsqrt", Convert__Reg1_2__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_f64, MCK_DPR, MCK_DPR }, Feature_HasVFP2},
  { ARM::VSRAsv4i16, "vsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSRAsv8i16, "vsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSRAsv2i32, "vsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSRAsv4i32, "vsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSRAsv1i64, "vsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSRAsv2i64, "vsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s64, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSRAsv8i8, "vsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSRAsv16i8, "vsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSRAuv4i16, "vsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSRAuv8i16, "vsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSRAuv2i32, "vsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSRAuv4i32, "vsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSRAuv1i64, "vsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSRAuv2i64, "vsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u64, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSRAuv8i8, "vsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSRAuv16i8, "vsra", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSRIv4i16, "vsri", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSRIv8i16, "vsri", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSRIv2i32, "vsri", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSRIv4i32, "vsri", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSRIv1i64, "vsri", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_64, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSRIv2i64, "vsri", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_64, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSRIv8i8, "vsri", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_DPR, MCK_DPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VSRIv16i8, "vsri", Convert__Reg1_2__Tie0__Reg1_3__Imm1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_QPR, MCK_QPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d16, "vst1", Convert__Reg1_5__Imm1_6__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d32, "vst1", Convert__Reg1_5__Imm1_6__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d64, "vst1", Convert__Reg1_5__Imm1_6__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_64, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d8, "vst1", Convert__Reg1_5__Imm1_6__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d16_UPD, "vst1", Convert__Reg1_5__Tie0__Imm1_7__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1q16, "vst1", Convert__Reg1_6__Imm1_7__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d32_UPD, "vst1", Convert__Reg1_5__Tie0__Imm1_7__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1q32, "vst1", Convert__Reg1_6__Imm1_7__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d64_UPD, "vst1", Convert__Reg1_5__Tie0__Imm1_7__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_64, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1q64, "vst1", Convert__Reg1_6__Imm1_7__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_64, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d8_UPD, "vst1", Convert__Reg1_5__Tie0__Imm1_7__Reg1_3__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1q8, "vst1", Convert__Reg1_6__Imm1_7__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1q16_UPD, "vst1", Convert__Reg1_6__Tie0__Imm1_8__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d16T, "vst1", Convert__Reg1_7__Imm1_8__Reg1_3__Reg1_4__Reg1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1q32_UPD, "vst1", Convert__Reg1_6__Tie0__Imm1_8__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d32T, "vst1", Convert__Reg1_7__Imm1_8__Reg1_3__Reg1_4__Reg1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1q64_UPD, "vst1", Convert__Reg1_6__Tie0__Imm1_8__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_64, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d64T, "vst1", Convert__Reg1_7__Imm1_8__Reg1_3__Reg1_4__Reg1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_64, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1q8_UPD, "vst1", Convert__Reg1_6__Tie0__Imm1_8__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d8T, "vst1", Convert__Reg1_7__Imm1_8__Reg1_3__Reg1_4__Reg1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1LNd16, "vst1", Convert__Reg1_8__Imm1_9__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d16T_UPD, "vst1", Convert__Reg1_7__Tie0__Imm1_9__Reg1_3__Reg1_4__Reg1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d16Q, "vst1", Convert__Reg1_8__Imm1_9__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1LNd32, "vst1", Convert__Reg1_8__Imm1_9__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d32T_UPD, "vst1", Convert__Reg1_7__Tie0__Imm1_9__Reg1_3__Reg1_4__Reg1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d32Q, "vst1", Convert__Reg1_8__Imm1_9__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d64T_UPD, "vst1", Convert__Reg1_7__Tie0__Imm1_9__Reg1_3__Reg1_4__Reg1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_64, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d64Q, "vst1", Convert__Reg1_8__Imm1_9__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_64, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1LNd8, "vst1", Convert__Reg1_8__Imm1_9__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d8T_UPD, "vst1", Convert__Reg1_7__Tie0__Imm1_9__Reg1_3__Reg1_4__Reg1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d8Q, "vst1", Convert__Reg1_8__Imm1_9__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1LNd16_UPD, "vst1", Convert__Reg1_8__Tie0__Imm1_10__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d16Q_UPD, "vst1", Convert__Reg1_8__Tie0__Imm1_10__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1LNd32_UPD, "vst1", Convert__Reg1_8__Tie0__Imm1_10__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d32Q_UPD, "vst1", Convert__Reg1_8__Tie0__Imm1_10__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d64Q_UPD, "vst1", Convert__Reg1_8__Tie0__Imm1_10__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_64, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1LNd8_UPD, "vst1", Convert__Reg1_8__Tie0__Imm1_10__Reg1_3__Imm1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK__91_, MCK_Imm, MCK__93_, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST1d8Q_UPD, "vst1", Convert__Reg1_8__Tie0__Imm1_10__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST2b16, "vst2", Convert__Reg1_6__Imm1_7__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST2d16, "vst2", Convert__Reg1_6__Imm1_7__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST2b32, "vst2", Convert__Reg1_6__Imm1_7__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST2d32, "vst2", Convert__Reg1_6__Imm1_7__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST2b8, "vst2", Convert__Reg1_6__Imm1_7__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST2d8, "vst2", Convert__Reg1_6__Imm1_7__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST2b16_UPD, "vst2", Convert__Reg1_6__Tie0__Imm1_8__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST2d16_UPD, "vst2", Convert__Reg1_6__Tie0__Imm1_8__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST2b32_UPD, "vst2", Convert__Reg1_6__Tie0__Imm1_8__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST2d32_UPD, "vst2", Convert__Reg1_6__Tie0__Imm1_8__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST2b8_UPD, "vst2", Convert__Reg1_6__Tie0__Imm1_8__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST2d8_UPD, "vst2", Convert__Reg1_6__Tie0__Imm1_8__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST2q16, "vst2", Convert__Reg1_8__Imm1_9__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST2q32, "vst2", Convert__Reg1_8__Imm1_9__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST2q8, "vst2", Convert__Reg1_8__Imm1_9__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST2q16_UPD, "vst2", Convert__Reg1_8__Tie0__Imm1_10__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST2q32_UPD, "vst2", Convert__Reg1_8__Tie0__Imm1_10__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST2q8_UPD, "vst2", Convert__Reg1_8__Tie0__Imm1_10__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST3d16, "vst3", Convert__Reg1_7__Imm1_8__Reg1_3__Reg1_4__Reg1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST3q16, "vst3", Convert__Reg1_7__Imm1_8__Reg1_3__Reg1_4__Reg1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST3d32, "vst3", Convert__Reg1_7__Imm1_8__Reg1_3__Reg1_4__Reg1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST3q32, "vst3", Convert__Reg1_7__Imm1_8__Reg1_3__Reg1_4__Reg1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST3d8, "vst3", Convert__Reg1_7__Imm1_8__Reg1_3__Reg1_4__Reg1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST3q8, "vst3", Convert__Reg1_7__Imm1_8__Reg1_3__Reg1_4__Reg1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST3d16_UPD, "vst3", Convert__Reg1_7__Tie0__Imm1_9__Reg1_3__Reg1_4__Reg1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST3q16_UPD, "vst3", Convert__Reg1_7__Tie0__Imm1_9__Reg1_3__Reg1_4__Reg1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST3d32_UPD, "vst3", Convert__Reg1_7__Tie0__Imm1_9__Reg1_3__Reg1_4__Reg1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST3q32_UPD, "vst3", Convert__Reg1_7__Tie0__Imm1_9__Reg1_3__Reg1_4__Reg1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST3d8_UPD, "vst3", Convert__Reg1_7__Tie0__Imm1_9__Reg1_3__Reg1_4__Reg1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST3q8_UPD, "vst3", Convert__Reg1_7__Tie0__Imm1_9__Reg1_3__Reg1_4__Reg1_5__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST4d16, "vst4", Convert__Reg1_8__Imm1_9__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST4q16, "vst4", Convert__Reg1_8__Imm1_9__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST4d32, "vst4", Convert__Reg1_8__Imm1_9__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST4q32, "vst4", Convert__Reg1_8__Imm1_9__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST4d8, "vst4", Convert__Reg1_8__Imm1_9__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST4q8, "vst4", Convert__Reg1_8__Imm1_9__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm }, Feature_HasNEON},
  { ARM::VST4d16_UPD, "vst4", Convert__Reg1_8__Tie0__Imm1_10__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST4q16_UPD, "vst4", Convert__Reg1_8__Tie0__Imm1_10__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST4d32_UPD, "vst4", Convert__Reg1_8__Tie0__Imm1_10__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST4q32_UPD, "vst4", Convert__Reg1_8__Tie0__Imm1_10__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST4d8_UPD, "vst4", Convert__Reg1_8__Tie0__Imm1_10__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VST4q8_UPD, "vst4", Convert__Reg1_8__Tie0__Imm1_10__Reg1_3__Reg1_4__Reg1_5__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_GPR, MCK_Imm, MCK_Imm }, Feature_HasNEON},
  { ARM::VSTMDDB, "vstmdb", Convert__Reg1_1__CondCode2_0__DPRRegList1_2, { MCK_CondCode, MCK_GPR, MCK_DPRRegList }, Feature_HasVFP2},
  { ARM::VSTMSDB, "vstmdb", Convert__Reg1_1__CondCode2_0__SPRRegList1_2, { MCK_CondCode, MCK_GPR, MCK_SPRRegList }, Feature_HasVFP2},
  { ARM::VSTMDDB_UPD, "vstmdb", Convert__Reg1_1__Tie0__CondCode2_0__DPRRegList1_3, { MCK_CondCode, MCK_GPR, MCK__EXCLAIM_, MCK_DPRRegList }, Feature_HasVFP2},
  { ARM::VSTMSDB_UPD, "vstmdb", Convert__Reg1_1__Tie0__CondCode2_0__SPRRegList1_3, { MCK_CondCode, MCK_GPR, MCK__EXCLAIM_, MCK_SPRRegList }, Feature_HasVFP2},
  { ARM::VSTMDIA, "vstmia", Convert__Reg1_1__CondCode2_0__DPRRegList1_2, { MCK_CondCode, MCK_GPR, MCK_DPRRegList }, Feature_HasVFP2},
  { ARM::VSTMSIA, "vstmia", Convert__Reg1_1__CondCode2_0__SPRRegList1_2, { MCK_CondCode, MCK_GPR, MCK_SPRRegList }, Feature_HasVFP2},
  { ARM::VSTMDIA_UPD, "vstmia", Convert__Reg1_1__Tie0__CondCode2_0__DPRRegList1_3, { MCK_CondCode, MCK_GPR, MCK__EXCLAIM_, MCK_DPRRegList }, Feature_HasVFP2},
  { ARM::VSTMSIA_UPD, "vstmia", Convert__Reg1_1__Tie0__CondCode2_0__SPRRegList1_3, { MCK_CondCode, MCK_GPR, MCK__EXCLAIM_, MCK_SPRRegList }, Feature_HasVFP2},
  { ARM::VSTRS, "vstr", Convert__Reg1_2__MemMode52_3__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_SPR, MCK_MemMode5 }, Feature_HasVFP2},
  { ARM::VSTRD, "vstr", Convert__Reg1_2__MemMode52_3__CondCode2_0, { MCK_CondCode, MCK__DOT_64, MCK_DPR, MCK_MemMode5 }, Feature_HasVFP2},
  { ARM::VSUBS, "vsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_SPR, MCK_SPR, MCK_SPR }, Feature_HasVFP2},
  { ARM::VSUBfd, "vsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSUBfq, "vsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VSUBD, "vsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_f64, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasVFP2},
  { ARM::VSUBv4i16, "vsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSUBv8i16, "vsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VSUBv2i32, "vsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSUBv4i32, "vsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VSUBv1i64, "vsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i64, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSUBv2i64, "vsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i64, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VSUBv8i8, "vsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSUBv16i8, "vsub", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VSUBHNv8i8, "vsubhn", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i16, MCK_DPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VSUBHNv4i16, "vsubhn", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i32, MCK_DPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VSUBHNv2i32, "vsubhn", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_i64, MCK_DPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VSUBLsv4i32, "vsubl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSUBLsv2i64, "vsubl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSUBLsv8i16, "vsubl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSUBLuv4i32, "vsubl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSUBLuv2i64, "vsubl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSUBLuv8i16, "vsubl", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSUBWsv4i32, "vsubw", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s16, MCK_QPR, MCK_QPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSUBWsv2i64, "vsubw", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s32, MCK_QPR, MCK_QPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSUBWsv8i16, "vsubw", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_s8, MCK_QPR, MCK_QPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSUBWuv4i32, "vsubw", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u16, MCK_QPR, MCK_QPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSUBWuv2i64, "vsubw", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u32, MCK_QPR, MCK_QPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSUBWuv8i16, "vsubw", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_u8, MCK_QPR, MCK_QPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSWPd, "vswp", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VSWPq, "vswp", Convert__Reg1_1__Reg1_2__CondCode2_0, { MCK_CondCode, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VTBL1, "vtbl", Convert__Reg1_2__Reg1_4__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_DPR, MCK__123_, MCK_DPR, MCK__125_, MCK_DPR }, Feature_HasNEON},
  { ARM::VTBL2, "vtbl", Convert__Reg1_2__Reg1_4__Reg1_5__Reg1_7__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_DPR, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_DPR }, Feature_HasNEON},
  { ARM::VTBL3, "vtbl", Convert__Reg1_2__Reg1_4__Reg1_5__Reg1_6__Reg1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_DPR, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_DPR }, Feature_HasNEON},
  { ARM::VTBL4, "vtbl", Convert__Reg1_2__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_DPR, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_DPR }, Feature_HasNEON},
  { ARM::VTBX1, "vtbx", Convert__Reg1_2__Tie0__Reg1_4__Reg1_6__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_DPR, MCK__123_, MCK_DPR, MCK__125_, MCK_DPR }, Feature_HasNEON},
  { ARM::VTBX2, "vtbx", Convert__Reg1_2__Tie0__Reg1_4__Reg1_5__Reg1_7__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_DPR, MCK__123_, MCK_DPR, MCK_DPR, MCK__125_, MCK_DPR }, Feature_HasNEON},
  { ARM::VTBX3, "vtbx", Convert__Reg1_2__Tie0__Reg1_4__Reg1_5__Reg1_6__Reg1_8__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_DPR, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_DPR }, Feature_HasNEON},
  { ARM::VTBX4, "vtbx", Convert__Reg1_2__Tie0__Reg1_4__Reg1_5__Reg1_6__Reg1_7__Reg1_9__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_DPR, MCK__123_, MCK_DPR, MCK_DPR, MCK_DPR, MCK_DPR, MCK__125_, MCK_DPR }, Feature_HasNEON},
  { ARM::VTRNd16, "vtrn", Convert__Reg1_2__Reg1_3__Tie0__Tie1__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VTRNq16, "vtrn", Convert__Reg1_2__Reg1_3__Tie0__Tie1__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VTRNd32, "vtrn", Convert__Reg1_2__Reg1_3__Tie0__Tie1__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VTRNq32, "vtrn", Convert__Reg1_2__Reg1_3__Tie0__Tie1__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VTRNd8, "vtrn", Convert__Reg1_2__Reg1_3__Tie0__Tie1__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VTRNq8, "vtrn", Convert__Reg1_2__Reg1_3__Tie0__Tie1__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VTSTv4i16, "vtst", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VTSTv8i16, "vtst", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VTSTv2i32, "vtst", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VTSTv4i32, "vtst", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VTSTv8i8, "vtst", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_DPR, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VTSTv16i8, "vtst", Convert__Reg1_2__Reg1_3__Reg1_4__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_QPR, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VUZPd16, "vuzp", Convert__Reg1_2__Reg1_3__Tie0__Tie1__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VUZPq16, "vuzp", Convert__Reg1_2__Reg1_3__Tie0__Tie1__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VUZPd32, "vuzp", Convert__Reg1_2__Reg1_3__Tie0__Tie1__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VUZPq32, "vuzp", Convert__Reg1_2__Reg1_3__Tie0__Tie1__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VUZPd8, "vuzp", Convert__Reg1_2__Reg1_3__Tie0__Tie1__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VUZPq8, "vuzp", Convert__Reg1_2__Reg1_3__Tie0__Tie1__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VZIPd16, "vzip", Convert__Reg1_2__Reg1_3__Tie0__Tie1__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VZIPq16, "vzip", Convert__Reg1_2__Reg1_3__Tie0__Tie1__CondCode2_0, { MCK_CondCode, MCK__DOT_16, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VZIPd32, "vzip", Convert__Reg1_2__Reg1_3__Tie0__Tie1__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VZIPq32, "vzip", Convert__Reg1_2__Reg1_3__Tie0__Tie1__CondCode2_0, { MCK_CondCode, MCK__DOT_32, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::VZIPd8, "vzip", Convert__Reg1_2__Reg1_3__Tie0__Tie1__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_DPR, MCK_DPR }, Feature_HasNEON},
  { ARM::VZIPq8, "vzip", Convert__Reg1_2__Reg1_3__Tie0__Tie1__CondCode2_0, { MCK_CondCode, MCK__DOT_8, MCK_QPR, MCK_QPR }, Feature_HasNEON},
  { ARM::WFE, "wfe", Convert__CondCode2_0, { MCK_CondCode }, Feature_IsARM|Feature_HasV6T2},
  { ARM::tWFE, "wfe", Convert__CondCode2_0, { MCK_CondCode }, Feature_IsThumb},
  { ARM::t2WFE, "wfe", Convert__CondCode2_0, { MCK_CondCode, MCK__DOT_w }, Feature_IsThumb2},
  { ARM::WFI, "wfi", Convert__CondCode2_0, { MCK_CondCode }, Feature_IsARM|Feature_HasV6T2},
  { ARM::tWFI, "wfi", Convert__CondCode2_0, { MCK_CondCode }, Feature_IsThumb},
  { ARM::t2WFI, "wfi", Convert__CondCode2_0, { MCK_CondCode, MCK__DOT_w }, Feature_IsThumb2},
  { ARM::YIELD, "yield", Convert__CondCode2_0, { MCK_CondCode }, Feature_IsARM|Feature_HasV6T2},
  { ARM::tYIELD, "yield", Convert__CondCode2_0, { MCK_CondCode }, Feature_IsThumb},
  { ARM::t2YIELD, "yield", Convert__CondCode2_0, { MCK_CondCode, MCK__DOT_w }, Feature_IsThumb2},
};

bool ARMAsmParser::
MnemonicIsValid(StringRef Mnemonic) {
  // Search the table.
  std::pair<const MatchEntry*, const MatchEntry*> MnemonicRange =
    std::equal_range(MatchTable, MatchTable+1891, Mnemonic, LessOpcode());
  return MnemonicRange.first != MnemonicRange.second;
}

ARMAsmParser::MatchResultTy ARMAsmParser::
MatchInstructionImpl(const SmallVectorImpl<MCParsedAsmOperand*> &Operands,
                     MCInst &Inst, unsigned &ErrorInfo) {
  // Get the current feature set.
  unsigned AvailableFeatures = getAvailableFeatures();

  // Get the instruction mnemonic, which is the first token.
  StringRef Mnemonic = ((ARMOperand*)Operands[0])->getToken();

  // Process all MnemonicAliases to remap the mnemonic.
  ApplyMnemonicAliases(Mnemonic, AvailableFeatures);

  // Eliminate obvious mismatches.
  if (Operands.size() > 20) {
    ErrorInfo = 20;
    return Match_InvalidOperand;
  }

  // Some state to try to produce better error messages.
  bool HadMatchOtherThanFeatures = false;

  // Set ErrorInfo to the operand that mismatches if it is
  // wrong for all instances of the instruction.
  ErrorInfo = ~0U;
  // Search the table.
  std::pair<const MatchEntry*, const MatchEntry*> MnemonicRange =
    std::equal_range(MatchTable, MatchTable+1891, Mnemonic, LessOpcode());

  // Return a more specific error code if no mnemonics match.
  if (MnemonicRange.first == MnemonicRange.second)
    return Match_MnemonicFail;

  for (const MatchEntry *it = MnemonicRange.first, *ie = MnemonicRange.second;
       it != ie; ++it) {
    // equal_range guarantees that instruction mnemonic matches.
    assert(Mnemonic == it->Mnemonic);
    bool OperandsValid = true;
    for (unsigned i = 0; i != 19; ++i) {
      if (i + 1 >= Operands.size()) {
        OperandsValid = (it->Classes[i] == InvalidMatchClass);
        break;      }
      if (ValidateOperandClass(Operands[i+1], it->Classes[i]))
        continue;
      // If this operand is broken for all of the instances of this
      // mnemonic, keep track of it so we can report loc info.
      if (it == MnemonicRange.first || ErrorInfo <= i+1)
        ErrorInfo = i+1;
      // Otherwise, just reject this instance of the mnemonic.
      OperandsValid = false;
      break;
    }

    if (!OperandsValid) continue;
    if ((AvailableFeatures & it->RequiredFeatures) != it->RequiredFeatures) {
      HadMatchOtherThanFeatures = true;
      continue;
    }

    // We have selected a definite instruction, convert the parsed
    // operands into the appropriate MCInst.
    if (!ConvertToMCInst(it->ConvertFn, Inst,
                         it->Opcode, Operands))
      return Match_ConversionFail;

    return Match_Success;
  }

  // Okay, we had no match.  Try to return a useful error code.
  if (HadMatchOtherThanFeatures) return Match_MissingFeature;
  return Match_InvalidOperand;
}

namespace {
  struct OperandMatchEntry {
    const char *Mnemonic;
    unsigned OperandMask;
    MatchClassKind Class;
    unsigned RequiredFeatures;
  };

  // Predicate for searching for an opcode.
  struct LessOpcodeOperand {
    bool operator()(const OperandMatchEntry &LHS, StringRef RHS) {
      return StringRef(LHS.Mnemonic) < RHS;
    }
    bool operator()(StringRef LHS, const OperandMatchEntry &RHS) {
      return LHS < StringRef(RHS.Mnemonic);
    }
    bool operator()(const OperandMatchEntry &LHS, const OperandMatchEntry &RHS) {
      return StringRef(LHS.Mnemonic) < StringRef(RHS.Mnemonic);
    }
  };
} // end anonymous namespace.

static const OperandMatchEntry OperandMatchTable[52] = {
  /* Mnemonic, Operand List Mask, Operand Class, Features */
  { "cdp", 1 /* 0 */, MCK_CoprocNum, Feature_IsThumb|Feature_HasV6 },
  { "cdp", 28 /* 2, 3, 4 */, MCK_CoprocReg, Feature_IsThumb|Feature_HasV6 },
  { "cdp", 2 /* 1 */, MCK_CoprocNum, Feature_IsARM },
  { "cdp", 56 /* 3, 4, 5 */, MCK_CoprocReg, Feature_IsARM },
  { "cdp2", 1 /* 0 */, MCK_CoprocNum, Feature_IsARM },
  { "cdp2", 28 /* 2, 3, 4 */, MCK_CoprocReg, Feature_IsARM },
  { "cdp2", 1 /* 0 */, MCK_CoprocNum, Feature_IsThumb2|Feature_HasV6 },
  { "cdp2", 28 /* 2, 3, 4 */, MCK_CoprocReg, Feature_IsThumb2|Feature_HasV6 },
  { "cps", 2 /* 1 */, MCK_ProcIFlags, Feature_IsARM },
  { "cps", 2 /* 1 */, MCK_ProcIFlags, Feature_IsThumb },
  { "cps", 4 /* 2 */, MCK_ProcIFlags, Feature_IsThumb2 },
  { "cps", 2 /* 1 */, MCK_ProcIFlags, Feature_IsARM },
  { "cps", 4 /* 2 */, MCK_ProcIFlags, Feature_IsThumb2 },
  { "dmb", 1 /* 0 */, MCK_MemBarrierOpt, Feature_IsARM|Feature_HasDB },
  { "dmb", 1 /* 0 */, MCK_MemBarrierOpt, Feature_IsThumb|Feature_HasDB },
  { "dsb", 1 /* 0 */, MCK_MemBarrierOpt, Feature_IsARM|Feature_HasDB },
  { "dsb", 1 /* 0 */, MCK_MemBarrierOpt, Feature_IsThumb|Feature_HasDB },
  { "mcr", 1 /* 0 */, MCK_CoprocNum, Feature_IsThumb|Feature_HasV6 },
  { "mcr", 24 /* 3, 4 */, MCK_CoprocReg, Feature_IsThumb|Feature_HasV6 },
  { "mcr", 2 /* 1 */, MCK_CoprocNum, Feature_IsARM },
  { "mcr", 48 /* 4, 5 */, MCK_CoprocReg, Feature_IsARM },
  { "mcr2", 1 /* 0 */, MCK_CoprocNum, Feature_IsARM },
  { "mcr2", 24 /* 3, 4 */, MCK_CoprocReg, Feature_IsARM },
  { "mcr2", 1 /* 0 */, MCK_CoprocNum, Feature_IsThumb2|Feature_HasV6 },
  { "mcr2", 24 /* 3, 4 */, MCK_CoprocReg, Feature_IsThumb2|Feature_HasV6 },
  { "mcrr", 1 /* 0 */, MCK_CoprocNum, Feature_IsThumb|Feature_HasV6 },
  { "mcrr", 16 /* 4 */, MCK_CoprocReg, Feature_IsThumb|Feature_HasV6 },
  { "mcrr", 2 /* 1 */, MCK_CoprocNum, Feature_IsARM },
  { "mcrr", 32 /* 5 */, MCK_CoprocReg, Feature_IsARM },
  { "mcrr2", 1 /* 0 */, MCK_CoprocNum, Feature_IsARM },
  { "mcrr2", 16 /* 4 */, MCK_CoprocReg, Feature_IsARM },
  { "mcrr2", 1 /* 0 */, MCK_CoprocNum, Feature_IsThumb2|Feature_HasV6 },
  { "mcrr2", 16 /* 4 */, MCK_CoprocReg, Feature_IsThumb2|Feature_HasV6 },
  { "mrc", 1 /* 0 */, MCK_CoprocNum, Feature_IsThumb|Feature_HasV6 },
  { "mrc", 24 /* 3, 4 */, MCK_CoprocReg, Feature_IsThumb|Feature_HasV6 },
  { "mrc", 2 /* 1 */, MCK_CoprocNum, Feature_IsARM },
  { "mrc", 48 /* 4, 5 */, MCK_CoprocReg, Feature_IsARM },
  { "mrc2", 1 /* 0 */, MCK_CoprocNum, Feature_IsARM },
  { "mrc2", 24 /* 3, 4 */, MCK_CoprocReg, Feature_IsARM },
  { "mrc2", 1 /* 0 */, MCK_CoprocNum, Feature_IsThumb2|Feature_HasV6 },
  { "mrc2", 24 /* 3, 4 */, MCK_CoprocReg, Feature_IsThumb2|Feature_HasV6 },
  { "mrrc", 1 /* 0 */, MCK_CoprocNum, Feature_IsThumb|Feature_HasV6 },
  { "mrrc", 16 /* 4 */, MCK_CoprocReg, Feature_IsThumb|Feature_HasV6 },
  { "mrrc", 2 /* 1 */, MCK_CoprocNum, Feature_IsARM },
  { "mrrc", 32 /* 5 */, MCK_CoprocReg, Feature_IsARM },
  { "mrrc2", 1 /* 0 */, MCK_CoprocNum, Feature_IsARM },
  { "mrrc2", 16 /* 4 */, MCK_CoprocReg, Feature_IsARM },
  { "mrrc2", 1 /* 0 */, MCK_CoprocNum, Feature_IsThumb2|Feature_HasV6 },
  { "mrrc2", 16 /* 4 */, MCK_CoprocReg, Feature_IsThumb2|Feature_HasV6 },
  { "msr", 2 /* 1 */, MCK_MSRMask, Feature_IsThumb2 },
  { "msr", 2 /* 1 */, MCK_MSRMask, Feature_IsARM },
  { "msr", 2 /* 1 */, MCK_MSRMask, Feature_IsARM },
};

ARMAsmParser::OperandMatchResultTy ARMAsmParser::
TryCustomParseOperand(SmallVectorImpl<MCParsedAsmOperand*> &Operands,
                      unsigned MCK) {

  switch(MCK) {
  case MCK_CoprocNum:
    return tryParseCoprocNumOperand(Operands);
  case MCK_CoprocReg:
    return tryParseCoprocRegOperand(Operands);
  case MCK_MSRMask:
    return tryParseMSRMaskOperand(Operands);
  case MCK_MemBarrierOpt:
    return tryParseMemBarrierOptOperand(Operands);
  case MCK_ProcIFlags:
    return tryParseProcIFlagsOperand(Operands);
  default:
    return MatchOperand_NoMatch;
  }
  return MatchOperand_NoMatch;
}

ARMAsmParser::OperandMatchResultTy ARMAsmParser::
MatchOperandParserImpl(SmallVectorImpl<MCParsedAsmOperand*> &Operands,
                       StringRef Mnemonic) {
  // Get the current feature set.
  unsigned AvailableFeatures = getAvailableFeatures();

  // Get the next operand index.
  unsigned NextOpNum = Operands.size()-1;
  // Search the table.
  std::pair<const OperandMatchEntry*, const OperandMatchEntry*> MnemonicRange =
    std::equal_range(OperandMatchTable, OperandMatchTable+52, Mnemonic,
                     LessOpcodeOperand());

  if (MnemonicRange.first == MnemonicRange.second)
    return MatchOperand_NoMatch;

  for (const OperandMatchEntry *it = MnemonicRange.first,
       *ie = MnemonicRange.second; it != ie; ++it) {
    // equal_range guarantees that instruction mnemonic matches.
    assert(Mnemonic == it->Mnemonic);

    // check if the available features match
    if ((AvailableFeatures & it->RequiredFeatures) != it->RequiredFeatures) {
      continue;
    }

    // check if the operand in question has a custom parser.
    if (!(it->OperandMask & (1 << NextOpNum)))
      continue;

    // call custom parse method to handle the operand
    OperandMatchResultTy Result = TryCustomParseOperand(Operands, it->Class);
    if (Result != MatchOperand_NoMatch)
      return Result;
  }

  // Okay, we had no match.
  return MatchOperand_NoMatch;
}

#endif // GET_MATCHER_IMPLEMENTATION

