From 9db7c0a8dd84695a99c417167212545e1f6541f0 Mon Sep 17 00:00:00 2001
From: Finn Haedicke <finn@informatik.uni-bremen.de>
Date: Mon, 5 Jul 2010 13:09:21 +0200
Subject: [PATCH 03/14] added option to change the function called on error

default is exit(), any void (*)(int) will be called first if set
via boolector_abort_function. This allows C++ programs to throw an
exception instead.
---
 boolector.c |   26 ++++++++++++++++++++------
 boolector.h |    7 +++++++
 2 files changed, 27 insertions(+), 6 deletions(-)

diff --git a/boolector.c b/boolector.c
index 8495a27..8bfa49a 100644
--- a/boolector.c
+++ b/boolector.c
@@ -25,6 +25,16 @@
 #include <stdio.h>
 #include <limits.h>
 
+// this function will be called if an internal error occurs
+static void(*boolector_error_fun)(int) = 0;
+
+static inline void btor_exit(int exitcode) {
+  if(boolector_error_fun) {
+    (*boolector_error_fun)(exitcode);
+  }
+  exit(exitcode);
+}
+
 /*------------------------------------------------------------------------*/
 /* BEGIN OF DECLARATIONS                                                  */
 /*------------------------------------------------------------------------*/
@@ -35,7 +45,7 @@
       { \
         printf ("[boolector] %s: %s\n", __func__, msg); \
 	fflush (stdout); \
-        exit (BTOR_ERR_EXIT); \
+        btor_exit (BTOR_ERR_EXIT); \
       } \
   } while (0)
 
@@ -46,7 +56,7 @@
         printf ("[boolector] %s: ", __func__); \
 	printf ("'%s' must not be NULL\n", #arg); \
 	fflush (stdout); \
-        exit (BTOR_ERR_EXIT); \
+        btor_exit (BTOR_ERR_EXIT); \
       } \
   } while (0)
 
@@ -57,7 +67,7 @@
         printf ("[boolector] %s: ", __func__); \
         printf ("reference counter of '%s' must not be < 1\n", #arg); \
 	fflush (stdout); \
-        exit (BTOR_ERR_EXIT); \
+        btor_exit (BTOR_ERR_EXIT); \
       } \
   } while (0)
 
@@ -68,7 +78,7 @@
         printf ("[boolector] %s: ", __func__); \
         printf ("'%s' must not be an array\n", #arg); \
 	fflush (stdout); \
-        exit (BTOR_ERR_EXIT); \
+        btor_exit (BTOR_ERR_EXIT); \
       } \
   } while (0)
 
@@ -79,7 +89,7 @@
         printf ("[boolector] %s: ", __func__); \
         printf ("'%s' must not be a bit-vector\n", #arg); \
 	fflush (stdout); \
-        exit (BTOR_ERR_EXIT); \
+        btor_exit (BTOR_ERR_EXIT); \
       } \
   } while (0)
 
@@ -89,7 +99,7 @@
       { \
         printf("[boolector] %s: ", __func__); \
         printf("bit-width of '%s' and '%s' must not be unequal\n",#arg1,#arg2);\
-        exit (BTOR_ERR_EXIT); \
+        btor_exit (BTOR_ERR_EXIT); \
       } \
   } while (0)
 
@@ -1327,6 +1337,10 @@ boolector_free_bv_assignment (Btor * btor, char * assignment)
   btor_free_bv_assignment_exp (btor, assignment);
 }
 
+void
+boolector_abort_function( void (*fun)(int) ) {
+  boolector_error_fun = fun;
+}
 
 /*------------------------------------------------------------------------*/
 /* END OF IMPLEMENTATION                                                  */
diff --git a/boolector.h b/boolector.h
index 5f80aae..953dd69 100644
--- a/boolector.h
+++ b/boolector.h
@@ -1021,4 +1021,11 @@ void boolector_array_assignment (Btor * btor, BtorExp * e_array, char ***indices
  */
 void boolector_free_bv_assignment (Btor * btor, char * assignment);
 
+
+/**
+ * Sets the function to call when an internal error occurs (defaul: exit).
+ * \param fun Funtion taking an error code and terminating execution of boolector.
+ **/
+void boolector_abort_function( void (*fun)(int) );
+
 #endif
-- 
1.7.3.4

