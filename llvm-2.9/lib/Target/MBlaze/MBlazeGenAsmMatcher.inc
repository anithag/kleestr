//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Matcher Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_ASSEMBLER_HEADER
#undef GET_ASSEMBLER_HEADER
  // This should be included into the middle of the declaration of
  // your subclasses implementation of TargetAsmParser.
  unsigned ComputeAvailableFeatures(const MBlazeSubtarget *Subtarget) const;
  enum MatchResultTy {
    Match_ConversionFail,
    Match_InvalidOperand,
    Match_MissingFeature,
    Match_MnemonicFail,
    Match_Success
  };
  bool ConvertToMCInst(unsigned Kind, MCInst &Inst, unsigned Opcode,
                       const SmallVectorImpl<MCParsedAsmOperand*> &Operands);
  bool MnemonicIsValid(StringRef Mnemonic);
  MatchResultTy MatchInstructionImpl(
    const SmallVectorImpl<MCParsedAsmOperand*> &Operands,
    MCInst &Inst, unsigned &ErrorInfo);
#endif // GET_ASSEMBLER_HEADER_INFO


#ifdef GET_REGISTER_MATCHER
#undef GET_REGISTER_MATCHER

// Flags for subtarget features that participate in instruction matching.
enum SubtargetFeatureFlag {
  Feature_None = 0
};

static unsigned MatchRegisterName(StringRef Name) {
  switch (Name.size()) {
  default: break;
  case 2:	 // 10 strings to match.
    if (Name[0] != 'r')
      break;
    switch (Name[1]) {
    default: break;
    case '0':	 // 1 string to match.
      return 2;	 // "r0"
    case '1':	 // 1 string to match.
      return 3;	 // "r1"
    case '2':	 // 1 string to match.
      return 4;	 // "r2"
    case '3':	 // 1 string to match.
      return 5;	 // "r3"
    case '4':	 // 1 string to match.
      return 6;	 // "r4"
    case '5':	 // 1 string to match.
      return 7;	 // "r5"
    case '6':	 // 1 string to match.
      return 8;	 // "r6"
    case '7':	 // 1 string to match.
      return 9;	 // "r7"
    case '8':	 // 1 string to match.
      return 10;	 // "r8"
    case '9':	 // 1 string to match.
      return 11;	 // "r9"
    }
    break;
  case 3:	 // 23 strings to match.
    if (Name[0] != 'r')
      break;
    switch (Name[1]) {
    default: break;
    case '1':	 // 10 strings to match.
      switch (Name[2]) {
      default: break;
      case '0':	 // 1 string to match.
        return 12;	 // "r10"
      case '1':	 // 1 string to match.
        return 13;	 // "r11"
      case '2':	 // 1 string to match.
        return 14;	 // "r12"
      case '3':	 // 1 string to match.
        return 15;	 // "r13"
      case '4':	 // 1 string to match.
        return 16;	 // "r14"
      case '5':	 // 1 string to match.
        return 17;	 // "r15"
      case '6':	 // 1 string to match.
        return 18;	 // "r16"
      case '7':	 // 1 string to match.
        return 19;	 // "r17"
      case '8':	 // 1 string to match.
        return 20;	 // "r18"
      case '9':	 // 1 string to match.
        return 21;	 // "r19"
      }
      break;
    case '2':	 // 10 strings to match.
      switch (Name[2]) {
      default: break;
      case '0':	 // 1 string to match.
        return 22;	 // "r20"
      case '1':	 // 1 string to match.
        return 23;	 // "r21"
      case '2':	 // 1 string to match.
        return 24;	 // "r22"
      case '3':	 // 1 string to match.
        return 25;	 // "r23"
      case '4':	 // 1 string to match.
        return 26;	 // "r24"
      case '5':	 // 1 string to match.
        return 27;	 // "r25"
      case '6':	 // 1 string to match.
        return 28;	 // "r26"
      case '7':	 // 1 string to match.
        return 29;	 // "r27"
      case '8':	 // 1 string to match.
        return 30;	 // "r28"
      case '9':	 // 1 string to match.
        return 31;	 // "r29"
      }
      break;
    case '3':	 // 2 strings to match.
      switch (Name[2]) {
      default: break;
      case '0':	 // 1 string to match.
        return 32;	 // "r30"
      case '1':	 // 1 string to match.
        return 33;	 // "r31"
      }
      break;
    case 'p':	 // 1 string to match.
      if (Name[2] != 'c')
        break;
      return 40;	 // "rpc"
    }
    break;
  case 4:	 // 8 strings to match.
    if (Name[0] != 'r')
      break;
    switch (Name[1]) {
    default: break;
    case 'b':	 // 1 string to match.
      if (Name.substr(2, 2) != "tr")
        break;
      return 34;	 // "rbtr"
    case 'e':	 // 3 strings to match.
      switch (Name[2]) {
      default: break;
      case 'a':	 // 1 string to match.
        if (Name[3] != 'r')
          break;
        return 35;	 // "rear"
      case 'd':	 // 1 string to match.
        if (Name[3] != 'r')
          break;
        return 36;	 // "redr"
      case 's':	 // 1 string to match.
        if (Name[3] != 'r')
          break;
        return 37;	 // "resr"
      }
      break;
    case 'f':	 // 1 string to match.
      if (Name.substr(2, 2) != "sr")
        break;
      return 38;	 // "rfsr"
    case 'm':	 // 1 string to match.
      if (Name.substr(2, 2) != "sr")
        break;
      return 39;	 // "rmsr"
    case 'p':	 // 1 string to match.
      if (Name.substr(2, 2) != "id")
        break;
      return 41;	 // "rpid"
    case 'z':	 // 1 string to match.
      if (Name.substr(2, 2) != "pr")
        break;
      return 57;	 // "rzpr"
    }
    break;
  case 5:	 // 11 strings to match.
    if (Name[0] != 'r')
      break;
    switch (Name[1]) {
    default: break;
    case 'p':	 // 10 strings to match.
      if (Name.substr(2, 2) != "vr")
        break;
      switch (Name[4]) {
      default: break;
      case '0':	 // 1 string to match.
        return 42;	 // "rpvr0"
      case '1':	 // 1 string to match.
        return 43;	 // "rpvr1"
      case '2':	 // 1 string to match.
        return 44;	 // "rpvr2"
      case '3':	 // 1 string to match.
        return 45;	 // "rpvr3"
      case '4':	 // 1 string to match.
        return 46;	 // "rpvr4"
      case '5':	 // 1 string to match.
        return 47;	 // "rpvr5"
      case '6':	 // 1 string to match.
        return 48;	 // "rpvr6"
      case '7':	 // 1 string to match.
        return 49;	 // "rpvr7"
      case '8':	 // 1 string to match.
        return 50;	 // "rpvr8"
      case '9':	 // 1 string to match.
        return 51;	 // "rpvr9"
      }
      break;
    case 't':	 // 1 string to match.
      if (Name.substr(2, 3) != "lbx")
        break;
      return 56;	 // "rtlbx"
    }
    break;
  case 6:	 // 4 strings to match.
    if (Name[0] != 'r')
      break;
    switch (Name[1]) {
    default: break;
    case 'p':	 // 2 strings to match.
      if (Name.substr(2, 3) != "vr1")
        break;
      switch (Name[5]) {
      default: break;
      case '0':	 // 1 string to match.
        return 52;	 // "rpvr10"
      case '1':	 // 1 string to match.
        return 53;	 // "rpvr11"
      }
      break;
    case 't':	 // 2 strings to match.
      if (Name.substr(2, 2) != "lb")
        break;
      switch (Name[4]) {
      default: break;
      case 'h':	 // 1 string to match.
        if (Name[5] != 'i')
          break;
        return 54;	 // "rtlbhi"
      case 'l':	 // 1 string to match.
        if (Name[5] != 'o')
          break;
        return 55;	 // "rtlblo"
      }
      break;
    }
    break;
  case 7:	 // 1 string to match.
    if (Name.substr(0, 7) != "rmsr[c]")
      break;
    return 1;	 // "rmsr[c]"
  }
  return 0;
}

#endif // GET_REGISTER_MATCHER


#ifdef GET_MATCHER_IMPLEMENTATION
#undef GET_MATCHER_IMPLEMENTATION

// Unified function for converting operands to MCInst instances.

enum ConversionKind {
  Convert__Reg1_0__Reg1_1__Reg1_2,
  Convert__Reg1_0__Reg1_1__Imm1_2,
  Convert__Reg1_0__Fsl1_1,
  Convert__Reg1_0__Reg1_1,
  Convert__Reg1_0__Imm1_1,
  Convert__Reg1_0,
  Convert__Imm1_0,
  Convert__Reg1_1__Reg1_2__Reg1_3,
  Convert__Reg1_0__Reg1_2__Reg1_1,
  Convert__Reg1_0__Mem2_1,
  Convert,
  Convert__Reg1_0__Imm1_2__Reg1_1,
  Convert__Fsl1_0,
  Convert__Reg1_1__Reg1_2,
  NumConversionVariants
};

bool MBlazeAsmParser::
ConvertToMCInst(unsigned Kind, MCInst &Inst, unsigned Opcode,
                      const SmallVectorImpl<MCParsedAsmOperand*> &Operands) {
  Inst.setOpcode(Opcode);
  switch (Kind) {
  default:
  case Convert__Reg1_0__Reg1_1__Reg1_2:
    ((MBlazeOperand*)Operands[1])->addRegOperands(Inst, 1);
    ((MBlazeOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((MBlazeOperand*)Operands[3])->addRegOperands(Inst, 1);
    return true;
  case Convert__Reg1_0__Reg1_1__Imm1_2:
    ((MBlazeOperand*)Operands[1])->addRegOperands(Inst, 1);
    ((MBlazeOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((MBlazeOperand*)Operands[3])->addImmOperands(Inst, 1);
    return true;
  case Convert__Reg1_0__Fsl1_1:
    ((MBlazeOperand*)Operands[1])->addRegOperands(Inst, 1);
    ((MBlazeOperand*)Operands[2])->addFslOperands(Inst, 1);
    return true;
  case Convert__Reg1_0__Reg1_1:
    ((MBlazeOperand*)Operands[1])->addRegOperands(Inst, 1);
    ((MBlazeOperand*)Operands[2])->addRegOperands(Inst, 1);
    return true;
  case Convert__Reg1_0__Imm1_1:
    ((MBlazeOperand*)Operands[1])->addRegOperands(Inst, 1);
    ((MBlazeOperand*)Operands[2])->addImmOperands(Inst, 1);
    return true;
  case Convert__Reg1_0:
    ((MBlazeOperand*)Operands[1])->addRegOperands(Inst, 1);
    return true;
  case Convert__Imm1_0:
    ((MBlazeOperand*)Operands[1])->addImmOperands(Inst, 1);
    return true;
  case Convert__Reg1_1__Reg1_2__Reg1_3:
    ((MBlazeOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((MBlazeOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((MBlazeOperand*)Operands[4])->addRegOperands(Inst, 1);
    return true;
  case Convert__Reg1_0__Reg1_2__Reg1_1:
    ((MBlazeOperand*)Operands[1])->addRegOperands(Inst, 1);
    ((MBlazeOperand*)Operands[3])->addRegOperands(Inst, 1);
    ((MBlazeOperand*)Operands[2])->addRegOperands(Inst, 1);
    return true;
  case Convert__Reg1_0__Mem2_1:
    ((MBlazeOperand*)Operands[1])->addRegOperands(Inst, 1);
    ((MBlazeOperand*)Operands[2])->addMemOperands(Inst, 2);
    return true;
  case Convert:
    return true;
  case Convert__Reg1_0__Imm1_2__Reg1_1:
    ((MBlazeOperand*)Operands[1])->addRegOperands(Inst, 1);
    ((MBlazeOperand*)Operands[3])->addImmOperands(Inst, 1);
    ((MBlazeOperand*)Operands[2])->addRegOperands(Inst, 1);
    return true;
  case Convert__Fsl1_0:
    ((MBlazeOperand*)Operands[1])->addFslOperands(Inst, 1);
    return true;
  case Convert__Reg1_1__Reg1_2:
    ((MBlazeOperand*)Operands[2])->addRegOperands(Inst, 1);
    ((MBlazeOperand*)Operands[3])->addRegOperands(Inst, 1);
    return true;
  }
  return false;
}

namespace {

/// MatchClassKind - The kinds of classes which participate in
/// instruction matching.
enum MatchClassKind {
  InvalidMatchClass = 0,
  MCK__DOT_clear, // '.clear'
  MCK__DOT_eq, // '.eq'
  MCK__DOT_flush, // '.flush'
  MCK__DOT_ge, // '.ge'
  MCK__DOT_gt, // '.gt'
  MCK__DOT_le, // '.le'
  MCK__DOT_lt, // '.lt'
  MCK__DOT_ne, // '.ne'
  MCK__DOT_un, // '.un'
  MCK_GPR, // register class 'GPR'
  MCK_SPR, // register class 'SPR'
  MCK_CRC, // register class 'CRC'
  MCK_Imm, // user defined class 'ImmAsmOperand'
  MCK_Fsl, // user defined class 'MBlazeFslAsmOperand'
  MCK_Mem, // user defined class 'MBlazeMemAsmOperand'
  NumMatchClassKinds
};

}

static MatchClassKind MatchTokenString(StringRef Name) {
  switch (Name.size()) {
  default: break;
  case 3:	 // 7 strings to match.
    if (Name[0] != '.')
      break;
    switch (Name[1]) {
    default: break;
    case 'e':	 // 1 string to match.
      if (Name[2] != 'q')
        break;
      return MCK__DOT_eq;	 // ".eq"
    case 'g':	 // 2 strings to match.
      switch (Name[2]) {
      default: break;
      case 'e':	 // 1 string to match.
        return MCK__DOT_ge;	 // ".ge"
      case 't':	 // 1 string to match.
        return MCK__DOT_gt;	 // ".gt"
      }
      break;
    case 'l':	 // 2 strings to match.
      switch (Name[2]) {
      default: break;
      case 'e':	 // 1 string to match.
        return MCK__DOT_le;	 // ".le"
      case 't':	 // 1 string to match.
        return MCK__DOT_lt;	 // ".lt"
      }
      break;
    case 'n':	 // 1 string to match.
      if (Name[2] != 'e')
        break;
      return MCK__DOT_ne;	 // ".ne"
    case 'u':	 // 1 string to match.
      if (Name[2] != 'n')
        break;
      return MCK__DOT_un;	 // ".un"
    }
    break;
  case 6:	 // 2 strings to match.
    if (Name[0] != '.')
      break;
    switch (Name[1]) {
    default: break;
    case 'c':	 // 1 string to match.
      if (Name.substr(2, 4) != "lear")
        break;
      return MCK__DOT_clear;	 // ".clear"
    case 'f':	 // 1 string to match.
      if (Name.substr(2, 4) != "lush")
        break;
      return MCK__DOT_flush;	 // ".flush"
    }
    break;
  }
  return InvalidMatchClass;
}

/// IsSubclass - Compute whether \arg A is a subclass of \arg B.
static bool IsSubclass(MatchClassKind A, MatchClassKind B) {
  if (A == B)
    return true;

  switch (A) {
  default:
    return false;
  }
}

static bool ValidateOperandClass(MCParsedAsmOperand *GOp, MatchClassKind Kind) {
  MBlazeOperand &Operand = *(MBlazeOperand*)GOp;
  if (Operand.isToken())
    return MatchTokenString(Operand.getToken()) == Kind;

  if (Operand.isReg()) {
    MatchClassKind OpKind;
    switch (Operand.getReg()) {
    default: OpKind = InvalidMatchClass; break;
    case MBlaze::R0: OpKind = MCK_GPR; break;
    case MBlaze::R1: OpKind = MCK_GPR; break;
    case MBlaze::R2: OpKind = MCK_GPR; break;
    case MBlaze::R3: OpKind = MCK_GPR; break;
    case MBlaze::R4: OpKind = MCK_GPR; break;
    case MBlaze::R5: OpKind = MCK_GPR; break;
    case MBlaze::R6: OpKind = MCK_GPR; break;
    case MBlaze::R7: OpKind = MCK_GPR; break;
    case MBlaze::R8: OpKind = MCK_GPR; break;
    case MBlaze::R9: OpKind = MCK_GPR; break;
    case MBlaze::R10: OpKind = MCK_GPR; break;
    case MBlaze::R11: OpKind = MCK_GPR; break;
    case MBlaze::R12: OpKind = MCK_GPR; break;
    case MBlaze::R13: OpKind = MCK_GPR; break;
    case MBlaze::R14: OpKind = MCK_GPR; break;
    case MBlaze::R15: OpKind = MCK_GPR; break;
    case MBlaze::R16: OpKind = MCK_GPR; break;
    case MBlaze::R17: OpKind = MCK_GPR; break;
    case MBlaze::R18: OpKind = MCK_GPR; break;
    case MBlaze::R19: OpKind = MCK_GPR; break;
    case MBlaze::R20: OpKind = MCK_GPR; break;
    case MBlaze::R21: OpKind = MCK_GPR; break;
    case MBlaze::R22: OpKind = MCK_GPR; break;
    case MBlaze::R23: OpKind = MCK_GPR; break;
    case MBlaze::R24: OpKind = MCK_GPR; break;
    case MBlaze::R25: OpKind = MCK_GPR; break;
    case MBlaze::R26: OpKind = MCK_GPR; break;
    case MBlaze::R27: OpKind = MCK_GPR; break;
    case MBlaze::R28: OpKind = MCK_GPR; break;
    case MBlaze::R29: OpKind = MCK_GPR; break;
    case MBlaze::R30: OpKind = MCK_GPR; break;
    case MBlaze::R31: OpKind = MCK_GPR; break;
    case MBlaze::RPC: OpKind = MCK_SPR; break;
    case MBlaze::RMSR: OpKind = MCK_SPR; break;
    case MBlaze::REAR: OpKind = MCK_SPR; break;
    case MBlaze::RESR: OpKind = MCK_SPR; break;
    case MBlaze::RFSR: OpKind = MCK_SPR; break;
    case MBlaze::RBTR: OpKind = MCK_SPR; break;
    case MBlaze::REDR: OpKind = MCK_SPR; break;
    case MBlaze::RPID: OpKind = MCK_SPR; break;
    case MBlaze::RZPR: OpKind = MCK_SPR; break;
    case MBlaze::RTLBX: OpKind = MCK_SPR; break;
    case MBlaze::RTLBLO: OpKind = MCK_SPR; break;
    case MBlaze::RTLBHI: OpKind = MCK_SPR; break;
    case MBlaze::RPVR0: OpKind = MCK_SPR; break;
    case MBlaze::RPVR1: OpKind = MCK_SPR; break;
    case MBlaze::RPVR2: OpKind = MCK_SPR; break;
    case MBlaze::RPVR3: OpKind = MCK_SPR; break;
    case MBlaze::RPVR4: OpKind = MCK_SPR; break;
    case MBlaze::RPVR5: OpKind = MCK_SPR; break;
    case MBlaze::RPVR6: OpKind = MCK_SPR; break;
    case MBlaze::RPVR7: OpKind = MCK_SPR; break;
    case MBlaze::RPVR8: OpKind = MCK_SPR; break;
    case MBlaze::RPVR9: OpKind = MCK_SPR; break;
    case MBlaze::RPVR10: OpKind = MCK_SPR; break;
    case MBlaze::RPVR11: OpKind = MCK_SPR; break;
    case MBlaze::CARRY: OpKind = MCK_CRC; break;
    }
    return IsSubclass(OpKind, Kind);
  }

  // 'Imm' class
  if (Kind == MCK_Imm && Operand.isImm()) {
    return true;
  }

  // 'Fsl' class
  if (Kind == MCK_Fsl && Operand.isFsl()) {
    return true;
  }

  // 'Mem' class
  if (Kind == MCK_Mem && Operand.isMem()) {
    return true;
  }

  return false;
}

unsigned MBlazeAsmParser::
ComputeAvailableFeatures(const MBlazeSubtarget *Subtarget) const {
  unsigned Features = 0;
  return Features;
}

namespace {
  struct MatchEntry {
    unsigned Opcode;
    const char *Mnemonic;
    ConversionKind ConvertFn;
    MatchClassKind Classes[4];
    unsigned RequiredFeatures;
  };

  // Predicate for searching for an opcode.
  struct LessOpcode {
    bool operator()(const MatchEntry &LHS, StringRef RHS) {
      return StringRef(LHS.Mnemonic) < RHS;
    }
    bool operator()(StringRef LHS, const MatchEntry &RHS) {
      return LHS < StringRef(RHS.Mnemonic);
    }
    bool operator()(const MatchEntry &LHS, const MatchEntry &RHS) {
      return StringRef(LHS.Mnemonic) < StringRef(RHS.Mnemonic);
    }
  };
} // end anonymous namespace.

static const MatchEntry MatchTable[230] = {
  { MBlaze::ADD, "add", Convert__Reg1_0__Reg1_1__Reg1_2, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::ADDC, "addc", Convert__Reg1_0__Reg1_1__Reg1_2, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::ADDI, "addi", Convert__Reg1_0__Reg1_1__Imm1_2, { MCK_GPR, MCK_GPR, MCK_Imm }, 0},
  { MBlaze::ADDIC, "addic", Convert__Reg1_0__Reg1_1__Imm1_2, { MCK_GPR, MCK_GPR, MCK_Imm }, 0},
  { MBlaze::ADDIK, "addik", Convert__Reg1_0__Reg1_1__Imm1_2, { MCK_GPR, MCK_GPR, MCK_Imm }, 0},
  { MBlaze::ADDIKC, "addikc", Convert__Reg1_0__Reg1_1__Imm1_2, { MCK_GPR, MCK_GPR, MCK_Imm }, 0},
  { MBlaze::ADDK, "addk", Convert__Reg1_0__Reg1_1__Reg1_2, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::ADDKC, "addkc", Convert__Reg1_0__Reg1_1__Reg1_2, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::AGET, "aget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::AGETD, "agetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::AND, "and", Convert__Reg1_0__Reg1_1__Reg1_2, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::ANDI, "andi", Convert__Reg1_0__Reg1_1__Imm1_2, { MCK_GPR, MCK_GPR, MCK_Imm }, 0},
  { MBlaze::ANDN, "andn", Convert__Reg1_0__Reg1_1__Reg1_2, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::ANDNI, "andni", Convert__Reg1_0__Reg1_1__Imm1_2, { MCK_GPR, MCK_GPR, MCK_Imm }, 0},
  { MBlaze::APUT, "aput", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::APUTD, "aputd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::BEQ, "beq", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::BEQD, "beqd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::BEQI, "beqi", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, 0},
  { MBlaze::BEQID, "beqid", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, 0},
  { MBlaze::BGE, "bge", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::BGED, "bged", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::BGEI, "bgei", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, 0},
  { MBlaze::BGEID, "bgeid", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, 0},
  { MBlaze::BGT, "bgt", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::BGTD, "bgtd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::BGTI, "bgti", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, 0},
  { MBlaze::BGTID, "bgtid", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, 0},
  { MBlaze::BLE, "ble", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::BLED, "bled", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::BLEI, "blei", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, 0},
  { MBlaze::BLEID, "bleid", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, 0},
  { MBlaze::BLT, "blt", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::BLTD, "bltd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::BLTI, "blti", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, 0},
  { MBlaze::BLTID, "bltid", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, 0},
  { MBlaze::BNE, "bne", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::BNED, "bned", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::BNEI, "bnei", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, 0},
  { MBlaze::BNEID, "bneid", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, 0},
  { MBlaze::BR, "br", Convert__Reg1_0, { MCK_GPR }, 0},
  { MBlaze::BRA, "bra", Convert__Reg1_0, { MCK_GPR }, 0},
  { MBlaze::BRAD, "brad", Convert__Reg1_0, { MCK_GPR }, 0},
  { MBlaze::BRAI, "brai", Convert__Imm1_0, { MCK_Imm }, 0},
  { MBlaze::BRAID, "braid", Convert__Imm1_0, { MCK_Imm }, 0},
  { MBlaze::BRALD, "brald", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::BRALID, "bralid", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, 0},
  { MBlaze::BRD, "brd", Convert__Reg1_0, { MCK_GPR }, 0},
  { MBlaze::BRI, "bri", Convert__Imm1_0, { MCK_Imm }, 0},
  { MBlaze::BRID, "brid", Convert__Imm1_0, { MCK_Imm }, 0},
  { MBlaze::BRK, "brk", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::BRKI, "brki", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, 0},
  { MBlaze::BRLD, "brld", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::BRLID, "brlid", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, 0},
  { MBlaze::BSLL, "bsll", Convert__Reg1_0__Reg1_1__Reg1_2, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::BSLLI, "bslli", Convert__Reg1_0__Reg1_1__Imm1_2, { MCK_GPR, MCK_GPR, MCK_Imm }, 0},
  { MBlaze::BSRA, "bsra", Convert__Reg1_0__Reg1_1__Reg1_2, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::BSRAI, "bsrai", Convert__Reg1_0__Reg1_1__Imm1_2, { MCK_GPR, MCK_GPR, MCK_Imm }, 0},
  { MBlaze::BSRL, "bsrl", Convert__Reg1_0__Reg1_1__Reg1_2, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::BSRLI, "bsrli", Convert__Reg1_0__Reg1_1__Imm1_2, { MCK_GPR, MCK_GPR, MCK_Imm }, 0},
  { MBlaze::CAGET, "caget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::CAGETD, "cagetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::CAPUT, "caput", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::CAPUTD, "caputd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::CGET, "cget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::CGETD, "cgetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::CMP, "cmp", Convert__Reg1_0__Reg1_1__Reg1_2, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::CMPU, "cmpu", Convert__Reg1_0__Reg1_1__Reg1_2, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::CPUT, "cput", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::CPUTD, "cputd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::EAGET, "eaget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::EAGETD, "eagetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::ECAGET, "ecaget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::ECAGETD, "ecagetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::ECGET, "ecget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::ECGETD, "ecgetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::EGET, "eget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::EGETD, "egetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::FADD, "fadd", Convert__Reg1_0__Reg1_1__Reg1_2, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::FCMP_EQ, "fcmp", Convert__Reg1_1__Reg1_2__Reg1_3, { MCK__DOT_eq, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::FCMP_GE, "fcmp", Convert__Reg1_1__Reg1_2__Reg1_3, { MCK__DOT_ge, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::FCMP_GT, "fcmp", Convert__Reg1_1__Reg1_2__Reg1_3, { MCK__DOT_gt, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::FCMP_LE, "fcmp", Convert__Reg1_1__Reg1_2__Reg1_3, { MCK__DOT_le, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::FCMP_LT, "fcmp", Convert__Reg1_1__Reg1_2__Reg1_3, { MCK__DOT_lt, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::FCMP_NE, "fcmp", Convert__Reg1_1__Reg1_2__Reg1_3, { MCK__DOT_ne, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::FCMP_UN, "fcmp", Convert__Reg1_1__Reg1_2__Reg1_3, { MCK__DOT_un, MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::FDIV, "fdiv", Convert__Reg1_0__Reg1_1__Reg1_2, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::FINT, "fint", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::FLT, "flt", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::FMUL, "fmul", Convert__Reg1_0__Reg1_1__Reg1_2, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::FRSUB, "frsub", Convert__Reg1_0__Reg1_2__Reg1_1, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::FSQRT, "fsqrt", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::GET, "get", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::GETD, "getd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::IDIV, "idiv", Convert__Reg1_0__Reg1_2__Reg1_1, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::IDIVU, "idivu", Convert__Reg1_0__Reg1_2__Reg1_1, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::IMM, "imm", Convert__Imm1_0, { MCK_Imm }, 0},
  { MBlaze::LBU, "lbu", Convert__Reg1_0__Mem2_1, { MCK_GPR, MCK_Mem }, 0},
  { MBlaze::LBUI, "lbui", Convert__Reg1_0__Mem2_1, { MCK_GPR, MCK_Mem }, 0},
  { MBlaze::LBUR, "lbur", Convert__Reg1_0__Mem2_1, { MCK_GPR, MCK_Mem }, 0},
  { MBlaze::LHU, "lhu", Convert__Reg1_0__Mem2_1, { MCK_GPR, MCK_Mem }, 0},
  { MBlaze::LHUI, "lhui", Convert__Reg1_0__Mem2_1, { MCK_GPR, MCK_Mem }, 0},
  { MBlaze::LHUR, "lhur", Convert__Reg1_0__Mem2_1, { MCK_GPR, MCK_Mem }, 0},
  { MBlaze::LW, "lw", Convert__Reg1_0__Mem2_1, { MCK_GPR, MCK_Mem }, 0},
  { MBlaze::LWI, "lwi", Convert__Reg1_0__Mem2_1, { MCK_GPR, MCK_Mem }, 0},
  { MBlaze::LWR, "lwr", Convert__Reg1_0__Mem2_1, { MCK_GPR, MCK_Mem }, 0},
  { MBlaze::LWX, "lwx", Convert__Reg1_0__Mem2_1, { MCK_GPR, MCK_Mem }, 0},
  { MBlaze::MFS, "mfs", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_SPR }, 0},
  { MBlaze::MSRCLR, "msrclr", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, 0},
  { MBlaze::MSRSET, "msrset", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, 0},
  { MBlaze::MTS, "mts", Convert__Reg1_0__Reg1_1, { MCK_SPR, MCK_GPR }, 0},
  { MBlaze::MUL, "mul", Convert__Reg1_0__Reg1_1__Reg1_2, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::MULH, "mulh", Convert__Reg1_0__Reg1_1__Reg1_2, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::MULHSU, "mulhsu", Convert__Reg1_0__Reg1_1__Reg1_2, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::MULHU, "mulhu", Convert__Reg1_0__Reg1_1__Reg1_2, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::MULI, "muli", Convert__Reg1_0__Reg1_1__Imm1_2, { MCK_GPR, MCK_GPR, MCK_Imm }, 0},
  { MBlaze::NAGET, "naget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::NAGETD, "nagetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::NAPUT, "naput", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::NAPUTD, "naputd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::NCAGET, "ncaget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::NCAGETD, "ncagetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::NCAPUT, "ncaput", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::NCAPUTD, "ncaputd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::NCGET, "ncget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::NCGETD, "ncgetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::NCPUT, "ncput", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::NCPUTD, "ncputd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::NEAGET, "neaget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::NEAGETD, "neagetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::NECAGET, "necaget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::NECAGETD, "necagetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::NECGET, "necget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::NECGETD, "necgetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::NEGET, "neget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::NEGETD, "negetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::NGET, "nget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::NGETD, "ngetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::NOP, "nop", Convert, {  }, 0},
  { MBlaze::NPUT, "nput", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::NPUTD, "nputd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::OR, "or", Convert__Reg1_0__Reg1_1__Reg1_2, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::FORI, "ori", Convert__Reg1_0__Reg1_1__Imm1_2, { MCK_GPR, MCK_GPR, MCK_Imm }, 0},
  { MBlaze::ORI, "ori", Convert__Reg1_0__Reg1_1__Imm1_2, { MCK_GPR, MCK_GPR, MCK_Imm }, 0},
  { MBlaze::PCMPBF, "pcmpbf", Convert__Reg1_0__Reg1_1__Reg1_2, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::PCMPEQ, "pcmpeq", Convert__Reg1_0__Reg1_1__Reg1_2, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::PCMPNE, "pcmpne", Convert__Reg1_0__Reg1_1__Reg1_2, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::PUT, "put", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::PUTD, "putd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::RSUB, "rsub", Convert__Reg1_0__Reg1_2__Reg1_1, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::RSUBC, "rsubc", Convert__Reg1_0__Reg1_2__Reg1_1, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::RSUBI, "rsubi", Convert__Reg1_0__Imm1_2__Reg1_1, { MCK_GPR, MCK_GPR, MCK_Imm }, 0},
  { MBlaze::RSUBIC, "rsubic", Convert__Reg1_0__Imm1_2__Reg1_1, { MCK_GPR, MCK_GPR, MCK_Imm }, 0},
  { MBlaze::RSUBIK, "rsubik", Convert__Reg1_0__Imm1_2__Reg1_1, { MCK_GPR, MCK_GPR, MCK_Imm }, 0},
  { MBlaze::RSUBIKC, "rsubikc", Convert__Reg1_0__Imm1_2__Reg1_1, { MCK_GPR, MCK_GPR, MCK_Imm }, 0},
  { MBlaze::RSUBK, "rsubk", Convert__Reg1_0__Reg1_2__Reg1_1, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::RSUBKC, "rsubkc", Convert__Reg1_0__Reg1_2__Reg1_1, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::RTBD, "rtbd", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, 0},
  { MBlaze::RTED, "rted", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, 0},
  { MBlaze::RTID, "rtid", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, 0},
  { MBlaze::RTSD, "rtsd", Convert__Reg1_0__Imm1_1, { MCK_GPR, MCK_Imm }, 0},
  { MBlaze::SB, "sb", Convert__Reg1_0__Mem2_1, { MCK_GPR, MCK_Mem }, 0},
  { MBlaze::SBI, "sbi", Convert__Reg1_0__Mem2_1, { MCK_GPR, MCK_Mem }, 0},
  { MBlaze::SBR, "sbr", Convert__Reg1_0__Mem2_1, { MCK_GPR, MCK_Mem }, 0},
  { MBlaze::SEXT16, "sext16", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::SEXT8, "sext8", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::SH, "sh", Convert__Reg1_0__Mem2_1, { MCK_GPR, MCK_Mem }, 0},
  { MBlaze::SHI, "shi", Convert__Reg1_0__Mem2_1, { MCK_GPR, MCK_Mem }, 0},
  { MBlaze::SHR, "shr", Convert__Reg1_0__Mem2_1, { MCK_GPR, MCK_Mem }, 0},
  { MBlaze::SRA, "sra", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::SRC, "src", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::SRL, "srl", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::SW, "sw", Convert__Reg1_0__Mem2_1, { MCK_GPR, MCK_Mem }, 0},
  { MBlaze::SWI, "swi", Convert__Reg1_0__Mem2_1, { MCK_GPR, MCK_Mem }, 0},
  { MBlaze::SWR, "swr", Convert__Reg1_0__Mem2_1, { MCK_GPR, MCK_Mem }, 0},
  { MBlaze::SWX, "swx", Convert__Reg1_0__Mem2_1, { MCK_GPR, MCK_Mem }, 0},
  { MBlaze::TAGET, "taget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::TAGETD, "tagetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::TAPUT, "taput", Convert__Fsl1_0, { MCK_Fsl }, 0},
  { MBlaze::TAPUTD, "taputd", Convert__Reg1_0, { MCK_GPR }, 0},
  { MBlaze::TCAGET, "tcaget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::TCAGETD, "tcagetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::TCAPUT, "tcaput", Convert__Fsl1_0, { MCK_Fsl }, 0},
  { MBlaze::TCAPUTD, "tcaputd", Convert__Reg1_0, { MCK_GPR }, 0},
  { MBlaze::TCGET, "tcget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::TCGETD, "tcgetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::TCPUT, "tcput", Convert__Fsl1_0, { MCK_Fsl }, 0},
  { MBlaze::TCPUTD, "tcputd", Convert__Reg1_0, { MCK_GPR }, 0},
  { MBlaze::TEAGET, "teaget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::TEAGETD, "teagetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::TECAGET, "tecaget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::TECAGETD, "tecagetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::TECGET, "tecget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::TECGETD, "tecgetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::TEGET, "teget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::TEGETD, "tegetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::TGET, "tget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::TGETD, "tgetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::TNAGET, "tnaget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::TNAGETD, "tnagetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::TNAPUT, "tnaput", Convert__Fsl1_0, { MCK_Fsl }, 0},
  { MBlaze::TNAPUTD, "tnaputd", Convert__Reg1_0, { MCK_GPR }, 0},
  { MBlaze::TNCAGET, "tncaget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::TNCAGETD, "tncagetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::TNCAPUT, "tncaput", Convert__Fsl1_0, { MCK_Fsl }, 0},
  { MBlaze::TNCAPUTD, "tncaputd", Convert__Reg1_0, { MCK_GPR }, 0},
  { MBlaze::TNCGET, "tncget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::TNCGETD, "tncgetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::TNCPUT, "tncput", Convert__Fsl1_0, { MCK_Fsl }, 0},
  { MBlaze::TNCPUTD, "tncputd", Convert__Reg1_0, { MCK_GPR }, 0},
  { MBlaze::TNEAGET, "tneaget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::TNEAGETD, "tneagetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::TNECAGET, "tnecaget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::TNECAGETD, "tnecagetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::TNECGET, "tnecget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::TNECGETD, "tnecgetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::TNEGET, "tneget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::TNEGETD, "tnegetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::TNGET, "tnget", Convert__Reg1_0__Fsl1_1, { MCK_GPR, MCK_Fsl }, 0},
  { MBlaze::TNGETD, "tngetd", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::TNPUT, "tnput", Convert__Fsl1_0, { MCK_Fsl }, 0},
  { MBlaze::TNPUTD, "tnputd", Convert__Reg1_0, { MCK_GPR }, 0},
  { MBlaze::TPUT, "tput", Convert__Fsl1_0, { MCK_Fsl }, 0},
  { MBlaze::TPUTD, "tputd", Convert__Reg1_0, { MCK_GPR }, 0},
  { MBlaze::WDC, "wdc", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::WDCC, "wdc", Convert__Reg1_1__Reg1_2, { MCK__DOT_clear, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::WDCF, "wdc", Convert__Reg1_1__Reg1_2, { MCK__DOT_flush, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::WIC, "wic", Convert__Reg1_0__Reg1_1, { MCK_GPR, MCK_GPR }, 0},
  { MBlaze::XOR, "xor", Convert__Reg1_0__Reg1_1__Reg1_2, { MCK_GPR, MCK_GPR, MCK_GPR }, 0},
  { MBlaze::XORI, "xori", Convert__Reg1_0__Reg1_1__Imm1_2, { MCK_GPR, MCK_GPR, MCK_Imm }, 0},
};

bool MBlazeAsmParser::
MnemonicIsValid(StringRef Mnemonic) {
  // Search the table.
  std::pair<const MatchEntry*, const MatchEntry*> MnemonicRange =
    std::equal_range(MatchTable, MatchTable+230, Mnemonic, LessOpcode());
  return MnemonicRange.first != MnemonicRange.second;
}

MBlazeAsmParser::MatchResultTy MBlazeAsmParser::
MatchInstructionImpl(const SmallVectorImpl<MCParsedAsmOperand*> &Operands,
                     MCInst &Inst, unsigned &ErrorInfo) {
  // Get the current feature set.
  unsigned AvailableFeatures = getAvailableFeatures();

  // Get the instruction mnemonic, which is the first token.
  StringRef Mnemonic = ((MBlazeOperand*)Operands[0])->getToken();

  // Eliminate obvious mismatches.
  if (Operands.size() > 5) {
    ErrorInfo = 5;
    return Match_InvalidOperand;
  }

  // Some state to try to produce better error messages.
  bool HadMatchOtherThanFeatures = false;

  // Set ErrorInfo to the operand that mismatches if it is
  // wrong for all instances of the instruction.
  ErrorInfo = ~0U;
  // Search the table.
  std::pair<const MatchEntry*, const MatchEntry*> MnemonicRange =
    std::equal_range(MatchTable, MatchTable+230, Mnemonic, LessOpcode());

  // Return a more specific error code if no mnemonics match.
  if (MnemonicRange.first == MnemonicRange.second)
    return Match_MnemonicFail;

  for (const MatchEntry *it = MnemonicRange.first, *ie = MnemonicRange.second;
       it != ie; ++it) {
    // equal_range guarantees that instruction mnemonic matches.
    assert(Mnemonic == it->Mnemonic);
    bool OperandsValid = true;
    for (unsigned i = 0; i != 4; ++i) {
      if (i + 1 >= Operands.size()) {
        OperandsValid = (it->Classes[i] == InvalidMatchClass);
        break;      }
      if (ValidateOperandClass(Operands[i+1], it->Classes[i]))
        continue;
      // If this operand is broken for all of the instances of this
      // mnemonic, keep track of it so we can report loc info.
      if (it == MnemonicRange.first || ErrorInfo <= i+1)
        ErrorInfo = i+1;
      // Otherwise, just reject this instance of the mnemonic.
      OperandsValid = false;
      break;
    }

    if (!OperandsValid) continue;
    if ((AvailableFeatures & it->RequiredFeatures) != it->RequiredFeatures) {
      HadMatchOtherThanFeatures = true;
      continue;
    }

    // We have selected a definite instruction, convert the parsed
    // operands into the appropriate MCInst.
    if (!ConvertToMCInst(it->ConvertFn, Inst,
                         it->Opcode, Operands))
      return Match_ConversionFail;

    return Match_Success;
  }

  // Okay, we had no match.  Try to return a useful error code.
  if (HadMatchOtherThanFeatures) return Match_MissingFeature;
  return Match_InvalidOperand;
}

#endif // GET_MATCHER_IMPLEMENTATION

