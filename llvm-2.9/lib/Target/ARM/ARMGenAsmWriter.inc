//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void ARMInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    134217739U,	// ADCSSri
    134217739U,	// ADCSSrr
    134217739U,	// ADCSSrs
    269516817U,	// ADCri
    269516817U,	// ADCrr
    402653201U,	// ADCrs
    537952277U,	// ADDSri
    537952277U,	// ADDSrr
    672170005U,	// ADDSrs
    269516826U,	// ADDri
    269516826U,	// ADDrr
    402653210U,	// ADDrs
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    806387742U,	// ADR
    269516834U,	// ANDri
    269516834U,	// ANDrr
    402653218U,	// ANDrs
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I8
    136314918U,	// B
    0U,	// BCCZi64
    0U,	// BCCi64
    537952297U,	// BFC
    940605485U,	// BFI
    672170029U,	// BFI4p
    269516849U,	// BICri
    269516849U,	// BICrr
    402653233U,	// BICrs
    1074823221U,	// BKPT
    136314938U,	// BL
    136314942U,	// BLX
    1074823235U,	// BLX_pred
    136314942U,	// BLXr9
    1074823235U,	// BLXr9_pred
    1074823239U,	// BL_pred
    136314938U,	// BLr9
    1074823239U,	// BLr9_pred
    0U,	// BMOVPCRX_CALL
    0U,	// BMOVPCRXr9_CALL
    0U,	// BR_JTadd
    0U,	// BR_JTm
    0U,	// BR_JTr
    136314954U,	// BX
    1074823246U,	// BXJ
    0U,	// BX_CALL
    1211105362U,	// BX_RET
    0U,	// BXr9_CALL
    1074823253U,	// Bcc
    1343291479U,	// CDP
    1480589403U,	// CDP2
    97U,	// CLREX
    806387815U,	// CLZ
    806387819U,	// CMNzri
    806387819U,	// CMNzrr
    940605547U,	// CMNzrs
    806387823U,	// CMPri
    806387823U,	// CMPrr
    940605551U,	// CMPrs
    0U,	// CONSTPOOL_ENTRY
    136314995U,	// CPS1p
    1611759736U,	// CPS2p
    1611759736U,	// CPS3p
    1074823292U,	// DBG
    1744830592U,	// DMB
    139460741U,	// DMB_MCR
    1744830610U,	// DSB
    269516951U,	// EORri
    269516951U,	// EORrr
    402653335U,	// EORrs
    811729051U,	// FCONSTD
    812777627U,	// FCONSTS
    1216348320U,	// FMSTAT
    165U,	// ISB
    0U,	// Int_eh_sjlj_dispatchsetup
    0U,	// Int_eh_sjlj_longjmp
    0U,	// Int_eh_sjlj_setjmp
    0U,	// Int_eh_sjlj_setjmp_nofp
    680657065U,	// LDC2L_OFFSET
    949125289U,	// LDC2L_OPTION
    680689833U,	// LDC2L_POST
    680657065U,	// LDC2L_PRE
    680657071U,	// LDC2_OFFSET
    949125295U,	// LDC2_OPTION
    680689839U,	// LDC2_POST
    680657071U,	// LDC2_PRE
    680657076U,	// LDCL_OFFSET
    949125300U,	// LDCL_OPTION
    680689844U,	// LDCL_POST
    680657076U,	// LDCL_PRE
    680657081U,	// LDC_OFFSET
    949125305U,	// LDC_OPTION
    680689849U,	// LDC_POST
    680657081U,	// LDC_PRE
    1074823357U,	// LDMDA
    806355133U,	// LDMDA_UPD
    1074823363U,	// LDMDB
    806355139U,	// LDMDB_UPD
    1074823369U,	// LDMIA
    806355145U,	// LDMIA_RET
    806355145U,	// LDMIA_UPD
    1074823375U,	// LDMIB
    806355151U,	// LDMIB_UPD
    672170197U,	// LDRBT
    672170203U,	// LDRB_POST
    672170203U,	// LDRB_PRE
    537952475U,	// LDRBi12
    940605659U,	// LDRBrs
    672170208U,	// LDRD
    672170208U,	// LDRD_POST
    672170208U,	// LDRD_PRE
    806387941U,	// LDREX
    806387947U,	// LDREXB
    537952498U,	// LDREXD
    806387961U,	// LDREXH
    940605696U,	// LDRH
    672170245U,	// LDRHT
    672170240U,	// LDRH_POST
    672170240U,	// LDRH_PRE
    940605707U,	// LDRSB
    672170257U,	// LDRSBT
    672170251U,	// LDRSB_POST
    672170251U,	// LDRSB_PRE
    940605720U,	// LDRSH
    672170270U,	// LDRSHT
    672170264U,	// LDRSH_POST
    672170264U,	// LDRSH_PRE
    672170277U,	// LDRT
    672170282U,	// LDR_POST
    672170282U,	// LDR_PRE
    537952554U,	// LDRcp
    537952554U,	// LDRi12
    940605738U,	// LDRrs
    0U,	// LEApcrel
    0U,	// LEApcrelJT
    1343291694U,	// MCR
    1487077682U,	// MCR2
    672203064U,	// MCRR
    1487110461U,	// MCRR2
    1880129860U,	// MLA
    0U,	// MLAv5
    940605768U,	// MLS
    537952588U,	// MOVCCi
    537952592U,	// MOVCCi16
    0U,	// MOVCCi32imm
    537952588U,	// MOVCCr
    672170316U,	// MOVCCs
    1219494220U,	// MOVPCLR
    0U,	// MOVPCRX
    537952597U,	// MOVTi16
    0U,	// MOVTi16_ga_pcrel
    0U,	// MOV_ga_dyn
    0U,	// MOV_ga_pcrel
    0U,	// MOV_ga_pcrel_ldr
    2014347596U,	// MOVi
    806388048U,	// MOVi16
    0U,	// MOVi16_ga_pcrel
    0U,	// MOVi32imm
    2014347596U,	// MOVr
    2014347596U,	// MOVr_TC
    1880129868U,	// MOVs
    0U,	// MOVsra_flag
    0U,	// MOVsrl_flag
    1343291738U,	// MRC
    1487077726U,	// MRC2
    672203108U,	// MRRC
    1487110505U,	// MRRC2
    1074823536U,	// MRS
    1074823536U,	// MRSsys
    806617460U,	// MSR
    806617460U,	// MSRi
    269517176U,	// MUL
    0U,	// MULv5
    537952636U,	// MVNCCi
    2014347644U,	// MVNi
    2014347644U,	// MVNr
    1880129916U,	// MVNs
    1210057088U,	// NOP
    269517188U,	// ORRri
    269517188U,	// ORRrr
    402653572U,	// ORRrs
    0U,	// PICADD
    0U,	// PICLDR
    0U,	// PICLDRB
    0U,	// PICLDRH
    0U,	// PICLDRSB
    0U,	// PICLDRSH
    0U,	// PICSTR
    0U,	// PICSTRB
    0U,	// PICSTRH
    940605832U,	// PKHBT
    940605838U,	// PKHTB
    2147484052U,	// PLDWi12
    2281701780U,	// PLDWrs
    2147484058U,	// PLDi12
    2281701786U,	// PLDrs
    2147484063U,	// PLIi12
    2281701791U,	// PLIrs
    537952676U,	// QADD
    537952681U,	// QADD16
    537952688U,	// QADD8
    537952694U,	// QASX
    537952699U,	// QDADD
    537952705U,	// QDSUB
    537952711U,	// QSAX
    537952716U,	// QSUB
    537952721U,	// QSUB16
    537952728U,	// QSUB8
    806388190U,	// RBIT
    806388195U,	// REV
    806388199U,	// REV16
    806388205U,	// REVSH
    2416968179U,	// RFE
    2416968179U,	// RFEW
    0U,	// RRX
    537952759U,	// RSBSri
    537952759U,	// RSBSrr
    672170487U,	// RSBSrs
    269517308U,	// RSBri
    269517308U,	// RSBrr
    402653692U,	// RSBrs
    134218240U,	// RSCSri
    134218240U,	// RSCSrs
    269517318U,	// RSCri
    269517318U,	// RSCrr
    402653702U,	// RSCrs
    537952778U,	// SADD16
    537952785U,	// SADD8
    537952791U,	// SASX
    134218268U,	// SBCSSri
    134218268U,	// SBCSSrr
    134218268U,	// SBCSSrs
    269517346U,	// SBCri
    269517346U,	// SBCrr
    402653730U,	// SBCrs
    940605990U,	// SBFX
    537952811U,	// SEL
    2550137391U,	// SETEND
    1210057271U,	// SEV
    537952827U,	// SHADD16
    537952835U,	// SHADD8
    537952842U,	// SHASX
    537952848U,	// SHSAX
    537952854U,	// SHSUB16
    537952862U,	// SHSUB8
    1074823781U,	// SMC
    940606057U,	// SMLABB
    940606064U,	// SMLABT
    940606071U,	// SMLAD
    940606077U,	// SMLADX
    1880130180U,	// SMLAL
    940606090U,	// SMLALBB
    940606098U,	// SMLALBT
    940606106U,	// SMLALD
    940606113U,	// SMLALDX
    940606121U,	// SMLALTB
    940606129U,	// SMLALTT
    0U,	// SMLALv5
    940606137U,	// SMLATB
    940606144U,	// SMLATT
    940606151U,	// SMLAWB
    940606158U,	// SMLAWT
    940606165U,	// SMLSD
    940606171U,	// SMLSDX
    940606178U,	// SMLSLD
    940606185U,	// SMLSLDX
    940606193U,	// SMMLA
    940606199U,	// SMMLAR
    940606206U,	// SMMLS
    940606212U,	// SMMLSR
    537953035U,	// SMMUL
    537953041U,	// SMMULR
    537953048U,	// SMUAD
    537953054U,	// SMUADX
    537953061U,	// SMULBB
    537953068U,	// SMULBT
    1880130355U,	// SMULL
    0U,	// SMULLv5
    537953081U,	// SMULTB
    537953088U,	// SMULTT
    537953095U,	// SMULWB
    537953102U,	// SMULWT
    537953109U,	// SMUSD
    537953115U,	// SMUSDX
    2428502882U,	// SRS
    2429551458U,	// SRSW
    940606310U,	// SSAT
    537953131U,	// SSAT16
    537953138U,	// SSAX
    537953143U,	// SSUB16
    537953150U,	// SSUB8
    680657796U,	// STC2L_OFFSET
    949126020U,	// STC2L_OPTION
    680690564U,	// STC2L_POST
    680657796U,	// STC2L_PRE
    680657802U,	// STC2_OFFSET
    949126026U,	// STC2_OPTION
    680690570U,	// STC2_POST
    680657802U,	// STC2_PRE
    680657807U,	// STCL_OFFSET
    949126031U,	// STCL_OPTION
    680690575U,	// STCL_POST
    680657807U,	// STCL_PRE
    680657812U,	// STC_OFFSET
    949126036U,	// STC_OPTION
    680690580U,	// STC_POST
    680657812U,	// STC_PRE
    1074824088U,	// STMDA
    806355864U,	// STMDA_UPD
    1074824094U,	// STMDB
    806355870U,	// STMDB_UPD
    1074824100U,	// STMIA
    806355876U,	// STMIA_UPD
    1074824106U,	// STMIB
    806355882U,	// STMIB_UPD
    672138160U,	// STRBT
    672138166U,	// STRB_POST
    672138166U,	// STRB_PRE
    537953206U,	// STRBi12
    940606390U,	// STRBrs
    672170939U,	// STRD
    1343226811U,	// STRD_POST
    1343226811U,	// STRD_PRE
    537953216U,	// STREX
    537953222U,	// STREXB
    940606413U,	// STREXD
    537953236U,	// STREXH
    940606427U,	// STRH
    672138208U,	// STRHT
    672138203U,	// STRH_POST
    672138203U,	// STRH_PRE
    672138214U,	// STRT
    672138219U,	// STR_POST
    672138219U,	// STR_PRE
    537953259U,	// STRi12
    940606443U,	// STRrs
    537953263U,	// SUBSri
    537953263U,	// SUBSrr
    672170991U,	// SUBSrs
    269517812U,	// SUBri
    269517812U,	// SUBrr
    402654196U,	// SUBrs
    1074824184U,	// SVC
    537953276U,	// SWP
    537953280U,	// SWPB
    537953285U,	// SXTAB16rr
    940606469U,	// SXTAB16rr_rot
    537953293U,	// SXTABrr
    940606477U,	// SXTABrr_rot
    537953299U,	// SXTAHrr
    940606483U,	// SXTAHrr_rot
    806388761U,	// SXTB16r
    537953305U,	// SXTB16r_rot
    806388768U,	// SXTBr
    537953312U,	// SXTBr_rot
    806388773U,	// SXTHr
    537953317U,	// SXTHr_rot
    148897830U,	// TAILJMPd
    148897830U,	// TAILJMPdND
    148898858U,	// TAILJMPdNDt
    148898858U,	// TAILJMPdt
    148897866U,	// TAILJMPr
    148897866U,	// TAILJMPrND
    0U,	// TCRETURNdi
    0U,	// TCRETURNdiND
    0U,	// TCRETURNri
    0U,	// TCRETURNriND
    806388783U,	// TEQri
    806388783U,	// TEQrr
    940606511U,	// TEQrs
    0U,	// TPsoft
    1075U,	// TRAP
    806388792U,	// TSTri
    806388792U,	// TSTrr
    940606520U,	// TSTrs
    537953340U,	// UADD16
    537953347U,	// UADD8
    537953353U,	// UASX
    940606542U,	// UBFX
    537953363U,	// UHADD16
    537953371U,	// UHADD8
    537953378U,	// UHASX
    537953384U,	// UHSAX
    537953390U,	// UHSUB16
    537953398U,	// UHSUB8
    940606589U,	// UMAAL
    0U,	// UMAALv5
    1880130691U,	// UMLAL
    0U,	// UMLALv5
    1880130697U,	// UMULL
    0U,	// UMULLv5
    537953423U,	// UQADD16
    537953431U,	// UQADD8
    537953438U,	// UQASX
    537953444U,	// UQSAX
    537953450U,	// UQSUB16
    537953458U,	// UQSUB8
    537953465U,	// USAD8
    940606655U,	// USADA8
    940606662U,	// USAT
    537953483U,	// USAT16
    537953490U,	// USAX
    537953495U,	// USUB16
    537953502U,	// USUB8
    537953508U,	// UXTAB16rr
    940606692U,	// UXTAB16rr_rot
    537953516U,	// UXTABrr
    940606700U,	// UXTABrr_rot
    537953522U,	// UXTAHrr
    940606706U,	// UXTAHrr_rot
    806388984U,	// UXTB16r
    537953528U,	// UXTB16r_rot
    806388991U,	// UXTBr
    537953535U,	// UXTBr_rot
    806388996U,	// UXTHr
    537953540U,	// UXTHr_rot
    955548937U,	// VABALsv2i64
    956597513U,	// VABALsv4i32
    957646089U,	// VABALsv8i16
    958694665U,	// VABALuv2i64
    959743241U,	// VABALuv4i32
    960791817U,	// VABALuv8i16
    957646095U,	// VABAsv16i8
    955548943U,	// VABAsv2i32
    956597519U,	// VABAsv4i16
    955548943U,	// VABAsv4i32
    956597519U,	// VABAsv8i16
    957646095U,	// VABAsv8i8
    960791823U,	// VABAuv16i8
    958694671U,	// VABAuv2i32
    959743247U,	// VABAuv4i16
    958694671U,	// VABAuv4i32
    959743247U,	// VABAuv8i16
    960791823U,	// VABAuv8i8
    552600852U,	// VABDLsv2i64
    553649428U,	// VABDLsv4i32
    554698004U,	// VABDLsv8i16
    555746580U,	// VABDLuv2i64
    556795156U,	// VABDLuv4i32
    557843732U,	// VABDLuv8i16
    544343322U,	// VABDfd
    544343322U,	// VABDfq
    554698010U,	// VABDsv16i8
    552600858U,	// VABDsv2i32
    553649434U,	// VABDsv4i16
    552600858U,	// VABDsv4i32
    553649434U,	// VABDsv8i16
    554698010U,	// VABDsv8i8
    557843738U,	// VABDuv16i8
    555746586U,	// VABDuv2i32
    556795162U,	// VABDuv4i16
    555746586U,	// VABDuv4i32
    556795162U,	// VABDuv8i16
    557843738U,	// VABDuv8i8
    811730207U,	// VABSD
    812778783U,	// VABSS
    812778783U,	// VABSfd
    812778783U,	// VABSfq
    823133471U,	// VABSv16i8
    821036319U,	// VABSv2i32
    822084895U,	// VABSv4i16
    821036319U,	// VABSv4i32
    822084895U,	// VABSv8i16
    823133471U,	// VABSv8i8
    544343332U,	// VACGEd
    544343332U,	// VACGEq
    544343338U,	// VACGTd
    544343338U,	// VACGTq
    543294768U,	// VADDD
    558892341U,	// VADDHNv2i32
    559940917U,	// VADDHNv4i16
    560989493U,	// VADDHNv8i8
    552600892U,	// VADDLsv2i64
    553649468U,	// VADDLsv4i32
    554698044U,	// VADDLsv8i16
    555746620U,	// VADDLuv2i64
    556795196U,	// VADDLuv4i32
    557843772U,	// VADDLuv8i16
    544343344U,	// VADDS
    552600898U,	// VADDWsv2i64
    553649474U,	// VADDWsv4i32
    554698050U,	// VADDWsv8i16
    555746626U,	// VADDWuv2i64
    556795202U,	// VADDWuv4i32
    557843778U,	// VADDWuv8i16
    544343344U,	// VADDfd
    544343344U,	// VADDfq
    562038064U,	// VADDv16i8
    558892336U,	// VADDv1i64
    559940912U,	// VADDv2i32
    558892336U,	// VADDv2i64
    560989488U,	// VADDv4i16
    559940912U,	// VADDv4i32
    560989488U,	// VADDv8i16
    562038064U,	// VADDv8i8
    537953608U,	// VANDd
    537953608U,	// VANDq
    537953613U,	// VBICd
    560268621U,	// VBICiv2i32
    561317197U,	// VBICiv4i16
    560268621U,	// VBICiv4i32
    561317197U,	// VBICiv8i16
    537953613U,	// VBICq
    940606802U,	// VBIFd
    940606802U,	// VBIFq
    940606807U,	// VBITd
    940606807U,	// VBITq
    940606812U,	// VBSLd
    940606812U,	// VBSLq
    544343393U,	// VCEQfd
    544343393U,	// VCEQfq
    562038113U,	// VCEQv16i8
    559940961U,	// VCEQv2i32
    560989537U,	// VCEQv4i16
    559940961U,	// VCEQv4i32
    560989537U,	// VCEQv8i16
    562038113U,	// VCEQv8i8
    830473569U,	// VCEQzv16i8
    812778849U,	// VCEQzv2f32
    828376417U,	// VCEQzv2i32
    812778849U,	// VCEQzv4f32
    829424993U,	// VCEQzv4i16
    828376417U,	// VCEQzv4i32
    829424993U,	// VCEQzv8i16
    830473569U,	// VCEQzv8i8
    544343398U,	// VCGEfd
    544343398U,	// VCGEfq
    554698086U,	// VCGEsv16i8
    552600934U,	// VCGEsv2i32
    553649510U,	// VCGEsv4i16
    552600934U,	// VCGEsv4i32
    553649510U,	// VCGEsv8i16
    554698086U,	// VCGEsv8i8
    557843814U,	// VCGEuv16i8
    555746662U,	// VCGEuv2i32
    556795238U,	// VCGEuv4i16
    555746662U,	// VCGEuv4i32
    556795238U,	// VCGEuv8i16
    557843814U,	// VCGEuv8i8
    823133542U,	// VCGEzv16i8
    812778854U,	// VCGEzv2f32
    821036390U,	// VCGEzv2i32
    812778854U,	// VCGEzv4f32
    822084966U,	// VCGEzv4i16
    821036390U,	// VCGEzv4i32
    822084966U,	// VCGEzv8i16
    823133542U,	// VCGEzv8i8
    544343403U,	// VCGTfd
    544343403U,	// VCGTfq
    554698091U,	// VCGTsv16i8
    552600939U,	// VCGTsv2i32
    553649515U,	// VCGTsv4i16
    552600939U,	// VCGTsv4i32
    553649515U,	// VCGTsv8i16
    554698091U,	// VCGTsv8i8
    557843819U,	// VCGTuv16i8
    555746667U,	// VCGTuv2i32
    556795243U,	// VCGTuv4i16
    555746667U,	// VCGTuv4i32
    556795243U,	// VCGTuv8i16
    557843819U,	// VCGTuv8i8
    823133547U,	// VCGTzv16i8
    812778859U,	// VCGTzv2f32
    821036395U,	// VCGTzv2i32
    812778859U,	// VCGTzv4f32
    822084971U,	// VCGTzv4i16
    821036395U,	// VCGTzv4i32
    822084971U,	// VCGTzv8i16
    823133547U,	// VCGTzv8i8
    823133552U,	// VCLEzv16i8
    812778864U,	// VCLEzv2f32
    821036400U,	// VCLEzv2i32
    812778864U,	// VCLEzv4f32
    822084976U,	// VCLEzv4i16
    821036400U,	// VCLEzv4i32
    822084976U,	// VCLEzv8i16
    823133552U,	// VCLEzv8i8
    823133557U,	// VCLSv16i8
    821036405U,	// VCLSv2i32
    822084981U,	// VCLSv4i16
    821036405U,	// VCLSv4i32
    822084981U,	// VCLSv8i16
    823133557U,	// VCLSv8i8
    823133562U,	// VCLTzv16i8
    812778874U,	// VCLTzv2f32
    821036410U,	// VCLTzv2i32
    812778874U,	// VCLTzv4f32
    822084986U,	// VCLTzv4i16
    821036410U,	// VCLTzv4i32
    822084986U,	// VCLTzv8i16
    823133562U,	// VCLTzv8i8
    830473599U,	// VCLZv16i8
    828376447U,	// VCLZv2i32
    829425023U,	// VCLZv4i16
    828376447U,	// VCLZv4i32
    829425023U,	// VCLZv8i16
    830473599U,	// VCLZv8i8
    811730308U,	// VCMPD
    811730313U,	// VCMPED
    812778889U,	// VCMPES
    1080395145U,	// VCMPEZD
    1081443721U,	// VCMPEZS
    812778884U,	// VCMPS
    1080395140U,	// VCMPZD
    1081443716U,	// VCMPZS
    831653263U,	// VCNTd
    831653263U,	// VCNTq
    832570772U,	// VCVTBHS
    833619348U,	// VCVTBSH
    834667930U,	// VCVTDS
    835716506U,	// VCVTSD
    832570783U,	// VCVTTHS
    833619359U,	// VCVTTSH
    832570778U,	// VCVTf2h
    837158298U,	// VCVTf2sd
    837158298U,	// VCVTf2sq
    838206874U,	// VCVTf2ud
    838206874U,	// VCVTf2uq
    568460698U,	// VCVTf2xsd
    568460698U,	// VCVTf2xsq
    569509274U,	// VCVTf2xud
    569509274U,	// VCVTf2xuq
    833619354U,	// VCVTh2f
    839255450U,	// VCVTs2fd
    839255450U,	// VCVTs2fq
    840304026U,	// VCVTu2fd
    840304026U,	// VCVTu2fq
    570557850U,	// VCVTxs2fd
    570557850U,	// VCVTxs2fq
    571606426U,	// VCVTxu2fd
    571606426U,	// VCVTxu2fq
    543294885U,	// VDIVD
    544343461U,	// VDIVS
    841090474U,	// VDUP16d
    841090474U,	// VDUP16q
    842139050U,	// VDUP32d
    842139050U,	// VDUP32q
    831653290U,	// VDUP8d
    831653290U,	// VDUP8q
    572655018U,	// VDUPLN16d
    572655018U,	// VDUPLN16q
    573703594U,	// VDUPLN32d
    573703594U,	// VDUPLN32q
    563217834U,	// VDUPLN8d
    563217834U,	// VDUPLN8q
    573703594U,	// VDUPLNfd
    573703594U,	// VDUPLNfq
    842139050U,	// VDUPfd
    0U,	// VDUPfdf
    842139050U,	// VDUPfq
    0U,	// VDUPfqf
    537953711U,	// VEORd
    537953711U,	// VEORq
    975308212U,	// VEXTd16
    976356788U,	// VEXTd32
    965871028U,	// VEXTd8
    976356788U,	// VEXTdf
    975308212U,	// VEXTq16
    976356788U,	// VEXTq32
    965871028U,	// VEXTq8
    976356788U,	// VEXTqf
    573702299U,	// VGETLNi32
    553648283U,	// VGETLNs16
    554696859U,	// VGETLNs8
    556794011U,	// VGETLNu16
    557842587U,	// VGETLNu8
    554698169U,	// VHADDsv16i8
    552601017U,	// VHADDsv2i32
    553649593U,	// VHADDsv4i16
    552601017U,	// VHADDsv4i32
    553649593U,	// VHADDsv8i16
    554698169U,	// VHADDsv8i8
    557843897U,	// VHADDuv16i8
    555746745U,	// VHADDuv2i32
    556795321U,	// VHADDuv4i16
    555746745U,	// VHADDuv4i32
    556795321U,	// VHADDuv8i16
    557843897U,	// VHADDuv8i8
    554698175U,	// VHSUBsv16i8
    552601023U,	// VHSUBsv2i32
    553649599U,	// VHSUBsv4i16
    552601023U,	// VHSUBsv4i32
    553649599U,	// VHSUBsv8i16
    554698175U,	// VHSUBsv8i8
    557843903U,	// VHSUBuv16i8
    555746751U,	// VHSUBuv2i32
    556795327U,	// VHSUBuv4i16
    555746751U,	// VHSUBuv4i32
    556795327U,	// VHSUBuv8i16
    557843903U,	// VHSUBuv8i8
    574653893U,	// VLD1DUPd16
    708871621U,	// VLD1DUPd16_UPD
    575702469U,	// VLD1DUPd32
    709920197U,	// VLD1DUPd32_UPD
    576751045U,	// VLD1DUPd8
    710968773U,	// VLD1DUPd8_UPD
    977307077U,	// VLD1DUPq16
    0U,	// VLD1DUPq16Pseudo
    0U,	// VLD1DUPq16Pseudo_UPD
    1379960261U,	// VLD1DUPq16_UPD
    978355653U,	// VLD1DUPq32
    0U,	// VLD1DUPq32Pseudo
    0U,	// VLD1DUPq32Pseudo_UPD
    1381008837U,	// VLD1DUPq32_UPD
    979404229U,	// VLD1DUPq8
    0U,	// VLD1DUPq8Pseudo
    0U,	// VLD1DUPq8Pseudo_UPD
    1382057413U,	// VLD1DUPq8_UPD
    708871621U,	// VLD1LNd16
    2722137541U,	// VLD1LNd16_UPD
    709920197U,	// VLD1LNd32
    2723186117U,	// VLD1LNd32_UPD
    710968773U,	// VLD1LNd8
    2724234693U,	// VLD1LNd8_UPD
    0U,	// VLD1LNq16Pseudo
    0U,	// VLD1LNq16Pseudo_UPD
    0U,	// VLD1LNq32Pseudo
    0U,	// VLD1LNq32Pseudo_UPD
    0U,	// VLD1LNq8Pseudo
    0U,	// VLD1LNq8Pseudo_UPD
    574653893U,	// VLD1d16
    1379960261U,	// VLD1d16Q
    2856355269U,	// VLD1d16Q_UPD
    708871621U,	// VLD1d16T
    2722137541U,	// VLD1d16T_UPD
    708871621U,	// VLD1d16_UPD
    575702469U,	// VLD1d32
    1381008837U,	// VLD1d32Q
    2857403845U,	// VLD1d32Q_UPD
    709920197U,	// VLD1d32T
    2723186117U,	// VLD1d32T_UPD
    709920197U,	// VLD1d32_UPD
    577799621U,	// VLD1d64
    1383105989U,	// VLD1d64Q
    0U,	// VLD1d64QPseudo
    0U,	// VLD1d64QPseudo_UPD
    2859500997U,	// VLD1d64Q_UPD
    712017349U,	// VLD1d64T
    0U,	// VLD1d64TPseudo
    0U,	// VLD1d64TPseudo_UPD
    2725283269U,	// VLD1d64T_UPD
    712017349U,	// VLD1d64_UPD
    576751045U,	// VLD1d8
    1382057413U,	// VLD1d8Q
    2858452421U,	// VLD1d8Q_UPD
    710968773U,	// VLD1d8T
    2724234693U,	// VLD1d8T_UPD
    710968773U,	// VLD1d8_UPD
    977307077U,	// VLD1q16
    0U,	// VLD1q16Pseudo
    0U,	// VLD1q16Pseudo_UPD
    1379960261U,	// VLD1q16_UPD
    978355653U,	// VLD1q32
    0U,	// VLD1q32Pseudo
    0U,	// VLD1q32Pseudo_UPD
    1381008837U,	// VLD1q32_UPD
    980452805U,	// VLD1q64
    0U,	// VLD1q64Pseudo
    0U,	// VLD1q64Pseudo_UPD
    1383105989U,	// VLD1q64_UPD
    979404229U,	// VLD1q8
    0U,	// VLD1q8Pseudo
    0U,	// VLD1q8Pseudo_UPD
    1382057413U,	// VLD1q8_UPD
    977307082U,	// VLD2DUPd16
    0U,	// VLD2DUPd16Pseudo
    0U,	// VLD2DUPd16Pseudo_UPD
    1379960266U,	// VLD2DUPd16_UPD
    977307082U,	// VLD2DUPd16x2
    1379960266U,	// VLD2DUPd16x2_UPD
    978355658U,	// VLD2DUPd32
    0U,	// VLD2DUPd32Pseudo
    0U,	// VLD2DUPd32Pseudo_UPD
    1381008842U,	// VLD2DUPd32_UPD
    978355658U,	// VLD2DUPd32x2
    1381008842U,	// VLD2DUPd32x2_UPD
    979404234U,	// VLD2DUPd8
    0U,	// VLD2DUPd8Pseudo
    0U,	// VLD2DUPd8Pseudo_UPD
    1382057418U,	// VLD2DUPd8_UPD
    979404234U,	// VLD2DUPd8x2
    1382057418U,	// VLD2DUPd8x2_UPD
    2722137546U,	// VLD2LNd16
    0U,	// VLD2LNd16Pseudo
    0U,	// VLD2LNd16Pseudo_UPD
    2990573002U,	// VLD2LNd16_UPD
    2723186122U,	// VLD2LNd32
    0U,	// VLD2LNd32Pseudo
    0U,	// VLD2LNd32Pseudo_UPD
    2991621578U,	// VLD2LNd32_UPD
    2724234698U,	// VLD2LNd8
    0U,	// VLD2LNd8Pseudo
    0U,	// VLD2LNd8Pseudo_UPD
    2992670154U,	// VLD2LNd8_UPD
    2722137546U,	// VLD2LNq16
    0U,	// VLD2LNq16Pseudo
    0U,	// VLD2LNq16Pseudo_UPD
    2990573002U,	// VLD2LNq16_UPD
    2723186122U,	// VLD2LNq32
    0U,	// VLD2LNq32Pseudo
    0U,	// VLD2LNq32Pseudo_UPD
    2991621578U,	// VLD2LNq32_UPD
    977307082U,	// VLD2b16
    1379960266U,	// VLD2b16_UPD
    978355658U,	// VLD2b32
    1381008842U,	// VLD2b32_UPD
    979404234U,	// VLD2b8
    1382057418U,	// VLD2b8_UPD
    977307082U,	// VLD2d16
    0U,	// VLD2d16Pseudo
    0U,	// VLD2d16Pseudo_UPD
    1379960266U,	// VLD2d16_UPD
    978355658U,	// VLD2d32
    0U,	// VLD2d32Pseudo
    0U,	// VLD2d32Pseudo_UPD
    1381008842U,	// VLD2d32_UPD
    979404234U,	// VLD2d8
    0U,	// VLD2d8Pseudo
    0U,	// VLD2d8Pseudo_UPD
    1382057418U,	// VLD2d8_UPD
    1379960266U,	// VLD2q16
    0U,	// VLD2q16Pseudo
    0U,	// VLD2q16Pseudo_UPD
    2856355274U,	// VLD2q16_UPD
    1381008842U,	// VLD2q32
    0U,	// VLD2q32Pseudo
    0U,	// VLD2q32Pseudo_UPD
    2857403850U,	// VLD2q32_UPD
    1382057418U,	// VLD2q8
    0U,	// VLD2q8Pseudo
    0U,	// VLD2q8Pseudo_UPD
    2858452426U,	// VLD2q8_UPD
    708871631U,	// VLD3DUPd16
    0U,	// VLD3DUPd16Pseudo
    0U,	// VLD3DUPd16Pseudo_UPD
    2722137551U,	// VLD3DUPd16_UPD
    708871631U,	// VLD3DUPd16x2
    2722137551U,	// VLD3DUPd16x2_UPD
    709920207U,	// VLD3DUPd32
    0U,	// VLD3DUPd32Pseudo
    0U,	// VLD3DUPd32Pseudo_UPD
    2723186127U,	// VLD3DUPd32_UPD
    709920207U,	// VLD3DUPd32x2
    2723186127U,	// VLD3DUPd32x2_UPD
    710968783U,	// VLD3DUPd8
    0U,	// VLD3DUPd8Pseudo
    0U,	// VLD3DUPd8Pseudo_UPD
    2724234703U,	// VLD3DUPd8_UPD
    710968783U,	// VLD3DUPd8x2
    2724234703U,	// VLD3DUPd8x2_UPD
    2990573007U,	// VLD3LNd16
    0U,	// VLD3LNd16Pseudo
    0U,	// VLD3LNd16Pseudo_UPD
    3124790735U,	// VLD3LNd16_UPD
    2991621583U,	// VLD3LNd32
    0U,	// VLD3LNd32Pseudo
    0U,	// VLD3LNd32Pseudo_UPD
    3125839311U,	// VLD3LNd32_UPD
    2992670159U,	// VLD3LNd8
    0U,	// VLD3LNd8Pseudo
    0U,	// VLD3LNd8Pseudo_UPD
    3126887887U,	// VLD3LNd8_UPD
    2990573007U,	// VLD3LNq16
    0U,	// VLD3LNq16Pseudo
    0U,	// VLD3LNq16Pseudo_UPD
    3124790735U,	// VLD3LNq16_UPD
    2991621583U,	// VLD3LNq32
    0U,	// VLD3LNq32Pseudo
    0U,	// VLD3LNq32Pseudo_UPD
    3125839311U,	// VLD3LNq32_UPD
    708871631U,	// VLD3d16
    0U,	// VLD3d16Pseudo
    0U,	// VLD3d16Pseudo_UPD
    2722137551U,	// VLD3d16_UPD
    709920207U,	// VLD3d32
    0U,	// VLD3d32Pseudo
    0U,	// VLD3d32Pseudo_UPD
    2723186127U,	// VLD3d32_UPD
    710968783U,	// VLD3d8
    0U,	// VLD3d8Pseudo
    0U,	// VLD3d8Pseudo_UPD
    2724234703U,	// VLD3d8_UPD
    708871631U,	// VLD3q16
    0U,	// VLD3q16Pseudo_UPD
    2722137551U,	// VLD3q16_UPD
    0U,	// VLD3q16oddPseudo
    0U,	// VLD3q16oddPseudo_UPD
    709920207U,	// VLD3q32
    0U,	// VLD3q32Pseudo_UPD
    2723186127U,	// VLD3q32_UPD
    0U,	// VLD3q32oddPseudo
    0U,	// VLD3q32oddPseudo_UPD
    710968783U,	// VLD3q8
    0U,	// VLD3q8Pseudo_UPD
    2724234703U,	// VLD3q8_UPD
    0U,	// VLD3q8oddPseudo
    0U,	// VLD3q8oddPseudo_UPD
    1379960276U,	// VLD4DUPd16
    0U,	// VLD4DUPd16Pseudo
    0U,	// VLD4DUPd16Pseudo_UPD
    2856355284U,	// VLD4DUPd16_UPD
    1379960276U,	// VLD4DUPd16x2
    2856355284U,	// VLD4DUPd16x2_UPD
    1381008852U,	// VLD4DUPd32
    0U,	// VLD4DUPd32Pseudo
    0U,	// VLD4DUPd32Pseudo_UPD
    2857403860U,	// VLD4DUPd32_UPD
    1381008852U,	// VLD4DUPd32x2
    2857403860U,	// VLD4DUPd32x2_UPD
    1382057428U,	// VLD4DUPd8
    0U,	// VLD4DUPd8Pseudo
    0U,	// VLD4DUPd8Pseudo_UPD
    2858452436U,	// VLD4DUPd8_UPD
    1382057428U,	// VLD4DUPd8x2
    2858452436U,	// VLD4DUPd8x2_UPD
    3124790740U,	// VLD4LNd16
    0U,	// VLD4LNd16Pseudo
    0U,	// VLD4LNd16Pseudo_UPD
    3259008468U,	// VLD4LNd16_UPD
    3125839316U,	// VLD4LNd32
    0U,	// VLD4LNd32Pseudo
    0U,	// VLD4LNd32Pseudo_UPD
    3260057044U,	// VLD4LNd32_UPD
    3126887892U,	// VLD4LNd8
    0U,	// VLD4LNd8Pseudo
    0U,	// VLD4LNd8Pseudo_UPD
    3261105620U,	// VLD4LNd8_UPD
    3124790740U,	// VLD4LNq16
    0U,	// VLD4LNq16Pseudo
    0U,	// VLD4LNq16Pseudo_UPD
    3259008468U,	// VLD4LNq16_UPD
    3125839316U,	// VLD4LNq32
    0U,	// VLD4LNq32Pseudo
    0U,	// VLD4LNq32Pseudo_UPD
    3260057044U,	// VLD4LNq32_UPD
    1379960276U,	// VLD4d16
    0U,	// VLD4d16Pseudo
    0U,	// VLD4d16Pseudo_UPD
    2856355284U,	// VLD4d16_UPD
    1381008852U,	// VLD4d32
    0U,	// VLD4d32Pseudo
    0U,	// VLD4d32Pseudo_UPD
    2857403860U,	// VLD4d32_UPD
    1382057428U,	// VLD4d8
    0U,	// VLD4d8Pseudo
    0U,	// VLD4d8Pseudo_UPD
    2858452436U,	// VLD4d8_UPD
    1379960276U,	// VLD4q16
    0U,	// VLD4q16Pseudo_UPD
    2856355284U,	// VLD4q16_UPD
    0U,	// VLD4q16oddPseudo
    0U,	// VLD4q16oddPseudo_UPD
    1381008852U,	// VLD4q32
    0U,	// VLD4q32Pseudo_UPD
    2857403860U,	// VLD4q32_UPD
    0U,	// VLD4q32oddPseudo
    0U,	// VLD4q32oddPseudo_UPD
    1382057428U,	// VLD4q8
    0U,	// VLD4q8Pseudo_UPD
    2858452436U,	// VLD4q8_UPD
    0U,	// VLD4q8oddPseudo
    0U,	// VLD4q8oddPseudo_UPD
    1074824665U,	// VLDMDDB
    806356441U,	// VLDMDDB_UPD
    1074824672U,	// VLDMDIA
    806356448U,	// VLDMDIA_UPD
    0U,	// VLDMQDB
    0U,	// VLDMQIA
    1074824665U,	// VLDMSDB
    806356441U,	// VLDMSDB_UPD
    1074824672U,	// VLDMSIA
    806356448U,	// VLDMSIA_UPD
    579241447U,	// VLDRD
    573703655U,	// VLDRS
    544343532U,	// VMAXfd
    544343532U,	// VMAXfq
    554698220U,	// VMAXsv16i8
    552601068U,	// VMAXsv2i32
    553649644U,	// VMAXsv4i16
    552601068U,	// VMAXsv4i32
    553649644U,	// VMAXsv8i16
    554698220U,	// VMAXsv8i8
    557843948U,	// VMAXuv16i8
    555746796U,	// VMAXuv2i32
    556795372U,	// VMAXuv4i16
    555746796U,	// VMAXuv4i32
    556795372U,	// VMAXuv8i16
    557843948U,	// VMAXuv8i8
    544343537U,	// VMINfd
    544343537U,	// VMINfq
    554698225U,	// VMINsv16i8
    552601073U,	// VMINsv2i32
    553649649U,	// VMINsv4i16
    552601073U,	// VMINsv4i32
    553649649U,	// VMINsv8i16
    554698225U,	// VMINsv8i8
    557843953U,	// VMINuv16i8
    555746801U,	// VMINuv2i32
    556795377U,	// VMINuv4i16
    555746801U,	// VMINuv4i32
    556795377U,	// VMINuv8i16
    557843953U,	// VMINuv8i8
    945948150U,	// VMLAD
    687113723U,	// VMLALslsv2i32
    688162299U,	// VMLALslsv4i16
    690259451U,	// VMLALsluv2i32
    691308027U,	// VMLALsluv4i16
    955549179U,	// VMLALsv2i64
    956597755U,	// VMLALsv4i32
    957646331U,	// VMLALsv8i16
    958694907U,	// VMLALuv2i64
    959743483U,	// VMLALuv4i32
    960792059U,	// VMLALuv8i16
    946996726U,	// VMLAS
    946996726U,	// VMLAfd
    946996726U,	// VMLAfq
    678561270U,	// VMLAslfd
    678561270U,	// VMLAslfq
    694453750U,	// VMLAslv2i32
    695502326U,	// VMLAslv4i16
    694453750U,	// VMLAslv4i32
    695502326U,	// VMLAslv8i16
    964986358U,	// VMLAv16i8
    962889206U,	// VMLAv2i32
    963937782U,	// VMLAv4i16
    962889206U,	// VMLAv4i32
    963937782U,	// VMLAv8i16
    964986358U,	// VMLAv8i8
    945948161U,	// VMLSD
    687113734U,	// VMLSLslsv2i32
    688162310U,	// VMLSLslsv4i16
    690259462U,	// VMLSLsluv2i32
    691308038U,	// VMLSLsluv4i16
    955549190U,	// VMLSLsv2i64
    956597766U,	// VMLSLsv4i32
    957646342U,	// VMLSLsv8i16
    958694918U,	// VMLSLuv2i64
    959743494U,	// VMLSLuv4i32
    960792070U,	// VMLSLuv8i16
    946996737U,	// VMLSS
    946996737U,	// VMLSfd
    946996737U,	// VMLSfq
    678561281U,	// VMLSslfd
    678561281U,	// VMLSslfq
    694453761U,	// VMLSslv2i32
    695502337U,	// VMLSslv4i16
    694453761U,	// VMLSslv4i32
    695502337U,	// VMLSslv8i16
    964986369U,	// VMLSv16i8
    962889217U,	// VMLSv2i32
    963937793U,	// VMLSv4i16
    962889217U,	// VMLSv4i32
    963937793U,	// VMLSv8i16
    964986369U,	// VMLSv8i8
    811729051U,	// VMOVD
    537952411U,	// VMOVDRR
    543293595U,	// VMOVDcc
    806387867U,	// VMOVDneon
    821036556U,	// VMOVLsv2i64
    822085132U,	// VMOVLsv4i32
    823133708U,	// VMOVLsv8i16
    824182284U,	// VMOVLuv2i64
    825230860U,	// VMOVLuv4i32
    826279436U,	// VMOVLuv8i16
    827328018U,	// VMOVNv2i32
    828376594U,	// VMOVNv4i16
    829425170U,	// VMOVNv8i8
    806387867U,	// VMOVQ
    0U,	// VMOVQQ
    0U,	// VMOVQQQQ
    537952411U,	// VMOVRRD
    940605595U,	// VMOVRRS
    806387867U,	// VMOVRS
    812777627U,	// VMOVS
    806387867U,	// VMOVSR
    940605595U,	// VMOVSRR
    544342171U,	// VMOVScc
    830800027U,	// VMOVv16i8
    827654299U,	// VMOVv1i64
    828702875U,	// VMOVv2i32
    827654299U,	// VMOVv2i64
    829751451U,	// VMOVv4i16
    828702875U,	// VMOVv4i32
    829751451U,	// VMOVv8i16
    830800027U,	// VMOVv8i8
    1074823328U,	// VMRS
    1074823328U,	// VMRS_FPEXC
    1074823328U,	// VMRS_FPSID
    1116735000U,	// VMSR
    1117783576U,	// VMSR_FPEXC
    1118832152U,	// VMSR_FPSID
    543295005U,	// VMULD
    583009826U,	// VMULLp
    955254306U,	// VMULLslsv2i32
    956302882U,	// VMULLslsv4i16
    958400034U,	// VMULLsluv2i32
    959448610U,	// VMULLsluv4i16
    552601122U,	// VMULLsv2i64
    553649698U,	// VMULLsv4i32
    554698274U,	// VMULLsv8i16
    555746850U,	// VMULLuv2i64
    556795426U,	// VMULLuv4i32
    557844002U,	// VMULLuv8i16
    544343581U,	// VMULS
    544343581U,	// VMULfd
    544343581U,	// VMULfq
    583009821U,	// VMULpd
    583009821U,	// VMULpq
    946996765U,	// VMULslfd
    946996765U,	// VMULslfq
    962594333U,	// VMULslv2i32
    963642909U,	// VMULslv4i16
    962594333U,	// VMULslv4i32
    963642909U,	// VMULslv8i16
    562038301U,	// VMULv16i8
    559941149U,	// VMULv2i32
    560989725U,	// VMULv4i16
    559941149U,	// VMULv4i32
    560989725U,	// VMULv8i16
    562038301U,	// VMULv8i8
    806389288U,	// VMVNd
    806389288U,	// VMVNq
    828704296U,	// VMVNv2i32
    829752872U,	// VMVNv4i16
    828704296U,	// VMVNv4i32
    829752872U,	// VMVNv8i16
    811730477U,	// VNEGD
    812779053U,	// VNEGS
    812779053U,	// VNEGf32q
    812779053U,	// VNEGfd
    822085165U,	// VNEGs16d
    822085165U,	// VNEGs16q
    821036589U,	// VNEGs32d
    821036589U,	// VNEGs32q
    823133741U,	// VNEGs8d
    823133741U,	// VNEGs8q
    945948210U,	// VNMLAD
    946996786U,	// VNMLAS
    945948216U,	// VNMLSD
    946996792U,	// VNMLSS
    543295038U,	// VNMULD
    544343614U,	// VNMULS
    537953860U,	// VORNd
    537953860U,	// VORNq
    537953865U,	// VORRd
    560268873U,	// VORRiv2i32
    561317449U,	// VORRiv4i16
    560268873U,	// VORRiv4i32
    561317449U,	// VORRiv8i16
    537953865U,	// VORRq
    554993230U,	// VPADALsv16i8
    552896078U,	// VPADALsv2i32
    553944654U,	// VPADALsv4i16
    552896078U,	// VPADALsv4i32
    553944654U,	// VPADALsv8i16
    554993230U,	// VPADALsv8i8
    558138958U,	// VPADALuv16i8
    556041806U,	// VPADALuv2i32
    557090382U,	// VPADALuv4i16
    556041806U,	// VPADALuv4i32
    557090382U,	// VPADALuv8i16
    558138958U,	// VPADALuv8i8
    823133781U,	// VPADDLsv16i8
    821036629U,	// VPADDLsv2i32
    822085205U,	// VPADDLsv4i16
    821036629U,	// VPADDLsv4i32
    822085205U,	// VPADDLsv8i16
    823133781U,	// VPADDLsv8i8
    826279509U,	// VPADDLuv16i8
    824182357U,	// VPADDLuv2i32
    825230933U,	// VPADDLuv4i16
    824182357U,	// VPADDLuv4i32
    825230933U,	// VPADDLuv8i16
    826279509U,	// VPADDLuv8i8
    544343644U,	// VPADDf
    560989788U,	// VPADDi16
    559941212U,	// VPADDi32
    562038364U,	// VPADDi8
    544343650U,	// VPMAXf
    553649762U,	// VPMAXs16
    552601186U,	// VPMAXs32
    554698338U,	// VPMAXs8
    556795490U,	// VPMAXu16
    555746914U,	// VPMAXu32
    557844066U,	// VPMAXu8
    544343656U,	// VPMINf
    553649768U,	// VPMINs16
    552601192U,	// VPMINs32
    554698344U,	// VPMINs8
    556795496U,	// VPMINu16
    555746920U,	// VPMINu32
    557844072U,	// VPMINu8
    823133806U,	// VQABSv16i8
    821036654U,	// VQABSv2i32
    822085230U,	// VQABSv4i16
    821036654U,	// VQABSv4i32
    822085230U,	// VQABSv8i16
    823133806U,	// VQABSv8i8
    554698356U,	// VQADDsv16i8
    584058484U,	// VQADDsv1i64
    552601204U,	// VQADDsv2i32
    584058484U,	// VQADDsv2i64
    553649780U,	// VQADDsv4i16
    552601204U,	// VQADDsv4i32
    553649780U,	// VQADDsv8i16
    554698356U,	// VQADDsv8i8
    557844084U,	// VQADDuv16i8
    585107060U,	// VQADDuv1i64
    555746932U,	// VQADDuv2i32
    585107060U,	// VQADDuv2i64
    556795508U,	// VQADDuv4i16
    555746932U,	// VQADDuv4i32
    556795508U,	// VQADDuv8i16
    557844084U,	// VQADDuv8i8
    687113850U,	// VQDMLALslv2i32
    688162426U,	// VQDMLALslv4i16
    955549306U,	// VQDMLALv2i64
    956597882U,	// VQDMLALv4i32
    687113858U,	// VQDMLSLslv2i32
    688162434U,	// VQDMLSLslv4i16
    955549314U,	// VQDMLSLv2i64
    956597890U,	// VQDMLSLv4i32
    955254410U,	// VQDMULHslv2i32
    956302986U,	// VQDMULHslv4i16
    955254410U,	// VQDMULHslv4i32
    956302986U,	// VQDMULHslv8i16
    552601226U,	// VQDMULHv2i32
    553649802U,	// VQDMULHv4i16
    552601226U,	// VQDMULHv4i32
    553649802U,	// VQDMULHv8i16
    955254418U,	// VQDMULLslv2i32
    956302994U,	// VQDMULLslv4i16
    552601234U,	// VQDMULLv2i64
    553649810U,	// VQDMULLv4i32
    852493978U,	// VQMOVNsuv2i32
    821036698U,	// VQMOVNsuv4i16
    822085274U,	// VQMOVNsuv8i8
    852493986U,	// VQMOVNsv2i32
    821036706U,	// VQMOVNsv4i16
    822085282U,	// VQMOVNsv8i8
    853542562U,	// VQMOVNuv2i32
    824182434U,	// VQMOVNuv4i16
    825231010U,	// VQMOVNuv8i8
    823133865U,	// VQNEGv16i8
    821036713U,	// VQNEGv2i32
    822085289U,	// VQNEGv4i16
    821036713U,	// VQNEGv4i32
    822085289U,	// VQNEGv8i16
    823133865U,	// VQNEGv8i8
    955254447U,	// VQRDMULHslv2i32
    956303023U,	// VQRDMULHslv4i16
    955254447U,	// VQRDMULHslv4i32
    956303023U,	// VQRDMULHslv8i16
    552601263U,	// VQRDMULHv2i32
    553649839U,	// VQRDMULHv4i16
    552601263U,	// VQRDMULHv4i32
    553649839U,	// VQRDMULHv8i16
    554698424U,	// VQRSHLsv16i8
    584058552U,	// VQRSHLsv1i64
    552601272U,	// VQRSHLsv2i32
    584058552U,	// VQRSHLsv2i64
    553649848U,	// VQRSHLsv4i16
    552601272U,	// VQRSHLsv4i32
    553649848U,	// VQRSHLsv8i16
    554698424U,	// VQRSHLsv8i8
    557844152U,	// VQRSHLuv16i8
    585107128U,	// VQRSHLuv1i64
    555747000U,	// VQRSHLuv2i32
    585107128U,	// VQRSHLuv2i64
    556795576U,	// VQRSHLuv4i16
    555747000U,	// VQRSHLuv4i32
    556795576U,	// VQRSHLuv8i16
    557844152U,	// VQRSHLuv8i8
    584058559U,	// VQRSHRNsv2i32
    552601279U,	// VQRSHRNsv4i16
    553649855U,	// VQRSHRNsv8i8
    585107135U,	// VQRSHRNuv2i32
    555747007U,	// VQRSHRNuv4i16
    556795583U,	// VQRSHRNuv8i8
    584058567U,	// VQRSHRUNv2i32
    552601287U,	// VQRSHRUNv4i16
    553649863U,	// VQRSHRUNv8i8
    554698448U,	// VQSHLsiv16i8
    584058576U,	// VQSHLsiv1i64
    552601296U,	// VQSHLsiv2i32
    584058576U,	// VQSHLsiv2i64
    553649872U,	// VQSHLsiv4i16
    552601296U,	// VQSHLsiv4i32
    553649872U,	// VQSHLsiv8i16
    554698448U,	// VQSHLsiv8i8
    554698454U,	// VQSHLsuv16i8
    584058582U,	// VQSHLsuv1i64
    552601302U,	// VQSHLsuv2i32
    584058582U,	// VQSHLsuv2i64
    553649878U,	// VQSHLsuv4i16
    552601302U,	// VQSHLsuv4i32
    553649878U,	// VQSHLsuv8i16
    554698454U,	// VQSHLsuv8i8
    554698448U,	// VQSHLsv16i8
    584058576U,	// VQSHLsv1i64
    552601296U,	// VQSHLsv2i32
    584058576U,	// VQSHLsv2i64
    553649872U,	// VQSHLsv4i16
    552601296U,	// VQSHLsv4i32
    553649872U,	// VQSHLsv8i16
    554698448U,	// VQSHLsv8i8
    557844176U,	// VQSHLuiv16i8
    585107152U,	// VQSHLuiv1i64
    555747024U,	// VQSHLuiv2i32
    585107152U,	// VQSHLuiv2i64
    556795600U,	// VQSHLuiv4i16
    555747024U,	// VQSHLuiv4i32
    556795600U,	// VQSHLuiv8i16
    557844176U,	// VQSHLuiv8i8
    557844176U,	// VQSHLuv16i8
    585107152U,	// VQSHLuv1i64
    555747024U,	// VQSHLuv2i32
    585107152U,	// VQSHLuv2i64
    556795600U,	// VQSHLuv4i16
    555747024U,	// VQSHLuv4i32
    556795600U,	// VQSHLuv8i16
    557844176U,	// VQSHLuv8i8
    584058589U,	// VQSHRNsv2i32
    552601309U,	// VQSHRNsv4i16
    553649885U,	// VQSHRNsv8i8
    585107165U,	// VQSHRNuv2i32
    555747037U,	// VQSHRNuv4i16
    556795613U,	// VQSHRNuv8i8
    584058596U,	// VQSHRUNv2i32
    552601316U,	// VQSHRUNv4i16
    553649892U,	// VQSHRUNv8i8
    554698476U,	// VQSUBsv16i8
    584058604U,	// VQSUBsv1i64
    552601324U,	// VQSUBsv2i32
    584058604U,	// VQSUBsv2i64
    553649900U,	// VQSUBsv4i16
    552601324U,	// VQSUBsv4i32
    553649900U,	// VQSUBsv8i16
    554698476U,	// VQSUBsv8i8
    557844204U,	// VQSUBuv16i8
    585107180U,	// VQSUBuv1i64
    555747052U,	// VQSUBuv2i32
    585107180U,	// VQSUBuv2i64
    556795628U,	// VQSUBuv4i16
    555747052U,	// VQSUBuv4i32
    556795628U,	// VQSUBuv8i16
    557844204U,	// VQSUBuv8i8
    558892786U,	// VRADDHNv2i32
    559941362U,	// VRADDHNv4i16
    560989938U,	// VRADDHNv8i8
    824182522U,	// VRECPEd
    812779258U,	// VRECPEfd
    812779258U,	// VRECPEfq
    824182522U,	// VRECPEq
    544343809U,	// VRECPSfd
    544343809U,	// VRECPSfq
    831653640U,	// VREV16d8
    831653640U,	// VREV16q8
    841090831U,	// VREV32d16
    831653647U,	// VREV32d8
    841090831U,	// VREV32q16
    831653647U,	// VREV32q8
    841090838U,	// VREV64d16
    842139414U,	// VREV64d32
    831653654U,	// VREV64d8
    842139414U,	// VREV64df
    841090838U,	// VREV64q16
    842139414U,	// VREV64q32
    831653654U,	// VREV64q8
    842139414U,	// VREV64qf
    554698525U,	// VRHADDsv16i8
    552601373U,	// VRHADDsv2i32
    553649949U,	// VRHADDsv4i16
    552601373U,	// VRHADDsv4i32
    553649949U,	// VRHADDsv8i16
    554698525U,	// VRHADDsv8i8
    557844253U,	// VRHADDuv16i8
    555747101U,	// VRHADDuv2i32
    556795677U,	// VRHADDuv4i16
    555747101U,	// VRHADDuv4i32
    556795677U,	// VRHADDuv8i16
    557844253U,	// VRHADDuv8i8
    554698532U,	// VRSHLsv16i8
    584058660U,	// VRSHLsv1i64
    552601380U,	// VRSHLsv2i32
    584058660U,	// VRSHLsv2i64
    553649956U,	// VRSHLsv4i16
    552601380U,	// VRSHLsv4i32
    553649956U,	// VRSHLsv8i16
    554698532U,	// VRSHLsv8i8
    557844260U,	// VRSHLuv16i8
    585107236U,	// VRSHLuv1i64
    555747108U,	// VRSHLuv2i32
    585107236U,	// VRSHLuv2i64
    556795684U,	// VRSHLuv4i16
    555747108U,	// VRSHLuv4i32
    556795684U,	// VRSHLuv8i16
    557844260U,	// VRSHLuv8i8
    558892842U,	// VRSHRNv2i32
    559941418U,	// VRSHRNv4i16
    560989994U,	// VRSHRNv8i8
    554698545U,	// VRSHRsv16i8
    584058673U,	// VRSHRsv1i64
    552601393U,	// VRSHRsv2i32
    584058673U,	// VRSHRsv2i64
    553649969U,	// VRSHRsv4i16
    552601393U,	// VRSHRsv4i32
    553649969U,	// VRSHRsv8i16
    554698545U,	// VRSHRsv8i8
    557844273U,	// VRSHRuv16i8
    585107249U,	// VRSHRuv1i64
    555747121U,	// VRSHRuv2i32
    585107249U,	// VRSHRuv2i64
    556795697U,	// VRSHRuv4i16
    555747121U,	// VRSHRuv4i32
    556795697U,	// VRSHRuv8i16
    557844273U,	// VRSHRuv8i8
    824182583U,	// VRSQRTEd
    812779319U,	// VRSQRTEfd
    812779319U,	// VRSQRTEfq
    824182583U,	// VRSQRTEq
    544343871U,	// VRSQRTSfd
    544343871U,	// VRSQRTSfq
    957646663U,	// VRSRAsv16i8
    987006791U,	// VRSRAsv1i64
    955549511U,	// VRSRAsv2i32
    987006791U,	// VRSRAsv2i64
    956598087U,	// VRSRAsv4i16
    955549511U,	// VRSRAsv4i32
    956598087U,	// VRSRAsv8i16
    957646663U,	// VRSRAsv8i8
    960792391U,	// VRSRAuv16i8
    988055367U,	// VRSRAuv1i64
    958695239U,	// VRSRAuv2i32
    988055367U,	// VRSRAuv2i64
    959743815U,	// VRSRAuv4i16
    958695239U,	// VRSRAuv4i32
    959743815U,	// VRSRAuv8i16
    960792391U,	// VRSRAuv8i8
    558892877U,	// VRSUBHNv2i32
    559941453U,	// VRSUBHNv4i16
    560990029U,	// VRSUBHNv8i8
    975634587U,	// VSETLNi16
    976683163U,	// VSETLNi32
    966197403U,	// VSETLNi8
    560990037U,	// VSHLLi16
    559941461U,	// VSHLLi32
    562038613U,	// VSHLLi8
    552601429U,	// VSHLLsv2i64
    553650005U,	// VSHLLsv4i32
    554698581U,	// VSHLLsv8i16
    555747157U,	// VSHLLuv2i64
    556795733U,	// VSHLLuv4i32
    557844309U,	// VSHLLuv8i16
    562038619U,	// VSHLiv16i8
    558892891U,	// VSHLiv1i64
    559941467U,	// VSHLiv2i32
    558892891U,	// VSHLiv2i64
    560990043U,	// VSHLiv4i16
    559941467U,	// VSHLiv4i32
    560990043U,	// VSHLiv8i16
    562038619U,	// VSHLiv8i8
    554698587U,	// VSHLsv16i8
    584058715U,	// VSHLsv1i64
    552601435U,	// VSHLsv2i32
    584058715U,	// VSHLsv2i64
    553650011U,	// VSHLsv4i16
    552601435U,	// VSHLsv4i32
    553650011U,	// VSHLsv8i16
    554698587U,	// VSHLsv8i8
    557844315U,	// VSHLuv16i8
    585107291U,	// VSHLuv1i64
    555747163U,	// VSHLuv2i32
    585107291U,	// VSHLuv2i64
    556795739U,	// VSHLuv4i16
    555747163U,	// VSHLuv4i32
    556795739U,	// VSHLuv8i16
    557844315U,	// VSHLuv8i8
    558892896U,	// VSHRNv2i32
    559941472U,	// VSHRNv4i16
    560990048U,	// VSHRNv8i8
    554698598U,	// VSHRsv16i8
    584058726U,	// VSHRsv1i64
    552601446U,	// VSHRsv2i32
    584058726U,	// VSHRsv2i64
    553650022U,	// VSHRsv4i16
    552601446U,	// VSHRsv4i32
    553650022U,	// VSHRsv8i16
    554698598U,	// VSHRsv8i8
    557844326U,	// VSHRuv16i8
    585107302U,	// VSHRuv1i64
    555747174U,	// VSHRuv2i32
    585107302U,	// VSHRuv2i64
    556795750U,	// VSHRuv4i16
    555747174U,	// VSHRuv4i32
    556795750U,	// VSHRuv8i16
    557844326U,	// VSHRuv8i8
    586155418U,	// VSHTOD
    587203994U,	// VSHTOS
    857081242U,	// VSITOD
    839255450U,	// VSITOS
    965871467U,	// VSLIv16i8
    981763947U,	// VSLIv1i64
    976357227U,	// VSLIv2i32
    981763947U,	// VSLIv2i64
    975308651U,	// VSLIv4i16
    976357227U,	// VSLIv4i32
    975308651U,	// VSLIv8i16
    965871467U,	// VSLIv8i8
    588383642U,	// VSLTOD
    570557850U,	// VSLTOS
    811730800U,	// VSQRTD
    812779376U,	// VSQRTS
    957646710U,	// VSRAsv16i8
    987006838U,	// VSRAsv1i64
    955549558U,	// VSRAsv2i32
    987006838U,	// VSRAsv2i64
    956598134U,	// VSRAsv4i16
    955549558U,	// VSRAsv4i32
    956598134U,	// VSRAsv8i16
    957646710U,	// VSRAsv8i8
    960792438U,	// VSRAuv16i8
    988055414U,	// VSRAuv1i64
    958695286U,	// VSRAuv2i32
    988055414U,	// VSRAuv2i64
    959743862U,	// VSRAuv4i16
    958695286U,	// VSRAuv4i32
    959743862U,	// VSRAuv8i16
    960792438U,	// VSRAuv8i8
    965871483U,	// VSRIv16i8
    981763963U,	// VSRIv1i64
    976357243U,	// VSRIv2i32
    981763963U,	// VSRIv2i64
    975308667U,	// VSRIv4i16
    976357243U,	// VSRIv4i32
    975308667U,	// VSRIv8i16
    965871483U,	// VSRIv8i8
    977569664U,	// VST1LNd16
    1380419456U,	// VST1LNd16_UPD
    978618240U,	// VST1LNd32
    1381468032U,	// VST1LNd32_UPD
    979666816U,	// VST1LNd8
    1382516608U,	// VST1LNd8_UPD
    0U,	// VST1LNq16Pseudo
    0U,	// VST1LNq16Pseudo_UPD
    0U,	// VST1LNq32Pseudo
    0U,	// VST1LNq32Pseudo_UPD
    0U,	// VST1LNq8Pseudo
    0U,	// VST1LNq8Pseudo_UPD
    574916480U,	// VST1d16
    1380222848U,	// VST1d16Q
    2856814464U,	// VST1d16Q_UPD
    709134208U,	// VST1d16T
    2722596736U,	// VST1d16T_UPD
    709330816U,	// VST1d16_UPD
    575965056U,	// VST1d32
    1381271424U,	// VST1d32Q
    2857863040U,	// VST1d32Q_UPD
    710182784U,	// VST1d32T
    2723645312U,	// VST1d32T_UPD
    710379392U,	// VST1d32_UPD
    578062208U,	// VST1d64
    1383368576U,	// VST1d64Q
    0U,	// VST1d64QPseudo
    0U,	// VST1d64QPseudo_UPD
    2859960192U,	// VST1d64Q_UPD
    712279936U,	// VST1d64T
    0U,	// VST1d64TPseudo
    0U,	// VST1d64TPseudo_UPD
    2725742464U,	// VST1d64T_UPD
    712476544U,	// VST1d64_UPD
    577013632U,	// VST1d8
    1382320000U,	// VST1d8Q
    2858911616U,	// VST1d8Q_UPD
    711231360U,	// VST1d8T
    2724693888U,	// VST1d8T_UPD
    711427968U,	// VST1d8_UPD
    977569664U,	// VST1q16
    0U,	// VST1q16Pseudo
    0U,	// VST1q16Pseudo_UPD
    1380419456U,	// VST1q16_UPD
    978618240U,	// VST1q32
    0U,	// VST1q32Pseudo
    0U,	// VST1q32Pseudo_UPD
    1381468032U,	// VST1q32_UPD
    980715392U,	// VST1q64
    0U,	// VST1q64Pseudo
    0U,	// VST1q64Pseudo_UPD
    1383565184U,	// VST1q64_UPD
    979666816U,	// VST1q8
    0U,	// VST1q8Pseudo
    0U,	// VST1q8Pseudo_UPD
    1382516608U,	// VST1q8_UPD
    709134213U,	// VST2LNd16
    0U,	// VST2LNd16Pseudo
    0U,	// VST2LNd16Pseudo_UPD
    2722596741U,	// VST2LNd16_UPD
    710182789U,	// VST2LNd32
    0U,	// VST2LNd32Pseudo
    0U,	// VST2LNd32Pseudo_UPD
    2723645317U,	// VST2LNd32_UPD
    711231365U,	// VST2LNd8
    0U,	// VST2LNd8Pseudo
    0U,	// VST2LNd8Pseudo_UPD
    2724693893U,	// VST2LNd8_UPD
    709134213U,	// VST2LNq16
    0U,	// VST2LNq16Pseudo
    0U,	// VST2LNq16Pseudo_UPD
    2722596741U,	// VST2LNq16_UPD
    710182789U,	// VST2LNq32
    0U,	// VST2LNq32Pseudo
    0U,	// VST2LNq32Pseudo_UPD
    2723645317U,	// VST2LNq32_UPD
    977569669U,	// VST2b16
    1380419461U,	// VST2b16_UPD
    978618245U,	// VST2b32
    1381468037U,	// VST2b32_UPD
    979666821U,	// VST2b8
    1382516613U,	// VST2b8_UPD
    977569669U,	// VST2d16
    0U,	// VST2d16Pseudo
    0U,	// VST2d16Pseudo_UPD
    1380419461U,	// VST2d16_UPD
    978618245U,	// VST2d32
    0U,	// VST2d32Pseudo
    0U,	// VST2d32Pseudo_UPD
    1381468037U,	// VST2d32_UPD
    979666821U,	// VST2d8
    0U,	// VST2d8Pseudo
    0U,	// VST2d8Pseudo_UPD
    1382516613U,	// VST2d8_UPD
    1380222853U,	// VST2q16
    0U,	// VST2q16Pseudo
    0U,	// VST2q16Pseudo_UPD
    2856814469U,	// VST2q16_UPD
    1381271429U,	// VST2q32
    0U,	// VST2q32Pseudo
    0U,	// VST2q32Pseudo_UPD
    2857863045U,	// VST2q32_UPD
    1382320005U,	// VST2q8
    0U,	// VST2q8Pseudo
    0U,	// VST2q8Pseudo_UPD
    2858911621U,	// VST2q8_UPD
    1380222858U,	// VST3LNd16
    0U,	// VST3LNd16Pseudo
    0U,	// VST3LNd16Pseudo_UPD
    2856814474U,	// VST3LNd16_UPD
    1381271434U,	// VST3LNd32
    0U,	// VST3LNd32Pseudo
    0U,	// VST3LNd32Pseudo_UPD
    2857863050U,	// VST3LNd32_UPD
    1382320010U,	// VST3LNd8
    0U,	// VST3LNd8Pseudo
    0U,	// VST3LNd8Pseudo_UPD
    2858911626U,	// VST3LNd8_UPD
    1380222858U,	// VST3LNq16
    0U,	// VST3LNq16Pseudo
    0U,	// VST3LNq16Pseudo_UPD
    2856814474U,	// VST3LNq16_UPD
    1381271434U,	// VST3LNq32
    0U,	// VST3LNq32Pseudo
    0U,	// VST3LNq32Pseudo_UPD
    2857863050U,	// VST3LNq32_UPD
    709134218U,	// VST3d16
    0U,	// VST3d16Pseudo
    0U,	// VST3d16Pseudo_UPD
    2722596746U,	// VST3d16_UPD
    710182794U,	// VST3d32
    0U,	// VST3d32Pseudo
    0U,	// VST3d32Pseudo_UPD
    2723645322U,	// VST3d32_UPD
    711231370U,	// VST3d8
    0U,	// VST3d8Pseudo
    0U,	// VST3d8Pseudo_UPD
    2724693898U,	// VST3d8_UPD
    709134218U,	// VST3q16
    0U,	// VST3q16Pseudo_UPD
    2722596746U,	// VST3q16_UPD
    0U,	// VST3q16oddPseudo
    0U,	// VST3q16oddPseudo_UPD
    710182794U,	// VST3q32
    0U,	// VST3q32Pseudo_UPD
    2723645322U,	// VST3q32_UPD
    0U,	// VST3q32oddPseudo
    0U,	// VST3q32oddPseudo_UPD
    711231370U,	// VST3q8
    0U,	// VST3q8Pseudo_UPD
    2724693898U,	// VST3q8_UPD
    0U,	// VST3q8oddPseudo
    0U,	// VST3q8oddPseudo_UPD
    2722400143U,	// VST4LNd16
    0U,	// VST4LNd16Pseudo
    0U,	// VST4LNd16Pseudo_UPD
    2991032207U,	// VST4LNd16_UPD
    2723448719U,	// VST4LNd32
    0U,	// VST4LNd32Pseudo
    0U,	// VST4LNd32Pseudo_UPD
    2992080783U,	// VST4LNd32_UPD
    2724497295U,	// VST4LNd8
    0U,	// VST4LNd8Pseudo
    0U,	// VST4LNd8Pseudo_UPD
    2993129359U,	// VST4LNd8_UPD
    2722400143U,	// VST4LNq16
    0U,	// VST4LNq16Pseudo
    0U,	// VST4LNq16Pseudo_UPD
    2991032207U,	// VST4LNq16_UPD
    2723448719U,	// VST4LNq32
    0U,	// VST4LNq32Pseudo
    0U,	// VST4LNq32Pseudo_UPD
    2992080783U,	// VST4LNq32_UPD
    1380222863U,	// VST4d16
    0U,	// VST4d16Pseudo
    0U,	// VST4d16Pseudo_UPD
    2856814479U,	// VST4d16_UPD
    1381271439U,	// VST4d32
    0U,	// VST4d32Pseudo
    0U,	// VST4d32Pseudo_UPD
    2857863055U,	// VST4d32_UPD
    1382320015U,	// VST4d8
    0U,	// VST4d8Pseudo
    0U,	// VST4d8Pseudo_UPD
    2858911631U,	// VST4d8_UPD
    1380222863U,	// VST4q16
    0U,	// VST4q16Pseudo_UPD
    2856814479U,	// VST4q16_UPD
    0U,	// VST4q16oddPseudo
    0U,	// VST4q16oddPseudo_UPD
    1381271439U,	// VST4q32
    0U,	// VST4q32Pseudo_UPD
    2857863055U,	// VST4q32_UPD
    0U,	// VST4q32oddPseudo
    0U,	// VST4q32oddPseudo_UPD
    1382320015U,	// VST4q8
    0U,	// VST4q8Pseudo_UPD
    2858911631U,	// VST4q8_UPD
    0U,	// VST4q8oddPseudo
    0U,	// VST4q8oddPseudo_UPD
    1074825108U,	// VSTMDDB
    806356884U,	// VSTMDDB_UPD
    1074825115U,	// VSTMDIA
    806356891U,	// VSTMDIA_UPD
    0U,	// VSTMQDB
    0U,	// VSTMQIA
    1074825108U,	// VSTMSDB
    806356884U,	// VSTMSDB_UPD
    1074825115U,	// VSTMSIA
    806356891U,	// VSTMSIA_UPD
    579241890U,	// VSTRD
    573704098U,	// VSTRS
    543295399U,	// VSUBD
    558892972U,	// VSUBHNv2i32
    559941548U,	// VSUBHNv4i16
    560990124U,	// VSUBHNv8i8
    552601523U,	// VSUBLsv2i64
    553650099U,	// VSUBLsv4i32
    554698675U,	// VSUBLsv8i16
    555747251U,	// VSUBLuv2i64
    556795827U,	// VSUBLuv4i32
    557844403U,	// VSUBLuv8i16
    544343975U,	// VSUBS
    552601529U,	// VSUBWsv2i64
    553650105U,	// VSUBWsv4i32
    554698681U,	// VSUBWsv8i16
    555747257U,	// VSUBWuv2i64
    556795833U,	// VSUBWuv4i32
    557844409U,	// VSUBWuv8i16
    544343975U,	// VSUBfd
    544343975U,	// VSUBfq
    562038695U,	// VSUBv16i8
    558892967U,	// VSUBv1i64
    559941543U,	// VSUBv2i32
    558892967U,	// VSUBv2i64
    560990119U,	// VSUBv4i16
    559941543U,	// VSUBv4i32
    560990119U,	// VSUBv8i16
    562038695U,	// VSUBv8i8
    806389695U,	// VSWPd
    806389695U,	// VSWPq
    563611588U,	// VTBL1
    966264772U,	// VTBL2
    0U,	// VTBL2Pseudo
    697829316U,	// VTBL3
    0U,	// VTBL3Pseudo
    1368917956U,	// VTBL4
    0U,	// VTBL4Pseudo
    966264777U,	// VTBX1
    697829321U,	// VTBX2
    0U,	// VTBX2Pseudo
    1368917961U,	// VTBX3
    0U,	// VTBX3Pseudo
    2711095241U,	// VTBX4
    0U,	// VTBX4Pseudo
    589301146U,	// VTOSHD
    590349722U,	// VTOSHS
    860227534U,	// VTOSIRD
    837158862U,	// VTOSIRS
    860226970U,	// VTOSIZD
    837158298U,	// VTOSIZS
    591529370U,	// VTOSLD
    568460698U,	// VTOSLS
    592446874U,	// VTOUHD
    593495450U,	// VTOUHS
    863373262U,	// VTOUIRD
    838207438U,	// VTOUIRS
    863372698U,	// VTOUIZD
    838206874U,	// VTOUIZS
    594675098U,	// VTOULD
    569509274U,	// VTOULS
    975308756U,	// VTRNd16
    976357332U,	// VTRNd32
    965871572U,	// VTRNd8
    975308756U,	// VTRNq16
    976357332U,	// VTRNq32
    965871572U,	// VTRNq8
    563218393U,	// VTSTv16i8
    573704153U,	// VTSTv2i32
    572655577U,	// VTSTv4i16
    573704153U,	// VTSTv4i32
    572655577U,	// VTSTv8i16
    563218393U,	// VTSTv8i8
    595592602U,	// VUHTOD
    596641178U,	// VUHTOS
    866518426U,	// VUITOD
    840304026U,	// VUITOS
    597820826U,	// VULTOD
    571606426U,	// VULTOS
    975308766U,	// VUZPd16
    976357342U,	// VUZPd32
    965871582U,	// VUZPd8
    975308766U,	// VUZPq16
    976357342U,	// VUZPq32
    965871582U,	// VUZPq8
    975308771U,	// VZIPd16
    976357347U,	// VZIPd32
    965871587U,	// VZIPd8
    975308771U,	// VZIPq16
    976357347U,	// VZIPq32
    965871587U,	// VZIPq8
    1210058728U,	// WFE
    1210058732U,	// WFI
    1210058736U,	// YIELD
    269516817U,	// t2ADCSri
    330334225U,	// t2ADCSrr
    1940946961U,	// t2ADCSrs
    269516817U,	// t2ADCri
    330334225U,	// t2ADCrr
    1940946961U,	// t2ADCrs
    598769685U,	// t2ADDSri
    598769685U,	// t2ADDSrr
    1001422869U,	// t2ADDSrs
    330334234U,	// t2ADDrSPi
    537954294U,	// t2ADDrSPi12
    1940946970U,	// t2ADDrSPs
    330334234U,	// t2ADDri
    537954294U,	// t2ADDri12
    330334234U,	// t2ADDrr
    1940946970U,	// t2ADDrs
    867205150U,	// t2ADR
    269516834U,	// t2ANDri
    330334242U,	// t2ANDrr
    1940946978U,	// t2ANDrs
    330336251U,	// t2ASRri
    330336251U,	// t2ASRrr
    136315946U,	// t2B
    537952297U,	// t2BFC
    940605485U,	// t2BFI
    672170029U,	// t2BFI4p
    269516849U,	// t2BICri
    330334257U,	// t2BICrr
    1940946993U,	// t2BICrs
    0U,	// t2BR_JT
    1074823246U,	// t2BXJ
    1135640661U,	// t2Bcc
    1480589403U,	// t2CDP2
    97U,	// t2CLREX
    806387815U,	// t2CLZ
    867205227U,	// t2CMNzri
    867205227U,	// t2CMNzrr
    598769771U,	// t2CMNzrs
    867205231U,	// t2CMPri
    867205231U,	// t2CMPrr
    598769775U,	// t2CMPrs
    136314995U,	// t2CPS1p
    1672577144U,	// t2CPS2p
    1672577144U,	// t2CPS3p
    1074823292U,	// t2DBG
    1744830592U,	// t2DMB
    1744830610U,	// t2DSB
    269516951U,	// t2EORri
    330334359U,	// t2EORrr
    1940947095U,	// t2EORrs
    165U,	// t2ISB
    3355445247U,	// t2IT
    0U,	// t2Int_eh_sjlj_setjmp
    0U,	// t2Int_eh_sjlj_setjmp_nofp
    1135640771U,	// t2LDMDB
    867172547U,	// t2LDMDB_UPD
    1135640777U,	// t2LDMIA
    867172553U,	// t2LDMIA_RET
    867172553U,	// t2LDMIA_UPD
    537952469U,	// t2LDRBT
    940605659U,	// t2LDRB_POST
    940605659U,	// t2LDRB_PRE
    598769883U,	// t2LDRBi12
    537952475U,	// t2LDRBi8
    867205339U,	// t2LDRBpci
    1001423067U,	// t2LDRBs
    940605664U,	// t2LDRD_POST
    940605664U,	// t2LDRD_PRE
    940605664U,	// t2LDRDi8
    806387941U,	// t2LDREX
    806387947U,	// t2LDREXB
    537952498U,	// t2LDREXD
    806387961U,	// t2LDREXH
    537952517U,	// t2LDRHT
    940605696U,	// t2LDRH_POST
    940605696U,	// t2LDRH_PRE
    598769920U,	// t2LDRHi12
    537952512U,	// t2LDRHi8
    867205376U,	// t2LDRHpci
    1001423104U,	// t2LDRHs
    537952529U,	// t2LDRSBT
    940605707U,	// t2LDRSB_POST
    940605707U,	// t2LDRSB_PRE
    598769931U,	// t2LDRSBi12
    537952523U,	// t2LDRSBi8
    867205387U,	// t2LDRSBpci
    1001423115U,	// t2LDRSBs
    537952542U,	// t2LDRSHT
    940605720U,	// t2LDRSH_POST
    940605720U,	// t2LDRSH_PRE
    598769944U,	// t2LDRSHi12
    537952536U,	// t2LDRSHi8
    867205400U,	// t2LDRSHpci
    1001423128U,	// t2LDRSHs
    537952549U,	// t2LDRT
    940605738U,	// t2LDR_POST
    940605738U,	// t2LDR_PRE
    598769962U,	// t2LDRi12
    537952554U,	// t2LDRi8
    867205418U,	// t2LDRpci
    0U,	// t2LDRpci_pic
    1001423146U,	// t2LDRs
    0U,	// t2LEApcrel
    0U,	// t2LEApcrelJT
    330336258U,	// t2LSLri
    330336258U,	// t2LSLrr
    330336262U,	// t2LSRri
    330336262U,	// t2LSRrr
    1487077682U,	// t2MCR2
    1487110461U,	// t2MCRR2
    940605764U,	// t2MLA
    940605768U,	// t2MLS
    1001424891U,	// t2MOVCCasr
    598769996U,	// t2MOVCCi
    537952592U,	// t2MOVCCi16
    0U,	// t2MOVCCi32imm
    1001424898U,	// t2MOVCClsl
    1001424902U,	// t2MOVCClsr
    598769996U,	// t2MOVCCr
    1001424906U,	// t2MOVCCror
    537952597U,	// t2MOVTi16
    0U,	// t2MOVTi16_ga_pcrel
    0U,	// t2MOV_ga_dyn
    0U,	// t2MOV_ga_pcrel
    2075165004U,	// t2MOVi
    806388048U,	// t2MOVi16
    0U,	// t2MOVi16_ga_pcrel
    0U,	// t2MOVi32imm
    2075165004U,	// t2MOVr
    867207182U,	// t2MOVsra_flag
    867207187U,	// t2MOVsrl_flag
    1487077726U,	// t2MRC2
    1487110505U,	// t2MRRC2
    1074823536U,	// t2MRS
    1074823536U,	// t2MRSsys
    806617460U,	// t2MSR
    537952632U,	// t2MUL
    598770044U,	// t2MVNCCi
    2014347644U,	// t2MVNi
    2075165052U,	// t2MVNr
    330334588U,	// t2MVNs
    1270874496U,	// t2NOP
    269518872U,	// t2ORNri
    269518872U,	// t2ORNrr
    1880131608U,	// t2ORNrs
    269517188U,	// t2ORRri
    330334596U,	// t2ORRrr
    1940947332U,	// t2ORRrs
    940605832U,	// t2PKHBT
    940605838U,	// t2PKHTB
    806914076U,	// t2PLDWi12
    806946844U,	// t2PLDWi8
    538544156U,	// t2PLDWs
    806914081U,	// t2PLDi12
    806946849U,	// t2PLDi8
    538544161U,	// t2PLDs
    806914085U,	// t2PLIi12
    806946853U,	// t2PLIi8
    538544165U,	// t2PLIs
    537952676U,	// t2QADD
    537952681U,	// t2QADD16
    537952688U,	// t2QADD8
    537952694U,	// t2QASX
    537952699U,	// t2QDADD
    537952705U,	// t2QDSUB
    537952711U,	// t2QSAX
    537952716U,	// t2QSUB
    537952721U,	// t2QSUB16
    537952728U,	// t2QSUB8
    806388190U,	// t2RBIT
    867205603U,	// t2REV
    867205607U,	// t2REV16
    867205613U,	// t2REVSH
    1074825257U,	// t2RFEDB
    1074825263U,	// t2RFEDBW
    1074825269U,	// t2RFEIA
    1074825269U,	// t2RFEIAW
    330336266U,	// t2RORri
    330336266U,	// t2RORrr
    2014349371U,	// t2RRX
    598770167U,	// t2RSBSri
    940605943U,	// t2RSBSrs
    330334716U,	// t2RSBri
    269517308U,	// t2RSBrr
    1880130044U,	// t2RSBrs
    537952778U,	// t2SADD16
    537952785U,	// t2SADD8
    537952791U,	// t2SASX
    269517346U,	// t2SBCSri
    330334754U,	// t2SBCSrr
    1940947490U,	// t2SBCSrs
    269517346U,	// t2SBCri
    330334754U,	// t2SBCrr
    1940947490U,	// t2SBCrs
    940605990U,	// t2SBFX
    537954367U,	// t2SDIV
    537952811U,	// t2SEL
    1270874679U,	// t2SEV
    537952827U,	// t2SHADD16
    537952835U,	// t2SHADD8
    537952842U,	// t2SHASX
    537952848U,	// t2SHSAX
    537952854U,	// t2SHSUB16
    537952862U,	// t2SHSUB8
    1074823781U,	// t2SMC
    940606057U,	// t2SMLABB
    940606064U,	// t2SMLABT
    940606071U,	// t2SMLAD
    940606077U,	// t2SMLADX
    940606084U,	// t2SMLAL
    940606090U,	// t2SMLALBB
    940606098U,	// t2SMLALBT
    940606106U,	// t2SMLALD
    940606113U,	// t2SMLALDX
    940606121U,	// t2SMLALTB
    940606129U,	// t2SMLALTT
    940606137U,	// t2SMLATB
    940606144U,	// t2SMLATT
    940606151U,	// t2SMLAWB
    940606158U,	// t2SMLAWT
    940606165U,	// t2SMLSD
    940606171U,	// t2SMLSDX
    940606178U,	// t2SMLSLD
    940606185U,	// t2SMLSLDX
    940606193U,	// t2SMMLA
    940606199U,	// t2SMMLAR
    940606206U,	// t2SMMLS
    940606212U,	// t2SMMLSR
    537953035U,	// t2SMMUL
    537953041U,	// t2SMMULR
    537953048U,	// t2SMUAD
    537953054U,	// t2SMUADX
    537953061U,	// t2SMULBB
    537953068U,	// t2SMULBT
    940606259U,	// t2SMULL
    537953081U,	// t2SMULTB
    537953088U,	// t2SMULTT
    537953095U,	// t2SMULWB
    537953102U,	// t2SMULWT
    537953109U,	// t2SMUSD
    537953115U,	// t2SMUSDX
    1086359620U,	// t2SRSDB
    1087408196U,	// t2SRSDBW
    1086359626U,	// t2SRSIA
    1087408202U,	// t2SRSIAW
    940606310U,	// t2SSAT
    537953131U,	// t2SSAT16
    537953138U,	// t2SSAX
    537953143U,	// t2SSUB16
    537953150U,	// t2SSUB8
    1135641502U,	// t2STMDB
    867173278U,	// t2STMDB_UPD
    1135641508U,	// t2STMIA
    867173284U,	// t2STMIA_UPD
    537953200U,	// t2STRBT
    940573622U,	// t2STRB_POST
    940573622U,	// t2STRB_PRE
    598770614U,	// t2STRBi12
    537953206U,	// t2STRBi8
    1001423798U,	// t2STRBs
    940606395U,	// t2STRD_POST
    940606395U,	// t2STRD_PRE
    940606395U,	// t2STRDi8
    537953216U,	// t2STREX
    537953222U,	// t2STREXB
    940606413U,	// t2STREXD
    537953236U,	// t2STREXH
    537953248U,	// t2STRHT
    940573659U,	// t2STRH_POST
    940573659U,	// t2STRH_PRE
    598770651U,	// t2STRHi12
    537953243U,	// t2STRHi8
    1001423835U,	// t2STRHs
    537953254U,	// t2STRT
    940573675U,	// t2STR_POST
    940573675U,	// t2STR_PRE
    598770667U,	// t2STRi12
    537953259U,	// t2STRi8
    1001423851U,	// t2STRs
    598770671U,	// t2SUBSri
    598770671U,	// t2SUBSrr
    1001423855U,	// t2SUBSrs
    330335220U,	// t2SUBrSPi
    537954384U,	// t2SUBrSPi12
    1880130548U,	// t2SUBrSPs
    330335220U,	// t2SUBri
    537954384U,	// t2SUBri12
    330335220U,	// t2SUBrr
    1940947956U,	// t2SUBrs
    537953285U,	// t2SXTAB16rr
    940606469U,	// t2SXTAB16rr_rot
    537953293U,	// t2SXTABrr
    940606477U,	// t2SXTABrr_rot
    537953299U,	// t2SXTAHrr
    940606483U,	// t2SXTAHrr_rot
    806388761U,	// t2SXTB16r
    537953305U,	// t2SXTB16r_rot
    867206176U,	// t2SXTBr
    598770720U,	// t2SXTBr_rot
    867206181U,	// t2SXTHr
    598770725U,	// t2SXTHr_rot
    869926997U,	// t2TBB
    0U,	// t2TBB_JT
    869959769U,	// t2TBH
    0U,	// t2TBH_JT
    867206191U,	// t2TEQri
    867206191U,	// t2TEQrr
    598770735U,	// t2TEQrs
    2141U,	// t2TPsoft
    867206200U,	// t2TSTri
    867206200U,	// t2TSTrr
    598770744U,	// t2TSTrs
    537953340U,	// t2UADD16
    537953347U,	// t2UADD8
    537953353U,	// t2UASX
    940606542U,	// t2UBFX
    537954416U,	// t2UDIV
    537953363U,	// t2UHADD16
    537953371U,	// t2UHADD8
    537953378U,	// t2UHASX
    537953384U,	// t2UHSAX
    537953390U,	// t2UHSUB16
    537953398U,	// t2UHSUB8
    940606589U,	// t2UMAAL
    940606595U,	// t2UMLAL
    940606601U,	// t2UMULL
    537953423U,	// t2UQADD16
    537953431U,	// t2UQADD8
    537953438U,	// t2UQASX
    537953444U,	// t2UQSAX
    537953450U,	// t2UQSUB16
    537953458U,	// t2UQSUB8
    537953465U,	// t2USAD8
    940606655U,	// t2USADA8
    940606662U,	// t2USAT
    537953483U,	// t2USAT16
    537953490U,	// t2USAX
    537953495U,	// t2USUB16
    537953502U,	// t2USUB8
    537953508U,	// t2UXTAB16rr
    940606692U,	// t2UXTAB16rr_rot
    537953516U,	// t2UXTABrr
    940606700U,	// t2UXTABrr_rot
    537953522U,	// t2UXTAHrr
    940606706U,	// t2UXTAHrr_rot
    806388984U,	// t2UXTB16r
    537953528U,	// t2UXTB16r_rot
    867206399U,	// t2UXTBr
    598770943U,	// t2UXTBr_rot
    867206404U,	// t2UXTHr
    598770948U,	// t2UXTHr_rot
    1270876136U,	// t2WFE
    1270876140U,	// t2WFI
    1270876144U,	// t2YIELD
    3554902033U,	// tADC
    537952282U,	// tADDhirr
    3554967578U,	// tADDi3
    3554902042U,	// tADDi8
    200280181U,	// tADDrPCi
    134514805U,	// tADDrSP
    134219893U,	// tADDrSPi
    3554967578U,	// tADDrr
    134940789U,	// tADDspi
    134514805U,	// tADDspr
    0U,	// tADJCALLSTACKDOWN
    0U,	// tADJCALLSTACKUP
    806387742U,	// tADR
    3554902050U,	// tAND
    3554969595U,	// tASRri
    3554904059U,	// tASRrr
    136314918U,	// tB
    3554902065U,	// tBIC
    136317050U,	// tBKPT
    136314938U,	// tBL
    136314942U,	// tBLXi
    1209303107U,	// tBLXi_r9
    136314942U,	// tBLXr
    1209303107U,	// tBLXr_r9
    1209303111U,	// tBLr9
    136317056U,	// tBRIND
    0U,	// tBR_JTr
    136317065U,	// tBX
    2201U,	// tBX_RET
    136314954U,	// tBX_RET_vararg
    136317065U,	// tBXr9
    1074823253U,	// tBcc
    0U,	// tBfar
    134219935U,	// tCBNZ
    134219941U,	// tCBZ
    1480591530U,	// tCDP
    806387819U,	// tCMNz
    806387823U,	// tCMPhir
    806387823U,	// tCMPi8
    806387823U,	// tCMPr
    1677721720U,	// tCPS
    3554902167U,	// tEOR
    0U,	// tInt_eh_sjlj_longjmp
    0U,	// tInt_eh_sjlj_setjmp
    1074823369U,	// tLDMIA
    806355145U,	// tLDMIA_UPD
    537952475U,	// tLDRBi
    537952475U,	// tLDRBr
    537952512U,	// tLDRHi
    537952512U,	// tLDRHr
    537952523U,	// tLDRSB
    537952536U,	// tLDRSH
    537952554U,	// tLDRi
    873464106U,	// tLDRpci
    0U,	// tLDRpci_pic
    537952554U,	// tLDRr
    537952554U,	// tLDRspi
    0U,	// tLEApcrel
    0U,	// tLEApcrelJT
    3554969602U,	// tLSLri
    3554904066U,	// tLSLrr
    3554969606U,	// tLSRri
    3554904070U,	// tLSRrr
    1487079599U,	// tMCR
    1487112372U,	// tMCRR
    537952588U,	// tMOVCCi
    537952588U,	// tMOVCCr
    0U,	// tMOVCCr_pseudo
    134219962U,	// tMOVSr
    134219968U,	// tMOVgpr2gpr
    134219968U,	// tMOVgpr2tgpr
    3559260492U,	// tMOVi8
    134219968U,	// tMOVr
    134219968U,	// tMOVtgpr2gpr
    1487079621U,	// tMRC
    1487112394U,	// tMRRC
    3554902392U,	// tMUL
    3559260540U,	// tMVN
    1210057088U,	// tNOP
    3554902404U,	// tORR
    0U,	// tPICADD
    1209764048U,	// tPOP
    1209764048U,	// tPOP_RET
    1209764052U,	// tPUSH
    806388195U,	// tREV
    806388199U,	// tREV16
    806388205U,	// tREVSH
    3554904074U,	// tROR
    3559227900U,	// tRSB
    537952554U,	// tRestore
    3554902562U,	// tSBC
    2265U,	// tSETENDBE
    2275U,	// tSETENDLE
    1210057271U,	// tSEV
    1074824100U,	// tSTMIA
    806355876U,	// tSTMIA_UPD
    537953206U,	// tSTRBi
    537953206U,	// tSTRBr
    537953243U,	// tSTRHi
    537953243U,	// tSTRHr
    537953259U,	// tSTRi
    537953259U,	// tSTRr
    537953259U,	// tSTRspi
    3554968564U,	// tSUBi3
    3554903028U,	// tSUBi8
    3554968564U,	// tSUBrr
    134940909U,	// tSUBspi
    1074824184U,	// tSVC
    806388768U,	// tSXTB
    806388773U,	// tSXTH
    537953259U,	// tSpill
    2141U,	// tTPsoft
    1075U,	// tTRAP
    806388792U,	// tTST
    806388991U,	// tUXTB
    806388996U,	// tUXTH
    1210058728U,	// tWFE
    1210058732U,	// tWFI
    1210058736U,	// tYIELD
    0U
  };

  const char *AsmStrs = 
    "DBG_VALUE\000adcs\t\000adc\000adds\000add\000adr\000and\000b\t\000bfc\000"
    "bfi\000bic\000bkpt\000bl\t\000blx\t\000blx\000bl\000bx\t\000bxj\000bx\000"
    "b\000cdp\000cdp2\t\000clrex\000clz\000cmn\000cmp\000cps\t\000cps\000dbg"
    "\000dmb\t\000mcr\tp15, 0, \000dsb\t\000eor\000vmov\000vmrs\000isb\000ld"
    "c2l\000ldc2\000ldcl\000ldc\000ldmda\000ldmdb\000ldmia\000ldmib\000ldrbt"
    "\000ldrb\000ldrd\000ldrex\000ldrexb\000ldrexd\000ldrexh\000ldrh\000ldrh"
    "t\000ldrsb\000ldrsbt\000ldrsh\000ldrsht\000ldrt\000ldr\000mcr\000mcr2\t"
    "\000mcrr\000mcrr2\t\000mla\000mls\000mov\000movw\000movt\000mrc\000mrc2"
    "\t\000mrrc\000mrrc2\t\000mrs\000msr\000mul\000mvn\000nop\000orr\000pkhb"
    "t\000pkhtb\000pldw\t\000pld\t\000pli\t\000qadd\000qadd16\000qadd8\000qa"
    "sx\000qdadd\000qdsub\000qsax\000qsub\000qsub16\000qsub8\000rbit\000rev\000"
    "rev16\000revsh\000rfe\000rsbs\000rsb\000rscs\t\000rsc\000sadd16\000sadd"
    "8\000sasx\000sbcs\t\000sbc\000sbfx\000sel\000setend\t\000sev\000shadd16"
    "\000shadd8\000shasx\000shsax\000shsub16\000shsub8\000smc\000smlabb\000s"
    "mlabt\000smlad\000smladx\000smlal\000smlalbb\000smlalbt\000smlald\000sm"
    "laldx\000smlaltb\000smlaltt\000smlatb\000smlatt\000smlawb\000smlawt\000"
    "smlsd\000smlsdx\000smlsld\000smlsldx\000smmla\000smmlar\000smmls\000smm"
    "lsr\000smmul\000smmulr\000smuad\000smuadx\000smulbb\000smulbt\000smull\000"
    "smultb\000smultt\000smulwb\000smulwt\000smusd\000smusdx\000srs\000ssat\000"
    "ssat16\000ssax\000ssub16\000ssub8\000stc2l\000stc2\000stcl\000stc\000st"
    "mda\000stmdb\000stmia\000stmib\000strbt\000strb\000strd\000strex\000str"
    "exb\000strexd\000strexh\000strh\000strht\000strt\000str\000subs\000sub\000"
    "svc\000swp\000swpb\000sxtab16\000sxtab\000sxtah\000sxtb16\000sxtb\000sx"
    "th\000b.w\t\000teq\000trap\000tst\000uadd16\000uadd8\000uasx\000ubfx\000"
    "uhadd16\000uhadd8\000uhasx\000uhsax\000uhsub16\000uhsub8\000umaal\000um"
    "lal\000umull\000uqadd16\000uqadd8\000uqasx\000uqsax\000uqsub16\000uqsub"
    "8\000usad8\000usada8\000usat\000usat16\000usax\000usub16\000usub8\000ux"
    "tab16\000uxtab\000uxtah\000uxtb16\000uxtb\000uxth\000vabal\000vaba\000v"
    "abdl\000vabd\000vabs\000vacge\000vacgt\000vadd\000vaddhn\000vaddl\000va"
    "ddw\000vand\000vbic\000vbif\000vbit\000vbsl\000vceq\000vcge\000vcgt\000"
    "vcle\000vcls\000vclt\000vclz\000vcmp\000vcmpe\000vcnt\000vcvtb\000vcvt\000"
    "vcvtt\000vdiv\000vdup\000veor\000vext\000vhadd\000vhsub\000vld1\000vld2"
    "\000vld3\000vld4\000vldmdb\000vldmia\000vldr\000vmax\000vmin\000vmla\000"
    "vmlal\000vmls\000vmlsl\000vmovl\000vmovn\000vmsr\000vmul\000vmull\000vm"
    "vn\000vneg\000vnmla\000vnmls\000vnmul\000vorn\000vorr\000vpadal\000vpad"
    "dl\000vpadd\000vpmax\000vpmin\000vqabs\000vqadd\000vqdmlal\000vqdmlsl\000"
    "vqdmulh\000vqdmull\000vqmovun\000vqmovn\000vqneg\000vqrdmulh\000vqrshl\000"
    "vqrshrn\000vqrshrun\000vqshl\000vqshlu\000vqshrn\000vqshrun\000vqsub\000"
    "vraddhn\000vrecpe\000vrecps\000vrev16\000vrev32\000vrev64\000vrhadd\000"
    "vrshl\000vrshrn\000vrshr\000vrsqrte\000vrsqrts\000vrsra\000vrsubhn\000v"
    "shll\000vshl\000vshrn\000vshr\000vsli\000vsqrt\000vsra\000vsri\000vst1\000"
    "vst2\000vst3\000vst4\000vstmdb\000vstmia\000vstr\000vsub\000vsubhn\000v"
    "subl\000vsubw\000vswp\000vtbl\000vtbx\000vcvtr\000vtrn\000vtst\000vuzp\000"
    "vzip\000wfe\000wfi\000yield\000addw\000asr\000it\000lsl\000lsr\000ror\000"
    "asrs\000lsrs\000orn\000pldw\000pld\000pli\000rfeab\000rfedb\000rfeia\000"
    "rrx\000sdiv\000srsdb\000srsia\000subw\000tbb\000tbh\000bl\t__aeabi_read"
    "_tp\000udiv\000add\t\000bkpt\t\000mov\tpc, \000mov\tlr, pc\n\tbx\t\000b"
    "x\tlr\000cbnz\t\000cbz\t\000cdp\t\000mcr\t\000mcrr\t\000movs\t\000mov\t"
    "\000mrc\t\000mrrc\t\000pop\000push\000setend\tbe\000setend\tle\000sub\t"
    "\000";

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 5 bits for 27 unique commands.
  switch ((Bits >> 27) & 31) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, CLREX, ISB, TRAP, t2CLREX, t2ISB, t2TPsoft, tBX_RET, tSETEN...
    return;
    break;
  case 1:
    // ADCSSri, ADCSSrr, ADCSSrs, B, BL, BLX, BLXr9, BLr9, BX, CPS1p, DMB_MCR...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADCri, ADCrr, ADDri, ADDrr, ANDri, ANDrr, BICri, BICrr, EORri, EORrr, ...
    printSBitModifierOperand(MI, 5, O); 
    printPredicateOperand(MI, 3, O); 
    break;
  case 3:
    // ADCrs, ADDrs, ANDrs, BICrs, EORrs, ORRrs, RSBrs, RSCrs, SBCrs, SUBrs
    printSBitModifierOperand(MI, 7, O); 
    printPredicateOperand(MI, 5, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printSORegOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // ADDSri, ADDSrr, BFC, LDRBi12, LDREXD, LDRcp, LDRi12, MOVCCi, MOVCCi16,...
    printPredicateOperand(MI, 3, O); 
    break;
  case 5:
    // ADDSrs, BFI4p, LDC2L_OFFSET, LDC2L_POST, LDC2L_PRE, LDC2_OFFSET, LDC2_...
    printPredicateOperand(MI, 5, O); 
    break;
  case 6:
    // ADR, CLZ, CMNzri, CMNzrr, CMPri, CMPrr, FCONSTD, FCONSTS, LDMDA_UPD, L...
    printPredicateOperand(MI, 2, O); 
    break;
  case 7:
    // BFI, CMNzrs, CMPrs, LDC2L_OPTION, LDC2_OPTION, LDCL_OPTION, LDC_OPTION...
    printPredicateOperand(MI, 4, O); 
    break;
  case 8:
    // BKPT, BLX_pred, BLXr9_pred, BL_pred, BLr9_pred, BXJ, Bcc, DBG, LDMDA, ...
    printPredicateOperand(MI, 1, O); 
    break;
  case 9:
    // BX_RET, FMSTAT, MOVPCLR, NOP, SEV, WFE, WFI, YIELD, t2NOP, t2SEV, t2WF...
    printPredicateOperand(MI, 0, O); 
    break;
  case 10:
    // CDP, MCR, MRC, STRD_POST, STRD_PRE, VLD1DUPq16_UPD, VLD1DUPq32_UPD, VL...
    printPredicateOperand(MI, 6, O); 
    break;
  case 11:
    // CDP2, MCR2, MCRR2, MRC2, MRRC2, t2CDP2, t2MCR2, t2MCRR2, t2MRC2, t2MRR...
    printPImmediate(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 12:
    // CPS2p, CPS3p, t2CPS2p, t2CPS3p, tCPS
    printCPSIMod(MI, 0, O); 
    break;
  case 13:
    // DMB, DSB, t2DMB, t2DSB
    printMemBOption(MI, 0, O); 
    return;
    break;
  case 14:
    // MLA, MOVs, MVNs, SMLAL, SMULL, UMLAL, UMULL, t2ADCSrs, t2ADCrs, t2ADDr...
    printSBitModifierOperand(MI, 6, O); 
    printPredicateOperand(MI, 4, O); 
    break;
  case 15:
    // MOVi, MOVr, MOVr_TC, MVNi, MVNr, t2MOVi, t2MOVr, t2MVNi, t2MVNr, t2RRX
    printSBitModifierOperand(MI, 4, O); 
    printPredicateOperand(MI, 2, O); 
    break;
  case 16:
    // PLDWi12, PLDi12, PLIi12
    printAddrModeImm12Operand(MI, 0, O); 
    return;
    break;
  case 17:
    // PLDWrs, PLDrs, PLIrs
    printAddrMode2Operand(MI, 0, O); 
    return;
    break;
  case 18:
    // RFE, RFEW, SRS, SRSW
    printLdStmModeOperand(MI, 0, O); 
    break;
  case 19:
    // SETEND
    printSetendOperand(MI, 0, O); 
    return;
    break;
  case 20:
    // VLD1LNd16_UPD, VLD1LNd32_UPD, VLD1LNd8_UPD, VLD1d16T_UPD, VLD1d32T_UPD...
    printPredicateOperand(MI, 7, O); 
    break;
  case 21:
    // VLD1d16Q_UPD, VLD1d32Q_UPD, VLD1d64Q_UPD, VLD1d8Q_UPD, VLD2q16_UPD, VL...
    printPredicateOperand(MI, 8, O); 
    break;
  case 22:
    // VLD2LNd16_UPD, VLD2LNd32_UPD, VLD2LNd8_UPD, VLD2LNq16_UPD, VLD2LNq32_U...
    printPredicateOperand(MI, 9, O); 
    break;
  case 23:
    // VLD3LNd16_UPD, VLD3LNd32_UPD, VLD3LNd8_UPD, VLD3LNq16_UPD, VLD3LNq32_U...
    printPredicateOperand(MI, 11, O); 
    break;
  case 24:
    // VLD4LNd16_UPD, VLD4LNd32_UPD, VLD4LNd8_UPD, VLD4LNq16_UPD, VLD4LNq32_U...
    printPredicateOperand(MI, 13, O); 
    break;
  case 25:
    // t2IT
    printThumbITMask(MI, 1, O); 
    O << "\t"; 
    printMandatoryPredicateOperand(MI, 0, O); 
    return;
    break;
  case 26:
    // tADC, tADDi3, tADDi8, tADDrr, tAND, tASRri, tASRrr, tBIC, tEOR, tLSLri...
    printSBitModifierOperand(MI, 1, O); 
    break;
  }


  // Fragment 1 encoded into 7 bits for 67 unique commands.
  switch ((Bits >> 20) & 127) {
  default:   // unreachable.
  case 0:
    // ADCSSri, ADCSSrr, ADCSSrs, RSCSri, RSCSrs, SBCSSri, SBCSSrr, SBCSSrs, ...
    O << ", "; 
    break;
  case 1:
    // ADCri, ADCrr, ADDSri, ADDSrr, ADDSrs, ADDri, ADDrr, ADR, ANDri, ANDrr,...
    O << "\t"; 
    break;
  case 2:
    // B, BL, BLX, BLXr9, BLr9, BX, CPS1p, NOP, SEV, WFE, WFI, YIELD, t2B, t2...
    return;
    break;
  case 3:
    // BX_RET
    O << "\tlr"; 
    return;
    break;
  case 4:
    // CDP2, t2CDP2, tCDP
    printCImmediate(MI, 2, O); 
    O << ", "; 
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case 5:
    // DMB_MCR
    O << ", c7, c10, 5"; 
    return;
    break;
  case 6:
    // FCONSTD, VABSD, VADDD, VCMPD, VCMPED, VCMPEZD, VCMPZD, VDIVD, VMLAD, V...
    O << ".f64\t"; 
    printOperand(MI, 0, O); 
    break;
  case 7:
    // FCONSTS, VABDfd, VABDfq, VABSS, VABSfd, VABSfq, VACGEd, VACGEq, VACGTd...
    O << ".f32\t"; 
    printOperand(MI, 0, O); 
    break;
  case 8:
    // FMSTAT
    O << "\tapsr_nzcv, fpscr"; 
    return;
    break;
  case 9:
    // LDC2L_OFFSET, LDC2L_OPTION, LDC2L_POST, LDC2L_PRE, LDC2_OFFSET, LDC2_O...
    O << "\tp"; 
    printNoHashImmediate(MI, 0, O); 
    O << ", cr"; 
    printNoHashImmediate(MI, 1, O); 
    break;
  case 10:
    // MCR2, MCRR2, MRC2, MRRC2, t2MCR2, t2MCRR2, t2MRC2, t2MRRC2, tMCR, tMCR...
    printOperand(MI, 2, O); 
    O << ", "; 
    break;
  case 11:
    // MOVPCLR
    O << "\tpc, lr"; 
    return;
    break;
  case 12:
    // SRS, t2SRSDB, t2SRSIA
    O << "\tsp, "; 
    break;
  case 13:
    // SRSW, t2SRSDBW, t2SRSIAW
    O << "\tsp!, "; 
    break;
  case 14:
    // TAILJMPd, TAILJMPdND, TAILJMPdNDt, TAILJMPdt, TAILJMPr, TAILJMPrND
    O << "  @ TAILCALL"; 
    return;
    break;
  case 15:
    // VABALsv2i64, VABAsv2i32, VABAsv4i32, VABDLsv2i64, VABDsv2i32, VABDsv4i...
    O << ".s32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 16:
    // VABALsv4i32, VABAsv4i16, VABAsv8i16, VABDLsv4i32, VABDsv4i16, VABDsv8i...
    O << ".s16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 17:
    // VABALsv8i16, VABAsv16i8, VABAsv8i8, VABDLsv8i16, VABDsv16i8, VABDsv8i8...
    O << ".s8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 18:
    // VABALuv2i64, VABAuv2i32, VABAuv4i32, VABDLuv2i64, VABDuv2i32, VABDuv4i...
    O << ".u32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 19:
    // VABALuv4i32, VABAuv4i16, VABAuv8i16, VABDLuv4i32, VABDuv4i16, VABDuv8i...
    O << ".u16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 20:
    // VABALuv8i16, VABAuv16i8, VABAuv8i8, VABDLuv8i16, VABDuv16i8, VABDuv8i8...
    O << ".u8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 21:
    // VADDHNv2i32, VADDv1i64, VADDv2i64, VMOVNv2i32, VMOVv1i64, VMOVv2i64, V...
    O << ".i64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 22:
    // VADDHNv4i16, VADDv2i32, VADDv4i32, VBICiv2i32, VBICiv4i32, VCEQv2i32, ...
    O << ".i32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 23:
    // VADDHNv8i8, VADDv4i16, VADDv8i16, VBICiv4i16, VBICiv8i16, VCEQv4i16, V...
    O << ".i16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 24:
    // VADDv16i8, VADDv8i8, VCEQv16i8, VCEQv8i8, VCEQzv16i8, VCEQzv8i8, VCLZv...
    O << ".i8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 25:
    // VCNTd, VCNTq, VDUP8d, VDUP8q, VDUPLN8d, VDUPLN8q, VEXTd8, VEXTq8, VREV...
    O << ".8\t"; 
    printOperand(MI, 0, O); 
    break;
  case 26:
    // VCVTBHS, VCVTTHS, VCVTf2h
    O << ".f16.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 27:
    // VCVTBSH, VCVTTSH, VCVTh2f
    O << ".f32.f16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 28:
    // VCVTDS
    O << ".f64.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 29:
    // VCVTSD
    O << ".f32.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 30:
    // VCVTf2sd, VCVTf2sq, VCVTf2xsd, VCVTf2xsq, VTOSIRS, VTOSIZS, VTOSLS
    O << ".s32.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 31:
    // VCVTf2ud, VCVTf2uq, VCVTf2xud, VCVTf2xuq, VTOUIRS, VTOUIZS, VTOULS
    O << ".u32.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 32:
    // VCVTs2fd, VCVTs2fq, VCVTxs2fd, VCVTxs2fq, VSITOS, VSLTOS
    O << ".f32.s32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 33:
    // VCVTu2fd, VCVTu2fq, VCVTxu2fd, VCVTxu2fq, VUITOS, VULTOS
    O << ".f32.u32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 34:
    // VDUP16d, VDUP16q, VDUPLN16d, VDUPLN16q, VEXTd16, VEXTq16, VREV32d16, V...
    O << ".16\t"; 
    printOperand(MI, 0, O); 
    break;
  case 35:
    // VDUP32d, VDUP32q, VDUPLN32d, VDUPLN32q, VDUPLNfd, VDUPLNfq, VDUPfd, VD...
    O << ".32\t"; 
    printOperand(MI, 0, O); 
    break;
  case 36:
    // VLD1DUPd16, VLD1DUPd16_UPD, VLD1DUPq16, VLD1DUPq16_UPD, VLD1LNd16, VLD...
    O << ".16\t{"; 
    break;
  case 37:
    // VLD1DUPd32, VLD1DUPd32_UPD, VLD1DUPq32, VLD1DUPq32_UPD, VLD1LNd32, VLD...
    O << ".32\t{"; 
    break;
  case 38:
    // VLD1DUPd8, VLD1DUPd8_UPD, VLD1DUPq8, VLD1DUPq8_UPD, VLD1LNd8, VLD1LNd8...
    O << ".8\t{"; 
    break;
  case 39:
    // VLD1d64, VLD1d64Q, VLD1d64Q_UPD, VLD1d64T, VLD1d64T_UPD, VLD1d64_UPD, ...
    O << ".64\t{"; 
    break;
  case 40:
    // VLDRD, VSLIv1i64, VSLIv2i64, VSRIv1i64, VSRIv2i64, VSTRD
    O << ".64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 41:
    // VMSR
    O << "\tfpscr, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 42:
    // VMSR_FPEXC
    O << "\tfpexc, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 43:
    // VMSR_FPSID
    O << "\tfpsid, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 44:
    // VMULLp, VMULpd, VMULpq
    O << ".p8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 45:
    // VQADDsv1i64, VQADDsv2i64, VQMOVNsuv2i32, VQMOVNsv2i32, VQRSHLsv1i64, V...
    O << ".s64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 46:
    // VQADDuv1i64, VQADDuv2i64, VQMOVNuv2i32, VQRSHLuv1i64, VQRSHLuv2i64, VQ...
    O << ".u64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 47:
    // VSHTOD
    O << ".f64.s16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 48:
    // VSHTOS
    O << ".f32.s16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 49:
    // VSITOD, VSLTOD
    O << ".f64.s32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 50:
    // VTOSHD
    O << ".s16.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 51:
    // VTOSHS
    O << ".s16.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 52:
    // VTOSIRD, VTOSIZD, VTOSLD
    O << ".s32.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 53:
    // VTOUHD
    O << ".u16.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 54:
    // VTOUHS
    O << ".u16.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 55:
    // VTOUIRD, VTOUIZD, VTOULD
    O << ".u32.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 56:
    // VUHTOD
    O << ".f64.u16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 57:
    // VUHTOS
    O << ".f32.u16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 58:
    // VUITOD, VULTOD
    O << ".f64.u32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 59:
    // t2ADCSrr, t2ADCSrs, t2ADCrr, t2ADCrs, t2ADDSri, t2ADDSrr, t2ADDSrs, t2...
    O << ".w\t"; 
    break;
  case 60:
    // t2NOP, t2SEV, t2WFE, t2WFI, t2YIELD
    O << ".w"; 
    return;
    break;
  case 61:
    // t2TBB, t2TBH
    O << "\t["; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 62:
    // tADC, tADDi3, tADDi8, tADDrr, tAND, tASRri, tASRrr, tBIC, tEOR, tLSLri...
    printPredicateOperand(MI, 4, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 63:
    // tADDrPCi
    O << ", pc, "; 
    printThumbS4ImmOperand(MI, 1, O); 
    return;
    break;
  case 64:
    // tCPS
    O << ' '; 
    printCPSIFlag(MI, 1, O); 
    return;
    break;
  case 65:
    // tLDRpci
    O << ".n\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 66:
    // tMOVi8, tMVN, tRSB
    printPredicateOperand(MI, 3, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  }


  // Fragment 2 encoded into 5 bits for 24 unique commands.
  switch ((Bits >> 15) & 31) {
  default:   // unreachable.
  case 0:
    // ADCSSri, ADCSSrr, ADCSSrs, LDMDA_UPD, LDMDB_UPD, LDMIA_RET, LDMIA_UPD,...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // ADCri, ADCrr, ADDSri, ADDSrr, ADDSrs, ADDri, ADDrr, ADR, ANDri, ANDrr,...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // CDP, MCR, MCRR, MRC, MRRC
    printPImmediate(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 3:
    // CPS2p, CPS3p, t2CPS2p, t2CPS3p
    printCPSIFlag(MI, 1, O); 
    break;
  case 4:
    // FCONSTD, FCONSTS, LDC2L_OFFSET, LDC2L_PRE, LDC2_OFFSET, LDC2_PRE, LDCL...
    O << ", "; 
    break;
  case 5:
    // LDC2L_OPTION, LDC2L_POST, LDC2_OPTION, LDC2_POST, LDCL_OPTION, LDCL_PO...
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << "], "; 
    break;
  case 6:
    // MCR2, MRC2, t2MCR2, t2MRC2, tMCR, tMRC
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case 7:
    // MCRR2, MRRC2, t2MCRR2, t2MRRC2, tADC, tADDi8, tAND, tASRrr, tBIC, tEOR...
    printOperand(MI, 3, O); 
    break;
  case 8:
    // MSR, MSRi, t2MSR
    printMSRMaskOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 9:
    // VABALsv2i64, VABALsv4i32, VABALsv8i16, VABALuv2i64, VABALuv4i32, VABAL...
    printOperand(MI, 2, O); 
    break;
  case 10:
    // VBICiv2i32, VBICiv4i16, VBICiv4i32, VBICiv8i16, VMOVv16i8, VMOVv1i64, ...
    printNEONModImmOperand(MI, 1, O); 
    return;
    break;
  case 11:
    // VCMPEZD, VCMPEZS, VCMPZD, VCMPZS, tRSB
    O << ", #0"; 
    return;
    break;
  case 12:
    // VCVTf2sd, VCVTf2sq, VCVTf2ud, VCVTf2uq, VCVTs2fd, VCVTs2fq, VCVTu2fd, ...
    return;
    break;
  case 13:
    // VLDRD, VSTRD
    printAddrMode5Operand(MI, 1, O); 
    return;
    break;
  case 14:
    // VSETLNi16, VSETLNi32, VSETLNi8
    O << '['; 
    printNoHashImmediate(MI, 3, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 15:
    // VST1LNd16_UPD, VST1LNd32_UPD, VST1LNd8_UPD, VST1d16Q_UPD, VST1d16T_UPD...
    printOperand(MI, 4, O); 
    break;
  case 16:
    // VTBL1, VTBL2, VTBL3, VTBL4, VTBX1, VTBX2, VTBX3, VTBX4
    O << ", {"; 
    break;
  case 17:
    // t2PLDWi12, t2PLDi12, t2PLIi12
    printAddrModeImm12Operand(MI, 0, O); 
    return;
    break;
  case 18:
    // t2PLDWi8, t2PLDi8, t2PLIi8
    printT2AddrModeImm8Operand(MI, 0, O); 
    return;
    break;
  case 19:
    // t2PLDWs, t2PLDs, t2PLIs
    printT2AddrModeSoRegOperand(MI, 0, O); 
    return;
    break;
  case 20:
    // t2TBB
    O << ']'; 
    return;
    break;
  case 21:
    // t2TBH
    O << ", lsl #1]"; 
    return;
    break;
  case 22:
    // tADDspi, tSUBspi
    printThumbS4ImmOperand(MI, 2, O); 
    return;
    break;
  case 23:
    // tPOP, tPOP_RET, tPUSH
    printRegisterList(MI, 2, O); 
    return;
    break;
  }

  switch (MI->getOpcode()) {
  case ARM::ADCSSri:
  case ARM::ADCSSrr:
  case ARM::ADCSSrs:
  case ARM::BFC:
  case ARM::CLZ:
  case ARM::CMNzri:
  case ARM::CMNzrr:
  case ARM::CMNzrs:
  case ARM::CMPri:
  case ARM::CMPrr:
  case ARM::CMPrs:
  case ARM::CPS3p:
  case ARM::LDMDA:
  case ARM::LDMDB:
  case ARM::LDMIA:
  case ARM::LDMIB:
  case ARM::LDRBi12:
  case ARM::LDRBrs:
  case ARM::LDRD:
  case ARM::LDRH:
  case ARM::LDRSB:
  case ARM::LDRSH:
  case ARM::LDRcp:
  case ARM::LDRi12:
  case ARM::LDRrs:
  case ARM::MCRR2:
  case ARM::MOVCCi:
  case ARM::MOVCCi16:
  case ARM::MOVCCr:
  case ARM::MOVCCs:
  case ARM::MOVTi16:
  case ARM::MOVi:
  case ARM::MOVi16:
  case ARM::MOVr:
  case ARM::MOVr_TC:
  case ARM::MOVs:
  case ARM::MRRC2:
  case ARM::MVNCCi:
  case ARM::MVNi:
  case ARM::MVNr:
  case ARM::MVNs:
  case ARM::RBIT:
  case ARM::REV:
  case ARM::REV16:
  case ARM::REVSH:
  case ARM::RSCSri:
  case ARM::RSCSrs:
  case ARM::SBCSSri:
  case ARM::SBCSSrr:
  case ARM::SBCSSrs:
  case ARM::STMDA:
  case ARM::STMDB:
  case ARM::STMIA:
  case ARM::STMIB:
  case ARM::STRBi12:
  case ARM::STRBrs:
  case ARM::STRD:
  case ARM::STRH:
  case ARM::STRi12:
  case ARM::STRrs:
  case ARM::SXTB16r:
  case ARM::SXTBr:
  case ARM::SXTHr:
  case ARM::TEQri:
  case ARM::TEQrr:
  case ARM::TEQrs:
  case ARM::TSTri:
  case ARM::TSTrr:
  case ARM::TSTrs:
  case ARM::UXTB16r:
  case ARM::UXTBr:
  case ARM::UXTHr:
  case ARM::VABALsv2i64:
  case ARM::VABALsv4i32:
  case ARM::VABALsv8i16:
  case ARM::VABALuv2i64:
  case ARM::VABALuv4i32:
  case ARM::VABALuv8i16:
  case ARM::VABAsv16i8:
  case ARM::VABAsv2i32:
  case ARM::VABAsv4i16:
  case ARM::VABAsv4i32:
  case ARM::VABAsv8i16:
  case ARM::VABAsv8i8:
  case ARM::VABAuv16i8:
  case ARM::VABAuv2i32:
  case ARM::VABAuv4i16:
  case ARM::VABAuv4i32:
  case ARM::VABAuv8i16:
  case ARM::VABAuv8i8:
  case ARM::VABDLsv2i64:
  case ARM::VABDLsv4i32:
  case ARM::VABDLsv8i16:
  case ARM::VABDLuv2i64:
  case ARM::VABDLuv4i32:
  case ARM::VABDLuv8i16:
  case ARM::VABDsv16i8:
  case ARM::VABDsv2i32:
  case ARM::VABDsv4i16:
  case ARM::VABDsv4i32:
  case ARM::VABDsv8i16:
  case ARM::VABDsv8i8:
  case ARM::VABDuv16i8:
  case ARM::VABDuv2i32:
  case ARM::VABDuv4i16:
  case ARM::VABDuv4i32:
  case ARM::VABDuv8i16:
  case ARM::VABDuv8i8:
  case ARM::VADDHNv2i32:
  case ARM::VADDHNv4i16:
  case ARM::VADDHNv8i8:
  case ARM::VADDLsv2i64:
  case ARM::VADDLsv4i32:
  case ARM::VADDLsv8i16:
  case ARM::VADDLuv2i64:
  case ARM::VADDLuv4i32:
  case ARM::VADDLuv8i16:
  case ARM::VADDWsv2i64:
  case ARM::VADDWsv4i32:
  case ARM::VADDWsv8i16:
  case ARM::VADDWuv2i64:
  case ARM::VADDWuv4i32:
  case ARM::VADDWuv8i16:
  case ARM::VADDv16i8:
  case ARM::VADDv1i64:
  case ARM::VADDv2i32:
  case ARM::VADDv2i64:
  case ARM::VADDv4i16:
  case ARM::VADDv4i32:
  case ARM::VADDv8i16:
  case ARM::VADDv8i8:
  case ARM::VCEQv16i8:
  case ARM::VCEQv2i32:
  case ARM::VCEQv4i16:
  case ARM::VCEQv4i32:
  case ARM::VCEQv8i16:
  case ARM::VCEQv8i8:
  case ARM::VCGEsv16i8:
  case ARM::VCGEsv2i32:
  case ARM::VCGEsv4i16:
  case ARM::VCGEsv4i32:
  case ARM::VCGEsv8i16:
  case ARM::VCGEsv8i8:
  case ARM::VCGEuv16i8:
  case ARM::VCGEuv2i32:
  case ARM::VCGEuv4i16:
  case ARM::VCGEuv4i32:
  case ARM::VCGEuv8i16:
  case ARM::VCGEuv8i8:
  case ARM::VCGTsv16i8:
  case ARM::VCGTsv2i32:
  case ARM::VCGTsv4i16:
  case ARM::VCGTsv4i32:
  case ARM::VCGTsv8i16:
  case ARM::VCGTsv8i8:
  case ARM::VCGTuv16i8:
  case ARM::VCGTuv2i32:
  case ARM::VCGTuv4i16:
  case ARM::VCGTuv4i32:
  case ARM::VCGTuv8i16:
  case ARM::VCGTuv8i8:
  case ARM::VHADDsv16i8:
  case ARM::VHADDsv2i32:
  case ARM::VHADDsv4i16:
  case ARM::VHADDsv4i32:
  case ARM::VHADDsv8i16:
  case ARM::VHADDsv8i8:
  case ARM::VHADDuv16i8:
  case ARM::VHADDuv2i32:
  case ARM::VHADDuv4i16:
  case ARM::VHADDuv4i32:
  case ARM::VHADDuv8i16:
  case ARM::VHADDuv8i8:
  case ARM::VHSUBsv16i8:
  case ARM::VHSUBsv2i32:
  case ARM::VHSUBsv4i16:
  case ARM::VHSUBsv4i32:
  case ARM::VHSUBsv8i16:
  case ARM::VHSUBsv8i8:
  case ARM::VHSUBuv16i8:
  case ARM::VHSUBuv2i32:
  case ARM::VHSUBuv4i16:
  case ARM::VHSUBuv4i32:
  case ARM::VHSUBuv8i16:
  case ARM::VHSUBuv8i8:
  case ARM::VLDMDDB:
  case ARM::VLDMDIA:
  case ARM::VLDMSDB:
  case ARM::VLDMSIA:
  case ARM::VMAXsv16i8:
  case ARM::VMAXsv2i32:
  case ARM::VMAXsv4i16:
  case ARM::VMAXsv4i32:
  case ARM::VMAXsv8i16:
  case ARM::VMAXsv8i8:
  case ARM::VMAXuv16i8:
  case ARM::VMAXuv2i32:
  case ARM::VMAXuv4i16:
  case ARM::VMAXuv4i32:
  case ARM::VMAXuv8i16:
  case ARM::VMAXuv8i8:
  case ARM::VMINsv16i8:
  case ARM::VMINsv2i32:
  case ARM::VMINsv4i16:
  case ARM::VMINsv4i32:
  case ARM::VMINsv8i16:
  case ARM::VMINsv8i8:
  case ARM::VMINuv16i8:
  case ARM::VMINuv2i32:
  case ARM::VMINuv4i16:
  case ARM::VMINuv4i32:
  case ARM::VMINuv8i16:
  case ARM::VMINuv8i8:
  case ARM::VMLALsv2i64:
  case ARM::VMLALsv4i32:
  case ARM::VMLALsv8i16:
  case ARM::VMLALuv2i64:
  case ARM::VMLALuv4i32:
  case ARM::VMLALuv8i16:
  case ARM::VMLAv16i8:
  case ARM::VMLAv2i32:
  case ARM::VMLAv4i16:
  case ARM::VMLAv4i32:
  case ARM::VMLAv8i16:
  case ARM::VMLAv8i8:
  case ARM::VMLSLsv2i64:
  case ARM::VMLSLsv4i32:
  case ARM::VMLSLsv8i16:
  case ARM::VMLSLuv2i64:
  case ARM::VMLSLuv4i32:
  case ARM::VMLSLuv8i16:
  case ARM::VMLSv16i8:
  case ARM::VMLSv2i32:
  case ARM::VMLSv4i16:
  case ARM::VMLSv4i32:
  case ARM::VMLSv8i16:
  case ARM::VMLSv8i8:
  case ARM::VMOVDneon:
  case ARM::VMOVQ:
  case ARM::VMOVRS:
  case ARM::VMOVSR:
  case ARM::VMULLsv2i64:
  case ARM::VMULLsv4i32:
  case ARM::VMULLsv8i16:
  case ARM::VMULLuv2i64:
  case ARM::VMULLuv4i32:
  case ARM::VMULLuv8i16:
  case ARM::VMULv16i8:
  case ARM::VMULv2i32:
  case ARM::VMULv4i16:
  case ARM::VMULv4i32:
  case ARM::VMULv8i16:
  case ARM::VMULv8i8:
  case ARM::VMVNd:
  case ARM::VMVNq:
  case ARM::VPADDi16:
  case ARM::VPADDi32:
  case ARM::VPADDi8:
  case ARM::VPMAXs16:
  case ARM::VPMAXs32:
  case ARM::VPMAXs8:
  case ARM::VPMAXu16:
  case ARM::VPMAXu32:
  case ARM::VPMAXu8:
  case ARM::VPMINs16:
  case ARM::VPMINs32:
  case ARM::VPMINs8:
  case ARM::VPMINu16:
  case ARM::VPMINu32:
  case ARM::VPMINu8:
  case ARM::VQADDsv16i8:
  case ARM::VQADDsv1i64:
  case ARM::VQADDsv2i32:
  case ARM::VQADDsv2i64:
  case ARM::VQADDsv4i16:
  case ARM::VQADDsv4i32:
  case ARM::VQADDsv8i16:
  case ARM::VQADDsv8i8:
  case ARM::VQADDuv16i8:
  case ARM::VQADDuv1i64:
  case ARM::VQADDuv2i32:
  case ARM::VQADDuv2i64:
  case ARM::VQADDuv4i16:
  case ARM::VQADDuv4i32:
  case ARM::VQADDuv8i16:
  case ARM::VQADDuv8i8:
  case ARM::VQDMLALv2i64:
  case ARM::VQDMLALv4i32:
  case ARM::VQDMLSLv2i64:
  case ARM::VQDMLSLv4i32:
  case ARM::VQDMULHv2i32:
  case ARM::VQDMULHv4i16:
  case ARM::VQDMULHv4i32:
  case ARM::VQDMULHv8i16:
  case ARM::VQDMULLv2i64:
  case ARM::VQDMULLv4i32:
  case ARM::VQRDMULHv2i32:
  case ARM::VQRDMULHv4i16:
  case ARM::VQRDMULHv4i32:
  case ARM::VQRDMULHv8i16:
  case ARM::VQRSHLsv16i8:
  case ARM::VQRSHLsv1i64:
  case ARM::VQRSHLsv2i32:
  case ARM::VQRSHLsv2i64:
  case ARM::VQRSHLsv4i16:
  case ARM::VQRSHLsv4i32:
  case ARM::VQRSHLsv8i16:
  case ARM::VQRSHLsv8i8:
  case ARM::VQRSHLuv16i8:
  case ARM::VQRSHLuv1i64:
  case ARM::VQRSHLuv2i32:
  case ARM::VQRSHLuv2i64:
  case ARM::VQRSHLuv4i16:
  case ARM::VQRSHLuv4i32:
  case ARM::VQRSHLuv8i16:
  case ARM::VQRSHLuv8i8:
  case ARM::VQRSHRNsv2i32:
  case ARM::VQRSHRNsv4i16:
  case ARM::VQRSHRNsv8i8:
  case ARM::VQRSHRNuv2i32:
  case ARM::VQRSHRNuv4i16:
  case ARM::VQRSHRNuv8i8:
  case ARM::VQRSHRUNv2i32:
  case ARM::VQRSHRUNv4i16:
  case ARM::VQRSHRUNv8i8:
  case ARM::VQSHLsiv16i8:
  case ARM::VQSHLsiv1i64:
  case ARM::VQSHLsiv2i32:
  case ARM::VQSHLsiv2i64:
  case ARM::VQSHLsiv4i16:
  case ARM::VQSHLsiv4i32:
  case ARM::VQSHLsiv8i16:
  case ARM::VQSHLsiv8i8:
  case ARM::VQSHLsuv16i8:
  case ARM::VQSHLsuv1i64:
  case ARM::VQSHLsuv2i32:
  case ARM::VQSHLsuv2i64:
  case ARM::VQSHLsuv4i16:
  case ARM::VQSHLsuv4i32:
  case ARM::VQSHLsuv8i16:
  case ARM::VQSHLsuv8i8:
  case ARM::VQSHLsv16i8:
  case ARM::VQSHLsv1i64:
  case ARM::VQSHLsv2i32:
  case ARM::VQSHLsv2i64:
  case ARM::VQSHLsv4i16:
  case ARM::VQSHLsv4i32:
  case ARM::VQSHLsv8i16:
  case ARM::VQSHLsv8i8:
  case ARM::VQSHLuiv16i8:
  case ARM::VQSHLuiv1i64:
  case ARM::VQSHLuiv2i32:
  case ARM::VQSHLuiv2i64:
  case ARM::VQSHLuiv4i16:
  case ARM::VQSHLuiv4i32:
  case ARM::VQSHLuiv8i16:
  case ARM::VQSHLuiv8i8:
  case ARM::VQSHLuv16i8:
  case ARM::VQSHLuv1i64:
  case ARM::VQSHLuv2i32:
  case ARM::VQSHLuv2i64:
  case ARM::VQSHLuv4i16:
  case ARM::VQSHLuv4i32:
  case ARM::VQSHLuv8i16:
  case ARM::VQSHLuv8i8:
  case ARM::VQSHRNsv2i32:
  case ARM::VQSHRNsv4i16:
  case ARM::VQSHRNsv8i8:
  case ARM::VQSHRNuv2i32:
  case ARM::VQSHRNuv4i16:
  case ARM::VQSHRNuv8i8:
  case ARM::VQSHRUNv2i32:
  case ARM::VQSHRUNv4i16:
  case ARM::VQSHRUNv8i8:
  case ARM::VQSUBsv16i8:
  case ARM::VQSUBsv1i64:
  case ARM::VQSUBsv2i32:
  case ARM::VQSUBsv2i64:
  case ARM::VQSUBsv4i16:
  case ARM::VQSUBsv4i32:
  case ARM::VQSUBsv8i16:
  case ARM::VQSUBsv8i8:
  case ARM::VQSUBuv16i8:
  case ARM::VQSUBuv1i64:
  case ARM::VQSUBuv2i32:
  case ARM::VQSUBuv2i64:
  case ARM::VQSUBuv4i16:
  case ARM::VQSUBuv4i32:
  case ARM::VQSUBuv8i16:
  case ARM::VQSUBuv8i8:
  case ARM::VRADDHNv2i32:
  case ARM::VRADDHNv4i16:
  case ARM::VRADDHNv8i8:
  case ARM::VRHADDsv16i8:
  case ARM::VRHADDsv2i32:
  case ARM::VRHADDsv4i16:
  case ARM::VRHADDsv4i32:
  case ARM::VRHADDsv8i16:
  case ARM::VRHADDsv8i8:
  case ARM::VRHADDuv16i8:
  case ARM::VRHADDuv2i32:
  case ARM::VRHADDuv4i16:
  case ARM::VRHADDuv4i32:
  case ARM::VRHADDuv8i16:
  case ARM::VRHADDuv8i8:
  case ARM::VRSHLsv16i8:
  case ARM::VRSHLsv1i64:
  case ARM::VRSHLsv2i32:
  case ARM::VRSHLsv2i64:
  case ARM::VRSHLsv4i16:
  case ARM::VRSHLsv4i32:
  case ARM::VRSHLsv8i16:
  case ARM::VRSHLsv8i8:
  case ARM::VRSHLuv16i8:
  case ARM::VRSHLuv1i64:
  case ARM::VRSHLuv2i32:
  case ARM::VRSHLuv2i64:
  case ARM::VRSHLuv4i16:
  case ARM::VRSHLuv4i32:
  case ARM::VRSHLuv8i16:
  case ARM::VRSHLuv8i8:
  case ARM::VRSHRNv2i32:
  case ARM::VRSHRNv4i16:
  case ARM::VRSHRNv8i8:
  case ARM::VRSHRsv16i8:
  case ARM::VRSHRsv1i64:
  case ARM::VRSHRsv2i32:
  case ARM::VRSHRsv2i64:
  case ARM::VRSHRsv4i16:
  case ARM::VRSHRsv4i32:
  case ARM::VRSHRsv8i16:
  case ARM::VRSHRsv8i8:
  case ARM::VRSHRuv16i8:
  case ARM::VRSHRuv1i64:
  case ARM::VRSHRuv2i32:
  case ARM::VRSHRuv2i64:
  case ARM::VRSHRuv4i16:
  case ARM::VRSHRuv4i32:
  case ARM::VRSHRuv8i16:
  case ARM::VRSHRuv8i8:
  case ARM::VRSRAsv16i8:
  case ARM::VRSRAsv1i64:
  case ARM::VRSRAsv2i32:
  case ARM::VRSRAsv2i64:
  case ARM::VRSRAsv4i16:
  case ARM::VRSRAsv4i32:
  case ARM::VRSRAsv8i16:
  case ARM::VRSRAsv8i8:
  case ARM::VRSRAuv16i8:
  case ARM::VRSRAuv1i64:
  case ARM::VRSRAuv2i32:
  case ARM::VRSRAuv2i64:
  case ARM::VRSRAuv4i16:
  case ARM::VRSRAuv4i32:
  case ARM::VRSRAuv8i16:
  case ARM::VRSRAuv8i8:
  case ARM::VRSUBHNv2i32:
  case ARM::VRSUBHNv4i16:
  case ARM::VRSUBHNv8i8:
  case ARM::VSHLLi16:
  case ARM::VSHLLi32:
  case ARM::VSHLLi8:
  case ARM::VSHLLsv2i64:
  case ARM::VSHLLsv4i32:
  case ARM::VSHLLsv8i16:
  case ARM::VSHLLuv2i64:
  case ARM::VSHLLuv4i32:
  case ARM::VSHLLuv8i16:
  case ARM::VSHLiv16i8:
  case ARM::VSHLiv1i64:
  case ARM::VSHLiv2i32:
  case ARM::VSHLiv2i64:
  case ARM::VSHLiv4i16:
  case ARM::VSHLiv4i32:
  case ARM::VSHLiv8i16:
  case ARM::VSHLiv8i8:
  case ARM::VSHLsv16i8:
  case ARM::VSHLsv1i64:
  case ARM::VSHLsv2i32:
  case ARM::VSHLsv2i64:
  case ARM::VSHLsv4i16:
  case ARM::VSHLsv4i32:
  case ARM::VSHLsv8i16:
  case ARM::VSHLsv8i8:
  case ARM::VSHLuv16i8:
  case ARM::VSHLuv1i64:
  case ARM::VSHLuv2i32:
  case ARM::VSHLuv2i64:
  case ARM::VSHLuv4i16:
  case ARM::VSHLuv4i32:
  case ARM::VSHLuv8i16:
  case ARM::VSHLuv8i8:
  case ARM::VSHRNv2i32:
  case ARM::VSHRNv4i16:
  case ARM::VSHRNv8i8:
  case ARM::VSHRsv16i8:
  case ARM::VSHRsv1i64:
  case ARM::VSHRsv2i32:
  case ARM::VSHRsv2i64:
  case ARM::VSHRsv4i16:
  case ARM::VSHRsv4i32:
  case ARM::VSHRsv8i16:
  case ARM::VSHRsv8i8:
  case ARM::VSHRuv16i8:
  case ARM::VSHRuv1i64:
  case ARM::VSHRuv2i32:
  case ARM::VSHRuv2i64:
  case ARM::VSHRuv4i16:
  case ARM::VSHRuv4i32:
  case ARM::VSHRuv8i16:
  case ARM::VSHRuv8i8:
  case ARM::VSLIv1i64:
  case ARM::VSLIv2i64:
  case ARM::VSRAsv16i8:
  case ARM::VSRAsv1i64:
  case ARM::VSRAsv2i32:
  case ARM::VSRAsv2i64:
  case ARM::VSRAsv4i16:
  case ARM::VSRAsv4i32:
  case ARM::VSRAsv8i16:
  case ARM::VSRAsv8i8:
  case ARM::VSRAuv16i8:
  case ARM::VSRAuv1i64:
  case ARM::VSRAuv2i32:
  case ARM::VSRAuv2i64:
  case ARM::VSRAuv4i16:
  case ARM::VSRAuv4i32:
  case ARM::VSRAuv8i16:
  case ARM::VSRAuv8i8:
  case ARM::VSRIv1i64:
  case ARM::VSRIv2i64:
  case ARM::VSTMDDB:
  case ARM::VSTMDIA:
  case ARM::VSTMSDB:
  case ARM::VSTMSIA:
  case ARM::VSUBHNv2i32:
  case ARM::VSUBHNv4i16:
  case ARM::VSUBHNv8i8:
  case ARM::VSUBLsv2i64:
  case ARM::VSUBLsv4i32:
  case ARM::VSUBLsv8i16:
  case ARM::VSUBLuv2i64:
  case ARM::VSUBLuv4i32:
  case ARM::VSUBLuv8i16:
  case ARM::VSUBWsv2i64:
  case ARM::VSUBWsv4i32:
  case ARM::VSUBWsv8i16:
  case ARM::VSUBWuv2i64:
  case ARM::VSUBWuv4i32:
  case ARM::VSUBWuv8i16:
  case ARM::VSUBv16i8:
  case ARM::VSUBv1i64:
  case ARM::VSUBv2i32:
  case ARM::VSUBv2i64:
  case ARM::VSUBv4i16:
  case ARM::VSUBv4i32:
  case ARM::VSUBv8i16:
  case ARM::VSUBv8i8:
  case ARM::VSWPd:
  case ARM::VSWPq:
  case ARM::t2BFC:
  case ARM::t2CLZ:
  case ARM::t2CMNzri:
  case ARM::t2CMNzrr:
  case ARM::t2CMNzrs:
  case ARM::t2CMPri:
  case ARM::t2CMPrr:
  case ARM::t2CMPrs:
  case ARM::t2CPS3p:
  case ARM::t2LDMDB:
  case ARM::t2LDMDB_UPD:
  case ARM::t2LDMIA:
  case ARM::t2LDRBT:
  case ARM::t2LDRBi12:
  case ARM::t2LDRBi8:
  case ARM::t2LDRBpci:
  case ARM::t2LDRBs:
  case ARM::t2LDRHT:
  case ARM::t2LDRHi12:
  case ARM::t2LDRHi8:
  case ARM::t2LDRHpci:
  case ARM::t2LDRHs:
  case ARM::t2LDRSBT:
  case ARM::t2LDRSBi12:
  case ARM::t2LDRSBi8:
  case ARM::t2LDRSBpci:
  case ARM::t2LDRSBs:
  case ARM::t2LDRSHT:
  case ARM::t2LDRSHi12:
  case ARM::t2LDRSHi8:
  case ARM::t2LDRSHpci:
  case ARM::t2LDRSHs:
  case ARM::t2LDRT:
  case ARM::t2LDRi12:
  case ARM::t2LDRi8:
  case ARM::t2LDRpci:
  case ARM::t2LDRs:
  case ARM::t2MCRR2:
  case ARM::t2MOVCCi:
  case ARM::t2MOVCCi16:
  case ARM::t2MOVCCr:
  case ARM::t2MOVTi16:
  case ARM::t2MOVi:
  case ARM::t2MOVi16:
  case ARM::t2MOVr:
  case ARM::t2MRRC2:
  case ARM::t2MVNCCi:
  case ARM::t2MVNi:
  case ARM::t2MVNr:
  case ARM::t2MVNs:
  case ARM::t2RBIT:
  case ARM::t2REV:
  case ARM::t2REV16:
  case ARM::t2REVSH:
  case ARM::t2RRX:
  case ARM::t2STMDB:
  case ARM::t2STMDB_UPD:
  case ARM::t2STMIA:
  case ARM::t2STRBT:
  case ARM::t2STRBi12:
  case ARM::t2STRBi8:
  case ARM::t2STRBs:
  case ARM::t2STRHT:
  case ARM::t2STRHi12:
  case ARM::t2STRHi8:
  case ARM::t2STRHs:
  case ARM::t2STRT:
  case ARM::t2STRi12:
  case ARM::t2STRi8:
  case ARM::t2STRs:
  case ARM::t2SXTB16r:
  case ARM::t2SXTBr:
  case ARM::t2SXTHr:
  case ARM::t2TEQri:
  case ARM::t2TEQrr:
  case ARM::t2TEQrs:
  case ARM::t2TSTri:
  case ARM::t2TSTrr:
  case ARM::t2TSTrs:
  case ARM::t2UXTB16r:
  case ARM::t2UXTBr:
  case ARM::t2UXTHr:
  case ARM::tADDhirr:
  case ARM::tADDi3:
  case ARM::tADDrSPi:
  case ARM::tADDrr:
  case ARM::tASRri:
  case ARM::tCMNz:
  case ARM::tCMPhir:
  case ARM::tCMPi8:
  case ARM::tCMPr:
  case ARM::tLDMIA:
  case ARM::tLDRBi:
  case ARM::tLDRBr:
  case ARM::tLDRHi:
  case ARM::tLDRHr:
  case ARM::tLDRSB:
  case ARM::tLDRSH:
  case ARM::tLDRi:
  case ARM::tLDRr:
  case ARM::tLDRspi:
  case ARM::tLSLri:
  case ARM::tLSRri:
  case ARM::tMCRR:
  case ARM::tMOVCCi:
  case ARM::tMOVCCr:
  case ARM::tMRRC:
  case ARM::tMUL:
  case ARM::tREV:
  case ARM::tREV16:
  case ARM::tREVSH:
  case ARM::tRestore:
  case ARM::tSTMIA:
  case ARM::tSTRBi:
  case ARM::tSTRBr:
  case ARM::tSTRHi:
  case ARM::tSTRHr:
  case ARM::tSTRi:
  case ARM::tSTRr:
  case ARM::tSTRspi:
  case ARM::tSUBi3:
  case ARM::tSUBrr:
  case ARM::tSXTB:
  case ARM::tSXTH:
  case ARM::tSpill:
  case ARM::tTST:
  case ARM::tUXTB:
  case ARM::tUXTH:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::ADCSSri: 
    case ARM::MOVCCi: 
    case ARM::MVNCCi: 
    case ARM::RSCSri: 
    case ARM::SBCSSri: printSOImmOperand(MI, 2, O); break;
    case ARM::ADCSSrr: 
    case ARM::CPS3p: 
    case ARM::MOVCCi16: 
    case ARM::MOVCCr: 
    case ARM::MOVTi16: 
    case ARM::SBCSSrr: 
    case ARM::VABDLsv2i64: 
    case ARM::VABDLsv4i32: 
    case ARM::VABDLsv8i16: 
    case ARM::VABDLuv2i64: 
    case ARM::VABDLuv4i32: 
    case ARM::VABDLuv8i16: 
    case ARM::VABDsv16i8: 
    case ARM::VABDsv2i32: 
    case ARM::VABDsv4i16: 
    case ARM::VABDsv4i32: 
    case ARM::VABDsv8i16: 
    case ARM::VABDsv8i8: 
    case ARM::VABDuv16i8: 
    case ARM::VABDuv2i32: 
    case ARM::VABDuv4i16: 
    case ARM::VABDuv4i32: 
    case ARM::VABDuv8i16: 
    case ARM::VABDuv8i8: 
    case ARM::VADDHNv2i32: 
    case ARM::VADDHNv4i16: 
    case ARM::VADDHNv8i8: 
    case ARM::VADDLsv2i64: 
    case ARM::VADDLsv4i32: 
    case ARM::VADDLsv8i16: 
    case ARM::VADDLuv2i64: 
    case ARM::VADDLuv4i32: 
    case ARM::VADDLuv8i16: 
    case ARM::VADDWsv2i64: 
    case ARM::VADDWsv4i32: 
    case ARM::VADDWsv8i16: 
    case ARM::VADDWuv2i64: 
    case ARM::VADDWuv4i32: 
    case ARM::VADDWuv8i16: 
    case ARM::VADDv16i8: 
    case ARM::VADDv1i64: 
    case ARM::VADDv2i32: 
    case ARM::VADDv2i64: 
    case ARM::VADDv4i16: 
    case ARM::VADDv4i32: 
    case ARM::VADDv8i16: 
    case ARM::VADDv8i8: 
    case ARM::VCEQv16i8: 
    case ARM::VCEQv2i32: 
    case ARM::VCEQv4i16: 
    case ARM::VCEQv4i32: 
    case ARM::VCEQv8i16: 
    case ARM::VCEQv8i8: 
    case ARM::VCGEsv16i8: 
    case ARM::VCGEsv2i32: 
    case ARM::VCGEsv4i16: 
    case ARM::VCGEsv4i32: 
    case ARM::VCGEsv8i16: 
    case ARM::VCGEsv8i8: 
    case ARM::VCGEuv16i8: 
    case ARM::VCGEuv2i32: 
    case ARM::VCGEuv4i16: 
    case ARM::VCGEuv4i32: 
    case ARM::VCGEuv8i16: 
    case ARM::VCGEuv8i8: 
    case ARM::VCGTsv16i8: 
    case ARM::VCGTsv2i32: 
    case ARM::VCGTsv4i16: 
    case ARM::VCGTsv4i32: 
    case ARM::VCGTsv8i16: 
    case ARM::VCGTsv8i8: 
    case ARM::VCGTuv16i8: 
    case ARM::VCGTuv2i32: 
    case ARM::VCGTuv4i16: 
    case ARM::VCGTuv4i32: 
    case ARM::VCGTuv8i16: 
    case ARM::VCGTuv8i8: 
    case ARM::VHADDsv16i8: 
    case ARM::VHADDsv2i32: 
    case ARM::VHADDsv4i16: 
    case ARM::VHADDsv4i32: 
    case ARM::VHADDsv8i16: 
    case ARM::VHADDsv8i8: 
    case ARM::VHADDuv16i8: 
    case ARM::VHADDuv2i32: 
    case ARM::VHADDuv4i16: 
    case ARM::VHADDuv4i32: 
    case ARM::VHADDuv8i16: 
    case ARM::VHADDuv8i8: 
    case ARM::VHSUBsv16i8: 
    case ARM::VHSUBsv2i32: 
    case ARM::VHSUBsv4i16: 
    case ARM::VHSUBsv4i32: 
    case ARM::VHSUBsv8i16: 
    case ARM::VHSUBsv8i8: 
    case ARM::VHSUBuv16i8: 
    case ARM::VHSUBuv2i32: 
    case ARM::VHSUBuv4i16: 
    case ARM::VHSUBuv4i32: 
    case ARM::VHSUBuv8i16: 
    case ARM::VHSUBuv8i8: 
    case ARM::VMAXsv16i8: 
    case ARM::VMAXsv2i32: 
    case ARM::VMAXsv4i16: 
    case ARM::VMAXsv4i32: 
    case ARM::VMAXsv8i16: 
    case ARM::VMAXsv8i8: 
    case ARM::VMAXuv16i8: 
    case ARM::VMAXuv2i32: 
    case ARM::VMAXuv4i16: 
    case ARM::VMAXuv4i32: 
    case ARM::VMAXuv8i16: 
    case ARM::VMAXuv8i8: 
    case ARM::VMINsv16i8: 
    case ARM::VMINsv2i32: 
    case ARM::VMINsv4i16: 
    case ARM::VMINsv4i32: 
    case ARM::VMINsv8i16: 
    case ARM::VMINsv8i8: 
    case ARM::VMINuv16i8: 
    case ARM::VMINuv2i32: 
    case ARM::VMINuv4i16: 
    case ARM::VMINuv4i32: 
    case ARM::VMINuv8i16: 
    case ARM::VMINuv8i8: 
    case ARM::VMULLsv2i64: 
    case ARM::VMULLsv4i32: 
    case ARM::VMULLsv8i16: 
    case ARM::VMULLuv2i64: 
    case ARM::VMULLuv4i32: 
    case ARM::VMULLuv8i16: 
    case ARM::VMULv16i8: 
    case ARM::VMULv2i32: 
    case ARM::VMULv4i16: 
    case ARM::VMULv4i32: 
    case ARM::VMULv8i16: 
    case ARM::VMULv8i8: 
    case ARM::VPADDi16: 
    case ARM::VPADDi32: 
    case ARM::VPADDi8: 
    case ARM::VPMAXs16: 
    case ARM::VPMAXs32: 
    case ARM::VPMAXs8: 
    case ARM::VPMAXu16: 
    case ARM::VPMAXu32: 
    case ARM::VPMAXu8: 
    case ARM::VPMINs16: 
    case ARM::VPMINs32: 
    case ARM::VPMINs8: 
    case ARM::VPMINu16: 
    case ARM::VPMINu32: 
    case ARM::VPMINu8: 
    case ARM::VQADDsv16i8: 
    case ARM::VQADDsv1i64: 
    case ARM::VQADDsv2i32: 
    case ARM::VQADDsv2i64: 
    case ARM::VQADDsv4i16: 
    case ARM::VQADDsv4i32: 
    case ARM::VQADDsv8i16: 
    case ARM::VQADDsv8i8: 
    case ARM::VQADDuv16i8: 
    case ARM::VQADDuv1i64: 
    case ARM::VQADDuv2i32: 
    case ARM::VQADDuv2i64: 
    case ARM::VQADDuv4i16: 
    case ARM::VQADDuv4i32: 
    case ARM::VQADDuv8i16: 
    case ARM::VQADDuv8i8: 
    case ARM::VQDMULHv2i32: 
    case ARM::VQDMULHv4i16: 
    case ARM::VQDMULHv4i32: 
    case ARM::VQDMULHv8i16: 
    case ARM::VQDMULLv2i64: 
    case ARM::VQDMULLv4i32: 
    case ARM::VQRDMULHv2i32: 
    case ARM::VQRDMULHv4i16: 
    case ARM::VQRDMULHv4i32: 
    case ARM::VQRDMULHv8i16: 
    case ARM::VQRSHLsv16i8: 
    case ARM::VQRSHLsv1i64: 
    case ARM::VQRSHLsv2i32: 
    case ARM::VQRSHLsv2i64: 
    case ARM::VQRSHLsv4i16: 
    case ARM::VQRSHLsv4i32: 
    case ARM::VQRSHLsv8i16: 
    case ARM::VQRSHLsv8i8: 
    case ARM::VQRSHLuv16i8: 
    case ARM::VQRSHLuv1i64: 
    case ARM::VQRSHLuv2i32: 
    case ARM::VQRSHLuv2i64: 
    case ARM::VQRSHLuv4i16: 
    case ARM::VQRSHLuv4i32: 
    case ARM::VQRSHLuv8i16: 
    case ARM::VQRSHLuv8i8: 
    case ARM::VQRSHRNsv2i32: 
    case ARM::VQRSHRNsv4i16: 
    case ARM::VQRSHRNsv8i8: 
    case ARM::VQRSHRNuv2i32: 
    case ARM::VQRSHRNuv4i16: 
    case ARM::VQRSHRNuv8i8: 
    case ARM::VQRSHRUNv2i32: 
    case ARM::VQRSHRUNv4i16: 
    case ARM::VQRSHRUNv8i8: 
    case ARM::VQSHLsiv16i8: 
    case ARM::VQSHLsiv1i64: 
    case ARM::VQSHLsiv2i32: 
    case ARM::VQSHLsiv2i64: 
    case ARM::VQSHLsiv4i16: 
    case ARM::VQSHLsiv4i32: 
    case ARM::VQSHLsiv8i16: 
    case ARM::VQSHLsiv8i8: 
    case ARM::VQSHLsuv16i8: 
    case ARM::VQSHLsuv1i64: 
    case ARM::VQSHLsuv2i32: 
    case ARM::VQSHLsuv2i64: 
    case ARM::VQSHLsuv4i16: 
    case ARM::VQSHLsuv4i32: 
    case ARM::VQSHLsuv8i16: 
    case ARM::VQSHLsuv8i8: 
    case ARM::VQSHLsv16i8: 
    case ARM::VQSHLsv1i64: 
    case ARM::VQSHLsv2i32: 
    case ARM::VQSHLsv2i64: 
    case ARM::VQSHLsv4i16: 
    case ARM::VQSHLsv4i32: 
    case ARM::VQSHLsv8i16: 
    case ARM::VQSHLsv8i8: 
    case ARM::VQSHLuiv16i8: 
    case ARM::VQSHLuiv1i64: 
    case ARM::VQSHLuiv2i32: 
    case ARM::VQSHLuiv2i64: 
    case ARM::VQSHLuiv4i16: 
    case ARM::VQSHLuiv4i32: 
    case ARM::VQSHLuiv8i16: 
    case ARM::VQSHLuiv8i8: 
    case ARM::VQSHLuv16i8: 
    case ARM::VQSHLuv1i64: 
    case ARM::VQSHLuv2i32: 
    case ARM::VQSHLuv2i64: 
    case ARM::VQSHLuv4i16: 
    case ARM::VQSHLuv4i32: 
    case ARM::VQSHLuv8i16: 
    case ARM::VQSHLuv8i8: 
    case ARM::VQSHRNsv2i32: 
    case ARM::VQSHRNsv4i16: 
    case ARM::VQSHRNsv8i8: 
    case ARM::VQSHRNuv2i32: 
    case ARM::VQSHRNuv4i16: 
    case ARM::VQSHRNuv8i8: 
    case ARM::VQSHRUNv2i32: 
    case ARM::VQSHRUNv4i16: 
    case ARM::VQSHRUNv8i8: 
    case ARM::VQSUBsv16i8: 
    case ARM::VQSUBsv1i64: 
    case ARM::VQSUBsv2i32: 
    case ARM::VQSUBsv2i64: 
    case ARM::VQSUBsv4i16: 
    case ARM::VQSUBsv4i32: 
    case ARM::VQSUBsv8i16: 
    case ARM::VQSUBsv8i8: 
    case ARM::VQSUBuv16i8: 
    case ARM::VQSUBuv1i64: 
    case ARM::VQSUBuv2i32: 
    case ARM::VQSUBuv2i64: 
    case ARM::VQSUBuv4i16: 
    case ARM::VQSUBuv4i32: 
    case ARM::VQSUBuv8i16: 
    case ARM::VQSUBuv8i8: 
    case ARM::VRADDHNv2i32: 
    case ARM::VRADDHNv4i16: 
    case ARM::VRADDHNv8i8: 
    case ARM::VRHADDsv16i8: 
    case ARM::VRHADDsv2i32: 
    case ARM::VRHADDsv4i16: 
    case ARM::VRHADDsv4i32: 
    case ARM::VRHADDsv8i16: 
    case ARM::VRHADDsv8i8: 
    case ARM::VRHADDuv16i8: 
    case ARM::VRHADDuv2i32: 
    case ARM::VRHADDuv4i16: 
    case ARM::VRHADDuv4i32: 
    case ARM::VRHADDuv8i16: 
    case ARM::VRHADDuv8i8: 
    case ARM::VRSHLsv16i8: 
    case ARM::VRSHLsv1i64: 
    case ARM::VRSHLsv2i32: 
    case ARM::VRSHLsv2i64: 
    case ARM::VRSHLsv4i16: 
    case ARM::VRSHLsv4i32: 
    case ARM::VRSHLsv8i16: 
    case ARM::VRSHLsv8i8: 
    case ARM::VRSHLuv16i8: 
    case ARM::VRSHLuv1i64: 
    case ARM::VRSHLuv2i32: 
    case ARM::VRSHLuv2i64: 
    case ARM::VRSHLuv4i16: 
    case ARM::VRSHLuv4i32: 
    case ARM::VRSHLuv8i16: 
    case ARM::VRSHLuv8i8: 
    case ARM::VRSHRNv2i32: 
    case ARM::VRSHRNv4i16: 
    case ARM::VRSHRNv8i8: 
    case ARM::VRSHRsv16i8: 
    case ARM::VRSHRsv1i64: 
    case ARM::VRSHRsv2i32: 
    case ARM::VRSHRsv2i64: 
    case ARM::VRSHRsv4i16: 
    case ARM::VRSHRsv4i32: 
    case ARM::VRSHRsv8i16: 
    case ARM::VRSHRsv8i8: 
    case ARM::VRSHRuv16i8: 
    case ARM::VRSHRuv1i64: 
    case ARM::VRSHRuv2i32: 
    case ARM::VRSHRuv2i64: 
    case ARM::VRSHRuv4i16: 
    case ARM::VRSHRuv4i32: 
    case ARM::VRSHRuv8i16: 
    case ARM::VRSHRuv8i8: 
    case ARM::VRSUBHNv2i32: 
    case ARM::VRSUBHNv4i16: 
    case ARM::VRSUBHNv8i8: 
    case ARM::VSHLLi16: 
    case ARM::VSHLLi32: 
    case ARM::VSHLLi8: 
    case ARM::VSHLLsv2i64: 
    case ARM::VSHLLsv4i32: 
    case ARM::VSHLLsv8i16: 
    case ARM::VSHLLuv2i64: 
    case ARM::VSHLLuv4i32: 
    case ARM::VSHLLuv8i16: 
    case ARM::VSHLiv16i8: 
    case ARM::VSHLiv1i64: 
    case ARM::VSHLiv2i32: 
    case ARM::VSHLiv2i64: 
    case ARM::VSHLiv4i16: 
    case ARM::VSHLiv4i32: 
    case ARM::VSHLiv8i16: 
    case ARM::VSHLiv8i8: 
    case ARM::VSHLsv16i8: 
    case ARM::VSHLsv1i64: 
    case ARM::VSHLsv2i32: 
    case ARM::VSHLsv2i64: 
    case ARM::VSHLsv4i16: 
    case ARM::VSHLsv4i32: 
    case ARM::VSHLsv8i16: 
    case ARM::VSHLsv8i8: 
    case ARM::VSHLuv16i8: 
    case ARM::VSHLuv1i64: 
    case ARM::VSHLuv2i32: 
    case ARM::VSHLuv2i64: 
    case ARM::VSHLuv4i16: 
    case ARM::VSHLuv4i32: 
    case ARM::VSHLuv8i16: 
    case ARM::VSHLuv8i8: 
    case ARM::VSHRNv2i32: 
    case ARM::VSHRNv4i16: 
    case ARM::VSHRNv8i8: 
    case ARM::VSHRsv16i8: 
    case ARM::VSHRsv1i64: 
    case ARM::VSHRsv2i32: 
    case ARM::VSHRsv2i64: 
    case ARM::VSHRsv4i16: 
    case ARM::VSHRsv4i32: 
    case ARM::VSHRsv8i16: 
    case ARM::VSHRsv8i8: 
    case ARM::VSHRuv16i8: 
    case ARM::VSHRuv1i64: 
    case ARM::VSHRuv2i32: 
    case ARM::VSHRuv2i64: 
    case ARM::VSHRuv4i16: 
    case ARM::VSHRuv4i32: 
    case ARM::VSHRuv8i16: 
    case ARM::VSHRuv8i8: 
    case ARM::VSUBHNv2i32: 
    case ARM::VSUBHNv4i16: 
    case ARM::VSUBHNv8i8: 
    case ARM::VSUBLsv2i64: 
    case ARM::VSUBLsv4i32: 
    case ARM::VSUBLsv8i16: 
    case ARM::VSUBLuv2i64: 
    case ARM::VSUBLuv4i32: 
    case ARM::VSUBLuv8i16: 
    case ARM::VSUBWsv2i64: 
    case ARM::VSUBWsv4i32: 
    case ARM::VSUBWsv8i16: 
    case ARM::VSUBWuv2i64: 
    case ARM::VSUBWuv4i32: 
    case ARM::VSUBWuv8i16: 
    case ARM::VSUBv16i8: 
    case ARM::VSUBv1i64: 
    case ARM::VSUBv2i32: 
    case ARM::VSUBv2i64: 
    case ARM::VSUBv4i16: 
    case ARM::VSUBv4i32: 
    case ARM::VSUBv8i16: 
    case ARM::VSUBv8i8: 
    case ARM::t2CPS3p: 
    case ARM::t2MOVCCi: 
    case ARM::t2MOVCCi16: 
    case ARM::t2MOVCCr: 
    case ARM::t2MOVTi16: 
    case ARM::t2MVNCCi: 
    case ARM::tADDhirr: 
    case ARM::tMOVCCi: 
    case ARM::tMOVCCr: printOperand(MI, 2, O); break;
    case ARM::ADCSSrs: 
    case ARM::MOVCCs: 
    case ARM::RSCSrs: 
    case ARM::SBCSSrs: printSORegOperand(MI, 2, O); break;
    case ARM::BFC: 
    case ARM::t2BFC: printBitfieldInvMaskImmOperand(MI, 2, O); break;
    case ARM::CLZ: 
    case ARM::CMNzrr: 
    case ARM::CMPrr: 
    case ARM::MOVi16: 
    case ARM::MOVr: 
    case ARM::MOVr_TC: 
    case ARM::MVNr: 
    case ARM::RBIT: 
    case ARM::REV: 
    case ARM::REV16: 
    case ARM::REVSH: 
    case ARM::SXTB16r: 
    case ARM::SXTBr: 
    case ARM::SXTHr: 
    case ARM::TEQrr: 
    case ARM::TSTrr: 
    case ARM::UXTB16r: 
    case ARM::UXTBr: 
    case ARM::UXTHr: 
    case ARM::VMOVDneon: 
    case ARM::VMOVQ: 
    case ARM::VMOVRS: 
    case ARM::VMOVSR: 
    case ARM::VMVNd: 
    case ARM::VMVNq: 
    case ARM::VSWPd: 
    case ARM::VSWPq: 
    case ARM::t2CLZ: 
    case ARM::t2CMNzri: 
    case ARM::t2CMNzrr: 
    case ARM::t2CMPri: 
    case ARM::t2CMPrr: 
    case ARM::t2LDRBpci: 
    case ARM::t2LDRHpci: 
    case ARM::t2LDRSBpci: 
    case ARM::t2LDRSHpci: 
    case ARM::t2LDRpci: 
    case ARM::t2MOVi: 
    case ARM::t2MOVi16: 
    case ARM::t2MOVr: 
    case ARM::t2MVNi: 
    case ARM::t2MVNr: 
    case ARM::t2RBIT: 
    case ARM::t2REV: 
    case ARM::t2REV16: 
    case ARM::t2REVSH: 
    case ARM::t2RRX: 
    case ARM::t2SXTB16r: 
    case ARM::t2SXTBr: 
    case ARM::t2SXTHr: 
    case ARM::t2TEQri: 
    case ARM::t2TEQrr: 
    case ARM::t2TSTri: 
    case ARM::t2TSTrr: 
    case ARM::t2UXTB16r: 
    case ARM::t2UXTBr: 
    case ARM::t2UXTHr: 
    case ARM::tCMNz: 
    case ARM::tCMPhir: 
    case ARM::tCMPi8: 
    case ARM::tCMPr: 
    case ARM::tREV: 
    case ARM::tREV16: 
    case ARM::tREVSH: 
    case ARM::tSXTB: 
    case ARM::tSXTH: 
    case ARM::tTST: 
    case ARM::tUXTB: 
    case ARM::tUXTH: printOperand(MI, 1, O); break;
    case ARM::CMNzri: 
    case ARM::CMPri: 
    case ARM::MOVi: 
    case ARM::MVNi: 
    case ARM::TEQri: 
    case ARM::TSTri: printSOImmOperand(MI, 1, O); break;
    case ARM::CMNzrs: 
    case ARM::CMPrs: 
    case ARM::MOVs: 
    case ARM::MVNs: 
    case ARM::TEQrs: 
    case ARM::TSTrs: printSORegOperand(MI, 1, O); break;
    case ARM::LDMDA: 
    case ARM::LDMDB: 
    case ARM::LDMIA: 
    case ARM::LDMIB: 
    case ARM::STMDA: 
    case ARM::STMDB: 
    case ARM::STMIA: 
    case ARM::STMIB: 
    case ARM::VLDMDDB: 
    case ARM::VLDMDIA: 
    case ARM::VLDMSDB: 
    case ARM::VLDMSIA: 
    case ARM::VSTMDDB: 
    case ARM::VSTMDIA: 
    case ARM::VSTMSDB: 
    case ARM::VSTMSIA: 
    case ARM::t2LDMDB: 
    case ARM::t2LDMIA: 
    case ARM::t2STMDB: 
    case ARM::t2STMIA: 
    case ARM::tLDMIA: 
    case ARM::tSTMIA: printRegisterList(MI, 3, O); break;
    case ARM::LDRBi12: 
    case ARM::LDRcp: 
    case ARM::LDRi12: 
    case ARM::STRBi12: 
    case ARM::STRi12: 
    case ARM::t2LDRBi12: 
    case ARM::t2LDRHi12: 
    case ARM::t2LDRSBi12: 
    case ARM::t2LDRSHi12: 
    case ARM::t2LDRi12: 
    case ARM::t2STRBi12: 
    case ARM::t2STRHi12: 
    case ARM::t2STRi12: printAddrModeImm12Operand(MI, 1, O); break;
    case ARM::LDRBrs: 
    case ARM::LDRrs: 
    case ARM::STRBrs: 
    case ARM::STRrs: printAddrMode2Operand(MI, 1, O); break;
    case ARM::LDRD: 
    case ARM::STRD: printAddrMode3Operand(MI, 2, O); break;
    case ARM::LDRH: 
    case ARM::LDRSB: 
    case ARM::LDRSH: 
    case ARM::STRH: printAddrMode3Operand(MI, 1, O); break;
    case ARM::MCRR2: 
    case ARM::MRRC2: 
    case ARM::t2MCRR2: 
    case ARM::t2MRRC2: 
    case ARM::tMCRR: 
    case ARM::tMRRC: printCImmediate(MI, 4, O); break;
    case ARM::VABALsv2i64: 
    case ARM::VABALsv4i32: 
    case ARM::VABALsv8i16: 
    case ARM::VABALuv2i64: 
    case ARM::VABALuv4i32: 
    case ARM::VABALuv8i16: 
    case ARM::VABAsv16i8: 
    case ARM::VABAsv2i32: 
    case ARM::VABAsv4i16: 
    case ARM::VABAsv4i32: 
    case ARM::VABAsv8i16: 
    case ARM::VABAsv8i8: 
    case ARM::VABAuv16i8: 
    case ARM::VABAuv2i32: 
    case ARM::VABAuv4i16: 
    case ARM::VABAuv4i32: 
    case ARM::VABAuv8i16: 
    case ARM::VABAuv8i8: 
    case ARM::VMLALsv2i64: 
    case ARM::VMLALsv4i32: 
    case ARM::VMLALsv8i16: 
    case ARM::VMLALuv2i64: 
    case ARM::VMLALuv4i32: 
    case ARM::VMLALuv8i16: 
    case ARM::VMLAv16i8: 
    case ARM::VMLAv2i32: 
    case ARM::VMLAv4i16: 
    case ARM::VMLAv4i32: 
    case ARM::VMLAv8i16: 
    case ARM::VMLAv8i8: 
    case ARM::VMLSLsv2i64: 
    case ARM::VMLSLsv4i32: 
    case ARM::VMLSLsv8i16: 
    case ARM::VMLSLuv2i64: 
    case ARM::VMLSLuv4i32: 
    case ARM::VMLSLuv8i16: 
    case ARM::VMLSv16i8: 
    case ARM::VMLSv2i32: 
    case ARM::VMLSv4i16: 
    case ARM::VMLSv4i32: 
    case ARM::VMLSv8i16: 
    case ARM::VMLSv8i8: 
    case ARM::VQDMLALv2i64: 
    case ARM::VQDMLALv4i32: 
    case ARM::VQDMLSLv2i64: 
    case ARM::VQDMLSLv4i32: 
    case ARM::VRSRAsv16i8: 
    case ARM::VRSRAsv1i64: 
    case ARM::VRSRAsv2i32: 
    case ARM::VRSRAsv2i64: 
    case ARM::VRSRAsv4i16: 
    case ARM::VRSRAsv4i32: 
    case ARM::VRSRAsv8i16: 
    case ARM::VRSRAsv8i8: 
    case ARM::VRSRAuv16i8: 
    case ARM::VRSRAuv1i64: 
    case ARM::VRSRAuv2i32: 
    case ARM::VRSRAuv2i64: 
    case ARM::VRSRAuv4i16: 
    case ARM::VRSRAuv4i32: 
    case ARM::VRSRAuv8i16: 
    case ARM::VRSRAuv8i8: 
    case ARM::VSLIv1i64: 
    case ARM::VSLIv2i64: 
    case ARM::VSRAsv16i8: 
    case ARM::VSRAsv1i64: 
    case ARM::VSRAsv2i32: 
    case ARM::VSRAsv2i64: 
    case ARM::VSRAsv4i16: 
    case ARM::VSRAsv4i32: 
    case ARM::VSRAsv8i16: 
    case ARM::VSRAsv8i8: 
    case ARM::VSRAuv16i8: 
    case ARM::VSRAuv1i64: 
    case ARM::VSRAuv2i32: 
    case ARM::VSRAuv2i64: 
    case ARM::VSRAuv4i16: 
    case ARM::VSRAuv4i32: 
    case ARM::VSRAuv8i16: 
    case ARM::VSRAuv8i8: 
    case ARM::VSRIv1i64: 
    case ARM::VSRIv2i64: 
    case ARM::tADDi3: 
    case ARM::tADDrr: 
    case ARM::tASRri: 
    case ARM::tLSLri: 
    case ARM::tLSRri: 
    case ARM::tSUBi3: 
    case ARM::tSUBrr: printOperand(MI, 3, O); break;
    case ARM::t2CMNzrs: 
    case ARM::t2CMPrs: 
    case ARM::t2MVNs: 
    case ARM::t2TEQrs: 
    case ARM::t2TSTrs: printT2SOOperand(MI, 1, O); break;
    case ARM::t2LDMDB_UPD: 
    case ARM::t2STMDB_UPD: printRegisterList(MI, 4, O); break;
    case ARM::t2LDRBT: 
    case ARM::t2LDRBi8: 
    case ARM::t2LDRHT: 
    case ARM::t2LDRHi8: 
    case ARM::t2LDRSBT: 
    case ARM::t2LDRSBi8: 
    case ARM::t2LDRSHT: 
    case ARM::t2LDRSHi8: 
    case ARM::t2LDRT: 
    case ARM::t2LDRi8: 
    case ARM::t2STRBT: 
    case ARM::t2STRBi8: 
    case ARM::t2STRHT: 
    case ARM::t2STRHi8: 
    case ARM::t2STRT: 
    case ARM::t2STRi8: printT2AddrModeImm8Operand(MI, 1, O); break;
    case ARM::t2LDRBs: 
    case ARM::t2LDRHs: 
    case ARM::t2LDRSBs: 
    case ARM::t2LDRSHs: 
    case ARM::t2LDRs: 
    case ARM::t2STRBs: 
    case ARM::t2STRHs: 
    case ARM::t2STRs: printT2AddrModeSoRegOperand(MI, 1, O); break;
    case ARM::tADDrSPi: printThumbS4ImmOperand(MI, 2, O); break;
    case ARM::tLDRBi: 
    case ARM::tSTRBi: printThumbAddrModeImm5S1Operand(MI, 1, O); break;
    case ARM::tLDRBr: 
    case ARM::tLDRHr: 
    case ARM::tLDRSB: 
    case ARM::tLDRSH: 
    case ARM::tLDRr: 
    case ARM::tSTRBr: 
    case ARM::tSTRHr: 
    case ARM::tSTRr: printThumbAddrModeRROperand(MI, 1, O); break;
    case ARM::tLDRHi: 
    case ARM::tSTRHi: printThumbAddrModeImm5S2Operand(MI, 1, O); break;
    case ARM::tLDRi: 
    case ARM::tSTRi: printThumbAddrModeImm5S4Operand(MI, 1, O); break;
    case ARM::tLDRspi: 
    case ARM::tRestore: 
    case ARM::tSTRspi: 
    case ARM::tSpill: printThumbAddrModeSPOperand(MI, 1, O); break;
    case ARM::tMUL: printOperand(MI, 0, O); break;
    }
    return;
    break;
  case ARM::ADCri:
  case ARM::ADCrr:
  case ARM::ADDSri:
  case ARM::ADDSrr:
  case ARM::ADDSrs:
  case ARM::ADDri:
  case ARM::ADDrr:
  case ARM::ANDri:
  case ARM::ANDrr:
  case ARM::BICri:
  case ARM::BICrr:
  case ARM::EORri:
  case ARM::EORrr:
  case ARM::MUL:
  case ARM::ORRri:
  case ARM::ORRrr:
  case ARM::QADD:
  case ARM::QADD16:
  case ARM::QADD8:
  case ARM::QASX:
  case ARM::QDADD:
  case ARM::QDSUB:
  case ARM::QSAX:
  case ARM::QSUB:
  case ARM::QSUB16:
  case ARM::QSUB8:
  case ARM::RSBSri:
  case ARM::RSBSrr:
  case ARM::RSBSrs:
  case ARM::RSBri:
  case ARM::RSBrr:
  case ARM::RSCri:
  case ARM::RSCrr:
  case ARM::SADD16:
  case ARM::SADD8:
  case ARM::SASX:
  case ARM::SBCri:
  case ARM::SBCrr:
  case ARM::SEL:
  case ARM::SHADD16:
  case ARM::SHADD8:
  case ARM::SHASX:
  case ARM::SHSAX:
  case ARM::SHSUB16:
  case ARM::SHSUB8:
  case ARM::SMMUL:
  case ARM::SMMULR:
  case ARM::SMUAD:
  case ARM::SMUADX:
  case ARM::SMULBB:
  case ARM::SMULBT:
  case ARM::SMULTB:
  case ARM::SMULTT:
  case ARM::SMULWB:
  case ARM::SMULWT:
  case ARM::SMUSD:
  case ARM::SMUSDX:
  case ARM::SSAT16:
  case ARM::SSAX:
  case ARM::SSUB16:
  case ARM::SSUB8:
  case ARM::SUBSri:
  case ARM::SUBSrr:
  case ARM::SUBSrs:
  case ARM::SUBri:
  case ARM::SUBrr:
  case ARM::SXTAB16rr:
  case ARM::SXTABrr:
  case ARM::SXTAHrr:
  case ARM::UADD16:
  case ARM::UADD8:
  case ARM::UASX:
  case ARM::UHADD16:
  case ARM::UHADD8:
  case ARM::UHASX:
  case ARM::UHSAX:
  case ARM::UHSUB16:
  case ARM::UHSUB8:
  case ARM::UQADD16:
  case ARM::UQADD8:
  case ARM::UQASX:
  case ARM::UQSAX:
  case ARM::UQSUB16:
  case ARM::UQSUB8:
  case ARM::USAD8:
  case ARM::USAT16:
  case ARM::USAX:
  case ARM::USUB16:
  case ARM::USUB8:
  case ARM::UXTAB16rr:
  case ARM::UXTABrr:
  case ARM::UXTAHrr:
  case ARM::VANDd:
  case ARM::VANDq:
  case ARM::VBICd:
  case ARM::VBICq:
  case ARM::VEORd:
  case ARM::VEORq:
  case ARM::VMOVDRR:
  case ARM::VMOVRRD:
  case ARM::VORNd:
  case ARM::VORNq:
  case ARM::VORRd:
  case ARM::VORRq:
  case ARM::t2ADCSri:
  case ARM::t2ADCSrr:
  case ARM::t2ADCSrs:
  case ARM::t2ADCri:
  case ARM::t2ADCrr:
  case ARM::t2ADCrs:
  case ARM::t2ADDSri:
  case ARM::t2ADDSrr:
  case ARM::t2ADDSrs:
  case ARM::t2ADDrSPi:
  case ARM::t2ADDrSPi12:
  case ARM::t2ADDrSPs:
  case ARM::t2ADDri:
  case ARM::t2ADDri12:
  case ARM::t2ADDrr:
  case ARM::t2ADDrs:
  case ARM::t2ANDri:
  case ARM::t2ANDrr:
  case ARM::t2ANDrs:
  case ARM::t2ASRri:
  case ARM::t2ASRrr:
  case ARM::t2BICri:
  case ARM::t2BICrr:
  case ARM::t2BICrs:
  case ARM::t2EORri:
  case ARM::t2EORrr:
  case ARM::t2EORrs:
  case ARM::t2LDRDi8:
  case ARM::t2LSLri:
  case ARM::t2LSLrr:
  case ARM::t2LSRri:
  case ARM::t2LSRrr:
  case ARM::t2MUL:
  case ARM::t2ORNri:
  case ARM::t2ORNrr:
  case ARM::t2ORNrs:
  case ARM::t2ORRri:
  case ARM::t2ORRrr:
  case ARM::t2ORRrs:
  case ARM::t2QADD:
  case ARM::t2QADD16:
  case ARM::t2QADD8:
  case ARM::t2QASX:
  case ARM::t2QDADD:
  case ARM::t2QDSUB:
  case ARM::t2QSAX:
  case ARM::t2QSUB:
  case ARM::t2QSUB16:
  case ARM::t2QSUB8:
  case ARM::t2RORri:
  case ARM::t2RORrr:
  case ARM::t2RSBSri:
  case ARM::t2RSBSrs:
  case ARM::t2RSBri:
  case ARM::t2RSBrr:
  case ARM::t2RSBrs:
  case ARM::t2SADD16:
  case ARM::t2SADD8:
  case ARM::t2SASX:
  case ARM::t2SBCSri:
  case ARM::t2SBCSrr:
  case ARM::t2SBCSrs:
  case ARM::t2SBCri:
  case ARM::t2SBCrr:
  case ARM::t2SBCrs:
  case ARM::t2SDIV:
  case ARM::t2SEL:
  case ARM::t2SHADD16:
  case ARM::t2SHADD8:
  case ARM::t2SHASX:
  case ARM::t2SHSAX:
  case ARM::t2SHSUB16:
  case ARM::t2SHSUB8:
  case ARM::t2SMMUL:
  case ARM::t2SMMULR:
  case ARM::t2SMUAD:
  case ARM::t2SMUADX:
  case ARM::t2SMULBB:
  case ARM::t2SMULBT:
  case ARM::t2SMULTB:
  case ARM::t2SMULTT:
  case ARM::t2SMULWB:
  case ARM::t2SMULWT:
  case ARM::t2SMUSD:
  case ARM::t2SMUSDX:
  case ARM::t2SSAT16:
  case ARM::t2SSAX:
  case ARM::t2SSUB16:
  case ARM::t2SSUB8:
  case ARM::t2STRDi8:
  case ARM::t2SUBSri:
  case ARM::t2SUBSrr:
  case ARM::t2SUBSrs:
  case ARM::t2SUBrSPi:
  case ARM::t2SUBrSPi12:
  case ARM::t2SUBrSPs:
  case ARM::t2SUBri:
  case ARM::t2SUBri12:
  case ARM::t2SUBrr:
  case ARM::t2SUBrs:
  case ARM::t2SXTAB16rr:
  case ARM::t2SXTABrr:
  case ARM::t2SXTAHrr:
  case ARM::t2UADD16:
  case ARM::t2UADD8:
  case ARM::t2UASX:
  case ARM::t2UDIV:
  case ARM::t2UHADD16:
  case ARM::t2UHADD8:
  case ARM::t2UHASX:
  case ARM::t2UHSAX:
  case ARM::t2UHSUB16:
  case ARM::t2UHSUB8:
  case ARM::t2UQADD16:
  case ARM::t2UQADD8:
  case ARM::t2UQASX:
  case ARM::t2UQSAX:
  case ARM::t2UQSUB16:
  case ARM::t2UQSUB8:
  case ARM::t2USAD8:
  case ARM::t2USAT16:
  case ARM::t2USAX:
  case ARM::t2USUB16:
  case ARM::t2USUB8:
  case ARM::t2UXTAB16rr:
  case ARM::t2UXTABrr:
  case ARM::t2UXTAHrr:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::ADCri: 
    case ARM::ADDSri: 
    case ARM::ADDri: 
    case ARM::ANDri: 
    case ARM::BICri: 
    case ARM::EORri: 
    case ARM::ORRri: 
    case ARM::RSBSri: 
    case ARM::RSBri: 
    case ARM::RSCri: 
    case ARM::SBCri: 
    case ARM::SUBSri: 
    case ARM::SUBri: printSOImmOperand(MI, 2, O); break;
    case ARM::ADCrr: 
    case ARM::ADDSrr: 
    case ARM::ADDrr: 
    case ARM::ANDrr: 
    case ARM::BICrr: 
    case ARM::EORrr: 
    case ARM::MUL: 
    case ARM::ORRrr: 
    case ARM::QADD: 
    case ARM::QADD16: 
    case ARM::QADD8: 
    case ARM::QASX: 
    case ARM::QDADD: 
    case ARM::QDSUB: 
    case ARM::QSAX: 
    case ARM::QSUB: 
    case ARM::QSUB16: 
    case ARM::QSUB8: 
    case ARM::RSBSrr: 
    case ARM::RSBrr: 
    case ARM::RSCrr: 
    case ARM::SADD16: 
    case ARM::SADD8: 
    case ARM::SASX: 
    case ARM::SBCrr: 
    case ARM::SEL: 
    case ARM::SHADD16: 
    case ARM::SHADD8: 
    case ARM::SHASX: 
    case ARM::SHSAX: 
    case ARM::SHSUB16: 
    case ARM::SHSUB8: 
    case ARM::SMMUL: 
    case ARM::SMMULR: 
    case ARM::SMUAD: 
    case ARM::SMUADX: 
    case ARM::SMULBB: 
    case ARM::SMULBT: 
    case ARM::SMULTB: 
    case ARM::SMULTT: 
    case ARM::SMULWB: 
    case ARM::SMULWT: 
    case ARM::SMUSD: 
    case ARM::SMUSDX: 
    case ARM::SSAT16: 
    case ARM::SSAX: 
    case ARM::SSUB16: 
    case ARM::SSUB8: 
    case ARM::SUBSrr: 
    case ARM::SUBrr: 
    case ARM::SXTAB16rr: 
    case ARM::SXTABrr: 
    case ARM::SXTAHrr: 
    case ARM::UADD16: 
    case ARM::UADD8: 
    case ARM::UASX: 
    case ARM::UHADD16: 
    case ARM::UHADD8: 
    case ARM::UHASX: 
    case ARM::UHSAX: 
    case ARM::UHSUB16: 
    case ARM::UHSUB8: 
    case ARM::UQADD16: 
    case ARM::UQADD8: 
    case ARM::UQASX: 
    case ARM::UQSAX: 
    case ARM::UQSUB16: 
    case ARM::UQSUB8: 
    case ARM::USAD8: 
    case ARM::USAT16: 
    case ARM::USAX: 
    case ARM::USUB16: 
    case ARM::USUB8: 
    case ARM::UXTAB16rr: 
    case ARM::UXTABrr: 
    case ARM::UXTAHrr: 
    case ARM::VANDd: 
    case ARM::VANDq: 
    case ARM::VBICd: 
    case ARM::VBICq: 
    case ARM::VEORd: 
    case ARM::VEORq: 
    case ARM::VMOVDRR: 
    case ARM::VMOVRRD: 
    case ARM::VORNd: 
    case ARM::VORNq: 
    case ARM::VORRd: 
    case ARM::VORRq: 
    case ARM::t2ADCSri: 
    case ARM::t2ADCSrr: 
    case ARM::t2ADCri: 
    case ARM::t2ADCrr: 
    case ARM::t2ADDSri: 
    case ARM::t2ADDSrr: 
    case ARM::t2ADDrSPi: 
    case ARM::t2ADDrSPi12: 
    case ARM::t2ADDri: 
    case ARM::t2ADDri12: 
    case ARM::t2ADDrr: 
    case ARM::t2ANDri: 
    case ARM::t2ANDrr: 
    case ARM::t2ASRri: 
    case ARM::t2ASRrr: 
    case ARM::t2BICri: 
    case ARM::t2BICrr: 
    case ARM::t2EORri: 
    case ARM::t2EORrr: 
    case ARM::t2LSLri: 
    case ARM::t2LSLrr: 
    case ARM::t2LSRri: 
    case ARM::t2LSRrr: 
    case ARM::t2MUL: 
    case ARM::t2ORNri: 
    case ARM::t2ORNrr: 
    case ARM::t2ORRri: 
    case ARM::t2ORRrr: 
    case ARM::t2QADD: 
    case ARM::t2QADD16: 
    case ARM::t2QADD8: 
    case ARM::t2QASX: 
    case ARM::t2QDADD: 
    case ARM::t2QDSUB: 
    case ARM::t2QSAX: 
    case ARM::t2QSUB: 
    case ARM::t2QSUB16: 
    case ARM::t2QSUB8: 
    case ARM::t2RORri: 
    case ARM::t2RORrr: 
    case ARM::t2RSBSri: 
    case ARM::t2RSBri: 
    case ARM::t2RSBrr: 
    case ARM::t2SADD16: 
    case ARM::t2SADD8: 
    case ARM::t2SASX: 
    case ARM::t2SBCSri: 
    case ARM::t2SBCSrr: 
    case ARM::t2SBCri: 
    case ARM::t2SBCrr: 
    case ARM::t2SDIV: 
    case ARM::t2SEL: 
    case ARM::t2SHADD16: 
    case ARM::t2SHADD8: 
    case ARM::t2SHASX: 
    case ARM::t2SHSAX: 
    case ARM::t2SHSUB16: 
    case ARM::t2SHSUB8: 
    case ARM::t2SMMUL: 
    case ARM::t2SMMULR: 
    case ARM::t2SMUAD: 
    case ARM::t2SMUADX: 
    case ARM::t2SMULBB: 
    case ARM::t2SMULBT: 
    case ARM::t2SMULTB: 
    case ARM::t2SMULTT: 
    case ARM::t2SMULWB: 
    case ARM::t2SMULWT: 
    case ARM::t2SMUSD: 
    case ARM::t2SMUSDX: 
    case ARM::t2SSAT16: 
    case ARM::t2SSAX: 
    case ARM::t2SSUB16: 
    case ARM::t2SSUB8: 
    case ARM::t2SUBSri: 
    case ARM::t2SUBSrr: 
    case ARM::t2SUBrSPi: 
    case ARM::t2SUBrSPi12: 
    case ARM::t2SUBri: 
    case ARM::t2SUBri12: 
    case ARM::t2SUBrr: 
    case ARM::t2SXTAB16rr: 
    case ARM::t2SXTABrr: 
    case ARM::t2SXTAHrr: 
    case ARM::t2UADD16: 
    case ARM::t2UADD8: 
    case ARM::t2UASX: 
    case ARM::t2UDIV: 
    case ARM::t2UHADD16: 
    case ARM::t2UHADD8: 
    case ARM::t2UHASX: 
    case ARM::t2UHSAX: 
    case ARM::t2UHSUB16: 
    case ARM::t2UHSUB8: 
    case ARM::t2UQADD16: 
    case ARM::t2UQADD8: 
    case ARM::t2UQASX: 
    case ARM::t2UQSAX: 
    case ARM::t2UQSUB16: 
    case ARM::t2UQSUB8: 
    case ARM::t2USAD8: 
    case ARM::t2USAT16: 
    case ARM::t2USAX: 
    case ARM::t2USUB16: 
    case ARM::t2USUB8: 
    case ARM::t2UXTAB16rr: 
    case ARM::t2UXTABrr: 
    case ARM::t2UXTAHrr: printOperand(MI, 2, O); break;
    case ARM::ADDSrs: 
    case ARM::RSBSrs: 
    case ARM::SUBSrs: printSORegOperand(MI, 2, O); break;
    case ARM::t2ADCSrs: 
    case ARM::t2ADCrs: 
    case ARM::t2ADDSrs: 
    case ARM::t2ADDrSPs: 
    case ARM::t2ADDrs: 
    case ARM::t2ANDrs: 
    case ARM::t2BICrs: 
    case ARM::t2EORrs: 
    case ARM::t2ORNrs: 
    case ARM::t2ORRrs: 
    case ARM::t2RSBSrs: 
    case ARM::t2RSBrs: 
    case ARM::t2SBCSrs: 
    case ARM::t2SBCrs: 
    case ARM::t2SUBSrs: 
    case ARM::t2SUBrSPs: 
    case ARM::t2SUBrs: printT2SOOperand(MI, 2, O); break;
    case ARM::t2LDRDi8: 
    case ARM::t2STRDi8: printT2AddrModeImm8s4Operand(MI, 2, O); break;
    }
    return;
    break;
  case ARM::ADR:
  case ARM::t2ADR:
  case ARM::tADR:
    O << ", #"; 
    printOperand(MI, 1, O); 
    return;
    break;
  case ARM::BFI:
  case ARM::VBIFd:
  case ARM::VBIFq:
  case ARM::VBITd:
  case ARM::VBITq:
  case ARM::VBSLd:
  case ARM::VBSLq:
  case ARM::t2BFI:
  case ARM::t2MOVCCasr:
  case ARM::t2MOVCClsl:
  case ARM::t2MOVCClsr:
  case ARM::t2MOVCCror:
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::BFI: 
    case ARM::t2BFI: printBitfieldInvMaskImmOperand(MI, 3, O); break;
    case ARM::VBIFd: 
    case ARM::VBIFq: 
    case ARM::VBITd: 
    case ARM::VBITq: 
    case ARM::VBSLd: 
    case ARM::VBSLq: 
    case ARM::t2MOVCCasr: 
    case ARM::t2MOVCClsl: 
    case ARM::t2MOVCClsr: 
    case ARM::t2MOVCCror: printOperand(MI, 3, O); break;
    }
    return;
    break;
  case ARM::BFI4p:
  case ARM::t2BFI4p:
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    return;
    break;
  case ARM::BKPT:
  case ARM::BLX_pred:
  case ARM::BLXr9_pred:
  case ARM::BL_pred:
  case ARM::BLr9_pred:
  case ARM::BXJ:
  case ARM::Bcc:
  case ARM::CPS2p:
  case ARM::DBG:
  case ARM::RFE:
  case ARM::SMC:
  case ARM::SRS:
  case ARM::SRSW:
  case ARM::SVC:
  case ARM::VABSv16i8:
  case ARM::VABSv2i32:
  case ARM::VABSv4i16:
  case ARM::VABSv4i32:
  case ARM::VABSv8i16:
  case ARM::VABSv8i8:
  case ARM::VCLSv16i8:
  case ARM::VCLSv2i32:
  case ARM::VCLSv4i16:
  case ARM::VCLSv4i32:
  case ARM::VCLSv8i16:
  case ARM::VCLSv8i8:
  case ARM::VCLZv16i8:
  case ARM::VCLZv2i32:
  case ARM::VCLZv4i16:
  case ARM::VCLZv4i32:
  case ARM::VCLZv8i16:
  case ARM::VCLZv8i8:
  case ARM::VMOVLsv2i64:
  case ARM::VMOVLsv4i32:
  case ARM::VMOVLsv8i16:
  case ARM::VMOVLuv2i64:
  case ARM::VMOVLuv4i32:
  case ARM::VMOVLuv8i16:
  case ARM::VMOVNv2i32:
  case ARM::VMOVNv4i16:
  case ARM::VMOVNv8i8:
  case ARM::VNEGs16d:
  case ARM::VNEGs16q:
  case ARM::VNEGs32d:
  case ARM::VNEGs32q:
  case ARM::VNEGs8d:
  case ARM::VNEGs8q:
  case ARM::VPADALsv16i8:
  case ARM::VPADALsv2i32:
  case ARM::VPADALsv4i16:
  case ARM::VPADALsv4i32:
  case ARM::VPADALsv8i16:
  case ARM::VPADALsv8i8:
  case ARM::VPADALuv16i8:
  case ARM::VPADALuv2i32:
  case ARM::VPADALuv4i16:
  case ARM::VPADALuv4i32:
  case ARM::VPADALuv8i16:
  case ARM::VPADALuv8i8:
  case ARM::VPADDLsv16i8:
  case ARM::VPADDLsv2i32:
  case ARM::VPADDLsv4i16:
  case ARM::VPADDLsv4i32:
  case ARM::VPADDLsv8i16:
  case ARM::VPADDLsv8i8:
  case ARM::VPADDLuv16i8:
  case ARM::VPADDLuv2i32:
  case ARM::VPADDLuv4i16:
  case ARM::VPADDLuv4i32:
  case ARM::VPADDLuv8i16:
  case ARM::VPADDLuv8i8:
  case ARM::VQABSv16i8:
  case ARM::VQABSv2i32:
  case ARM::VQABSv4i16:
  case ARM::VQABSv4i32:
  case ARM::VQABSv8i16:
  case ARM::VQABSv8i8:
  case ARM::VQMOVNsuv2i32:
  case ARM::VQMOVNsuv4i16:
  case ARM::VQMOVNsuv8i8:
  case ARM::VQMOVNsv2i32:
  case ARM::VQMOVNsv4i16:
  case ARM::VQMOVNsv8i8:
  case ARM::VQMOVNuv2i32:
  case ARM::VQMOVNuv4i16:
  case ARM::VQMOVNuv8i8:
  case ARM::VQNEGv16i8:
  case ARM::VQNEGv2i32:
  case ARM::VQNEGv4i16:
  case ARM::VQNEGv4i32:
  case ARM::VQNEGv8i16:
  case ARM::VQNEGv8i8:
  case ARM::VRECPEd:
  case ARM::VRECPEq:
  case ARM::VRSQRTEd:
  case ARM::VRSQRTEq:
  case ARM::t2BXJ:
  case ARM::t2Bcc:
  case ARM::t2CPS2p:
  case ARM::t2DBG:
  case ARM::t2RFEDB:
  case ARM::t2RFEIA:
  case ARM::t2SMC:
  case ARM::t2SRSDB:
  case ARM::t2SRSDBW:
  case ARM::t2SRSIA:
  case ARM::t2SRSIAW:
  case ARM::tADC:
  case ARM::tADDi8:
  case ARM::tADDrSP:
  case ARM::tADDspr:
  case ARM::tAND:
  case ARM::tASRrr:
  case ARM::tBIC:
  case ARM::tBLXi_r9:
  case ARM::tBLXr_r9:
  case ARM::tBLr9:
  case ARM::tBcc:
  case ARM::tCBNZ:
  case ARM::tCBZ:
  case ARM::tEOR:
  case ARM::tLSLrr:
  case ARM::tLSRrr:
  case ARM::tMOVSr:
  case ARM::tMOVgpr2gpr:
  case ARM::tMOVgpr2tgpr:
  case ARM::tMOVr:
  case ARM::tMOVtgpr2gpr:
  case ARM::tORR:
  case ARM::tROR:
  case ARM::tSBC:
  case ARM::tSUBi8:
  case ARM::tSVC:
    return;
    break;
  case ARM::CDP:
  case ARM::MCR:
  case ARM::MRC:
    switch (MI->getOpcode()) {
    case ARM::CDP: printCImmediate(MI, 2, O); break;
    case ARM::MCR: 
    case ARM::MRC: printOperand(MI, 2, O); break;
    }
    O << ", "; 
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case ARM::FCONSTD:
  case ARM::FCONSTS:
  case ARM::LDC2L_OFFSET:
  case ARM::LDC2L_OPTION:
  case ARM::LDC2L_POST:
  case ARM::LDC2_OFFSET:
  case ARM::LDC2_OPTION:
  case ARM::LDC2_POST:
  case ARM::LDCL_OFFSET:
  case ARM::LDCL_OPTION:
  case ARM::LDCL_POST:
  case ARM::LDC_OFFSET:
  case ARM::LDC_OPTION:
  case ARM::LDC_POST:
  case ARM::MRS:
  case ARM::MRSsys:
  case ARM::MSR:
  case ARM::MSRi:
  case ARM::RFEW:
  case ARM::STC2L_OFFSET:
  case ARM::STC2L_OPTION:
  case ARM::STC2L_POST:
  case ARM::STC2_OFFSET:
  case ARM::STC2_OPTION:
  case ARM::STC2_POST:
  case ARM::STCL_OFFSET:
  case ARM::STCL_OPTION:
  case ARM::STCL_POST:
  case ARM::STC_OFFSET:
  case ARM::STC_OPTION:
  case ARM::STC_POST:
  case ARM::VABSD:
  case ARM::VABSS:
  case ARM::VABSfd:
  case ARM::VABSfq:
  case ARM::VCEQzv16i8:
  case ARM::VCEQzv2i32:
  case ARM::VCEQzv4i16:
  case ARM::VCEQzv4i32:
  case ARM::VCEQzv8i16:
  case ARM::VCEQzv8i8:
  case ARM::VCGEzv16i8:
  case ARM::VCGEzv2i32:
  case ARM::VCGEzv4i16:
  case ARM::VCGEzv4i32:
  case ARM::VCGEzv8i16:
  case ARM::VCGEzv8i8:
  case ARM::VCGTzv16i8:
  case ARM::VCGTzv2i32:
  case ARM::VCGTzv4i16:
  case ARM::VCGTzv4i32:
  case ARM::VCGTzv8i16:
  case ARM::VCGTzv8i8:
  case ARM::VCLEzv16i8:
  case ARM::VCLEzv2i32:
  case ARM::VCLEzv4i16:
  case ARM::VCLEzv4i32:
  case ARM::VCLEzv8i16:
  case ARM::VCLEzv8i8:
  case ARM::VCLTzv16i8:
  case ARM::VCLTzv2i32:
  case ARM::VCLTzv4i16:
  case ARM::VCLTzv4i32:
  case ARM::VCLTzv8i16:
  case ARM::VCLTzv8i8:
  case ARM::VCMPD:
  case ARM::VCMPED:
  case ARM::VCMPES:
  case ARM::VCMPS:
  case ARM::VCNTd:
  case ARM::VCNTq:
  case ARM::VCVTf2xsd:
  case ARM::VCVTf2xsq:
  case ARM::VCVTf2xud:
  case ARM::VCVTf2xuq:
  case ARM::VCVTxs2fd:
  case ARM::VCVTxs2fq:
  case ARM::VCVTxu2fd:
  case ARM::VCVTxu2fq:
  case ARM::VDUP16d:
  case ARM::VDUP16q:
  case ARM::VDUP32d:
  case ARM::VDUP32q:
  case ARM::VDUP8d:
  case ARM::VDUP8q:
  case ARM::VDUPfd:
  case ARM::VDUPfq:
  case ARM::VLDRS:
  case ARM::VMOVD:
  case ARM::VMOVDcc:
  case ARM::VMOVS:
  case ARM::VMOVScc:
  case ARM::VMRS:
  case ARM::VMRS_FPEXC:
  case ARM::VMRS_FPSID:
  case ARM::VNEGD:
  case ARM::VNEGS:
  case ARM::VNEGf32q:
  case ARM::VNEGfd:
  case ARM::VRECPEfd:
  case ARM::VRECPEfq:
  case ARM::VREV16d8:
  case ARM::VREV16q8:
  case ARM::VREV32d16:
  case ARM::VREV32d8:
  case ARM::VREV32q16:
  case ARM::VREV32q8:
  case ARM::VREV64d16:
  case ARM::VREV64d32:
  case ARM::VREV64d8:
  case ARM::VREV64df:
  case ARM::VREV64q16:
  case ARM::VREV64q32:
  case ARM::VREV64q8:
  case ARM::VREV64qf:
  case ARM::VRSQRTEfd:
  case ARM::VRSQRTEfq:
  case ARM::VSLTOD:
  case ARM::VSLTOS:
  case ARM::VSQRTD:
  case ARM::VSQRTS:
  case ARM::VSTRS:
  case ARM::VTOSLD:
  case ARM::VTOSLS:
  case ARM::VTOULD:
  case ARM::VTOULS:
  case ARM::VTRNd16:
  case ARM::VTRNd32:
  case ARM::VTRNd8:
  case ARM::VTRNq16:
  case ARM::VTRNq32:
  case ARM::VTRNq8:
  case ARM::VULTOD:
  case ARM::VULTOS:
  case ARM::VUZPd16:
  case ARM::VUZPd32:
  case ARM::VUZPd8:
  case ARM::VUZPq16:
  case ARM::VUZPq32:
  case ARM::VUZPq8:
  case ARM::VZIPd16:
  case ARM::VZIPd32:
  case ARM::VZIPd8:
  case ARM::VZIPq16:
  case ARM::VZIPq32:
  case ARM::VZIPq8:
  case ARM::t2MRS:
  case ARM::t2MRSsys:
  case ARM::t2MSR:
  case ARM::t2RFEDBW:
  case ARM::t2RFEIAW:
    switch (MI->getOpcode()) {
    case ARM::FCONSTD: printVFPf64ImmOperand(MI, 1, O); break;
    case ARM::FCONSTS: printVFPf32ImmOperand(MI, 1, O); break;
    case ARM::LDC2L_OFFSET: 
    case ARM::LDC2_OFFSET: 
    case ARM::LDCL_OFFSET: 
    case ARM::LDC_OFFSET: 
    case ARM::STC2L_OFFSET: 
    case ARM::STC2_OFFSET: 
    case ARM::STCL_OFFSET: 
    case ARM::STC_OFFSET: printAddrMode2Operand(MI, 2, O); break;
    case ARM::LDC2L_OPTION: 
    case ARM::LDCL_OPTION: 
    case ARM::STC2L_OPTION: 
    case ARM::STCL_OPTION: printNoHashImmediate(MI, 3, O); break;
    case ARM::LDC2L_POST: 
    case ARM::LDC2_POST: 
    case ARM::LDCL_POST: 
    case ARM::LDC_POST: 
    case ARM::STC2L_POST: 
    case ARM::STC2_POST: 
    case ARM::STCL_POST: 
    case ARM::STC_POST: printAddrMode2OffsetOperand(MI, 3, O); break;
    case ARM::LDC2_OPTION: 
    case ARM::LDC_OPTION: 
    case ARM::STC2_OPTION: 
    case ARM::STC_OPTION: printOperand(MI, 3, O); break;
    case ARM::MRS: 
    case ARM::t2MRS: O << ", cpsr"; break;
    case ARM::MRSsys: 
    case ARM::t2MRSsys: O << ", spsr"; break;
    case ARM::MSR: 
    case ARM::VABSD: 
    case ARM::VABSS: 
    case ARM::VABSfd: 
    case ARM::VABSfq: 
    case ARM::VCMPD: 
    case ARM::VCMPED: 
    case ARM::VCMPES: 
    case ARM::VCMPS: 
    case ARM::VCNTd: 
    case ARM::VCNTq: 
    case ARM::VDUP16d: 
    case ARM::VDUP16q: 
    case ARM::VDUP32d: 
    case ARM::VDUP32q: 
    case ARM::VDUP8d: 
    case ARM::VDUP8q: 
    case ARM::VDUPfd: 
    case ARM::VDUPfq: 
    case ARM::VMOVD: 
    case ARM::VMOVS: 
    case ARM::VNEGD: 
    case ARM::VNEGS: 
    case ARM::VNEGf32q: 
    case ARM::VNEGfd: 
    case ARM::VRECPEfd: 
    case ARM::VRECPEfq: 
    case ARM::VREV16d8: 
    case ARM::VREV16q8: 
    case ARM::VREV32d16: 
    case ARM::VREV32d8: 
    case ARM::VREV32q16: 
    case ARM::VREV32q8: 
    case ARM::VREV64d16: 
    case ARM::VREV64d32: 
    case ARM::VREV64d8: 
    case ARM::VREV64df: 
    case ARM::VREV64q16: 
    case ARM::VREV64q32: 
    case ARM::VREV64q8: 
    case ARM::VREV64qf: 
    case ARM::VRSQRTEfd: 
    case ARM::VRSQRTEfq: 
    case ARM::VSQRTD: 
    case ARM::VSQRTS: 
    case ARM::VTRNd16: 
    case ARM::VTRNd32: 
    case ARM::VTRNd8: 
    case ARM::VTRNq16: 
    case ARM::VTRNq32: 
    case ARM::VTRNq8: 
    case ARM::VUZPd16: 
    case ARM::VUZPd32: 
    case ARM::VUZPd8: 
    case ARM::VUZPq16: 
    case ARM::VUZPq32: 
    case ARM::VUZPq8: 
    case ARM::VZIPd16: 
    case ARM::VZIPd32: 
    case ARM::VZIPd8: 
    case ARM::VZIPq16: 
    case ARM::VZIPq32: 
    case ARM::VZIPq8: 
    case ARM::t2MSR: printOperand(MI, 1, O); break;
    case ARM::MSRi: printSOImmOperand(MI, 1, O); break;
    case ARM::RFEW: 
    case ARM::t2RFEDBW: 
    case ARM::t2RFEIAW: O << '!'; break;
    case ARM::VCEQzv16i8: 
    case ARM::VCEQzv2i32: 
    case ARM::VCEQzv4i16: 
    case ARM::VCEQzv4i32: 
    case ARM::VCEQzv8i16: 
    case ARM::VCEQzv8i8: 
    case ARM::VCGEzv16i8: 
    case ARM::VCGEzv2i32: 
    case ARM::VCGEzv4i16: 
    case ARM::VCGEzv4i32: 
    case ARM::VCGEzv8i16: 
    case ARM::VCGEzv8i8: 
    case ARM::VCGTzv16i8: 
    case ARM::VCGTzv2i32: 
    case ARM::VCGTzv4i16: 
    case ARM::VCGTzv4i32: 
    case ARM::VCGTzv8i16: 
    case ARM::VCGTzv8i8: 
    case ARM::VCLEzv16i8: 
    case ARM::VCLEzv2i32: 
    case ARM::VCLEzv4i16: 
    case ARM::VCLEzv4i32: 
    case ARM::VCLEzv8i16: 
    case ARM::VCLEzv8i8: 
    case ARM::VCLTzv16i8: 
    case ARM::VCLTzv2i32: 
    case ARM::VCLTzv4i16: 
    case ARM::VCLTzv4i32: 
    case ARM::VCLTzv8i16: 
    case ARM::VCLTzv8i8: O << ", #0"; break;
    case ARM::VCVTf2xsd: 
    case ARM::VCVTf2xsq: 
    case ARM::VCVTf2xud: 
    case ARM::VCVTf2xuq: 
    case ARM::VCVTxs2fd: 
    case ARM::VCVTxs2fq: 
    case ARM::VCVTxu2fd: 
    case ARM::VCVTxu2fq: 
    case ARM::VMOVDcc: 
    case ARM::VMOVScc: 
    case ARM::VSLTOD: 
    case ARM::VSLTOS: 
    case ARM::VTOSLD: 
    case ARM::VTOSLS: 
    case ARM::VTOULD: 
    case ARM::VTOULS: 
    case ARM::VULTOD: 
    case ARM::VULTOS: printOperand(MI, 2, O); break;
    case ARM::VLDRS: 
    case ARM::VSTRS: printAddrMode5Operand(MI, 1, O); break;
    case ARM::VMRS: O << ", fpscr"; break;
    case ARM::VMRS_FPEXC: O << ", fpexc"; break;
    case ARM::VMRS_FPSID: O << ", fpsid"; break;
    }
    return;
    break;
  case ARM::LDC2L_PRE:
  case ARM::LDC2_PRE:
  case ARM::LDCL_PRE:
  case ARM::LDC_PRE:
  case ARM::STC2L_PRE:
  case ARM::STC2_PRE:
  case ARM::STCL_PRE:
  case ARM::STC_PRE:
    printAddrMode2Operand(MI, 2, O); 
    O << '!'; 
    return;
    break;
  case ARM::LDMDA_UPD:
  case ARM::LDMDB_UPD:
  case ARM::LDMIA_RET:
  case ARM::LDMIA_UPD:
  case ARM::LDMIB_UPD:
  case ARM::STMDA_UPD:
  case ARM::STMDB_UPD:
  case ARM::STMIA_UPD:
  case ARM::STMIB_UPD:
  case ARM::VLDMDDB_UPD:
  case ARM::VLDMDIA_UPD:
  case ARM::VLDMSDB_UPD:
  case ARM::VLDMSIA_UPD:
  case ARM::VSTMDDB_UPD:
  case ARM::VSTMDIA_UPD:
  case ARM::VSTMSDB_UPD:
  case ARM::VSTMSIA_UPD:
  case ARM::t2LDMIA_RET:
  case ARM::t2LDMIA_UPD:
  case ARM::t2STMIA_UPD:
  case ARM::tLDMIA_UPD:
  case ARM::tSTMIA_UPD:
    O << "!, "; 
    printRegisterList(MI, 4, O); 
    return;
    break;
  case ARM::LDRBT:
  case ARM::LDRB_POST:
  case ARM::LDRD_POST:
  case ARM::LDRHT:
  case ARM::LDRH_POST:
  case ARM::LDRSBT:
  case ARM::LDRSB_POST:
  case ARM::LDRSHT:
  case ARM::LDRSH_POST:
  case ARM::LDRT:
  case ARM::LDR_POST:
  case ARM::STRBT:
  case ARM::STRB_POST:
  case ARM::STRHT:
  case ARM::STRH_POST:
  case ARM::STRT:
  case ARM::STR_POST:
  case ARM::t2STRB_POST:
  case ARM::t2STRH_POST:
  case ARM::t2STR_POST:
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << "], "; 
    switch (MI->getOpcode()) {
    case ARM::LDRBT: 
    case ARM::LDRB_POST: 
    case ARM::LDRT: 
    case ARM::LDR_POST: 
    case ARM::STRBT: 
    case ARM::STRB_POST: 
    case ARM::STRT: 
    case ARM::STR_POST: printAddrMode2OffsetOperand(MI, 3, O); break;
    case ARM::LDRD_POST: 
    case ARM::LDRHT: 
    case ARM::LDRH_POST: 
    case ARM::LDRSBT: 
    case ARM::LDRSB_POST: 
    case ARM::LDRSHT: 
    case ARM::LDRSH_POST: 
    case ARM::STRHT: 
    case ARM::STRH_POST: printAddrMode3OffsetOperand(MI, 3, O); break;
    case ARM::t2STRB_POST: 
    case ARM::t2STRH_POST: 
    case ARM::t2STR_POST: printT2AddrModeImm8OffsetOperand(MI, 3, O); break;
    }
    return;
    break;
  case ARM::LDRB_PRE:
  case ARM::LDRD_PRE:
  case ARM::LDRH_PRE:
  case ARM::LDRSB_PRE:
  case ARM::LDRSH_PRE:
  case ARM::LDR_PRE:
  case ARM::t2LDRB_PRE:
  case ARM::t2LDRH_PRE:
  case ARM::t2LDRSB_PRE:
  case ARM::t2LDRSH_PRE:
  case ARM::t2LDR_PRE:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::LDRB_PRE: 
    case ARM::LDR_PRE: printAddrMode2Operand(MI, 2, O); break;
    case ARM::LDRD_PRE: 
    case ARM::LDRH_PRE: 
    case ARM::LDRSB_PRE: 
    case ARM::LDRSH_PRE: printAddrMode3Operand(MI, 2, O); break;
    case ARM::t2LDRB_PRE: 
    case ARM::t2LDRH_PRE: 
    case ARM::t2LDRSB_PRE: 
    case ARM::t2LDRSH_PRE: 
    case ARM::t2LDR_PRE: printT2AddrModeImm8Operand(MI, 2, O); break;
    }
    O << '!'; 
    return;
    break;
  case ARM::LDREX:
  case ARM::LDREXB:
  case ARM::LDREXH:
  case ARM::t2LDREX:
  case ARM::t2LDREXB:
  case ARM::t2LDREXH:
    O << ", ["; 
    printOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case ARM::LDREXD:
  case ARM::STREX:
  case ARM::STREXB:
  case ARM::STREXH:
  case ARM::SWP:
  case ARM::SWPB:
  case ARM::t2LDREXD:
  case ARM::t2STREX:
  case ARM::t2STREXB:
  case ARM::t2STREXH:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case ARM::MCRR:
  case ARM::MRRC:
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    return;
    break;
  case ARM::MLA:
  case ARM::MLS:
  case ARM::SBFX:
  case ARM::SMLABB:
  case ARM::SMLABT:
  case ARM::SMLAD:
  case ARM::SMLADX:
  case ARM::SMLAL:
  case ARM::SMLALBB:
  case ARM::SMLALBT:
  case ARM::SMLALD:
  case ARM::SMLALDX:
  case ARM::SMLALTB:
  case ARM::SMLALTT:
  case ARM::SMLATB:
  case ARM::SMLATT:
  case ARM::SMLAWB:
  case ARM::SMLAWT:
  case ARM::SMLSD:
  case ARM::SMLSDX:
  case ARM::SMLSLD:
  case ARM::SMLSLDX:
  case ARM::SMMLA:
  case ARM::SMMLAR:
  case ARM::SMMLS:
  case ARM::SMMLSR:
  case ARM::SMULL:
  case ARM::SXTAB16rr_rot:
  case ARM::SXTABrr_rot:
  case ARM::SXTAHrr_rot:
  case ARM::UBFX:
  case ARM::UMAAL:
  case ARM::UMLAL:
  case ARM::UMULL:
  case ARM::USADA8:
  case ARM::UXTAB16rr_rot:
  case ARM::UXTABrr_rot:
  case ARM::UXTAHrr_rot:
  case ARM::VMOVRRS:
  case ARM::VMOVSRR:
  case ARM::t2MLA:
  case ARM::t2MLS:
  case ARM::t2SBFX:
  case ARM::t2SMLABB:
  case ARM::t2SMLABT:
  case ARM::t2SMLAD:
  case ARM::t2SMLADX:
  case ARM::t2SMLAL:
  case ARM::t2SMLALBB:
  case ARM::t2SMLALBT:
  case ARM::t2SMLALD:
  case ARM::t2SMLALDX:
  case ARM::t2SMLALTB:
  case ARM::t2SMLALTT:
  case ARM::t2SMLATB:
  case ARM::t2SMLATT:
  case ARM::t2SMLAWB:
  case ARM::t2SMLAWT:
  case ARM::t2SMLSD:
  case ARM::t2SMLSDX:
  case ARM::t2SMLSLD:
  case ARM::t2SMLSLDX:
  case ARM::t2SMMLA:
  case ARM::t2SMMLAR:
  case ARM::t2SMMLS:
  case ARM::t2SMMLSR:
  case ARM::t2SMULL:
  case ARM::t2SXTAB16rr_rot:
  case ARM::t2SXTABrr_rot:
  case ARM::t2SXTAHrr_rot:
  case ARM::t2UBFX:
  case ARM::t2UMAAL:
  case ARM::t2UMLAL:
  case ARM::t2UMULL:
  case ARM::t2USADA8:
  case ARM::t2UXTAB16rr_rot:
  case ARM::t2UXTABrr_rot:
  case ARM::t2UXTAHrr_rot:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    switch (MI->getOpcode()) {
    case ARM::MLA: 
    case ARM::MLS: 
    case ARM::SBFX: 
    case ARM::SMLABB: 
    case ARM::SMLABT: 
    case ARM::SMLAD: 
    case ARM::SMLADX: 
    case ARM::SMLAL: 
    case ARM::SMLALBB: 
    case ARM::SMLALBT: 
    case ARM::SMLALD: 
    case ARM::SMLALDX: 
    case ARM::SMLALTB: 
    case ARM::SMLALTT: 
    case ARM::SMLATB: 
    case ARM::SMLATT: 
    case ARM::SMLAWB: 
    case ARM::SMLAWT: 
    case ARM::SMLSD: 
    case ARM::SMLSDX: 
    case ARM::SMLSLD: 
    case ARM::SMLSLDX: 
    case ARM::SMMLA: 
    case ARM::SMMLAR: 
    case ARM::SMMLS: 
    case ARM::SMMLSR: 
    case ARM::SMULL: 
    case ARM::UBFX: 
    case ARM::UMAAL: 
    case ARM::UMLAL: 
    case ARM::UMULL: 
    case ARM::USADA8: 
    case ARM::VMOVRRS: 
    case ARM::VMOVSRR: 
    case ARM::t2MLA: 
    case ARM::t2MLS: 
    case ARM::t2SBFX: 
    case ARM::t2SMLABB: 
    case ARM::t2SMLABT: 
    case ARM::t2SMLAD: 
    case ARM::t2SMLADX: 
    case ARM::t2SMLAL: 
    case ARM::t2SMLALBB: 
    case ARM::t2SMLALBT: 
    case ARM::t2SMLALD: 
    case ARM::t2SMLALDX: 
    case ARM::t2SMLALTB: 
    case ARM::t2SMLALTT: 
    case ARM::t2SMLATB: 
    case ARM::t2SMLATT: 
    case ARM::t2SMLAWB: 
    case ARM::t2SMLAWT: 
    case ARM::t2SMLSD: 
    case ARM::t2SMLSDX: 
    case ARM::t2SMLSLD: 
    case ARM::t2SMLSLDX: 
    case ARM::t2SMMLA: 
    case ARM::t2SMMLAR: 
    case ARM::t2SMMLS: 
    case ARM::t2SMMLSR: 
    case ARM::t2SMULL: 
    case ARM::t2UBFX: 
    case ARM::t2UMAAL: 
    case ARM::t2UMLAL: 
    case ARM::t2UMULL: 
    case ARM::t2USADA8: O << ", "; break;
    case ARM::SXTAB16rr_rot: 
    case ARM::SXTABrr_rot: 
    case ARM::SXTAHrr_rot: 
    case ARM::UXTAB16rr_rot: 
    case ARM::UXTABrr_rot: 
    case ARM::UXTAHrr_rot: 
    case ARM::t2SXTAB16rr_rot: 
    case ARM::t2SXTABrr_rot: 
    case ARM::t2SXTAHrr_rot: 
    case ARM::t2UXTAB16rr_rot: 
    case ARM::t2UXTABrr_rot: 
    case ARM::t2UXTAHrr_rot: O << ", ror "; break;
    }
    printOperand(MI, 3, O); 
    return;
    break;
  case ARM::PKHBT:
  case ARM::PKHTB:
  case ARM::SSAT:
  case ARM::USAT:
  case ARM::t2PKHBT:
  case ARM::t2PKHTB:
  case ARM::t2SSAT:
  case ARM::t2USAT:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    printShiftImmOperand(MI, 3, O); 
    return;
    break;
  case ARM::STRB_PRE:
  case ARM::STRH_PRE:
  case ARM::STR_PRE:
  case ARM::t2STRB_PRE:
  case ARM::t2STRH_PRE:
  case ARM::t2STR_PRE:
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::STRB_PRE: 
    case ARM::STR_PRE: printAddrMode2OffsetOperand(MI, 3, O); break;
    case ARM::STRH_PRE: printAddrMode3OffsetOperand(MI, 3, O); break;
    case ARM::t2STRB_PRE: 
    case ARM::t2STRH_PRE: 
    case ARM::t2STR_PRE: printT2AddrModeImm8OffsetOperand(MI, 3, O); break;
    }
    O << "]!"; 
    return;
    break;
  case ARM::STRD_POST:
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", ["; 
    printOperand(MI, 3, O); 
    O << "], "; 
    printAddrMode3OffsetOperand(MI, 4, O); 
    return;
    break;
  case ARM::STRD_PRE:
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", ["; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printAddrMode3OffsetOperand(MI, 4, O); 
    O << "]!"; 
    return;
    break;
  case ARM::STREXD:
  case ARM::t2STREXD:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", ["; 
    printOperand(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case ARM::SXTB16r_rot:
  case ARM::SXTBr_rot:
  case ARM::SXTHr_rot:
  case ARM::UXTB16r_rot:
  case ARM::UXTBr_rot:
  case ARM::UXTHr_rot:
  case ARM::t2SXTB16r_rot:
  case ARM::t2SXTBr_rot:
  case ARM::t2SXTHr_rot:
  case ARM::t2UXTB16r_rot:
  case ARM::t2UXTBr_rot:
  case ARM::t2UXTHr_rot:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", ror "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case ARM::VABDfd:
  case ARM::VABDfq:
  case ARM::VACGEd:
  case ARM::VACGEq:
  case ARM::VACGTd:
  case ARM::VACGTq:
  case ARM::VADDD:
  case ARM::VADDS:
  case ARM::VADDfd:
  case ARM::VADDfq:
  case ARM::VCEQfd:
  case ARM::VCEQfq:
  case ARM::VCGEfd:
  case ARM::VCGEfq:
  case ARM::VCGTfd:
  case ARM::VCGTfq:
  case ARM::VDIVD:
  case ARM::VDIVS:
  case ARM::VMAXfd:
  case ARM::VMAXfq:
  case ARM::VMINfd:
  case ARM::VMINfq:
  case ARM::VMULD:
  case ARM::VMULS:
  case ARM::VMULfd:
  case ARM::VMULfq:
  case ARM::VNMULD:
  case ARM::VNMULS:
  case ARM::VPADDf:
  case ARM::VPMAXf:
  case ARM::VPMINf:
  case ARM::VRECPSfd:
  case ARM::VRECPSfq:
  case ARM::VRSQRTSfd:
  case ARM::VRSQRTSfq:
  case ARM::VSUBD:
  case ARM::VSUBS:
  case ARM::VSUBfd:
  case ARM::VSUBfq:
  case ARM::VTBL1:
  case ARM::VTSTv16i8:
  case ARM::VTSTv2i32:
  case ARM::VTSTv4i16:
  case ARM::VTSTv4i32:
  case ARM::VTSTv8i16:
  case ARM::VTSTv8i8:
    printOperand(MI, 1, O); 
    switch (MI->getOpcode()) {
    case ARM::VABDfd: 
    case ARM::VABDfq: 
    case ARM::VACGEd: 
    case ARM::VACGEq: 
    case ARM::VACGTd: 
    case ARM::VACGTq: 
    case ARM::VADDD: 
    case ARM::VADDS: 
    case ARM::VADDfd: 
    case ARM::VADDfq: 
    case ARM::VCEQfd: 
    case ARM::VCEQfq: 
    case ARM::VCGEfd: 
    case ARM::VCGEfq: 
    case ARM::VCGTfd: 
    case ARM::VCGTfq: 
    case ARM::VDIVD: 
    case ARM::VDIVS: 
    case ARM::VMAXfd: 
    case ARM::VMAXfq: 
    case ARM::VMINfd: 
    case ARM::VMINfq: 
    case ARM::VMULD: 
    case ARM::VMULS: 
    case ARM::VMULfd: 
    case ARM::VMULfq: 
    case ARM::VNMULD: 
    case ARM::VNMULS: 
    case ARM::VPADDf: 
    case ARM::VPMAXf: 
    case ARM::VPMINf: 
    case ARM::VRECPSfd: 
    case ARM::VRECPSfq: 
    case ARM::VRSQRTSfd: 
    case ARM::VRSQRTSfq: 
    case ARM::VSUBD: 
    case ARM::VSUBS: 
    case ARM::VSUBfd: 
    case ARM::VSUBfq: 
    case ARM::VTSTv16i8: 
    case ARM::VTSTv2i32: 
    case ARM::VTSTv4i16: 
    case ARM::VTSTv4i32: 
    case ARM::VTSTv8i16: 
    case ARM::VTSTv8i8: O << ", "; break;
    case ARM::VTBL1: O << "}, "; break;
    }
    printOperand(MI, 2, O); 
    return;
    break;
  case ARM::VCEQzv2f32:
  case ARM::VCEQzv4f32:
  case ARM::VCGEzv2f32:
  case ARM::VCGEzv4f32:
  case ARM::VCGTzv2f32:
  case ARM::VCGTzv4f32:
  case ARM::VCLEzv2f32:
  case ARM::VCLEzv4f32:
  case ARM::VCLTzv2f32:
  case ARM::VCLTzv4f32:
    printOperand(MI, 1, O); 
    O << ", #0"; 
    return;
    break;
  case ARM::VDUPLN16d:
  case ARM::VDUPLN16q:
  case ARM::VDUPLN32d:
  case ARM::VDUPLN32q:
  case ARM::VDUPLN8d:
  case ARM::VDUPLN8q:
  case ARM::VDUPLNfd:
  case ARM::VDUPLNfq:
  case ARM::VGETLNi32:
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case ARM::VEXTd16:
  case ARM::VEXTd32:
  case ARM::VEXTd8:
  case ARM::VEXTdf:
  case ARM::VEXTq16:
  case ARM::VEXTq32:
  case ARM::VEXTq8:
  case ARM::VEXTqf:
  case ARM::VTBL2:
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    switch (MI->getOpcode()) {
    case ARM::VEXTd16: 
    case ARM::VEXTd32: 
    case ARM::VEXTd8: 
    case ARM::VEXTdf: 
    case ARM::VEXTq16: 
    case ARM::VEXTq32: 
    case ARM::VEXTq8: 
    case ARM::VEXTqf: O << ", "; break;
    case ARM::VTBL2: O << "}, "; break;
    }
    printOperand(MI, 3, O); 
    return;
    break;
  case ARM::VGETLNs16:
  case ARM::VGETLNs8:
  case ARM::VGETLNu16:
  case ARM::VGETLNu8:
    O << '['; 
    printNoHashImmediate(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case ARM::VLD1DUPd16:
  case ARM::VLD1DUPd32:
  case ARM::VLD1DUPd8:
  case ARM::VLD1d16:
  case ARM::VLD1d32:
  case ARM::VLD1d64:
  case ARM::VLD1d8:
    switch (MI->getOpcode()) {
    case ARM::VLD1DUPd16: 
    case ARM::VLD1DUPd32: 
    case ARM::VLD1DUPd8: O << "[]}, "; break;
    case ARM::VLD1d16: 
    case ARM::VLD1d32: 
    case ARM::VLD1d64: 
    case ARM::VLD1d8: O << "}, "; break;
    }
    printAddrMode6Operand(MI, 1, O); 
    return;
    break;
  case ARM::VLD1DUPd16_UPD:
  case ARM::VLD1DUPd32_UPD:
  case ARM::VLD1DUPd8_UPD:
  case ARM::VLD1d16_UPD:
  case ARM::VLD1d32_UPD:
  case ARM::VLD1d64_UPD:
  case ARM::VLD1d8_UPD:
    switch (MI->getOpcode()) {
    case ARM::VLD1DUPd16_UPD: 
    case ARM::VLD1DUPd32_UPD: 
    case ARM::VLD1DUPd8_UPD: O << "[]}, "; break;
    case ARM::VLD1d16_UPD: 
    case ARM::VLD1d32_UPD: 
    case ARM::VLD1d64_UPD: 
    case ARM::VLD1d8_UPD: O << "}, "; break;
    }
    printAddrMode6Operand(MI, 2, O); 
    printAddrMode6OffsetOperand(MI, 4, O); 
    return;
    break;
  case ARM::VLD1DUPq16:
  case ARM::VLD1DUPq32:
  case ARM::VLD1DUPq8:
  case ARM::VLD2DUPd16:
  case ARM::VLD2DUPd16x2:
  case ARM::VLD2DUPd32:
  case ARM::VLD2DUPd32x2:
  case ARM::VLD2DUPd8:
  case ARM::VLD2DUPd8x2:
    O << "[], "; 
    printOperand(MI, 1, O); 
    O << "[]}, "; 
    printAddrMode6Operand(MI, 2, O); 
    return;
    break;
  case ARM::VLD1DUPq16_UPD:
  case ARM::VLD1DUPq32_UPD:
  case ARM::VLD1DUPq8_UPD:
  case ARM::VLD2DUPd16_UPD:
  case ARM::VLD2DUPd16x2_UPD:
  case ARM::VLD2DUPd32_UPD:
  case ARM::VLD2DUPd32x2_UPD:
  case ARM::VLD2DUPd8_UPD:
  case ARM::VLD2DUPd8x2_UPD:
    O << "[], "; 
    printOperand(MI, 1, O); 
    O << "[]}, "; 
    printAddrMode6Operand(MI, 3, O); 
    printAddrMode6OffsetOperand(MI, 5, O); 
    return;
    break;
  case ARM::VLD1LNd16:
  case ARM::VLD1LNd32:
  case ARM::VLD1LNd8:
    O << '['; 
    printNoHashImmediate(MI, 4, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    return;
    break;
  case ARM::VLD1LNd16_UPD:
  case ARM::VLD1LNd32_UPD:
  case ARM::VLD1LNd8_UPD:
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 2, O); 
    printAddrMode6OffsetOperand(MI, 4, O); 
    return;
    break;
  case ARM::VLD1d16Q:
  case ARM::VLD1d32Q:
  case ARM::VLD1d64Q:
  case ARM::VLD1d8Q:
  case ARM::VLD2q16:
  case ARM::VLD2q32:
  case ARM::VLD2q8:
  case ARM::VLD4d16:
  case ARM::VLD4d32:
  case ARM::VLD4d8:
  case ARM::VLD4q16:
  case ARM::VLD4q32:
  case ARM::VLD4q8:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 4, O); 
    return;
    break;
  case ARM::VLD1d16Q_UPD:
  case ARM::VLD1d32Q_UPD:
  case ARM::VLD1d64Q_UPD:
  case ARM::VLD1d8Q_UPD:
  case ARM::VLD2q16_UPD:
  case ARM::VLD2q32_UPD:
  case ARM::VLD2q8_UPD:
  case ARM::VLD4d16_UPD:
  case ARM::VLD4d32_UPD:
  case ARM::VLD4d8_UPD:
  case ARM::VLD4q16_UPD:
  case ARM::VLD4q32_UPD:
  case ARM::VLD4q8_UPD:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 5, O); 
    printAddrMode6OffsetOperand(MI, 7, O); 
    return;
    break;
  case ARM::VLD1d16T:
  case ARM::VLD1d32T:
  case ARM::VLD1d64T:
  case ARM::VLD1d8T:
  case ARM::VLD3d16:
  case ARM::VLD3d32:
  case ARM::VLD3d8:
  case ARM::VLD3q16:
  case ARM::VLD3q32:
  case ARM::VLD3q8:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 3, O); 
    return;
    break;
  case ARM::VLD1d16T_UPD:
  case ARM::VLD1d32T_UPD:
  case ARM::VLD1d64T_UPD:
  case ARM::VLD1d8T_UPD:
  case ARM::VLD3d16_UPD:
  case ARM::VLD3d32_UPD:
  case ARM::VLD3d8_UPD:
  case ARM::VLD3q16_UPD:
  case ARM::VLD3q32_UPD:
  case ARM::VLD3q8_UPD:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 4, O); 
    printAddrMode6OffsetOperand(MI, 6, O); 
    return;
    break;
  case ARM::VLD1q16:
  case ARM::VLD1q32:
  case ARM::VLD1q64:
  case ARM::VLD1q8:
  case ARM::VLD2b16:
  case ARM::VLD2b32:
  case ARM::VLD2b8:
  case ARM::VLD2d16:
  case ARM::VLD2d32:
  case ARM::VLD2d8:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 2, O); 
    return;
    break;
  case ARM::VLD1q16_UPD:
  case ARM::VLD1q32_UPD:
  case ARM::VLD1q64_UPD:
  case ARM::VLD1q8_UPD:
  case ARM::VLD2b16_UPD:
  case ARM::VLD2b32_UPD:
  case ARM::VLD2b8_UPD:
  case ARM::VLD2d16_UPD:
  case ARM::VLD2d32_UPD:
  case ARM::VLD2d8_UPD:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 3, O); 
    printAddrMode6OffsetOperand(MI, 5, O); 
    return;
    break;
  case ARM::VLD2LNd16:
  case ARM::VLD2LNd32:
  case ARM::VLD2LNd8:
  case ARM::VLD2LNq16:
  case ARM::VLD2LNq32:
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 2, O); 
    return;
    break;
  case ARM::VLD2LNd16_UPD:
  case ARM::VLD2LNd32_UPD:
  case ARM::VLD2LNd8_UPD:
  case ARM::VLD2LNq16_UPD:
  case ARM::VLD2LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 3, O); 
    printAddrMode6OffsetOperand(MI, 5, O); 
    return;
    break;
  case ARM::VLD3DUPd16:
  case ARM::VLD3DUPd16x2:
  case ARM::VLD3DUPd32:
  case ARM::VLD3DUPd32x2:
  case ARM::VLD3DUPd8:
  case ARM::VLD3DUPd8x2:
    O << "[], "; 
    printOperand(MI, 1, O); 
    O << "[], "; 
    printOperand(MI, 2, O); 
    O << "[]}, "; 
    printAddrMode6Operand(MI, 3, O); 
    return;
    break;
  case ARM::VLD3DUPd16_UPD:
  case ARM::VLD3DUPd16x2_UPD:
  case ARM::VLD3DUPd32_UPD:
  case ARM::VLD3DUPd32x2_UPD:
  case ARM::VLD3DUPd8_UPD:
  case ARM::VLD3DUPd8x2_UPD:
    O << "[], "; 
    printOperand(MI, 1, O); 
    O << "[], "; 
    printOperand(MI, 2, O); 
    O << "[]}, "; 
    printAddrMode6Operand(MI, 4, O); 
    printAddrMode6OffsetOperand(MI, 6, O); 
    return;
    break;
  case ARM::VLD3LNd16:
  case ARM::VLD3LNd32:
  case ARM::VLD3LNd8:
  case ARM::VLD3LNq16:
  case ARM::VLD3LNq32:
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 3, O); 
    return;
    break;
  case ARM::VLD3LNd16_UPD:
  case ARM::VLD3LNd32_UPD:
  case ARM::VLD3LNd8_UPD:
  case ARM::VLD3LNq16_UPD:
  case ARM::VLD3LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 4, O); 
    printAddrMode6OffsetOperand(MI, 6, O); 
    return;
    break;
  case ARM::VLD4DUPd16:
  case ARM::VLD4DUPd16x2:
  case ARM::VLD4DUPd32:
  case ARM::VLD4DUPd32x2:
  case ARM::VLD4DUPd8:
  case ARM::VLD4DUPd8x2:
    O << "[], "; 
    printOperand(MI, 1, O); 
    O << "[], "; 
    printOperand(MI, 2, O); 
    O << "[], "; 
    printOperand(MI, 3, O); 
    O << "[]}, "; 
    printAddrMode6Operand(MI, 4, O); 
    return;
    break;
  case ARM::VLD4DUPd16_UPD:
  case ARM::VLD4DUPd16x2_UPD:
  case ARM::VLD4DUPd32_UPD:
  case ARM::VLD4DUPd32x2_UPD:
  case ARM::VLD4DUPd8_UPD:
  case ARM::VLD4DUPd8x2_UPD:
    O << "[], "; 
    printOperand(MI, 1, O); 
    O << "[], "; 
    printOperand(MI, 2, O); 
    O << "[], "; 
    printOperand(MI, 3, O); 
    O << "[]}, "; 
    printAddrMode6Operand(MI, 5, O); 
    printAddrMode6OffsetOperand(MI, 7, O); 
    return;
    break;
  case ARM::VLD4LNd16:
  case ARM::VLD4LNd32:
  case ARM::VLD4LNd8:
  case ARM::VLD4LNq16:
  case ARM::VLD4LNq32:
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 4, O); 
    return;
    break;
  case ARM::VLD4LNd16_UPD:
  case ARM::VLD4LNd32_UPD:
  case ARM::VLD4LNd8_UPD:
  case ARM::VLD4LNq16_UPD:
  case ARM::VLD4LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 12, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 12, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 12, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 12, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 5, O); 
    printAddrMode6OffsetOperand(MI, 7, O); 
    return;
    break;
  case ARM::VMLAD:
  case ARM::VMLAS:
  case ARM::VMLAfd:
  case ARM::VMLAfq:
  case ARM::VMLSD:
  case ARM::VMLSS:
  case ARM::VMLSfd:
  case ARM::VMLSfq:
  case ARM::VNMLAD:
  case ARM::VNMLAS:
  case ARM::VNMLSD:
  case ARM::VNMLSS:
  case ARM::VSLIv16i8:
  case ARM::VSLIv2i32:
  case ARM::VSLIv4i16:
  case ARM::VSLIv4i32:
  case ARM::VSLIv8i16:
  case ARM::VSLIv8i8:
  case ARM::VSRIv16i8:
  case ARM::VSRIv2i32:
  case ARM::VSRIv4i16:
  case ARM::VSRIv4i32:
  case ARM::VSRIv8i16:
  case ARM::VSRIv8i8:
  case ARM::VTBX1:
    printOperand(MI, 2, O); 
    switch (MI->getOpcode()) {
    case ARM::VMLAD: 
    case ARM::VMLAS: 
    case ARM::VMLAfd: 
    case ARM::VMLAfq: 
    case ARM::VMLSD: 
    case ARM::VMLSS: 
    case ARM::VMLSfd: 
    case ARM::VMLSfq: 
    case ARM::VNMLAD: 
    case ARM::VNMLAS: 
    case ARM::VNMLSD: 
    case ARM::VNMLSS: 
    case ARM::VSLIv16i8: 
    case ARM::VSLIv2i32: 
    case ARM::VSLIv4i16: 
    case ARM::VSLIv4i32: 
    case ARM::VSLIv8i16: 
    case ARM::VSLIv8i8: 
    case ARM::VSRIv16i8: 
    case ARM::VSRIv2i32: 
    case ARM::VSRIv4i16: 
    case ARM::VSRIv4i32: 
    case ARM::VSRIv8i16: 
    case ARM::VSRIv8i8: O << ", "; break;
    case ARM::VTBX1: O << "}, "; break;
    }
    printOperand(MI, 3, O); 
    return;
    break;
  case ARM::VMLALslsv2i32:
  case ARM::VMLALslsv4i16:
  case ARM::VMLALsluv2i32:
  case ARM::VMLALsluv4i16:
  case ARM::VMLAslv2i32:
  case ARM::VMLAslv4i16:
  case ARM::VMLAslv4i32:
  case ARM::VMLAslv8i16:
  case ARM::VMLSLslsv2i32:
  case ARM::VMLSLslsv4i16:
  case ARM::VMLSLsluv2i32:
  case ARM::VMLSLsluv4i16:
  case ARM::VMLSslv2i32:
  case ARM::VMLSslv4i16:
  case ARM::VMLSslv4i32:
  case ARM::VMLSslv8i16:
  case ARM::VQDMLALslv2i32:
  case ARM::VQDMLALslv4i16:
  case ARM::VQDMLSLslv2i32:
  case ARM::VQDMLSLslv4i16:
    O << ", "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 4, O); 
    O << ']'; 
    return;
    break;
  case ARM::VMLAslfd:
  case ARM::VMLAslfq:
  case ARM::VMLSslfd:
  case ARM::VMLSslfq:
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 4, O); 
    O << ']'; 
    return;
    break;
  case ARM::VMULLslsv2i32:
  case ARM::VMULLslsv4i16:
  case ARM::VMULLsluv2i32:
  case ARM::VMULLsluv4i16:
  case ARM::VMULslv2i32:
  case ARM::VMULslv4i16:
  case ARM::VMULslv4i32:
  case ARM::VMULslv8i16:
  case ARM::VQDMULHslv2i32:
  case ARM::VQDMULHslv4i16:
  case ARM::VQDMULHslv4i32:
  case ARM::VQDMULHslv8i16:
  case ARM::VQDMULLslv2i32:
  case ARM::VQDMULLslv4i16:
  case ARM::VQRDMULHslv2i32:
  case ARM::VQRDMULHslv4i16:
  case ARM::VQRDMULHslv4i32:
  case ARM::VQRDMULHslv8i16:
    O << ", "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case ARM::VMULslfd:
  case ARM::VMULslfq:
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case ARM::VST1LNd16:
  case ARM::VST1LNd32:
  case ARM::VST1LNd8:
    O << '['; 
    printNoHashImmediate(MI, 3, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST1LNd16_UPD:
  case ARM::VST1LNd32_UPD:
  case ARM::VST1LNd8_UPD:
    O << '['; 
    printNoHashImmediate(MI, 5, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST1d16:
  case ARM::VST1d32:
  case ARM::VST1d64:
  case ARM::VST1d8:
    O << "}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST1d16Q:
  case ARM::VST1d32Q:
  case ARM::VST1d64Q:
  case ARM::VST1d8Q:
  case ARM::VST2q16:
  case ARM::VST2q32:
  case ARM::VST2q8:
  case ARM::VST4d16:
  case ARM::VST4d32:
  case ARM::VST4d8:
  case ARM::VST4q16:
  case ARM::VST4q32:
  case ARM::VST4q8:
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST1d16Q_UPD:
  case ARM::VST1d32Q_UPD:
  case ARM::VST1d64Q_UPD:
  case ARM::VST1d8Q_UPD:
  case ARM::VST2q16_UPD:
  case ARM::VST2q32_UPD:
  case ARM::VST2q8_UPD:
  case ARM::VST4d16_UPD:
  case ARM::VST4d32_UPD:
  case ARM::VST4d8_UPD:
  case ARM::VST4q16_UPD:
  case ARM::VST4q32_UPD:
  case ARM::VST4q8_UPD:
    O << ", "; 
    printOperand(MI, 5, O); 
    O << ", "; 
    printOperand(MI, 6, O); 
    O << ", "; 
    printOperand(MI, 7, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST1d16T:
  case ARM::VST1d32T:
  case ARM::VST1d64T:
  case ARM::VST1d8T:
  case ARM::VST3d16:
  case ARM::VST3d32:
  case ARM::VST3d8:
  case ARM::VST3q16:
  case ARM::VST3q32:
  case ARM::VST3q8:
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST1d16T_UPD:
  case ARM::VST1d32T_UPD:
  case ARM::VST1d64T_UPD:
  case ARM::VST1d8T_UPD:
  case ARM::VST3d16_UPD:
  case ARM::VST3d32_UPD:
  case ARM::VST3d8_UPD:
  case ARM::VST3q16_UPD:
  case ARM::VST3q32_UPD:
  case ARM::VST3q8_UPD:
    O << ", "; 
    printOperand(MI, 5, O); 
    O << ", "; 
    printOperand(MI, 6, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST1d16_UPD:
  case ARM::VST1d32_UPD:
  case ARM::VST1d64_UPD:
  case ARM::VST1d8_UPD:
    O << "}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST1q16:
  case ARM::VST1q32:
  case ARM::VST1q64:
  case ARM::VST1q8:
  case ARM::VST2b16:
  case ARM::VST2b32:
  case ARM::VST2b8:
  case ARM::VST2d16:
  case ARM::VST2d32:
  case ARM::VST2d8:
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST1q16_UPD:
  case ARM::VST1q32_UPD:
  case ARM::VST1q64_UPD:
  case ARM::VST1q8_UPD:
  case ARM::VST2b16_UPD:
  case ARM::VST2b32_UPD:
  case ARM::VST2b8_UPD:
  case ARM::VST2d16_UPD:
  case ARM::VST2d32_UPD:
  case ARM::VST2d8_UPD:
    O << ", "; 
    printOperand(MI, 5, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST2LNd16:
  case ARM::VST2LNd32:
  case ARM::VST2LNd8:
  case ARM::VST2LNq16:
  case ARM::VST2LNq32:
    O << '['; 
    printNoHashImmediate(MI, 4, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 4, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST2LNd16_UPD:
  case ARM::VST2LNd32_UPD:
  case ARM::VST2LNd8_UPD:
  case ARM::VST2LNq16_UPD:
  case ARM::VST2LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST3LNd16:
  case ARM::VST3LNd32:
  case ARM::VST3LNd8:
  case ARM::VST3LNq16:
  case ARM::VST3LNq32:
    O << '['; 
    printNoHashImmediate(MI, 5, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 5, O); 
    O << "], "; 
    printOperand(MI, 4, O); 
    O << '['; 
    printNoHashImmediate(MI, 5, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST3LNd16_UPD:
  case ARM::VST3LNd32_UPD:
  case ARM::VST3LNd8_UPD:
  case ARM::VST3LNq16_UPD:
  case ARM::VST3LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 7, O); 
    O << "], "; 
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 7, O); 
    O << "], "; 
    printOperand(MI, 6, O); 
    O << '['; 
    printNoHashImmediate(MI, 7, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST4LNd16:
  case ARM::VST4LNd32:
  case ARM::VST4LNd8:
  case ARM::VST4LNq16:
  case ARM::VST4LNq32:
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 4, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST4LNd16_UPD:
  case ARM::VST4LNd32_UPD:
  case ARM::VST4LNd8_UPD:
  case ARM::VST4LNq16_UPD:
  case ARM::VST4LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 6, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 7, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VTBL3:
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "}, "; 
    printOperand(MI, 4, O); 
    return;
    break;
  case ARM::VTBL4:
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    O << "}, "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case ARM::VTBX2:
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "}, "; 
    printOperand(MI, 4, O); 
    return;
    break;
  case ARM::VTBX3:
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    O << "}, "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case ARM::VTBX4:
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    O << "}, "; 
    printOperand(MI, 6, O); 
    return;
    break;
  case ARM::t2LDRB_POST:
  case ARM::t2LDRH_POST:
  case ARM::t2LDRSB_POST:
  case ARM::t2LDRSH_POST:
  case ARM::t2LDR_POST:
    O << ", ["; 
    printOperand(MI, 1, O); 
    O << "], "; 
    printT2AddrModeImm8OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::t2LDRD_POST:
  case ARM::t2STRD_POST:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << "], "; 
    printT2AddrModeImm8s4OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::t2LDRD_PRE:
  case ARM::t2STRD_PRE:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printT2AddrModeImm8s4OffsetOperand(MI, 3, O); 
    O << "]!"; 
    return;
    break;
  case ARM::t2MOVsra_flag:
  case ARM::t2MOVsrl_flag:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", #1"; 
    return;
    break;
  }
  return;
}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *ARMInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 114 && "Invalid register number!");

  static const unsigned RegAsmOffset[] = {
    0, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 39, 43, 
    47, 51, 55, 59, 63, 67, 71, 75, 79, 83, 87, 91, 95, 99, 
    103, 107, 111, 115, 119, 123, 129, 135, 141, 149, 152, 155, 158, 161, 
    164, 167, 170, 173, 176, 179, 182, 185, 189, 193, 197, 201, 205, 209, 
    213, 217, 221, 225, 229, 233, 237, 241, 247, 253, 259, 265, 268, 271, 
    274, 277, 280, 283, 286, 289, 292, 295, 299, 303, 307, 310, 313, 316, 
    319, 322, 325, 328, 331, 334, 337, 341, 345, 349, 353, 357, 361, 365, 
    369, 373, 377, 381, 385, 389, 393, 397, 401, 405, 409, 413, 417, 421, 
    425, 0
  };

  const char *AsmStrs =
    "cpsr\000d0\000d1\000d2\000d3\000d4\000d5\000d6\000d7\000d8\000d9\000d10"
    "\000d11\000d12\000d13\000d14\000d15\000d16\000d17\000d18\000d19\000d20\000"
    "d21\000d22\000d23\000d24\000d25\000d26\000d27\000d28\000d29\000d30\000d"
    "31\000fpexc\000fpscr\000fpsid\000itstate\000lr\000pc\000q0\000q1\000q2\000"
    "q3\000q4\000q5\000q6\000q7\000q8\000q9\000q10\000q11\000q12\000q13\000q"
    "14\000q15\000qq0\000qq1\000qq2\000qq3\000qq4\000qq5\000qq6\000qq7\000qq"
    "qq0\000qqqq1\000qqqq2\000qqqq3\000r0\000r1\000r2\000r3\000r4\000r5\000r"
    "6\000r7\000r8\000r9\000r10\000r11\000r12\000s0\000s1\000s2\000s3\000s4\000"
    "s5\000s6\000s7\000s8\000s9\000s10\000s11\000s12\000s13\000s14\000s15\000"
    "s16\000s17\000s18\000s19\000s20\000s21\000s22\000s23\000s24\000s25\000s"
    "26\000s27\000s28\000s29\000s30\000s31\000sp\000";
  return AsmStrs+RegAsmOffset[RegNo-1];
}


#ifdef GET_INSTRUCTION_NAME
#undef GET_INSTRUCTION_NAME

/// getInstructionName: This method is automatically generated by tblgen
/// from the instruction set description.  This returns the enum name of the
/// specified instruction.
const char *ARMInstPrinter::getInstructionName(unsigned Opcode) {
  assert(Opcode < 2350 && "Invalid instruction number!");

  static const unsigned InstAsmOffset[] = {
    0, 4, 14, 27, 36, 45, 50, 65, 79, 92, 106, 123, 133, 146, 
    151, 159, 167, 175, 181, 187, 193, 200, 207, 214, 220, 226, 232, 249, 
    264, 268, 274, 280, 286, 306, 326, 345, 365, 385, 404, 424, 444, 463, 
    484, 505, 525, 544, 563, 581, 601, 621, 640, 660, 680, 699, 715, 731, 
    746, 748, 756, 763, 767, 771, 777, 783, 789, 795, 800, 803, 807, 816, 
    822, 833, 841, 846, 856, 870, 886, 895, 902, 909, 912, 916, 924, 931, 
    941, 945, 949, 954, 960, 964, 971, 978, 985, 991, 997, 1003, 1019, 1025, 
    1031, 1037, 1041, 1045, 1053, 1057, 1063, 1069, 1075, 1083, 1091, 1098, 1102, 1128, 
    1148, 1167, 1191, 1204, 1217, 1228, 1238, 1250, 1262, 1272, 1281, 1293, 1305, 1315, 
    1324, 1335, 1346, 1355, 1363, 1369, 1379, 1385, 1395, 1401, 1411, 1421, 1427, 1437, 
    1443, 1453, 1462, 1470, 1477, 1482, 1492, 1501, 1507, 1514, 1521, 1528, 1533, 1539, 
    1549, 1558, 1564, 1571, 1582, 1592, 1598, 1605, 1616, 1626, 1631, 1640, 1648, 1654, 
    1661, 1667, 1676, 1687, 1691, 1696, 1701, 1707, 1711, 1717, 1721, 1728, 1737, 1749, 
    1756, 1763, 1771, 1779, 1787, 1804, 1815, 1828, 1845, 1850, 1857, 1873, 1883, 1888, 
    1896, 1901, 1913, 1925, 1929, 1934, 1939, 1945, 1949, 1956, 1960, 1965, 1969, 1975, 
    1982, 1987, 1992, 1997, 2001, 2007, 2013, 2019, 2026, 2033, 2041, 2049, 2058, 2067, 
    2074, 2082, 2090, 2096, 2102, 2110, 2117, 2124, 2130, 2137, 2143, 2148, 2155, 2161, 
    2166, 2172, 2178, 2183, 2188, 2195, 2201, 2206, 2210, 2216, 2222, 2226, 2231, 2235, 
    2242, 2249, 2256, 2262, 2268, 2274, 2281, 2288, 2294, 2300, 2306, 2313, 2319, 2324, 
    2332, 2340, 2348, 2354, 2360, 2366, 2371, 2375, 2382, 2386, 2394, 2401, 2407, 2413, 
    2421, 2428, 2432, 2439, 2446, 2452, 2459, 2465, 2473, 2481, 2488, 2496, 2504, 2512, 
    2520, 2527, 2534, 2541, 2548, 2554, 2561, 2568, 2576, 2582, 2589, 2595, 2602, 2608, 
    2615, 2621, 2628, 2635, 2642, 2648, 2656, 2663, 2670, 2677, 2684, 2690, 2697, 2701, 
    2706, 2711, 2718, 2723, 2730, 2736, 2749, 2762, 2773, 2783, 2795, 2807, 2817, 2826, 
    2838, 2850, 2860, 2869, 2880, 2891, 2900, 2908, 2914, 2924, 2930, 2940, 2946, 2956, 
    2962, 2972, 2978, 2988, 2997, 3005, 3012, 3017, 3027, 3036, 3042, 3049, 3056, 3063, 
    3068, 3074, 3084, 3093, 3098, 3107, 3115, 3122, 3128, 3135, 3142, 3149, 3155, 3161, 
    3167, 3171, 3175, 3180, 3190, 3204, 3212, 3224, 3232, 3244, 3252, 3264, 3270, 3280, 
    3286, 3296, 3305, 3316, 3328, 3338, 3347, 3358, 3369, 3382, 3393, 3406, 3412, 3418, 
    3424, 3431, 3436, 3442, 3448, 3454, 3461, 3467, 3472, 3477, 3485, 3492, 3498, 3504, 
    3512, 3519, 3525, 3533, 3539, 3547, 3553, 3561, 3569, 3576, 3582, 3588, 3596, 3603, 
    3609, 3616, 3621, 3628, 3633, 3640, 3646, 3656, 3670, 3678, 3690, 3698, 3710, 3718, 
    3730, 3736, 3746, 3752, 3762, 3774, 3786, 3798, 3810, 3822, 3834, 3845, 3856, 3867, 
    3878, 3889, 3899, 3910, 3921, 3932, 3943, 3954, 3964, 3976, 3988, 4000, 4012, 4024, 
    4036, 4043, 4050, 4061, 4072, 4083, 4094, 4105, 4115, 4126, 4137, 4148, 4159, 4170, 
    4180, 4186, 4192, 4199, 4206, 4216, 4226, 4236, 4246, 4256, 4265, 4272, 4279, 4286, 
    4293, 4299, 4311, 4323, 4334, 4346, 4358, 4370, 4382, 4394, 4406, 4412, 4424, 4436, 
    4448, 4460, 4472, 4484, 4491, 4498, 4508, 4518, 4528, 4538, 4548, 4558, 4568, 4577, 
    4583, 4589, 4595, 4606, 4617, 4628, 4639, 4645, 4651, 4657, 4663, 4669, 4675, 4681, 
    4688, 4695, 4705, 4715, 4725, 4735, 4745, 4754, 4765, 4776, 4787, 4798, 4809, 4820, 
    4831, 4841, 4848, 4855, 4866, 4877, 4888, 4899, 4910, 4920, 4931, 4942, 4953, 4964, 
    4975, 4985, 4996, 5007, 5018, 5029, 5040, 5051, 5062, 5072, 5079, 5086, 5097, 5108, 
    5119, 5130, 5141, 5151, 5162, 5173, 5184, 5195, 5206, 5216, 5227, 5238, 5249, 5260, 
    5271, 5282, 5293, 5303, 5314, 5325, 5336, 5347, 5358, 5369, 5380, 5390, 5400, 5410, 
    5420, 5430, 5440, 5449, 5460, 5471, 5482, 5493, 5504, 5515, 5526, 5536, 5546, 5556, 
    5566, 5576, 5586, 5595, 5601, 5608, 5615, 5623, 5631, 5637, 5644, 5651, 5657, 5663, 
    5671, 5679, 5686, 5693, 5701, 5709, 5717, 5726, 5735, 5744, 5753, 5763, 5773, 5783, 
    5793, 5801, 5810, 5819, 5828, 5837, 5847, 5857, 5867, 5877, 5883, 5889, 5897, 5905, 
    5913, 5921, 5928, 5935, 5945, 5955, 5965, 5975, 5984, 5993, 6002, 6011, 6018, 6026, 
    6033, 6041, 6047, 6053, 6061, 6069, 6076, 6083, 6091, 6099, 6106, 6113, 6123, 6133, 
    6142, 6152, 6161, 6173, 6185, 6197, 6209, 6221, 6232, 6244, 6256, 6268, 6280, 6292, 
    6303, 6315, 6327, 6339, 6351, 6363, 6374, 6386, 6398, 6410, 6422, 6434, 6445, 6456, 
    6471, 6482, 6497, 6507, 6521, 6532, 6549, 6570, 6585, 6596, 6613, 6634, 6649, 6659, 
    6675, 6695, 6709, 6719, 6733, 6743, 6757, 6766, 6779, 6795, 6815, 6831, 6851, 6866, 
    6885, 6893, 6902, 6915, 6924, 6937, 6949, 6957, 6966, 6979, 6988, 7001, 7013, 7021, 
    7030, 7045, 7064, 7077, 7086, 7101, 7120, 7133, 7145, 7152, 7160, 7172, 7180, 7192, 
    7203, 7211, 7225, 7243, 7255, 7263, 7277, 7295, 7307, 7315, 7329, 7347, 7359, 7366, 
    7379, 7396, 7407, 7418, 7435, 7456, 7471, 7484, 7501, 7512, 7529, 7550, 7565, 7578, 
    7595, 7605, 7621, 7641, 7655, 7667, 7683, 7693, 7709, 7729, 7743, 7753, 7769, 7789, 
    7803, 7812, 7827, 7846, 7859, 7869, 7885, 7905, 7919, 7929, 7945, 7965, 7979, 7987, 
    7999, 8007, 8019, 8026, 8037, 8045, 8059, 8077, 8089, 8097, 8111, 8129, 8141, 8148, 
    8161, 8178, 8189, 8197, 8211, 8229, 8241, 8249, 8263, 8281, 8293, 8300, 8313, 8330, 
    8341, 8352, 8369, 8390, 8405, 8418, 8435, 8446, 8463, 8484, 8499, 8512, 8529, 8539, 
    8555, 8575, 8589, 8601, 8617, 8627, 8643, 8663, 8677, 8687, 8703, 8723, 8737, 8746, 
    8761, 8780, 8793, 8803, 8819, 8839, 8853, 8863, 8879, 8899, 8913, 8921, 8935, 8953, 
    8965, 8973, 8987, 9005, 9017, 9024, 9037, 9054, 9065, 9073, 9091, 9103, 9120, 9141, 
    9149, 9167, 9179, 9196, 9217, 9224, 9241, 9252, 9268, 9288, 9299, 9316, 9337, 9352, 
    9365, 9382, 9393, 9410, 9431, 9446, 9459, 9476, 9486, 9502, 9522, 9536, 9548, 9564, 
    9574, 9590, 9610, 9624, 9634, 9650, 9670, 9684, 9693, 9708, 9727, 9740, 9750, 9766, 
    9786, 9800, 9810, 9826, 9846, 9860, 9868, 9882, 9900, 9912, 9920, 9934, 9952, 9964, 
    9971, 9984, 10001, 10012, 10020, 10038, 10050, 10067, 10088, 10096, 10114, 10126, 10143, 10164, 
    10171, 10188, 10199, 10215, 10235, 10243, 10255, 10263, 10275, 10283, 10291, 10299, 10311, 10319, 
    10331, 10337, 10343, 10350, 10357, 10368, 10379, 10390, 10401, 10412, 10422, 10433, 10444, 10455, 
    10466, 10477, 10487, 10494, 10501, 10512, 10523, 10534, 10545, 10556, 10566, 10577, 10588, 10599, 
    10610, 10621, 10631, 10637, 10651, 10665, 10679, 10693, 10705, 10717, 10729, 10741, 10753, 10765, 
    10771, 10778, 10785, 10794, 10803, 10815, 10827, 10839, 10851, 10861, 10871, 10881, 10891, 10901, 
    10910, 10916, 10930, 10944, 10958, 10972, 10984, 10996, 11008, 11020, 11032, 11044, 11050, 11057, 
    11064, 11073, 11082, 11094, 11106, 11118, 11130, 11140, 11150, 11160, 11170, 11180, 11189, 11195, 
    11203, 11211, 11221, 11233, 11245, 11257, 11269, 11281, 11293, 11304, 11315, 11325, 11331, 11338, 
    11347, 11355, 11363, 11370, 11376, 11383, 11391, 11399, 11409, 11419, 11429, 11439, 11449, 11459, 
    11469, 11478, 11483, 11494, 11505, 11510, 11521, 11532, 11538, 11545, 11559, 11573, 11587, 11601, 
    11613, 11625, 11637, 11649, 11661, 11673, 11679, 11686, 11693, 11700, 11707, 11716, 11725, 11737, 
    11749, 11761, 11773, 11783, 11793, 11803, 11813, 11823, 11832, 11838, 11844, 11854, 11864, 11874, 
    11884, 11890, 11896, 11905, 11912, 11921, 11930, 11939, 11948, 11956, 11964, 11971, 11978, 11985, 
    11992, 11999, 12006, 12012, 12018, 12024, 12035, 12046, 12057, 12068, 12074, 12087, 12100, 12113, 
    12126, 12139, 12151, 12164, 12177, 12190, 12203, 12216, 12228, 12241, 12254, 12267, 12280, 12293, 
    12305, 12318, 12331, 12344, 12357, 12370, 12382, 12389, 12398, 12407, 12415, 12422, 12431, 12440, 
    12448, 12457, 12466, 12474, 12481, 12490, 12499, 12507, 12516, 12525, 12533, 12544, 12555, 12566, 
    12577, 12588, 12598, 12610, 12622, 12634, 12646, 12658, 12670, 12682, 12693, 12705, 12717, 12729, 
    12741, 12753, 12765, 12777, 12788, 12803, 12818, 12831, 12844, 12859, 12874, 12887, 12900, 12915, 
    12930, 12945, 12960, 12973, 12986, 12999, 13012, 13027, 13042, 13055, 13068, 13082, 13096, 13109, 
    13122, 13135, 13147, 13160, 13173, 13185, 13196, 13207, 13218, 13229, 13240, 13250, 13266, 13282, 
    13298, 13314, 13328, 13342, 13356, 13370, 13383, 13396, 13409, 13422, 13435, 13448, 13461, 13473, 
    13486, 13499, 13512, 13525, 13538, 13551, 13564, 13576, 13590, 13604, 13617, 13631, 13645, 13658, 
    13672, 13686, 13699, 13712, 13725, 13738, 13751, 13764, 13777, 13790, 13802, 13815, 13828, 13841, 
    13854, 13867, 13880, 13893, 13905, 13917, 13929, 13941, 13953, 13965, 13977, 13989, 14000, 14013, 
    14026, 14039, 14052, 14065, 14078, 14091, 14103, 14115, 14127, 14139, 14151, 14163, 14175, 14187, 
    14198, 14211, 14224, 14236, 14249, 14262, 14274, 14287, 14300, 14312, 14324, 14336, 14348, 14360, 
    14372, 14384, 14396, 14407, 14419, 14431, 14443, 14455, 14467, 14479, 14491, 14502, 14515, 14528, 
    14540, 14548, 14557, 14566, 14574, 14583, 14592, 14601, 14610, 14620, 14629, 14639, 14648, 14658, 
    14668, 14677, 14686, 14696, 14706, 14715, 14724, 14737, 14750, 14763, 14776, 14789, 14801, 14814, 
    14827, 14840, 14853, 14866, 14878, 14890, 14902, 14914, 14926, 14938, 14950, 14962, 14973, 14985, 
    14997, 15009, 15021, 15033, 15045, 15057, 15068, 15080, 15092, 15103, 15115, 15127, 15139, 15151, 
    15163, 15175, 15187, 15198, 15210, 15222, 15234, 15246, 15258, 15270, 15282, 15293, 15302, 15312, 
    15322, 15331, 15341, 15351, 15363, 15375, 15387, 15399, 15411, 15423, 15435, 15446, 15458, 15470, 
    15482, 15494, 15506, 15518, 15530, 15541, 15554, 15567, 15579, 15589, 15599, 15608, 15617, 15626, 
    15634, 15646, 15658, 15670, 15682, 15694, 15706, 15717, 15728, 15739, 15750, 15761, 15772, 15783, 
    15793, 15804, 15815, 15826, 15837, 15848, 15859, 15870, 15880, 15891, 15902, 15913, 15924, 15935, 
    15946, 15957, 15967, 15978, 15989, 15999, 16010, 16021, 16032, 16043, 16054, 16065, 16076, 16086, 
    16097, 16108, 16119, 16130, 16141, 16152, 16163, 16173, 16180, 16187, 16194, 16201, 16211, 16221, 
    16231, 16241, 16251, 16261, 16271, 16280, 16287, 16294, 16301, 16308, 16319, 16330, 16341, 16352, 
    16363, 16374, 16385, 16395, 16406, 16417, 16428, 16439, 16450, 16461, 16472, 16482, 16492, 16502, 
    16512, 16522, 16532, 16542, 16552, 16561, 16571, 16585, 16595, 16609, 16618, 16631, 16647, 16667, 
    16683, 16703, 16718, 16737, 16745, 16754, 16767, 16776, 16789, 16801, 16809, 16818, 16831, 16840, 
    16853, 16865, 16873, 16882, 16897, 16916, 16929, 16938, 16953, 16972, 16985, 16997, 17004, 17012, 
    17024, 17032, 17044, 17055, 17063, 17077, 17095, 17107, 17115, 17129, 17147, 17159, 17167, 17181, 
    17199, 17211, 17218, 17231, 17248, 17259, 17269, 17285, 17305, 17319, 17329, 17345, 17365, 17379, 
    17388, 17403, 17422, 17435, 17445, 17461, 17481, 17495, 17505, 17521, 17541, 17555, 17563, 17575, 
    17583, 17595, 17602, 17613, 17621, 17635, 17653, 17665, 17673, 17687, 17705, 17717, 17724, 17737, 
    17754, 17765, 17773, 17787, 17805, 17817, 17825, 17839, 17857, 17869, 17876, 17889, 17906, 17917, 
    17927, 17943, 17963, 17977, 17987, 18003, 18023, 18037, 18046, 18061, 18080, 18093, 18103, 18119, 
    18139, 18153, 18163, 18179, 18199, 18213, 18221, 18235, 18253, 18265, 18273, 18287, 18305, 18317, 
    18324, 18337, 18354, 18365, 18373, 18391, 18403, 18420, 18441, 18449, 18467, 18479, 18496, 18517, 
    18524, 18541, 18552, 18568, 18588, 18598, 18614, 18634, 18648, 18658, 18674, 18694, 18708, 18717, 
    18732, 18751, 18764, 18774, 18790, 18810, 18824, 18834, 18850, 18870, 18884, 18892, 18906, 18924, 
    18936, 18944, 18958, 18976, 18988, 18995, 19008, 19025, 19036, 19044, 19062, 19074, 19091, 19112, 
    19120, 19138, 19150, 19167, 19188, 19195, 19212, 19223, 19239, 19259, 19267, 19279, 19287, 19299, 
    19307, 19315, 19323, 19335, 19343, 19355, 19361, 19367, 19373, 19385, 19397, 19408, 19420, 19432, 
    19444, 19456, 19468, 19480, 19486, 19498, 19510, 19522, 19534, 19546, 19558, 19565, 19572, 19582, 
    19592, 19602, 19612, 19622, 19632, 19642, 19651, 19657, 19663, 19669, 19675, 19687, 19693, 19705, 
    19711, 19723, 19729, 19735, 19747, 19753, 19765, 19771, 19783, 19790, 19797, 19805, 19813, 19821, 
    19829, 19836, 19843, 19850, 19857, 19865, 19873, 19881, 19889, 19896, 19903, 19911, 19919, 19926, 
    19934, 19942, 19949, 19959, 19969, 19979, 19989, 19999, 20008, 20015, 20022, 20029, 20036, 20043, 
    20050, 20058, 20066, 20073, 20081, 20089, 20096, 20104, 20112, 20119, 20127, 20135, 20142, 20146, 
    20150, 20156, 20165, 20174, 20183, 20191, 20199, 20207, 20216, 20225, 20234, 20244, 20256, 20266, 
    20274, 20284, 20292, 20300, 20306, 20314, 20322, 20330, 20338, 20346, 20350, 20356, 20362, 20370, 
    20378, 20386, 20394, 20402, 20408, 20414, 20421, 20429, 20435, 20444, 20453, 20462, 20470, 20478, 
    20486, 20494, 20502, 20510, 20516, 20522, 20528, 20536, 20544, 20552, 20558, 20563, 20584, 20610, 
    20618, 20630, 20638, 20650, 20662, 20670, 20682, 20693, 20703, 20712, 20722, 20730, 20742, 20753, 
    20762, 20770, 20779, 20788, 20797, 20805, 20817, 20828, 20838, 20847, 20857, 20865, 20874, 20887, 
    20899, 20910, 20920, 20931, 20940, 20949, 20962, 20974, 20985, 20995, 21006, 21015, 21022, 21033, 
    21043, 21052, 21060, 21069, 21082, 21089, 21100, 21113, 21121, 21129, 21137, 21145, 21152, 21160, 
    21166, 21172, 21183, 21192, 21203, 21217, 21228, 21239, 21248, 21259, 21269, 21288, 21301, 21316, 
    21323, 21332, 21350, 21362, 21369, 21383, 21397, 21404, 21412, 21418, 21427, 21433, 21439, 21448, 
    21455, 21462, 21469, 21475, 21483, 21491, 21499, 21507, 21515, 21523, 21531, 21539, 21549, 21558, 
    21566, 21575, 21583, 21590, 21599, 21607, 21614, 21621, 21630, 21638, 21645, 21653, 21661, 21668, 
    21675, 21684, 21692, 21699, 21705, 21713, 21721, 21729, 21738, 21746, 21755, 21763, 21771, 21777, 
    21786, 21795, 21803, 21811, 21819, 21828, 21836, 21843, 21852, 21861, 21870, 21878, 21886, 21894, 
    21901, 21908, 21914, 21920, 21930, 21939, 21947, 21955, 21965, 21974, 21980, 21989, 21998, 22006, 
    22015, 22023, 22033, 22043, 22052, 22062, 22072, 22082, 22091, 22100, 22109, 22118, 22126, 22135, 
    22144, 22154, 22162, 22171, 22179, 22188, 22196, 22205, 22213, 22222, 22231, 22240, 22248, 22257, 
    22266, 22275, 22284, 22292, 22301, 22309, 22318, 22326, 22335, 22342, 22351, 22358, 22367, 22375, 
    22383, 22395, 22403, 22415, 22423, 22435, 22446, 22456, 22465, 22473, 22485, 22496, 22505, 22513, 
    22522, 22531, 22540, 22548, 22560, 22571, 22581, 22590, 22598, 22605, 22616, 22626, 22635, 22643, 
    22650, 22659, 22668, 22677, 22687, 22699, 22709, 22717, 22727, 22735, 22743, 22755, 22771, 22781, 
    22795, 22805, 22819, 22829, 22843, 22851, 22863, 22871, 22883, 22889, 22898, 22904, 22913, 22921, 
    22929, 22937, 22946, 22954, 22962, 22970, 22979, 22987, 22994, 23001, 23008, 23018, 23027, 23035, 
    23043, 23053, 23062, 23070, 23078, 23086, 23096, 23105, 23113, 23121, 23131, 23140, 23148, 23157, 
    23164, 23173, 23180, 23189, 23197, 23209, 23225, 23235, 23249, 23259, 23273, 23283, 23297, 23305, 
    23317, 23325, 23337, 23343, 23349, 23357, 23362, 23371, 23378, 23385, 23394, 23402, 23411, 23418, 
    23426, 23434, 23452, 23468, 23473, 23478, 23485, 23492, 23495, 23500, 23506, 23510, 23516, 23525, 
    23531, 23540, 23546, 23553, 23561, 23565, 23573, 23588, 23594, 23599, 23605, 23611, 23616, 23621, 
    23627, 23635, 23642, 23648, 23653, 23658, 23679, 23699, 23706, 23717, 23724, 23731, 23738, 23745, 
    23752, 23759, 23765, 23773, 23785, 23791, 23799, 23809, 23821, 23828, 23835, 23842, 23849, 23854, 
    23860, 23868, 23876, 23891, 23898, 23910, 23923, 23930, 23936, 23949, 23954, 23960, 23965, 23970, 
    23975, 23980, 23988, 23993, 24002, 24008, 24013, 24020, 24027, 24032, 24037, 24046, 24051, 24061, 
    24071, 24076, 24083, 24094, 24101, 24108, 24115, 24122, 24128, 24134, 24142, 24149, 24156, 24163, 
    24171, 24176, 24182, 24188, 24195, 24203, 24209, 24214, 24220, 24226, 24231, 24236, 0
  };

  const char *Strs =
    "PHI\000INLINEASM\000PROLOG_LABEL\000EH_LABEL\000GC_LABEL\000KILL\000EXT"
    "RACT_SUBREG\000INSERT_SUBREG\000IMPLICIT_DEF\000SUBREG_TO_REG\000COPY_T"
    "O_REGCLASS\000DBG_VALUE\000REG_SEQUENCE\000COPY\000ADCSSri\000ADCSSrr\000"
    "ADCSSrs\000ADCri\000ADCrr\000ADCrs\000ADDSri\000ADDSrr\000ADDSrs\000ADD"
    "ri\000ADDrr\000ADDrs\000ADJCALLSTACKDOWN\000ADJCALLSTACKUP\000ADR\000AN"
    "Dri\000ANDrr\000ANDrs\000ATOMIC_CMP_SWAP_I16\000ATOMIC_CMP_SWAP_I32\000"
    "ATOMIC_CMP_SWAP_I8\000ATOMIC_LOAD_ADD_I16\000ATOMIC_LOAD_ADD_I32\000ATO"
    "MIC_LOAD_ADD_I8\000ATOMIC_LOAD_AND_I16\000ATOMIC_LOAD_AND_I32\000ATOMIC"
    "_LOAD_AND_I8\000ATOMIC_LOAD_NAND_I16\000ATOMIC_LOAD_NAND_I32\000ATOMIC_"
    "LOAD_NAND_I8\000ATOMIC_LOAD_OR_I16\000ATOMIC_LOAD_OR_I32\000ATOMIC_LOAD"
    "_OR_I8\000ATOMIC_LOAD_SUB_I16\000ATOMIC_LOAD_SUB_I32\000ATOMIC_LOAD_SUB"
    "_I8\000ATOMIC_LOAD_XOR_I16\000ATOMIC_LOAD_XOR_I32\000ATOMIC_LOAD_XOR_I8"
    "\000ATOMIC_SWAP_I16\000ATOMIC_SWAP_I32\000ATOMIC_SWAP_I8\000B\000BCCZi6"
    "4\000BCCi64\000BFC\000BFI\000BFI4p\000BICri\000BICrr\000BICrs\000BKPT\000"
    "BL\000BLX\000BLX_pred\000BLXr9\000BLXr9_pred\000BL_pred\000BLr9\000BLr9"
    "_pred\000BMOVPCRX_CALL\000BMOVPCRXr9_CALL\000BR_JTadd\000BR_JTm\000BR_J"
    "Tr\000BX\000BXJ\000BX_CALL\000BX_RET\000BXr9_CALL\000Bcc\000CDP\000CDP2"
    "\000CLREX\000CLZ\000CMNzri\000CMNzrr\000CMNzrs\000CMPri\000CMPrr\000CMP"
    "rs\000CONSTPOOL_ENTRY\000CPS1p\000CPS2p\000CPS3p\000DBG\000DMB\000DMB_M"
    "CR\000DSB\000EORri\000EORrr\000EORrs\000FCONSTD\000FCONSTS\000FMSTAT\000"
    "ISB\000Int_eh_sjlj_dispatchsetup\000Int_eh_sjlj_longjmp\000Int_eh_sjlj_"
    "setjmp\000Int_eh_sjlj_setjmp_nofp\000LDC2L_OFFSET\000LDC2L_OPTION\000LD"
    "C2L_POST\000LDC2L_PRE\000LDC2_OFFSET\000LDC2_OPTION\000LDC2_POST\000LDC"
    "2_PRE\000LDCL_OFFSET\000LDCL_OPTION\000LDCL_POST\000LDCL_PRE\000LDC_OFF"
    "SET\000LDC_OPTION\000LDC_POST\000LDC_PRE\000LDMDA\000LDMDA_UPD\000LDMDB"
    "\000LDMDB_UPD\000LDMIA\000LDMIA_RET\000LDMIA_UPD\000LDMIB\000LDMIB_UPD\000"
    "LDRBT\000LDRB_POST\000LDRB_PRE\000LDRBi12\000LDRBrs\000LDRD\000LDRD_POS"
    "T\000LDRD_PRE\000LDREX\000LDREXB\000LDREXD\000LDREXH\000LDRH\000LDRHT\000"
    "LDRH_POST\000LDRH_PRE\000LDRSB\000LDRSBT\000LDRSB_POST\000LDRSB_PRE\000"
    "LDRSH\000LDRSHT\000LDRSH_POST\000LDRSH_PRE\000LDRT\000LDR_POST\000LDR_P"
    "RE\000LDRcp\000LDRi12\000LDRrs\000LEApcrel\000LEApcrelJT\000MCR\000MCR2"
    "\000MCRR\000MCRR2\000MLA\000MLAv5\000MLS\000MOVCCi\000MOVCCi16\000MOVCC"
    "i32imm\000MOVCCr\000MOVCCs\000MOVPCLR\000MOVPCRX\000MOVTi16\000MOVTi16_"
    "ga_pcrel\000MOV_ga_dyn\000MOV_ga_pcrel\000MOV_ga_pcrel_ldr\000MOVi\000M"
    "OVi16\000MOVi16_ga_pcrel\000MOVi32imm\000MOVr\000MOVr_TC\000MOVs\000MOV"
    "sra_flag\000MOVsrl_flag\000MRC\000MRC2\000MRRC\000MRRC2\000MRS\000MRSsy"
    "s\000MSR\000MSRi\000MUL\000MULv5\000MVNCCi\000MVNi\000MVNr\000MVNs\000N"
    "OP\000ORRri\000ORRrr\000ORRrs\000PICADD\000PICLDR\000PICLDRB\000PICLDRH"
    "\000PICLDRSB\000PICLDRSH\000PICSTR\000PICSTRB\000PICSTRH\000PKHBT\000PK"
    "HTB\000PLDWi12\000PLDWrs\000PLDi12\000PLDrs\000PLIi12\000PLIrs\000QADD\000"
    "QADD16\000QADD8\000QASX\000QDADD\000QDSUB\000QSAX\000QSUB\000QSUB16\000"
    "QSUB8\000RBIT\000REV\000REV16\000REVSH\000RFE\000RFEW\000RRX\000RSBSri\000"
    "RSBSrr\000RSBSrs\000RSBri\000RSBrr\000RSBrs\000RSCSri\000RSCSrs\000RSCr"
    "i\000RSCrr\000RSCrs\000SADD16\000SADD8\000SASX\000SBCSSri\000SBCSSrr\000"
    "SBCSSrs\000SBCri\000SBCrr\000SBCrs\000SBFX\000SEL\000SETEND\000SEV\000S"
    "HADD16\000SHADD8\000SHASX\000SHSAX\000SHSUB16\000SHSUB8\000SMC\000SMLAB"
    "B\000SMLABT\000SMLAD\000SMLADX\000SMLAL\000SMLALBB\000SMLALBT\000SMLALD"
    "\000SMLALDX\000SMLALTB\000SMLALTT\000SMLALv5\000SMLATB\000SMLATT\000SML"
    "AWB\000SMLAWT\000SMLSD\000SMLSDX\000SMLSLD\000SMLSLDX\000SMMLA\000SMMLA"
    "R\000SMMLS\000SMMLSR\000SMMUL\000SMMULR\000SMUAD\000SMUADX\000SMULBB\000"
    "SMULBT\000SMULL\000SMULLv5\000SMULTB\000SMULTT\000SMULWB\000SMULWT\000S"
    "MUSD\000SMUSDX\000SRS\000SRSW\000SSAT\000SSAT16\000SSAX\000SSUB16\000SS"
    "UB8\000STC2L_OFFSET\000STC2L_OPTION\000STC2L_POST\000STC2L_PRE\000STC2_"
    "OFFSET\000STC2_OPTION\000STC2_POST\000STC2_PRE\000STCL_OFFSET\000STCL_O"
    "PTION\000STCL_POST\000STCL_PRE\000STC_OFFSET\000STC_OPTION\000STC_POST\000"
    "STC_PRE\000STMDA\000STMDA_UPD\000STMDB\000STMDB_UPD\000STMIA\000STMIA_U"
    "PD\000STMIB\000STMIB_UPD\000STRBT\000STRB_POST\000STRB_PRE\000STRBi12\000"
    "STRBrs\000STRD\000STRD_POST\000STRD_PRE\000STREX\000STREXB\000STREXD\000"
    "STREXH\000STRH\000STRHT\000STRH_POST\000STRH_PRE\000STRT\000STR_POST\000"
    "STR_PRE\000STRi12\000STRrs\000SUBSri\000SUBSrr\000SUBSrs\000SUBri\000SU"
    "Brr\000SUBrs\000SVC\000SWP\000SWPB\000SXTAB16rr\000SXTAB16rr_rot\000SXT"
    "ABrr\000SXTABrr_rot\000SXTAHrr\000SXTAHrr_rot\000SXTB16r\000SXTB16r_rot"
    "\000SXTBr\000SXTBr_rot\000SXTHr\000SXTHr_rot\000TAILJMPd\000TAILJMPdND\000"
    "TAILJMPdNDt\000TAILJMPdt\000TAILJMPr\000TAILJMPrND\000TCRETURNdi\000TCR"
    "ETURNdiND\000TCRETURNri\000TCRETURNriND\000TEQri\000TEQrr\000TEQrs\000T"
    "Psoft\000TRAP\000TSTri\000TSTrr\000TSTrs\000UADD16\000UADD8\000UASX\000"
    "UBFX\000UHADD16\000UHADD8\000UHASX\000UHSAX\000UHSUB16\000UHSUB8\000UMA"
    "AL\000UMAALv5\000UMLAL\000UMLALv5\000UMULL\000UMULLv5\000UQADD16\000UQA"
    "DD8\000UQASX\000UQSAX\000UQSUB16\000UQSUB8\000USAD8\000USADA8\000USAT\000"
    "USAT16\000USAX\000USUB16\000USUB8\000UXTAB16rr\000UXTAB16rr_rot\000UXTA"
    "Brr\000UXTABrr_rot\000UXTAHrr\000UXTAHrr_rot\000UXTB16r\000UXTB16r_rot\000"
    "UXTBr\000UXTBr_rot\000UXTHr\000UXTHr_rot\000VABALsv2i64\000VABALsv4i32\000"
    "VABALsv8i16\000VABALuv2i64\000VABALuv4i32\000VABALuv8i16\000VABAsv16i8\000"
    "VABAsv2i32\000VABAsv4i16\000VABAsv4i32\000VABAsv8i16\000VABAsv8i8\000VA"
    "BAuv16i8\000VABAuv2i32\000VABAuv4i16\000VABAuv4i32\000VABAuv8i16\000VAB"
    "Auv8i8\000VABDLsv2i64\000VABDLsv4i32\000VABDLsv8i16\000VABDLuv2i64\000V"
    "ABDLuv4i32\000VABDLuv8i16\000VABDfd\000VABDfq\000VABDsv16i8\000VABDsv2i"
    "32\000VABDsv4i16\000VABDsv4i32\000VABDsv8i16\000VABDsv8i8\000VABDuv16i8"
    "\000VABDuv2i32\000VABDuv4i16\000VABDuv4i32\000VABDuv8i16\000VABDuv8i8\000"
    "VABSD\000VABSS\000VABSfd\000VABSfq\000VABSv16i8\000VABSv2i32\000VABSv4i"
    "16\000VABSv4i32\000VABSv8i16\000VABSv8i8\000VACGEd\000VACGEq\000VACGTd\000"
    "VACGTq\000VADDD\000VADDHNv2i32\000VADDHNv4i16\000VADDHNv8i8\000VADDLsv2"
    "i64\000VADDLsv4i32\000VADDLsv8i16\000VADDLuv2i64\000VADDLuv4i32\000VADD"
    "Luv8i16\000VADDS\000VADDWsv2i64\000VADDWsv4i32\000VADDWsv8i16\000VADDWu"
    "v2i64\000VADDWuv4i32\000VADDWuv8i16\000VADDfd\000VADDfq\000VADDv16i8\000"
    "VADDv1i64\000VADDv2i32\000VADDv2i64\000VADDv4i16\000VADDv4i32\000VADDv8"
    "i16\000VADDv8i8\000VANDd\000VANDq\000VBICd\000VBICiv2i32\000VBICiv4i16\000"
    "VBICiv4i32\000VBICiv8i16\000VBICq\000VBIFd\000VBIFq\000VBITd\000VBITq\000"
    "VBSLd\000VBSLq\000VCEQfd\000VCEQfq\000VCEQv16i8\000VCEQv2i32\000VCEQv4i"
    "16\000VCEQv4i32\000VCEQv8i16\000VCEQv8i8\000VCEQzv16i8\000VCEQzv2f32\000"
    "VCEQzv2i32\000VCEQzv4f32\000VCEQzv4i16\000VCEQzv4i32\000VCEQzv8i16\000V"
    "CEQzv8i8\000VCGEfd\000VCGEfq\000VCGEsv16i8\000VCGEsv2i32\000VCGEsv4i16\000"
    "VCGEsv4i32\000VCGEsv8i16\000VCGEsv8i8\000VCGEuv16i8\000VCGEuv2i32\000VC"
    "GEuv4i16\000VCGEuv4i32\000VCGEuv8i16\000VCGEuv8i8\000VCGEzv16i8\000VCGE"
    "zv2f32\000VCGEzv2i32\000VCGEzv4f32\000VCGEzv4i16\000VCGEzv4i32\000VCGEz"
    "v8i16\000VCGEzv8i8\000VCGTfd\000VCGTfq\000VCGTsv16i8\000VCGTsv2i32\000V"
    "CGTsv4i16\000VCGTsv4i32\000VCGTsv8i16\000VCGTsv8i8\000VCGTuv16i8\000VCG"
    "Tuv2i32\000VCGTuv4i16\000VCGTuv4i32\000VCGTuv8i16\000VCGTuv8i8\000VCGTz"
    "v16i8\000VCGTzv2f32\000VCGTzv2i32\000VCGTzv4f32\000VCGTzv4i16\000VCGTzv"
    "4i32\000VCGTzv8i16\000VCGTzv8i8\000VCLEzv16i8\000VCLEzv2f32\000VCLEzv2i"
    "32\000VCLEzv4f32\000VCLEzv4i16\000VCLEzv4i32\000VCLEzv8i16\000VCLEzv8i8"
    "\000VCLSv16i8\000VCLSv2i32\000VCLSv4i16\000VCLSv4i32\000VCLSv8i16\000VC"
    "LSv8i8\000VCLTzv16i8\000VCLTzv2f32\000VCLTzv2i32\000VCLTzv4f32\000VCLTz"
    "v4i16\000VCLTzv4i32\000VCLTzv8i16\000VCLTzv8i8\000VCLZv16i8\000VCLZv2i3"
    "2\000VCLZv4i16\000VCLZv4i32\000VCLZv8i16\000VCLZv8i8\000VCMPD\000VCMPED"
    "\000VCMPES\000VCMPEZD\000VCMPEZS\000VCMPS\000VCMPZD\000VCMPZS\000VCNTd\000"
    "VCNTq\000VCVTBHS\000VCVTBSH\000VCVTDS\000VCVTSD\000VCVTTHS\000VCVTTSH\000"
    "VCVTf2h\000VCVTf2sd\000VCVTf2sq\000VCVTf2ud\000VCVTf2uq\000VCVTf2xsd\000"
    "VCVTf2xsq\000VCVTf2xud\000VCVTf2xuq\000VCVTh2f\000VCVTs2fd\000VCVTs2fq\000"
    "VCVTu2fd\000VCVTu2fq\000VCVTxs2fd\000VCVTxs2fq\000VCVTxu2fd\000VCVTxu2f"
    "q\000VDIVD\000VDIVS\000VDUP16d\000VDUP16q\000VDUP32d\000VDUP32q\000VDUP"
    "8d\000VDUP8q\000VDUPLN16d\000VDUPLN16q\000VDUPLN32d\000VDUPLN32q\000VDU"
    "PLN8d\000VDUPLN8q\000VDUPLNfd\000VDUPLNfq\000VDUPfd\000VDUPfdf\000VDUPf"
    "q\000VDUPfqf\000VEORd\000VEORq\000VEXTd16\000VEXTd32\000VEXTd8\000VEXTd"
    "f\000VEXTq16\000VEXTq32\000VEXTq8\000VEXTqf\000VGETLNi32\000VGETLNs16\000"
    "VGETLNs8\000VGETLNu16\000VGETLNu8\000VHADDsv16i8\000VHADDsv2i32\000VHAD"
    "Dsv4i16\000VHADDsv4i32\000VHADDsv8i16\000VHADDsv8i8\000VHADDuv16i8\000V"
    "HADDuv2i32\000VHADDuv4i16\000VHADDuv4i32\000VHADDuv8i16\000VHADDuv8i8\000"
    "VHSUBsv16i8\000VHSUBsv2i32\000VHSUBsv4i16\000VHSUBsv4i32\000VHSUBsv8i16"
    "\000VHSUBsv8i8\000VHSUBuv16i8\000VHSUBuv2i32\000VHSUBuv4i16\000VHSUBuv4"
    "i32\000VHSUBuv8i16\000VHSUBuv8i8\000VLD1DUPd16\000VLD1DUPd16_UPD\000VLD"
    "1DUPd32\000VLD1DUPd32_UPD\000VLD1DUPd8\000VLD1DUPd8_UPD\000VLD1DUPq16\000"
    "VLD1DUPq16Pseudo\000VLD1DUPq16Pseudo_UPD\000VLD1DUPq16_UPD\000VLD1DUPq3"
    "2\000VLD1DUPq32Pseudo\000VLD1DUPq32Pseudo_UPD\000VLD1DUPq32_UPD\000VLD1"
    "DUPq8\000VLD1DUPq8Pseudo\000VLD1DUPq8Pseudo_UPD\000VLD1DUPq8_UPD\000VLD"
    "1LNd16\000VLD1LNd16_UPD\000VLD1LNd32\000VLD1LNd32_UPD\000VLD1LNd8\000VL"
    "D1LNd8_UPD\000VLD1LNq16Pseudo\000VLD1LNq16Pseudo_UPD\000VLD1LNq32Pseudo"
    "\000VLD1LNq32Pseudo_UPD\000VLD1LNq8Pseudo\000VLD1LNq8Pseudo_UPD\000VLD1"
    "d16\000VLD1d16Q\000VLD1d16Q_UPD\000VLD1d16T\000VLD1d16T_UPD\000VLD1d16_"
    "UPD\000VLD1d32\000VLD1d32Q\000VLD1d32Q_UPD\000VLD1d32T\000VLD1d32T_UPD\000"
    "VLD1d32_UPD\000VLD1d64\000VLD1d64Q\000VLD1d64QPseudo\000VLD1d64QPseudo_"
    "UPD\000VLD1d64Q_UPD\000VLD1d64T\000VLD1d64TPseudo\000VLD1d64TPseudo_UPD"
    "\000VLD1d64T_UPD\000VLD1d64_UPD\000VLD1d8\000VLD1d8Q\000VLD1d8Q_UPD\000"
    "VLD1d8T\000VLD1d8T_UPD\000VLD1d8_UPD\000VLD1q16\000VLD1q16Pseudo\000VLD"
    "1q16Pseudo_UPD\000VLD1q16_UPD\000VLD1q32\000VLD1q32Pseudo\000VLD1q32Pse"
    "udo_UPD\000VLD1q32_UPD\000VLD1q64\000VLD1q64Pseudo\000VLD1q64Pseudo_UPD"
    "\000VLD1q64_UPD\000VLD1q8\000VLD1q8Pseudo\000VLD1q8Pseudo_UPD\000VLD1q8"
    "_UPD\000VLD2DUPd16\000VLD2DUPd16Pseudo\000VLD2DUPd16Pseudo_UPD\000VLD2D"
    "UPd16_UPD\000VLD2DUPd16x2\000VLD2DUPd16x2_UPD\000VLD2DUPd32\000VLD2DUPd"
    "32Pseudo\000VLD2DUPd32Pseudo_UPD\000VLD2DUPd32_UPD\000VLD2DUPd32x2\000V"
    "LD2DUPd32x2_UPD\000VLD2DUPd8\000VLD2DUPd8Pseudo\000VLD2DUPd8Pseudo_UPD\000"
    "VLD2DUPd8_UPD\000VLD2DUPd8x2\000VLD2DUPd8x2_UPD\000VLD2LNd16\000VLD2LNd"
    "16Pseudo\000VLD2LNd16Pseudo_UPD\000VLD2LNd16_UPD\000VLD2LNd32\000VLD2LN"
    "d32Pseudo\000VLD2LNd32Pseudo_UPD\000VLD2LNd32_UPD\000VLD2LNd8\000VLD2LN"
    "d8Pseudo\000VLD2LNd8Pseudo_UPD\000VLD2LNd8_UPD\000VLD2LNq16\000VLD2LNq1"
    "6Pseudo\000VLD2LNq16Pseudo_UPD\000VLD2LNq16_UPD\000VLD2LNq32\000VLD2LNq"
    "32Pseudo\000VLD2LNq32Pseudo_UPD\000VLD2LNq32_UPD\000VLD2b16\000VLD2b16_"
    "UPD\000VLD2b32\000VLD2b32_UPD\000VLD2b8\000VLD2b8_UPD\000VLD2d16\000VLD"
    "2d16Pseudo\000VLD2d16Pseudo_UPD\000VLD2d16_UPD\000VLD2d32\000VLD2d32Pse"
    "udo\000VLD2d32Pseudo_UPD\000VLD2d32_UPD\000VLD2d8\000VLD2d8Pseudo\000VL"
    "D2d8Pseudo_UPD\000VLD2d8_UPD\000VLD2q16\000VLD2q16Pseudo\000VLD2q16Pseu"
    "do_UPD\000VLD2q16_UPD\000VLD2q32\000VLD2q32Pseudo\000VLD2q32Pseudo_UPD\000"
    "VLD2q32_UPD\000VLD2q8\000VLD2q8Pseudo\000VLD2q8Pseudo_UPD\000VLD2q8_UPD"
    "\000VLD3DUPd16\000VLD3DUPd16Pseudo\000VLD3DUPd16Pseudo_UPD\000VLD3DUPd1"
    "6_UPD\000VLD3DUPd16x2\000VLD3DUPd16x2_UPD\000VLD3DUPd32\000VLD3DUPd32Ps"
    "eudo\000VLD3DUPd32Pseudo_UPD\000VLD3DUPd32_UPD\000VLD3DUPd32x2\000VLD3D"
    "UPd32x2_UPD\000VLD3DUPd8\000VLD3DUPd8Pseudo\000VLD3DUPd8Pseudo_UPD\000V"
    "LD3DUPd8_UPD\000VLD3DUPd8x2\000VLD3DUPd8x2_UPD\000VLD3LNd16\000VLD3LNd1"
    "6Pseudo\000VLD3LNd16Pseudo_UPD\000VLD3LNd16_UPD\000VLD3LNd32\000VLD3LNd"
    "32Pseudo\000VLD3LNd32Pseudo_UPD\000VLD3LNd32_UPD\000VLD3LNd8\000VLD3LNd"
    "8Pseudo\000VLD3LNd8Pseudo_UPD\000VLD3LNd8_UPD\000VLD3LNq16\000VLD3LNq16"
    "Pseudo\000VLD3LNq16Pseudo_UPD\000VLD3LNq16_UPD\000VLD3LNq32\000VLD3LNq3"
    "2Pseudo\000VLD3LNq32Pseudo_UPD\000VLD3LNq32_UPD\000VLD3d16\000VLD3d16Ps"
    "eudo\000VLD3d16Pseudo_UPD\000VLD3d16_UPD\000VLD3d32\000VLD3d32Pseudo\000"
    "VLD3d32Pseudo_UPD\000VLD3d32_UPD\000VLD3d8\000VLD3d8Pseudo\000VLD3d8Pse"
    "udo_UPD\000VLD3d8_UPD\000VLD3q16\000VLD3q16Pseudo_UPD\000VLD3q16_UPD\000"
    "VLD3q16oddPseudo\000VLD3q16oddPseudo_UPD\000VLD3q32\000VLD3q32Pseudo_UP"
    "D\000VLD3q32_UPD\000VLD3q32oddPseudo\000VLD3q32oddPseudo_UPD\000VLD3q8\000"
    "VLD3q8Pseudo_UPD\000VLD3q8_UPD\000VLD3q8oddPseudo\000VLD3q8oddPseudo_UP"
    "D\000VLD4DUPd16\000VLD4DUPd16Pseudo\000VLD4DUPd16Pseudo_UPD\000VLD4DUPd"
    "16_UPD\000VLD4DUPd16x2\000VLD4DUPd16x2_UPD\000VLD4DUPd32\000VLD4DUPd32P"
    "seudo\000VLD4DUPd32Pseudo_UPD\000VLD4DUPd32_UPD\000VLD4DUPd32x2\000VLD4"
    "DUPd32x2_UPD\000VLD4DUPd8\000VLD4DUPd8Pseudo\000VLD4DUPd8Pseudo_UPD\000"
    "VLD4DUPd8_UPD\000VLD4DUPd8x2\000VLD4DUPd8x2_UPD\000VLD4LNd16\000VLD4LNd"
    "16Pseudo\000VLD4LNd16Pseudo_UPD\000VLD4LNd16_UPD\000VLD4LNd32\000VLD4LN"
    "d32Pseudo\000VLD4LNd32Pseudo_UPD\000VLD4LNd32_UPD\000VLD4LNd8\000VLD4LN"
    "d8Pseudo\000VLD4LNd8Pseudo_UPD\000VLD4LNd8_UPD\000VLD4LNq16\000VLD4LNq1"
    "6Pseudo\000VLD4LNq16Pseudo_UPD\000VLD4LNq16_UPD\000VLD4LNq32\000VLD4LNq"
    "32Pseudo\000VLD4LNq32Pseudo_UPD\000VLD4LNq32_UPD\000VLD4d16\000VLD4d16P"
    "seudo\000VLD4d16Pseudo_UPD\000VLD4d16_UPD\000VLD4d32\000VLD4d32Pseudo\000"
    "VLD4d32Pseudo_UPD\000VLD4d32_UPD\000VLD4d8\000VLD4d8Pseudo\000VLD4d8Pse"
    "udo_UPD\000VLD4d8_UPD\000VLD4q16\000VLD4q16Pseudo_UPD\000VLD4q16_UPD\000"
    "VLD4q16oddPseudo\000VLD4q16oddPseudo_UPD\000VLD4q32\000VLD4q32Pseudo_UP"
    "D\000VLD4q32_UPD\000VLD4q32oddPseudo\000VLD4q32oddPseudo_UPD\000VLD4q8\000"
    "VLD4q8Pseudo_UPD\000VLD4q8_UPD\000VLD4q8oddPseudo\000VLD4q8oddPseudo_UP"
    "D\000VLDMDDB\000VLDMDDB_UPD\000VLDMDIA\000VLDMDIA_UPD\000VLDMQDB\000VLD"
    "MQIA\000VLDMSDB\000VLDMSDB_UPD\000VLDMSIA\000VLDMSIA_UPD\000VLDRD\000VL"
    "DRS\000VMAXfd\000VMAXfq\000VMAXsv16i8\000VMAXsv2i32\000VMAXsv4i16\000VM"
    "AXsv4i32\000VMAXsv8i16\000VMAXsv8i8\000VMAXuv16i8\000VMAXuv2i32\000VMAX"
    "uv4i16\000VMAXuv4i32\000VMAXuv8i16\000VMAXuv8i8\000VMINfd\000VMINfq\000"
    "VMINsv16i8\000VMINsv2i32\000VMINsv4i16\000VMINsv4i32\000VMINsv8i16\000V"
    "MINsv8i8\000VMINuv16i8\000VMINuv2i32\000VMINuv4i16\000VMINuv4i32\000VMI"
    "Nuv8i16\000VMINuv8i8\000VMLAD\000VMLALslsv2i32\000VMLALslsv4i16\000VMLA"
    "Lsluv2i32\000VMLALsluv4i16\000VMLALsv2i64\000VMLALsv4i32\000VMLALsv8i16"
    "\000VMLALuv2i64\000VMLALuv4i32\000VMLALuv8i16\000VMLAS\000VMLAfd\000VML"
    "Afq\000VMLAslfd\000VMLAslfq\000VMLAslv2i32\000VMLAslv4i16\000VMLAslv4i3"
    "2\000VMLAslv8i16\000VMLAv16i8\000VMLAv2i32\000VMLAv4i16\000VMLAv4i32\000"
    "VMLAv8i16\000VMLAv8i8\000VMLSD\000VMLSLslsv2i32\000VMLSLslsv4i16\000VML"
    "SLsluv2i32\000VMLSLsluv4i16\000VMLSLsv2i64\000VMLSLsv4i32\000VMLSLsv8i1"
    "6\000VMLSLuv2i64\000VMLSLuv4i32\000VMLSLuv8i16\000VMLSS\000VMLSfd\000VM"
    "LSfq\000VMLSslfd\000VMLSslfq\000VMLSslv2i32\000VMLSslv4i16\000VMLSslv4i"
    "32\000VMLSslv8i16\000VMLSv16i8\000VMLSv2i32\000VMLSv4i16\000VMLSv4i32\000"
    "VMLSv8i16\000VMLSv8i8\000VMOVD\000VMOVDRR\000VMOVDcc\000VMOVDneon\000VM"
    "OVLsv2i64\000VMOVLsv4i32\000VMOVLsv8i16\000VMOVLuv2i64\000VMOVLuv4i32\000"
    "VMOVLuv8i16\000VMOVNv2i32\000VMOVNv4i16\000VMOVNv8i8\000VMOVQ\000VMOVQQ"
    "\000VMOVQQQQ\000VMOVRRD\000VMOVRRS\000VMOVRS\000VMOVS\000VMOVSR\000VMOV"
    "SRR\000VMOVScc\000VMOVv16i8\000VMOVv1i64\000VMOVv2i32\000VMOVv2i64\000V"
    "MOVv4i16\000VMOVv4i32\000VMOVv8i16\000VMOVv8i8\000VMRS\000VMRS_FPEXC\000"
    "VMRS_FPSID\000VMSR\000VMSR_FPEXC\000VMSR_FPSID\000VMULD\000VMULLp\000VM"
    "ULLslsv2i32\000VMULLslsv4i16\000VMULLsluv2i32\000VMULLsluv4i16\000VMULL"
    "sv2i64\000VMULLsv4i32\000VMULLsv8i16\000VMULLuv2i64\000VMULLuv4i32\000V"
    "MULLuv8i16\000VMULS\000VMULfd\000VMULfq\000VMULpd\000VMULpq\000VMULslfd"
    "\000VMULslfq\000VMULslv2i32\000VMULslv4i16\000VMULslv4i32\000VMULslv8i1"
    "6\000VMULv16i8\000VMULv2i32\000VMULv4i16\000VMULv4i32\000VMULv8i16\000V"
    "MULv8i8\000VMVNd\000VMVNq\000VMVNv2i32\000VMVNv4i16\000VMVNv4i32\000VMV"
    "Nv8i16\000VNEGD\000VNEGS\000VNEGf32q\000VNEGfd\000VNEGs16d\000VNEGs16q\000"
    "VNEGs32d\000VNEGs32q\000VNEGs8d\000VNEGs8q\000VNMLAD\000VNMLAS\000VNMLS"
    "D\000VNMLSS\000VNMULD\000VNMULS\000VORNd\000VORNq\000VORRd\000VORRiv2i3"
    "2\000VORRiv4i16\000VORRiv4i32\000VORRiv8i16\000VORRq\000VPADALsv16i8\000"
    "VPADALsv2i32\000VPADALsv4i16\000VPADALsv4i32\000VPADALsv8i16\000VPADALs"
    "v8i8\000VPADALuv16i8\000VPADALuv2i32\000VPADALuv4i16\000VPADALuv4i32\000"
    "VPADALuv8i16\000VPADALuv8i8\000VPADDLsv16i8\000VPADDLsv2i32\000VPADDLsv"
    "4i16\000VPADDLsv4i32\000VPADDLsv8i16\000VPADDLsv8i8\000VPADDLuv16i8\000"
    "VPADDLuv2i32\000VPADDLuv4i16\000VPADDLuv4i32\000VPADDLuv8i16\000VPADDLu"
    "v8i8\000VPADDf\000VPADDi16\000VPADDi32\000VPADDi8\000VPMAXf\000VPMAXs16"
    "\000VPMAXs32\000VPMAXs8\000VPMAXu16\000VPMAXu32\000VPMAXu8\000VPMINf\000"
    "VPMINs16\000VPMINs32\000VPMINs8\000VPMINu16\000VPMINu32\000VPMINu8\000V"
    "QABSv16i8\000VQABSv2i32\000VQABSv4i16\000VQABSv4i32\000VQABSv8i16\000VQ"
    "ABSv8i8\000VQADDsv16i8\000VQADDsv1i64\000VQADDsv2i32\000VQADDsv2i64\000"
    "VQADDsv4i16\000VQADDsv4i32\000VQADDsv8i16\000VQADDsv8i8\000VQADDuv16i8\000"
    "VQADDuv1i64\000VQADDuv2i32\000VQADDuv2i64\000VQADDuv4i16\000VQADDuv4i32"
    "\000VQADDuv8i16\000VQADDuv8i8\000VQDMLALslv2i32\000VQDMLALslv4i16\000VQ"
    "DMLALv2i64\000VQDMLALv4i32\000VQDMLSLslv2i32\000VQDMLSLslv4i16\000VQDML"
    "SLv2i64\000VQDMLSLv4i32\000VQDMULHslv2i32\000VQDMULHslv4i16\000VQDMULHs"
    "lv4i32\000VQDMULHslv8i16\000VQDMULHv2i32\000VQDMULHv4i16\000VQDMULHv4i3"
    "2\000VQDMULHv8i16\000VQDMULLslv2i32\000VQDMULLslv4i16\000VQDMULLv2i64\000"
    "VQDMULLv4i32\000VQMOVNsuv2i32\000VQMOVNsuv4i16\000VQMOVNsuv8i8\000VQMOV"
    "Nsv2i32\000VQMOVNsv4i16\000VQMOVNsv8i8\000VQMOVNuv2i32\000VQMOVNuv4i16\000"
    "VQMOVNuv8i8\000VQNEGv16i8\000VQNEGv2i32\000VQNEGv4i16\000VQNEGv4i32\000"
    "VQNEGv8i16\000VQNEGv8i8\000VQRDMULHslv2i32\000VQRDMULHslv4i16\000VQRDMU"
    "LHslv4i32\000VQRDMULHslv8i16\000VQRDMULHv2i32\000VQRDMULHv4i16\000VQRDM"
    "ULHv4i32\000VQRDMULHv8i16\000VQRSHLsv16i8\000VQRSHLsv1i64\000VQRSHLsv2i"
    "32\000VQRSHLsv2i64\000VQRSHLsv4i16\000VQRSHLsv4i32\000VQRSHLsv8i16\000V"
    "QRSHLsv8i8\000VQRSHLuv16i8\000VQRSHLuv1i64\000VQRSHLuv2i32\000VQRSHLuv2"
    "i64\000VQRSHLuv4i16\000VQRSHLuv4i32\000VQRSHLuv8i16\000VQRSHLuv8i8\000V"
    "QRSHRNsv2i32\000VQRSHRNsv4i16\000VQRSHRNsv8i8\000VQRSHRNuv2i32\000VQRSH"
    "RNuv4i16\000VQRSHRNuv8i8\000VQRSHRUNv2i32\000VQRSHRUNv4i16\000VQRSHRUNv"
    "8i8\000VQSHLsiv16i8\000VQSHLsiv1i64\000VQSHLsiv2i32\000VQSHLsiv2i64\000"
    "VQSHLsiv4i16\000VQSHLsiv4i32\000VQSHLsiv8i16\000VQSHLsiv8i8\000VQSHLsuv"
    "16i8\000VQSHLsuv1i64\000VQSHLsuv2i32\000VQSHLsuv2i64\000VQSHLsuv4i16\000"
    "VQSHLsuv4i32\000VQSHLsuv8i16\000VQSHLsuv8i8\000VQSHLsv16i8\000VQSHLsv1i"
    "64\000VQSHLsv2i32\000VQSHLsv2i64\000VQSHLsv4i16\000VQSHLsv4i32\000VQSHL"
    "sv8i16\000VQSHLsv8i8\000VQSHLuiv16i8\000VQSHLuiv1i64\000VQSHLuiv2i32\000"
    "VQSHLuiv2i64\000VQSHLuiv4i16\000VQSHLuiv4i32\000VQSHLuiv8i16\000VQSHLui"
    "v8i8\000VQSHLuv16i8\000VQSHLuv1i64\000VQSHLuv2i32\000VQSHLuv2i64\000VQS"
    "HLuv4i16\000VQSHLuv4i32\000VQSHLuv8i16\000VQSHLuv8i8\000VQSHRNsv2i32\000"
    "VQSHRNsv4i16\000VQSHRNsv8i8\000VQSHRNuv2i32\000VQSHRNuv4i16\000VQSHRNuv"
    "8i8\000VQSHRUNv2i32\000VQSHRUNv4i16\000VQSHRUNv8i8\000VQSUBsv16i8\000VQ"
    "SUBsv1i64\000VQSUBsv2i32\000VQSUBsv2i64\000VQSUBsv4i16\000VQSUBsv4i32\000"
    "VQSUBsv8i16\000VQSUBsv8i8\000VQSUBuv16i8\000VQSUBuv1i64\000VQSUBuv2i32\000"
    "VQSUBuv2i64\000VQSUBuv4i16\000VQSUBuv4i32\000VQSUBuv8i16\000VQSUBuv8i8\000"
    "VRADDHNv2i32\000VRADDHNv4i16\000VRADDHNv8i8\000VRECPEd\000VRECPEfd\000V"
    "RECPEfq\000VRECPEq\000VRECPSfd\000VRECPSfq\000VREV16d8\000VREV16q8\000V"
    "REV32d16\000VREV32d8\000VREV32q16\000VREV32q8\000VREV64d16\000VREV64d32"
    "\000VREV64d8\000VREV64df\000VREV64q16\000VREV64q32\000VREV64q8\000VREV6"
    "4qf\000VRHADDsv16i8\000VRHADDsv2i32\000VRHADDsv4i16\000VRHADDsv4i32\000"
    "VRHADDsv8i16\000VRHADDsv8i8\000VRHADDuv16i8\000VRHADDuv2i32\000VRHADDuv"
    "4i16\000VRHADDuv4i32\000VRHADDuv8i16\000VRHADDuv8i8\000VRSHLsv16i8\000V"
    "RSHLsv1i64\000VRSHLsv2i32\000VRSHLsv2i64\000VRSHLsv4i16\000VRSHLsv4i32\000"
    "VRSHLsv8i16\000VRSHLsv8i8\000VRSHLuv16i8\000VRSHLuv1i64\000VRSHLuv2i32\000"
    "VRSHLuv2i64\000VRSHLuv4i16\000VRSHLuv4i32\000VRSHLuv8i16\000VRSHLuv8i8\000"
    "VRSHRNv2i32\000VRSHRNv4i16\000VRSHRNv8i8\000VRSHRsv16i8\000VRSHRsv1i64\000"
    "VRSHRsv2i32\000VRSHRsv2i64\000VRSHRsv4i16\000VRSHRsv4i32\000VRSHRsv8i16"
    "\000VRSHRsv8i8\000VRSHRuv16i8\000VRSHRuv1i64\000VRSHRuv2i32\000VRSHRuv2"
    "i64\000VRSHRuv4i16\000VRSHRuv4i32\000VRSHRuv8i16\000VRSHRuv8i8\000VRSQR"
    "TEd\000VRSQRTEfd\000VRSQRTEfq\000VRSQRTEq\000VRSQRTSfd\000VRSQRTSfq\000"
    "VRSRAsv16i8\000VRSRAsv1i64\000VRSRAsv2i32\000VRSRAsv2i64\000VRSRAsv4i16"
    "\000VRSRAsv4i32\000VRSRAsv8i16\000VRSRAsv8i8\000VRSRAuv16i8\000VRSRAuv1"
    "i64\000VRSRAuv2i32\000VRSRAuv2i64\000VRSRAuv4i16\000VRSRAuv4i32\000VRSR"
    "Auv8i16\000VRSRAuv8i8\000VRSUBHNv2i32\000VRSUBHNv4i16\000VRSUBHNv8i8\000"
    "VSETLNi16\000VSETLNi32\000VSETLNi8\000VSHLLi16\000VSHLLi32\000VSHLLi8\000"
    "VSHLLsv2i64\000VSHLLsv4i32\000VSHLLsv8i16\000VSHLLuv2i64\000VSHLLuv4i32"
    "\000VSHLLuv8i16\000VSHLiv16i8\000VSHLiv1i64\000VSHLiv2i32\000VSHLiv2i64"
    "\000VSHLiv4i16\000VSHLiv4i32\000VSHLiv8i16\000VSHLiv8i8\000VSHLsv16i8\000"
    "VSHLsv1i64\000VSHLsv2i32\000VSHLsv2i64\000VSHLsv4i16\000VSHLsv4i32\000V"
    "SHLsv8i16\000VSHLsv8i8\000VSHLuv16i8\000VSHLuv1i64\000VSHLuv2i32\000VSH"
    "Luv2i64\000VSHLuv4i16\000VSHLuv4i32\000VSHLuv8i16\000VSHLuv8i8\000VSHRN"
    "v2i32\000VSHRNv4i16\000VSHRNv8i8\000VSHRsv16i8\000VSHRsv1i64\000VSHRsv2"
    "i32\000VSHRsv2i64\000VSHRsv4i16\000VSHRsv4i32\000VSHRsv8i16\000VSHRsv8i"
    "8\000VSHRuv16i8\000VSHRuv1i64\000VSHRuv2i32\000VSHRuv2i64\000VSHRuv4i16"
    "\000VSHRuv4i32\000VSHRuv8i16\000VSHRuv8i8\000VSHTOD\000VSHTOS\000VSITOD"
    "\000VSITOS\000VSLIv16i8\000VSLIv1i64\000VSLIv2i32\000VSLIv2i64\000VSLIv"
    "4i16\000VSLIv4i32\000VSLIv8i16\000VSLIv8i8\000VSLTOD\000VSLTOS\000VSQRT"
    "D\000VSQRTS\000VSRAsv16i8\000VSRAsv1i64\000VSRAsv2i32\000VSRAsv2i64\000"
    "VSRAsv4i16\000VSRAsv4i32\000VSRAsv8i16\000VSRAsv8i8\000VSRAuv16i8\000VS"
    "RAuv1i64\000VSRAuv2i32\000VSRAuv2i64\000VSRAuv4i16\000VSRAuv4i32\000VSR"
    "Auv8i16\000VSRAuv8i8\000VSRIv16i8\000VSRIv1i64\000VSRIv2i32\000VSRIv2i6"
    "4\000VSRIv4i16\000VSRIv4i32\000VSRIv8i16\000VSRIv8i8\000VST1LNd16\000VS"
    "T1LNd16_UPD\000VST1LNd32\000VST1LNd32_UPD\000VST1LNd8\000VST1LNd8_UPD\000"
    "VST1LNq16Pseudo\000VST1LNq16Pseudo_UPD\000VST1LNq32Pseudo\000VST1LNq32P"
    "seudo_UPD\000VST1LNq8Pseudo\000VST1LNq8Pseudo_UPD\000VST1d16\000VST1d16"
    "Q\000VST1d16Q_UPD\000VST1d16T\000VST1d16T_UPD\000VST1d16_UPD\000VST1d32"
    "\000VST1d32Q\000VST1d32Q_UPD\000VST1d32T\000VST1d32T_UPD\000VST1d32_UPD"
    "\000VST1d64\000VST1d64Q\000VST1d64QPseudo\000VST1d64QPseudo_UPD\000VST1"
    "d64Q_UPD\000VST1d64T\000VST1d64TPseudo\000VST1d64TPseudo_UPD\000VST1d64"
    "T_UPD\000VST1d64_UPD\000VST1d8\000VST1d8Q\000VST1d8Q_UPD\000VST1d8T\000"
    "VST1d8T_UPD\000VST1d8_UPD\000VST1q16\000VST1q16Pseudo\000VST1q16Pseudo_"
    "UPD\000VST1q16_UPD\000VST1q32\000VST1q32Pseudo\000VST1q32Pseudo_UPD\000"
    "VST1q32_UPD\000VST1q64\000VST1q64Pseudo\000VST1q64Pseudo_UPD\000VST1q64"
    "_UPD\000VST1q8\000VST1q8Pseudo\000VST1q8Pseudo_UPD\000VST1q8_UPD\000VST"
    "2LNd16\000VST2LNd16Pseudo\000VST2LNd16Pseudo_UPD\000VST2LNd16_UPD\000VS"
    "T2LNd32\000VST2LNd32Pseudo\000VST2LNd32Pseudo_UPD\000VST2LNd32_UPD\000V"
    "ST2LNd8\000VST2LNd8Pseudo\000VST2LNd8Pseudo_UPD\000VST2LNd8_UPD\000VST2"
    "LNq16\000VST2LNq16Pseudo\000VST2LNq16Pseudo_UPD\000VST2LNq16_UPD\000VST"
    "2LNq32\000VST2LNq32Pseudo\000VST2LNq32Pseudo_UPD\000VST2LNq32_UPD\000VS"
    "T2b16\000VST2b16_UPD\000VST2b32\000VST2b32_UPD\000VST2b8\000VST2b8_UPD\000"
    "VST2d16\000VST2d16Pseudo\000VST2d16Pseudo_UPD\000VST2d16_UPD\000VST2d32"
    "\000VST2d32Pseudo\000VST2d32Pseudo_UPD\000VST2d32_UPD\000VST2d8\000VST2"
    "d8Pseudo\000VST2d8Pseudo_UPD\000VST2d8_UPD\000VST2q16\000VST2q16Pseudo\000"
    "VST2q16Pseudo_UPD\000VST2q16_UPD\000VST2q32\000VST2q32Pseudo\000VST2q32"
    "Pseudo_UPD\000VST2q32_UPD\000VST2q8\000VST2q8Pseudo\000VST2q8Pseudo_UPD"
    "\000VST2q8_UPD\000VST3LNd16\000VST3LNd16Pseudo\000VST3LNd16Pseudo_UPD\000"
    "VST3LNd16_UPD\000VST3LNd32\000VST3LNd32Pseudo\000VST3LNd32Pseudo_UPD\000"
    "VST3LNd32_UPD\000VST3LNd8\000VST3LNd8Pseudo\000VST3LNd8Pseudo_UPD\000VS"
    "T3LNd8_UPD\000VST3LNq16\000VST3LNq16Pseudo\000VST3LNq16Pseudo_UPD\000VS"
    "T3LNq16_UPD\000VST3LNq32\000VST3LNq32Pseudo\000VST3LNq32Pseudo_UPD\000V"
    "ST3LNq32_UPD\000VST3d16\000VST3d16Pseudo\000VST3d16Pseudo_UPD\000VST3d1"
    "6_UPD\000VST3d32\000VST3d32Pseudo\000VST3d32Pseudo_UPD\000VST3d32_UPD\000"
    "VST3d8\000VST3d8Pseudo\000VST3d8Pseudo_UPD\000VST3d8_UPD\000VST3q16\000"
    "VST3q16Pseudo_UPD\000VST3q16_UPD\000VST3q16oddPseudo\000VST3q16oddPseud"
    "o_UPD\000VST3q32\000VST3q32Pseudo_UPD\000VST3q32_UPD\000VST3q32oddPseud"
    "o\000VST3q32oddPseudo_UPD\000VST3q8\000VST3q8Pseudo_UPD\000VST3q8_UPD\000"
    "VST3q8oddPseudo\000VST3q8oddPseudo_UPD\000VST4LNd16\000VST4LNd16Pseudo\000"
    "VST4LNd16Pseudo_UPD\000VST4LNd16_UPD\000VST4LNd32\000VST4LNd32Pseudo\000"
    "VST4LNd32Pseudo_UPD\000VST4LNd32_UPD\000VST4LNd8\000VST4LNd8Pseudo\000V"
    "ST4LNd8Pseudo_UPD\000VST4LNd8_UPD\000VST4LNq16\000VST4LNq16Pseudo\000VS"
    "T4LNq16Pseudo_UPD\000VST4LNq16_UPD\000VST4LNq32\000VST4LNq32Pseudo\000V"
    "ST4LNq32Pseudo_UPD\000VST4LNq32_UPD\000VST4d16\000VST4d16Pseudo\000VST4"
    "d16Pseudo_UPD\000VST4d16_UPD\000VST4d32\000VST4d32Pseudo\000VST4d32Pseu"
    "do_UPD\000VST4d32_UPD\000VST4d8\000VST4d8Pseudo\000VST4d8Pseudo_UPD\000"
    "VST4d8_UPD\000VST4q16\000VST4q16Pseudo_UPD\000VST4q16_UPD\000VST4q16odd"
    "Pseudo\000VST4q16oddPseudo_UPD\000VST4q32\000VST4q32Pseudo_UPD\000VST4q"
    "32_UPD\000VST4q32oddPseudo\000VST4q32oddPseudo_UPD\000VST4q8\000VST4q8P"
    "seudo_UPD\000VST4q8_UPD\000VST4q8oddPseudo\000VST4q8oddPseudo_UPD\000VS"
    "TMDDB\000VSTMDDB_UPD\000VSTMDIA\000VSTMDIA_UPD\000VSTMQDB\000VSTMQIA\000"
    "VSTMSDB\000VSTMSDB_UPD\000VSTMSIA\000VSTMSIA_UPD\000VSTRD\000VSTRS\000V"
    "SUBD\000VSUBHNv2i32\000VSUBHNv4i16\000VSUBHNv8i8\000VSUBLsv2i64\000VSUB"
    "Lsv4i32\000VSUBLsv8i16\000VSUBLuv2i64\000VSUBLuv4i32\000VSUBLuv8i16\000"
    "VSUBS\000VSUBWsv2i64\000VSUBWsv4i32\000VSUBWsv8i16\000VSUBWuv2i64\000VS"
    "UBWuv4i32\000VSUBWuv8i16\000VSUBfd\000VSUBfq\000VSUBv16i8\000VSUBv1i64\000"
    "VSUBv2i32\000VSUBv2i64\000VSUBv4i16\000VSUBv4i32\000VSUBv8i16\000VSUBv8"
    "i8\000VSWPd\000VSWPq\000VTBL1\000VTBL2\000VTBL2Pseudo\000VTBL3\000VTBL3"
    "Pseudo\000VTBL4\000VTBL4Pseudo\000VTBX1\000VTBX2\000VTBX2Pseudo\000VTBX"
    "3\000VTBX3Pseudo\000VTBX4\000VTBX4Pseudo\000VTOSHD\000VTOSHS\000VTOSIRD"
    "\000VTOSIRS\000VTOSIZD\000VTOSIZS\000VTOSLD\000VTOSLS\000VTOUHD\000VTOU"
    "HS\000VTOUIRD\000VTOUIRS\000VTOUIZD\000VTOUIZS\000VTOULD\000VTOULS\000V"
    "TRNd16\000VTRNd32\000VTRNd8\000VTRNq16\000VTRNq32\000VTRNq8\000VTSTv16i"
    "8\000VTSTv2i32\000VTSTv4i16\000VTSTv4i32\000VTSTv8i16\000VTSTv8i8\000VU"
    "HTOD\000VUHTOS\000VUITOD\000VUITOS\000VULTOD\000VULTOS\000VUZPd16\000VU"
    "ZPd32\000VUZPd8\000VUZPq16\000VUZPq32\000VUZPq8\000VZIPd16\000VZIPd32\000"
    "VZIPd8\000VZIPq16\000VZIPq32\000VZIPq8\000WFE\000WFI\000YIELD\000t2ADCS"
    "ri\000t2ADCSrr\000t2ADCSrs\000t2ADCri\000t2ADCrr\000t2ADCrs\000t2ADDSri"
    "\000t2ADDSrr\000t2ADDSrs\000t2ADDrSPi\000t2ADDrSPi12\000t2ADDrSPs\000t2"
    "ADDri\000t2ADDri12\000t2ADDrr\000t2ADDrs\000t2ADR\000t2ANDri\000t2ANDrr"
    "\000t2ANDrs\000t2ASRri\000t2ASRrr\000t2B\000t2BFC\000t2BFI\000t2BFI4p\000"
    "t2BICri\000t2BICrr\000t2BICrs\000t2BR_JT\000t2BXJ\000t2Bcc\000t2CDP2\000"
    "t2CLREX\000t2CLZ\000t2CMNzri\000t2CMNzrr\000t2CMNzrs\000t2CMPri\000t2CM"
    "Prr\000t2CMPrs\000t2CPS1p\000t2CPS2p\000t2CPS3p\000t2DBG\000t2DMB\000t2"
    "DSB\000t2EORri\000t2EORrr\000t2EORrs\000t2ISB\000t2IT\000t2Int_eh_sjlj_"
    "setjmp\000t2Int_eh_sjlj_setjmp_nofp\000t2LDMDB\000t2LDMDB_UPD\000t2LDMI"
    "A\000t2LDMIA_RET\000t2LDMIA_UPD\000t2LDRBT\000t2LDRB_POST\000t2LDRB_PRE"
    "\000t2LDRBi12\000t2LDRBi8\000t2LDRBpci\000t2LDRBs\000t2LDRD_POST\000t2L"
    "DRD_PRE\000t2LDRDi8\000t2LDREX\000t2LDREXB\000t2LDREXD\000t2LDREXH\000t"
    "2LDRHT\000t2LDRH_POST\000t2LDRH_PRE\000t2LDRHi12\000t2LDRHi8\000t2LDRHp"
    "ci\000t2LDRHs\000t2LDRSBT\000t2LDRSB_POST\000t2LDRSB_PRE\000t2LDRSBi12\000"
    "t2LDRSBi8\000t2LDRSBpci\000t2LDRSBs\000t2LDRSHT\000t2LDRSH_POST\000t2LD"
    "RSH_PRE\000t2LDRSHi12\000t2LDRSHi8\000t2LDRSHpci\000t2LDRSHs\000t2LDRT\000"
    "t2LDR_POST\000t2LDR_PRE\000t2LDRi12\000t2LDRi8\000t2LDRpci\000t2LDRpci_"
    "pic\000t2LDRs\000t2LEApcrel\000t2LEApcrelJT\000t2LSLri\000t2LSLrr\000t2"
    "LSRri\000t2LSRrr\000t2MCR2\000t2MCRR2\000t2MLA\000t2MLS\000t2MOVCCasr\000"
    "t2MOVCCi\000t2MOVCCi16\000t2MOVCCi32imm\000t2MOVCClsl\000t2MOVCClsr\000"
    "t2MOVCCr\000t2MOVCCror\000t2MOVTi16\000t2MOVTi16_ga_pcrel\000t2MOV_ga_d"
    "yn\000t2MOV_ga_pcrel\000t2MOVi\000t2MOVi16\000t2MOVi16_ga_pcrel\000t2MO"
    "Vi32imm\000t2MOVr\000t2MOVsra_flag\000t2MOVsrl_flag\000t2MRC2\000t2MRRC"
    "2\000t2MRS\000t2MRSsys\000t2MSR\000t2MUL\000t2MVNCCi\000t2MVNi\000t2MVN"
    "r\000t2MVNs\000t2NOP\000t2ORNri\000t2ORNrr\000t2ORNrs\000t2ORRri\000t2O"
    "RRrr\000t2ORRrs\000t2PKHBT\000t2PKHTB\000t2PLDWi12\000t2PLDWi8\000t2PLD"
    "Ws\000t2PLDi12\000t2PLDi8\000t2PLDs\000t2PLIi12\000t2PLIi8\000t2PLIs\000"
    "t2QADD\000t2QADD16\000t2QADD8\000t2QASX\000t2QDADD\000t2QDSUB\000t2QSAX"
    "\000t2QSUB\000t2QSUB16\000t2QSUB8\000t2RBIT\000t2REV\000t2REV16\000t2RE"
    "VSH\000t2RFEDB\000t2RFEDBW\000t2RFEIA\000t2RFEIAW\000t2RORri\000t2RORrr"
    "\000t2RRX\000t2RSBSri\000t2RSBSrs\000t2RSBri\000t2RSBrr\000t2RSBrs\000t"
    "2SADD16\000t2SADD8\000t2SASX\000t2SBCSri\000t2SBCSrr\000t2SBCSrs\000t2S"
    "BCri\000t2SBCrr\000t2SBCrs\000t2SBFX\000t2SDIV\000t2SEL\000t2SEV\000t2S"
    "HADD16\000t2SHADD8\000t2SHASX\000t2SHSAX\000t2SHSUB16\000t2SHSUB8\000t2"
    "SMC\000t2SMLABB\000t2SMLABT\000t2SMLAD\000t2SMLADX\000t2SMLAL\000t2SMLA"
    "LBB\000t2SMLALBT\000t2SMLALD\000t2SMLALDX\000t2SMLALTB\000t2SMLALTT\000"
    "t2SMLATB\000t2SMLATT\000t2SMLAWB\000t2SMLAWT\000t2SMLSD\000t2SMLSDX\000"
    "t2SMLSLD\000t2SMLSLDX\000t2SMMLA\000t2SMMLAR\000t2SMMLS\000t2SMMLSR\000"
    "t2SMMUL\000t2SMMULR\000t2SMUAD\000t2SMUADX\000t2SMULBB\000t2SMULBT\000t"
    "2SMULL\000t2SMULTB\000t2SMULTT\000t2SMULWB\000t2SMULWT\000t2SMUSD\000t2"
    "SMUSDX\000t2SRSDB\000t2SRSDBW\000t2SRSIA\000t2SRSIAW\000t2SSAT\000t2SSA"
    "T16\000t2SSAX\000t2SSUB16\000t2SSUB8\000t2STMDB\000t2STMDB_UPD\000t2STM"
    "IA\000t2STMIA_UPD\000t2STRBT\000t2STRB_POST\000t2STRB_PRE\000t2STRBi12\000"
    "t2STRBi8\000t2STRBs\000t2STRD_POST\000t2STRD_PRE\000t2STRDi8\000t2STREX"
    "\000t2STREXB\000t2STREXD\000t2STREXH\000t2STRHT\000t2STRH_POST\000t2STR"
    "H_PRE\000t2STRHi12\000t2STRHi8\000t2STRHs\000t2STRT\000t2STR_POST\000t2"
    "STR_PRE\000t2STRi12\000t2STRi8\000t2STRs\000t2SUBSri\000t2SUBSrr\000t2S"
    "UBSrs\000t2SUBrSPi\000t2SUBrSPi12\000t2SUBrSPs\000t2SUBri\000t2SUBri12\000"
    "t2SUBrr\000t2SUBrs\000t2SXTAB16rr\000t2SXTAB16rr_rot\000t2SXTABrr\000t2"
    "SXTABrr_rot\000t2SXTAHrr\000t2SXTAHrr_rot\000t2SXTB16r\000t2SXTB16r_rot"
    "\000t2SXTBr\000t2SXTBr_rot\000t2SXTHr\000t2SXTHr_rot\000t2TBB\000t2TBB_"
    "JT\000t2TBH\000t2TBH_JT\000t2TEQri\000t2TEQrr\000t2TEQrs\000t2TPsoft\000"
    "t2TSTri\000t2TSTrr\000t2TSTrs\000t2UADD16\000t2UADD8\000t2UASX\000t2UBF"
    "X\000t2UDIV\000t2UHADD16\000t2UHADD8\000t2UHASX\000t2UHSAX\000t2UHSUB16"
    "\000t2UHSUB8\000t2UMAAL\000t2UMLAL\000t2UMULL\000t2UQADD16\000t2UQADD8\000"
    "t2UQASX\000t2UQSAX\000t2UQSUB16\000t2UQSUB8\000t2USAD8\000t2USADA8\000t"
    "2USAT\000t2USAT16\000t2USAX\000t2USUB16\000t2USUB8\000t2UXTAB16rr\000t2"
    "UXTAB16rr_rot\000t2UXTABrr\000t2UXTABrr_rot\000t2UXTAHrr\000t2UXTAHrr_r"
    "ot\000t2UXTB16r\000t2UXTB16r_rot\000t2UXTBr\000t2UXTBr_rot\000t2UXTHr\000"
    "t2UXTHr_rot\000t2WFE\000t2WFI\000t2YIELD\000tADC\000tADDhirr\000tADDi3\000"
    "tADDi8\000tADDrPCi\000tADDrSP\000tADDrSPi\000tADDrr\000tADDspi\000tADDs"
    "pr\000tADJCALLSTACKDOWN\000tADJCALLSTACKUP\000tADR\000tAND\000tASRri\000"
    "tASRrr\000tB\000tBIC\000tBKPT\000tBL\000tBLXi\000tBLXi_r9\000tBLXr\000t"
    "BLXr_r9\000tBLr9\000tBRIND\000tBR_JTr\000tBX\000tBX_RET\000tBX_RET_vara"
    "rg\000tBXr9\000tBcc\000tBfar\000tCBNZ\000tCBZ\000tCDP\000tCMNz\000tCMPh"
    "ir\000tCMPi8\000tCMPr\000tCPS\000tEOR\000tInt_eh_sjlj_longjmp\000tInt_e"
    "h_sjlj_setjmp\000tLDMIA\000tLDMIA_UPD\000tLDRBi\000tLDRBr\000tLDRHi\000"
    "tLDRHr\000tLDRSB\000tLDRSH\000tLDRi\000tLDRpci\000tLDRpci_pic\000tLDRr\000"
    "tLDRspi\000tLEApcrel\000tLEApcrelJT\000tLSLri\000tLSLrr\000tLSRri\000tL"
    "SRrr\000tMCR\000tMCRR\000tMOVCCi\000tMOVCCr\000tMOVCCr_pseudo\000tMOVSr"
    "\000tMOVgpr2gpr\000tMOVgpr2tgpr\000tMOVi8\000tMOVr\000tMOVtgpr2gpr\000t"
    "MRC\000tMRRC\000tMUL\000tMVN\000tNOP\000tORR\000tPICADD\000tPOP\000tPOP"
    "_RET\000tPUSH\000tREV\000tREV16\000tREVSH\000tROR\000tRSB\000tRestore\000"
    "tSBC\000tSETENDBE\000tSETENDLE\000tSEV\000tSTMIA\000tSTMIA_UPD\000tSTRB"
    "i\000tSTRBr\000tSTRHi\000tSTRHr\000tSTRi\000tSTRr\000tSTRspi\000tSUBi3\000"
    "tSUBi8\000tSUBrr\000tSUBspi\000tSVC\000tSXTB\000tSXTH\000tSpill\000tTPs"
    "oft\000tTRAP\000tTST\000tUXTB\000tUXTH\000tWFE\000tWFI\000tYIELD\000";
  return Strs+InstAsmOffset[Opcode];
}

#endif

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

namespace { // Register classes
  enum RegClass {
    RC_CCR,
    RC_DPR,
    RC_DPR_8,
    RC_DPR_VFP2,
    RC_GPR,
    RC_QPR,
    RC_QPR_8,
    RC_QPR_VFP2,
    RC_QQPR,
    RC_QQPR_VFP2,
    RC_QQQQPR,
    RC_SPR,
    RC_SPR_8,
    RC_rGPR,
    RC_tGPR,
    RC_tcGPR
  };
} // end anonymous namespace

static bool regIsInRegisterClass(unsigned RegClass, unsigned Reg) {
  switch (RegClass) {
  default: break;
  case RC_CCR:
    if (Reg == ARM::CPSR)
      return true;
    break;
  case RC_DPR:
    switch (Reg) {
    default: break;
    case ARM::D0:
    case ARM::D1:
    case ARM::D2:
    case ARM::D3:
    case ARM::D4:
    case ARM::D5:
    case ARM::D6:
    case ARM::D7:
    case ARM::D8:
    case ARM::D9:
    case ARM::D10:
    case ARM::D11:
    case ARM::D12:
    case ARM::D13:
    case ARM::D14:
    case ARM::D15:
    case ARM::D16:
    case ARM::D17:
    case ARM::D18:
    case ARM::D19:
    case ARM::D20:
    case ARM::D21:
    case ARM::D22:
    case ARM::D23:
    case ARM::D24:
    case ARM::D25:
    case ARM::D26:
    case ARM::D27:
    case ARM::D28:
    case ARM::D29:
    case ARM::D30:
    case ARM::D31:
      return true;
    }
    break;
  case RC_DPR_8:
    switch (Reg) {
    default: break;
    case ARM::D0:
    case ARM::D1:
    case ARM::D2:
    case ARM::D3:
    case ARM::D4:
    case ARM::D5:
    case ARM::D6:
    case ARM::D7:
      return true;
    }
    break;
  case RC_DPR_VFP2:
    switch (Reg) {
    default: break;
    case ARM::D0:
    case ARM::D1:
    case ARM::D2:
    case ARM::D3:
    case ARM::D4:
    case ARM::D5:
    case ARM::D6:
    case ARM::D7:
    case ARM::D8:
    case ARM::D9:
    case ARM::D10:
    case ARM::D11:
    case ARM::D12:
    case ARM::D13:
    case ARM::D14:
    case ARM::D15:
      return true;
    }
    break;
  case RC_GPR:
    switch (Reg) {
    default: break;
    case ARM::R0:
    case ARM::R1:
    case ARM::R2:
    case ARM::R3:
    case ARM::R4:
    case ARM::R5:
    case ARM::R6:
    case ARM::R7:
    case ARM::R8:
    case ARM::R9:
    case ARM::R10:
    case ARM::R11:
    case ARM::R12:
    case ARM::SP:
    case ARM::LR:
    case ARM::PC:
      return true;
    }
    break;
  case RC_QPR:
    switch (Reg) {
    default: break;
    case ARM::Q0:
    case ARM::Q1:
    case ARM::Q2:
    case ARM::Q3:
    case ARM::Q4:
    case ARM::Q5:
    case ARM::Q6:
    case ARM::Q7:
    case ARM::Q8:
    case ARM::Q9:
    case ARM::Q10:
    case ARM::Q11:
    case ARM::Q12:
    case ARM::Q13:
    case ARM::Q14:
    case ARM::Q15:
      return true;
    }
    break;
  case RC_QPR_8:
    switch (Reg) {
    default: break;
    case ARM::Q0:
    case ARM::Q1:
    case ARM::Q2:
    case ARM::Q3:
      return true;
    }
    break;
  case RC_QPR_VFP2:
    switch (Reg) {
    default: break;
    case ARM::Q0:
    case ARM::Q1:
    case ARM::Q2:
    case ARM::Q3:
    case ARM::Q4:
    case ARM::Q5:
    case ARM::Q6:
    case ARM::Q7:
      return true;
    }
    break;
  case RC_QQPR:
    switch (Reg) {
    default: break;
    case ARM::QQ0:
    case ARM::QQ1:
    case ARM::QQ2:
    case ARM::QQ3:
    case ARM::QQ4:
    case ARM::QQ5:
    case ARM::QQ6:
    case ARM::QQ7:
      return true;
    }
    break;
  case RC_QQPR_VFP2:
    switch (Reg) {
    default: break;
    case ARM::QQ0:
    case ARM::QQ1:
    case ARM::QQ2:
    case ARM::QQ3:
      return true;
    }
    break;
  case RC_QQQQPR:
    switch (Reg) {
    default: break;
    case ARM::QQQQ0:
    case ARM::QQQQ1:
    case ARM::QQQQ2:
    case ARM::QQQQ3:
      return true;
    }
    break;
  case RC_SPR:
    switch (Reg) {
    default: break;
    case ARM::S0:
    case ARM::S1:
    case ARM::S2:
    case ARM::S3:
    case ARM::S4:
    case ARM::S5:
    case ARM::S6:
    case ARM::S7:
    case ARM::S8:
    case ARM::S9:
    case ARM::S10:
    case ARM::S11:
    case ARM::S12:
    case ARM::S13:
    case ARM::S14:
    case ARM::S15:
    case ARM::S16:
    case ARM::S17:
    case ARM::S18:
    case ARM::S19:
    case ARM::S20:
    case ARM::S21:
    case ARM::S22:
    case ARM::S23:
    case ARM::S24:
    case ARM::S25:
    case ARM::S26:
    case ARM::S27:
    case ARM::S28:
    case ARM::S29:
    case ARM::S30:
    case ARM::S31:
      return true;
    }
    break;
  case RC_SPR_8:
    switch (Reg) {
    default: break;
    case ARM::S0:
    case ARM::S1:
    case ARM::S2:
    case ARM::S3:
    case ARM::S4:
    case ARM::S5:
    case ARM::S6:
    case ARM::S7:
    case ARM::S8:
    case ARM::S9:
    case ARM::S10:
    case ARM::S11:
    case ARM::S12:
    case ARM::S13:
    case ARM::S14:
    case ARM::S15:
      return true;
    }
    break;
  case RC_rGPR:
    switch (Reg) {
    default: break;
    case ARM::R0:
    case ARM::R1:
    case ARM::R2:
    case ARM::R3:
    case ARM::R4:
    case ARM::R5:
    case ARM::R6:
    case ARM::R7:
    case ARM::R8:
    case ARM::R9:
    case ARM::R10:
    case ARM::R11:
    case ARM::R12:
    case ARM::LR:
      return true;
    }
    break;
  case RC_tGPR:
    switch (Reg) {
    default: break;
    case ARM::R0:
    case ARM::R1:
    case ARM::R2:
    case ARM::R3:
    case ARM::R4:
    case ARM::R5:
    case ARM::R6:
    case ARM::R7:
      return true;
    }
    break;
  case RC_tcGPR:
    switch (Reg) {
    default: break;
    case ARM::R0:
    case ARM::R1:
    case ARM::R2:
    case ARM::R3:
    case ARM::R9:
    case ARM::R12:
      return true;
    }
    break;
  }

  return false;
}

bool ARMInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  return true;
}

#endif // PRINT_ALIAS_INSTR
